
SolarProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d04  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08007ea0  08007ea0  00017ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008390  08008390  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008398  08008398  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080083a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08008418  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08008418  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001082e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000266c  00000000  00000000  000308ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00032f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00033dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004f12  00000000  00000000  00034b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afd4  00000000  00000000  00039aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ee17  00000000  00000000  00044a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3895  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  000d3910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007e84 	.word	0x08007e84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08007e84 	.word	0x08007e84

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b972 	b.w	8000e8c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4688      	mov	r8, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14b      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	d967      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0720 	rsb	r7, r2, #32
 8000bde:	fa01 f302 	lsl.w	r3, r1, r2
 8000be2:	fa20 f707 	lsr.w	r7, r0, r7
 8000be6:	4095      	lsls	r5, r2
 8000be8:	ea47 0803 	orr.w	r8, r7, r3
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf8:	fa1f fc85 	uxth.w	ip, r5
 8000bfc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	fb07 f10c 	mul.w	r1, r7, ip
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18eb      	adds	r3, r5, r3
 8000c0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c12:	f080 811b 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8118 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c1c:	3f02      	subs	r7, #2
 8000c1e:	442b      	add	r3, r5
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	442c      	add	r4, r5
 8000c4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c50:	eba4 040c 	sub.w	r4, r4, ip
 8000c54:	2700      	movs	r7, #0
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xbe>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80eb 	beq.w	8000e46 <__udivmoddi4+0x286>
 8000c70:	2700      	movs	r7, #0
 8000c72:	e9c6 0100 	strd	r0, r1, [r6]
 8000c76:	4638      	mov	r0, r7
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f783 	clz	r7, r3
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d147      	bne.n	8000d16 <__udivmoddi4+0x156>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd0>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80fa 	bhi.w	8000e84 <__udivmoddi4+0x2c4>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000c9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xe8>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 808f 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb2:	1b49      	subs	r1, r1, r5
 8000cb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb8:	fa1f f885 	uxth.w	r8, r5
 8000cbc:	2701      	movs	r7, #1
 8000cbe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cc2:	0c23      	lsrs	r3, r4, #16
 8000cc4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1a59      	subs	r1, r3, r1
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x14c>
 8000cfc:	192c      	adds	r4, r5, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x14a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80b6 	bhi.w	8000e76 <__udivmoddi4+0x2b6>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e79f      	b.n	8000c56 <__udivmoddi4+0x96>
 8000d16:	f1c7 0c20 	rsb	ip, r7, #32
 8000d1a:	40bb      	lsls	r3, r7
 8000d1c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d20:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d24:	fa01 f407 	lsl.w	r4, r1, r7
 8000d28:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d2c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d30:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d34:	4325      	orrs	r5, r4
 8000d36:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d3a:	0c2c      	lsrs	r4, r5, #16
 8000d3c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d40:	fa1f fa8e 	uxth.w	sl, lr
 8000d44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d48:	fb09 f40a 	mul.w	r4, r9, sl
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d52:	fa00 f107 	lsl.w	r1, r0, r7
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1e 0303 	adds.w	r3, lr, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	f080 8087 	bcs.w	8000e72 <__udivmoddi4+0x2b2>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f240 8084 	bls.w	8000e72 <__udivmoddi4+0x2b2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4473      	add	r3, lr
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	b2ad      	uxth	r5, r5
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3310 	mls	r3, r8, r0, r3
 8000d7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d80:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d84:	45a2      	cmp	sl, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1e 0404 	adds.w	r4, lr, r4
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d90:	d26b      	bcs.n	8000e6a <__udivmoddi4+0x2aa>
 8000d92:	45a2      	cmp	sl, r4
 8000d94:	d969      	bls.n	8000e6a <__udivmoddi4+0x2aa>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4474      	add	r4, lr
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	eba4 040a 	sub.w	r4, r4, sl
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c2      	mov	sl, r8
 8000daa:	464b      	mov	r3, r9
 8000dac:	d354      	bcc.n	8000e58 <__udivmoddi4+0x298>
 8000dae:	d051      	beq.n	8000e54 <__udivmoddi4+0x294>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2c8>
 8000db4:	ebb1 050a 	subs.w	r5, r1, sl
 8000db8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dbc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc0:	40fd      	lsrs	r5, r7
 8000dc2:	40fc      	lsrs	r4, r7
 8000dc4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	fa21 f303 	lsr.w	r3, r1, r3
 8000de2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de6:	4338      	orrs	r0, r7
 8000de8:	0c01      	lsrs	r1, r0, #16
 8000dea:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dee:	fa1f f885 	uxth.w	r8, r5
 8000df2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb07 f308 	mul.w	r3, r7, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x256>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e0c:	d22f      	bcs.n	8000e6e <__udivmoddi4+0x2ae>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d92d      	bls.n	8000e6e <__udivmoddi4+0x2ae>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	b281      	uxth	r1, r0
 8000e1a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb00 f308 	mul.w	r3, r0, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x27e>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e34:	d217      	bcs.n	8000e66 <__udivmoddi4+0x2a6>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d915      	bls.n	8000e66 <__udivmoddi4+0x2a6>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1ac9      	subs	r1, r1, r3
 8000e40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e44:	e73b      	b.n	8000cbe <__udivmoddi4+0xfe>
 8000e46:	4637      	mov	r7, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e709      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e4c:	4607      	mov	r7, r0
 8000e4e:	e6e7      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e54:	4541      	cmp	r1, r8
 8000e56:	d2ab      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e58:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e5c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e60:	3801      	subs	r0, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	e7a4      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e66:	4660      	mov	r0, ip
 8000e68:	e7e9      	b.n	8000e3e <__udivmoddi4+0x27e>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e795      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e6e:	4667      	mov	r7, ip
 8000e70:	e7d1      	b.n	8000e16 <__udivmoddi4+0x256>
 8000e72:	4681      	mov	r9, r0
 8000e74:	e77c      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e76:	3802      	subs	r0, #2
 8000e78:	442c      	add	r4, r5
 8000e7a:	e747      	b.n	8000d0c <__udivmoddi4+0x14c>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	442b      	add	r3, r5
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e84:	4638      	mov	r0, r7
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xda>
 8000e88:	4637      	mov	r7, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa0>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <_ZL9date2daysthh>:
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	717b      	strb	r3, [r7, #5]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	713b      	strb	r3, [r7, #4]
    if (y >= 2000)
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ea8:	d303      	bcc.n	8000eb2 <_ZL9date2daysthh+0x22>
        y -= 2000;
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000eb0:	80fb      	strh	r3, [r7, #6]
    uint16_t days = d;
 8000eb2:	793b      	ldrb	r3, [r7, #4]
 8000eb4:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 1; i < m; ++i)
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	737b      	strb	r3, [r7, #13]
 8000eba:	7b7a      	ldrb	r2, [r7, #13]
 8000ebc:	797b      	ldrb	r3, [r7, #5]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d20b      	bcs.n	8000eda <_ZL9date2daysthh+0x4a>
        days += (daysInMonth[i - 1]);
 8000ec2:	7b7b      	ldrb	r3, [r7, #13]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <_ZL9date2daysthh+0xa0>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	4413      	add	r3, r2
 8000ed0:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 1; i < m; ++i)
 8000ed2:	7b7b      	ldrb	r3, [r7, #13]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	737b      	strb	r3, [r7, #13]
 8000ed8:	e7ef      	b.n	8000eba <_ZL9date2daysthh+0x2a>
    if (m > 2 && y % 4 == 0)
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d907      	bls.n	8000ef0 <_ZL9date2daysthh+0x60>
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <_ZL9date2daysthh+0x60>
        ++days;
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	3301      	adds	r3, #1
 8000eee:	81fb      	strh	r3, [r7, #14]
    return days + 365 * y + (y + 3) / 4 - 1;
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	441a      	add	r2, r3
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	4413      	add	r3, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	0091      	lsls	r1, r2, #2
 8000f00:	461a      	mov	r2, r3
 8000f02:	460b      	mov	r3, r1
 8000f04:	4413      	add	r3, r2
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	3303      	adds	r3, #3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da00      	bge.n	8000f18 <_ZL9date2daysthh+0x88>
 8000f16:	3303      	adds	r3, #3
 8000f18:	109b      	asrs	r3, r3, #2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b29b      	uxth	r3, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	08007ea0 	.word	0x08007ea0

08000f34 <_ZL9time2longthhh>:

static long time2long(uint16_t days, uint8_t h, uint8_t m, uint8_t s) {
 8000f34:	b490      	push	{r4, r7}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	80fb      	strh	r3, [r7, #6]
 8000f46:	4603      	mov	r3, r0
 8000f48:	717b      	strb	r3, [r7, #5]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	713b      	strb	r3, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	70fb      	strb	r3, [r7, #3]
    return ((days * 24L + h) * 60 + m) * 60 + s;
 8000f52:	88fa      	ldrh	r2, [r7, #6]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	797b      	ldrb	r3, [r7, #5]
 8000f60:	441a      	add	r2, r3
 8000f62:	4613      	mov	r3, r2
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	793b      	ldrb	r3, [r7, #4]
 8000f6e:	441a      	add	r2, r3
 8000f70:	4613      	mov	r3, r2
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	1a9b      	subs	r3, r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	4413      	add	r3, r2
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc90      	pop	{r4, r7}
 8000f86:	4770      	bx	lr

08000f88 <_ZN8DateTimeC1Em>:

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <_ZN8DateTimeC1Em+0x130>)
 8000f96:	4413      	add	r3, r2
 8000f98:	603b      	str	r3, [r7, #0]

    ss = t % 60;
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <_ZN8DateTimeC1Em+0x134>)
 8000f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa2:	095a      	lsrs	r2, r3, #5
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	1aca      	subs	r2, r1, r3
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	715a      	strb	r2, [r3, #5]
    t /= 60;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4a41      	ldr	r2, [pc, #260]	; (80010bc <_ZN8DateTimeC1Em+0x134>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	095b      	lsrs	r3, r3, #5
 8000fbe:	603b      	str	r3, [r7, #0]
    mm = t % 60;
 8000fc0:	6839      	ldr	r1, [r7, #0]
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <_ZN8DateTimeC1Em+0x134>)
 8000fc4:	fba3 2301 	umull	r2, r3, r3, r1
 8000fc8:	095a      	lsrs	r2, r3, #5
 8000fca:	4613      	mov	r3, r2
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	1aca      	subs	r2, r1, r3
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	711a      	strb	r2, [r3, #4]
    t /= 60;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <_ZN8DateTimeC1Em+0x134>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	603b      	str	r3, [r7, #0]
    hh = t % 24;
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <_ZN8DateTimeC1Em+0x138>)
 8000fea:	fba3 2301 	umull	r2, r3, r3, r1
 8000fee:	091a      	lsrs	r2, r3, #4
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1aca      	subs	r2, r1, r3
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	70da      	strb	r2, [r3, #3]
    uint16_t days = t / 24;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <_ZN8DateTimeC1Em+0x138>)
 8001004:	fba2 2303 	umull	r2, r3, r2, r3
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	81fb      	strh	r3, [r7, #14]
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
        leap = yOff % 4 == 0;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	733b      	strb	r3, [r7, #12]
        if (days < 365 + leap)
 8001026:	89fa      	ldrh	r2, [r7, #14]
 8001028:	7b3b      	ldrb	r3, [r7, #12]
 800102a:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800102e:	429a      	cmp	r2, r3
 8001030:	db0e      	blt.n	8001050 <_ZN8DateTimeC1Em+0xc8>
            break;
        days -= 365 + leap;
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	b29b      	uxth	r3, r3
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8001040:	81fb      	strh	r3, [r7, #14]
    for (yOff = 0; ; ++yOff) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	701a      	strb	r2, [r3, #0]
        leap = yOff % 4 == 0;
 800104e:	e7e0      	b.n	8001012 <_ZN8DateTimeC1Em+0x8a>
            break;
 8001050:	bf00      	nop
    }
    for (m = 1; ; ++m) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	705a      	strb	r2, [r3, #1]
        uint8_t daysPerMonth = (daysInMonth[m - 1]);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	3b01      	subs	r3, #1
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <_ZN8DateTimeC1Em+0x13c>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	737b      	strb	r3, [r7, #13]
        if (leap && m == 2)
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <_ZN8DateTimeC1Em+0xf0>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d102      	bne.n	8001078 <_ZN8DateTimeC1Em+0xf0>
            ++daysPerMonth;
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	3301      	adds	r3, #1
 8001076:	737b      	strb	r3, [r7, #13]
        if (days < daysPerMonth)
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	b29b      	uxth	r3, r3
 800107c:	89fa      	ldrh	r2, [r7, #14]
 800107e:	429a      	cmp	r2, r3
 8001080:	d30b      	bcc.n	800109a <_ZN8DateTimeC1Em+0x112>
            break;
        days -= daysPerMonth;
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	b29b      	uxth	r3, r3
 8001086:	89fa      	ldrh	r2, [r7, #14]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	81fb      	strh	r3, [r7, #14]
    for (m = 1; ; ++m) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	3301      	adds	r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	705a      	strb	r2, [r3, #1]
    }
 8001098:	e7de      	b.n	8001058 <_ZN8DateTimeC1Em+0xd0>
            break;
 800109a:	bf00      	nop
    d = days + 1;
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	709a      	strb	r2, [r3, #2]
}
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	c792bc80 	.word	0xc792bc80
 80010bc:	88888889 	.word	0x88888889
 80010c0:	aaaaaaab 	.word	0xaaaaaaab
 80010c4:	08007ea0 	.word	0x08007ea0

080010c8 <_ZN8DateTimeC1Ethhhhh>:

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	807b      	strh	r3, [r7, #2]
 80010da:	460b      	mov	r3, r1
 80010dc:	707b      	strb	r3, [r7, #1]
 80010de:	4613      	mov	r3, r2
 80010e0:	703b      	strb	r3, [r7, #0]
    if (year >= 2000)
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010e8:	d303      	bcc.n	80010f2 <_ZN8DateTimeC1Ethhhhh+0x2a>
        year -= 2000;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80010f0:	807b      	strh	r3, [r7, #2]
    yOff = year;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	701a      	strb	r2, [r3, #0]
    m = month;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	787a      	ldrb	r2, [r7, #1]
 80010fe:	705a      	strb	r2, [r3, #1]
    d = day;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	783a      	ldrb	r2, [r7, #0]
 8001104:	709a      	strb	r2, [r3, #2]
    hh = hour;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7c3a      	ldrb	r2, [r7, #16]
 800110a:	70da      	strb	r2, [r3, #3]
    mm = min;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7d3a      	ldrb	r2, [r7, #20]
 8001110:	711a      	strb	r2, [r3, #4]
    ss = sec;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7e3a      	ldrb	r2, [r7, #24]
 8001116:	715a      	strb	r2, [r3, #5]
}
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_ZNK8DateTime11secondstimeEv>:
  t += SECONDS_FROM_1970_TO_2000;  // seconds from 1970 to 2000

  return t;
}

long DateTime::secondstime(void) const {
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  long t;
  uint16_t days = date2days(yOff, m, d);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b298      	uxth	r0, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7859      	ldrb	r1, [r3, #1]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	789b      	ldrb	r3, [r3, #2]
 800113c:	461a      	mov	r2, r3
 800113e:	f7ff fea7 	bl	8000e90 <_ZL9date2daysthh>
 8001142:	4603      	mov	r3, r0
 8001144:	81fb      	strh	r3, [r7, #14]
  t = time2long(days, hh, mm, ss);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	78d9      	ldrb	r1, [r3, #3]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	791a      	ldrb	r2, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	89f8      	ldrh	r0, [r7, #14]
 8001154:	f7ff feee 	bl	8000f34 <_ZL9time2longthhh>
 8001158:	60b8      	str	r0, [r7, #8]
  return t;
 800115a:	68bb      	ldr	r3, [r7, #8]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_ZL7bcd2binh>:
    @brief  Convert a binary coded decimal value to binary. RTC stores time/date values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	111b      	asrs	r3, r3, #4
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4413      	add	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_ZN10RTC_DS32313nowEv>:
  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}

DateTime RTC_DS3231::now() {
 8001190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001194:	b089      	sub	sp, #36	; 0x24
 8001196:	af04      	add	r7, sp, #16
 8001198:	6078      	str	r0, [r7, #4]
  uint8_t data[7];
  HAL_I2C_Mem_Read(&hi2c2, DS3231_ADDRESS,0,1, data, 7, HAL_MAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2307      	movs	r3, #7
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2200      	movs	r2, #0
 80011ae:	21d0      	movs	r1, #208	; 0xd0
 80011b0:	481c      	ldr	r0, [pc, #112]	; (8001224 <_ZN10RTC_DS32313nowEv+0x94>)
 80011b2:	f002 fc91 	bl	8003ad8 <HAL_I2C_Mem_Read>
  return DateTime(
      bcd2bin(data[6])+2000, //yy
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffd3 	bl	8001164 <_ZL7bcd2binh>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29b      	uxth	r3, r3
      bcd2bin(data[5]),//mm
      bcd2bin(data[4]),//dd
      bcd2bin(data[2]),//hh
      bcd2bin(data[1]),//mm
      bcd2bin(data[0]& 0x7F)//ss
    );
 80011c2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80011c6:	b29c      	uxth	r4, r3
 80011c8:	7b7b      	ldrb	r3, [r7, #13]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffca 	bl	8001164 <_ZL7bcd2binh>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4698      	mov	r8, r3
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffc4 	bl	8001164 <_ZL7bcd2binh>
 80011dc:	4603      	mov	r3, r0
 80011de:	4699      	mov	r9, r3
 80011e0:	7abb      	ldrb	r3, [r7, #10]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffbe 	bl	8001164 <_ZL7bcd2binh>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461d      	mov	r5, r3
 80011ec:	7a7b      	ldrb	r3, [r7, #9]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ffb8 	bl	8001164 <_ZL7bcd2binh>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461e      	mov	r6, r3
      bcd2bin(data[0]& 0x7F)//ss
 80011f8:	7a3b      	ldrb	r3, [r7, #8]
    );
 80011fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ffaf 	bl	8001164 <_ZL7bcd2binh>
 8001206:	4603      	mov	r3, r0
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	9601      	str	r6, [sp, #4]
 800120c:	9500      	str	r5, [sp, #0]
 800120e:	464b      	mov	r3, r9
 8001210:	4642      	mov	r2, r8
 8001212:	4621      	mov	r1, r4
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff57 	bl	80010c8 <_ZN8DateTimeC1Ethhhhh>
}
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001224:	2000008c 	.word	0x2000008c

08001228 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb>:
 *      Author: Duane Mathias
 */

#include "Stepper.h"

Stepper::Stepper(const GPIO_TypeDef* const gpioPorts[3], const uint16_t gpioPins[3], const bool reverseDirection):ports(gpioPorts),pins(gpioPins), reverse(reverseDirection) {
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	70fb      	strb	r3, [r7, #3]
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb+0x34>)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	751a      	strb	r2, [r3, #20]

}
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	08007eb4 	.word	0x08007eb4

08001260 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <_ZN7StepperD1Ev+0x1c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	08007eb4 	.word	0x08007eb4

08001280 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
}
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ffe9 	bl	8001260 <_ZN7StepperD1Ev>
 800128e:	2118      	movs	r1, #24
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f004 f8eb 	bl	800546c <_ZdlPvj>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN7Stepper6setDirEb>:

void Stepper::setDir(bool dir){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
	if(reverse) dir = !dir;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7d1b      	ldrb	r3, [r3, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <_ZN7Stepper6setDirEb+0x1c>
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	f083 0301 	eor.w	r3, r3, #1
 80012ba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef*)ports[1],pins[1],(GPIO_PinState)dir);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	3304      	adds	r3, #4
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	3302      	adds	r3, #2
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	4619      	mov	r1, r3
 80012d0:	f002 fa96 	bl	8003800 <HAL_GPIO_WritePin>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN7Stepper4stepEv>:

void Stepper::step() {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	//bool dirState = ((ports[1]->ODR & pins[1]) == pins[1]);
	HAL_GPIO_TogglePin((GPIO_TypeDef*) ports[0], pins[0]);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4610      	mov	r0, r2
 80012f4:	f002 fa9d 	bl	8003832 <HAL_GPIO_TogglePin>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_ZN7Stepper6updateEv>:

void Stepper::update(){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	step();
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ffe7 	bl	80012dc <_ZN7Stepper4stepEv>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <_ZN7Stepper7setFreqEf>:

void Stepper::setFreq(float Hz){
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	ed87 0a00 	vstr	s0, [r7]
	if(Hz < 1) Hz = 1;
 8001324:	edd7 7a00 	vldr	s15, [r7]
 8001328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	d502      	bpl.n	800133c <_ZN7Stepper7setFreqEf+0x24>
 8001336:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800133a:	603b      	str	r3, [r7, #0]
	if(Hz > 2000) Hz = 2000;
 800133c:	edd7 7a00 	vldr	s15, [r7]
 8001340:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001390 <_ZN7Stepper7setFreqEf+0x78>
 8001344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	dd01      	ble.n	8001352 <_ZN7Stepper7setFreqEf+0x3a>
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_ZN7Stepper7setFreqEf+0x7c>)
 8001350:	603b      	str	r3, [r7, #0]
	TIM1->ARR = (uint16_t)(65535.0/Hz);
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f7ff f8a4 	bl	80004a0 <__aeabi_f2d>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	a109      	add	r1, pc, #36	; (adr r1, 8001388 <_ZN7Stepper7setFreqEf+0x70>)
 8001362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001366:	f7ff fa1d 	bl	80007a4 <__aeabi_ddiv>
 800136a:	4603      	mov	r3, r0
 800136c:	460c      	mov	r4, r1
 800136e:	4618      	mov	r0, r3
 8001370:	4621      	mov	r1, r4
 8001372:	f7ff fb9d 	bl	8000ab0 <__aeabi_d2uiz>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_ZN7Stepper7setFreqEf+0x80>)
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	00000000 	.word	0x00000000
 800138c:	40efffe0 	.word	0x40efffe0
 8001390:	44fa0000 	.word	0x44fa0000
 8001394:	44fa0000 	.word	0x44fa0000
 8001398:	40010000 	.word	0x40010000

0800139c <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf>:
 *      Author: Duane Mathias
 */

#include "absEncoder.h"

absEncoder::absEncoder(const GPIO_TypeDef* const gpioPorts[10], const uint16_t gpioPins[10], bool reverseDirection, float offset):ports(gpioPorts),pins(gpioPins),reverse(reverseDirection),degreeOffset(offset) {
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6178      	str	r0, [r7, #20]
 80013a4:	6139      	str	r1, [r7, #16]
 80013a6:	60fa      	str	r2, [r7, #12]
 80013a8:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ac:	72fb      	strb	r3, [r7, #11]
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf+0x40>)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	7afa      	ldrb	r2, [r7, #11]
 80013c4:	731a      	strb	r2, [r3, #12]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	611a      	str	r2, [r3, #16]

}
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	08007ec4 	.word	0x08007ec4

080013e0 <_ZN10absEncoderD1Ev>:

absEncoder::~absEncoder() {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <_ZN10absEncoderD1Ev+0x1c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	08007ec4 	.word	0x08007ec4

08001400 <_ZN10absEncoderD0Ev>:
absEncoder::~absEncoder() {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
}
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffe9 	bl	80013e0 <_ZN10absEncoderD1Ev>
 800140e:	2114      	movs	r1, #20
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f004 f82b 	bl	800546c <_ZdlPvj>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZN10absEncoder11positionRawEv>:

uint16_t absEncoder::positionRaw(){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	// read all gpio at once
	uint16_t a = GPIOA->IDR;
 8001428:	4b30      	ldr	r3, [pc, #192]	; (80014ec <_ZN10absEncoder11positionRawEv+0xcc>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	81fb      	strh	r3, [r7, #14]
	uint16_t b = GPIOB->IDR;
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <_ZN10absEncoder11positionRawEv+0xd0>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	81bb      	strh	r3, [r7, #12]
	uint16_t c = GPIOC->IDR;
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <_ZN10absEncoder11positionRawEv+0xd4>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	817b      	strh	r3, [r7, #10]

	//construct greycode
	uint16_t grey = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	82fb      	strh	r3, [r7, #22]
	uint16_t p = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	82bb      	strh	r3, [r7, #20]
	uint8_t bit = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	727b      	strb	r3, [r7, #9]
	for(int i = 0; i<10; i++){
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2b09      	cmp	r3, #9
 800144e:	dc3d      	bgt.n	80014cc <_ZN10absEncoder11positionRawEv+0xac>
		if(ports[i]==GPIOA){
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a23      	ldr	r2, [pc, #140]	; (80014ec <_ZN10absEncoder11positionRawEv+0xcc>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d102      	bne.n	8001468 <_ZN10absEncoder11positionRawEv+0x48>
			p = a;
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	82bb      	strh	r3, [r7, #20]
 8001466:	e016      	b.n	8001496 <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOB){
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <_ZN10absEncoder11positionRawEv+0xd0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d102      	bne.n	8001480 <_ZN10absEncoder11positionRawEv+0x60>
			p = b;
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	82bb      	strh	r3, [r7, #20]
 800147e:	e00a      	b.n	8001496 <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOC){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <_ZN10absEncoder11positionRawEv+0xd4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <_ZN10absEncoder11positionRawEv+0x76>
			p = c;
 8001492:	897b      	ldrh	r3, [r7, #10]
 8001494:	82bb      	strh	r3, [r7, #20]
		}
		bit = (p&pins[i])>0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	881a      	ldrh	r2, [r3, #0]
 80014a2:	8abb      	ldrh	r3, [r7, #20]
 80014a4:	4013      	ands	r3, r2
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	727b      	strb	r3, [r7, #9]
		grey += bit<<i;
 80014b4:	7a7a      	ldrb	r2, [r7, #9]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	b29a      	uxth	r2, r3
 80014be:	8afb      	ldrh	r3, [r7, #22]
 80014c0:	4413      	add	r3, r2
 80014c2:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<10; i++){
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	e7be      	b.n	800144a <_ZN10absEncoder11positionRawEv+0x2a>
	}
	grey = (0xffff^grey)&0x02ff; //bitwise invert because the encoder is active low
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	f240 23ff 	movw	r3, #767	; 0x2ff
 80014d6:	4013      	ands	r3, r2
 80014d8:	82fb      	strh	r3, [r7, #22]
	return grayToBinary(grey);
 80014da:	8afb      	ldrh	r3, [r7, #22]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f88d 	bl	80015fc <_Z12grayToBinaryt>
 80014e2:	4603      	mov	r3, r0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800

080014f8 <_ZN10absEncoder8positionEv>:

//return the position of the encoder in degrees -180.0 to 180.0 range
float absEncoder::position(){
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	float deg = positionRaw()*360.0/1024.0;
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff8d 	bl	8001420 <_ZN10absEncoder11positionRawEv>
 8001506:	4603      	mov	r3, r0
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ffb7 	bl	800047c <__aeabi_i2d>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <_ZN10absEncoder8positionEv+0xf0>)
 8001514:	f7ff f81c 	bl	8000550 <__aeabi_dmul>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4618      	mov	r0, r3
 800151e:	4621      	mov	r1, r4
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <_ZN10absEncoder8positionEv+0xf4>)
 8001526:	f7ff f93d 	bl	80007a4 <__aeabi_ddiv>
 800152a:	4603      	mov	r3, r0
 800152c:	460c      	mov	r4, r1
 800152e:	4618      	mov	r0, r3
 8001530:	4621      	mov	r1, r4
 8001532:	f7ff fadd 	bl	8000af0 <__aeabi_d2f>
 8001536:	4603      	mov	r3, r0
 8001538:	60fb      	str	r3, [r7, #12]
	if(reverse) deg = -deg;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7b1b      	ldrb	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <_ZN10absEncoder8positionEv+0x56>
 8001542:	edd7 7a03 	vldr	s15, [r7, #12]
 8001546:	eef1 7a67 	vneg.f32	s15, s15
 800154a:	edc7 7a03 	vstr	s15, [r7, #12]
	deg += degreeOffset;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edd3 7a04 	vldr	s15, [r3, #16]
 8001554:	ed97 7a03 	vldr	s14, [r7, #12]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(deg != 0) deg = fmod(deg,360.0);
 8001560:	edd7 7a03 	vldr	s15, [r7, #12]
 8001564:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d00d      	beq.n	800158a <_ZN10absEncoder8positionEv+0x92>
 800156e:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80015e0 <_ZN10absEncoder8positionEv+0xe8>
 8001572:	ed97 0a03 	vldr	s0, [r7, #12]
 8001576:	f000 f85a 	bl	800162e <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800157a:	ec54 3b10 	vmov	r3, r4, d0
 800157e:	4618      	mov	r0, r3
 8001580:	4621      	mov	r1, r4
 8001582:	f7ff fab5 	bl	8000af0 <__aeabi_d2f>
 8001586:	4603      	mov	r3, r0
 8001588:	60fb      	str	r3, [r7, #12]
	if(deg < -180.0)deg+=360;
 800158a:	edd7 7a03 	vldr	s15, [r7, #12]
 800158e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80015f0 <_ZN10absEncoder8positionEv+0xf8>
 8001592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d508      	bpl.n	80015ae <_ZN10absEncoder8positionEv+0xb6>
 800159c:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80015f4 <_ZN10absEncoder8positionEv+0xfc>
 80015a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015a8:	edc7 7a03 	vstr	s15, [r7, #12]
 80015ac:	e010      	b.n	80015d0 <_ZN10absEncoder8positionEv+0xd8>
	else if(deg > 180.0)deg-=360;
 80015ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80015f8 <_ZN10absEncoder8positionEv+0x100>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	dd07      	ble.n	80015d0 <_ZN10absEncoder8positionEv+0xd8>
 80015c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80015f4 <_ZN10absEncoder8positionEv+0xfc>
 80015c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015cc:	edc7 7a03 	vstr	s15, [r7, #12]
	return deg;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	ee07 3a90 	vmov	s15, r3
}
 80015d6:	eeb0 0a67 	vmov.f32	s0, s15
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40768000 	.word	0x40768000
 80015e8:	40768000 	.word	0x40768000
 80015ec:	40900000 	.word	0x40900000
 80015f0:	c3340000 	.word	0xc3340000
 80015f4:	43b40000 	.word	0x43b40000
 80015f8:	43340000 	.word	0x43340000

080015fc <_Z12grayToBinaryt>:

uint16_t grayToBinary(uint16_t num){
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	uint16_t mask = num;
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	81fb      	strh	r3, [r7, #14]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <_Z12grayToBinaryt+0x24>
		mask >>= 1;
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	105b      	asrs	r3, r3, #1
 8001614:	81fb      	strh	r3, [r7, #14]
		num   ^= mask;
 8001616:	88fa      	ldrh	r2, [r7, #6]
 8001618:	89fb      	ldrh	r3, [r7, #14]
 800161a:	4053      	eors	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 800161e:	e7f4      	b.n	800160a <_Z12grayToBinaryt+0xe>
	}
	return num;
 8001620:	88fb      	ldrh	r3, [r7, #6]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 800162e:	b590      	push	{r4, r7, lr}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	ed87 0a03 	vstr	s0, [r7, #12]
 8001638:	ed87 1b00 	vstr	d1, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7fe ff2f 	bl	80004a0 <__aeabi_f2d>
 8001642:	4603      	mov	r3, r0
 8001644:	460c      	mov	r4, r1
 8001646:	ed97 1b00 	vldr	d1, [r7]
 800164a:	ec44 3b10 	vmov	d0, r3, r4
 800164e:	f003 ffbb 	bl	80055c8 <fmod>
 8001652:	eeb0 7a40 	vmov.f32	s14, s0
 8001656:	eef0 7a60 	vmov.f32	s15, s1
    }
 800165a:	eeb0 0a47 	vmov.f32	s0, s14
 800165e:	eef0 0a67 	vmov.f32	s1, s15
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}

08001668 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001672:	edd7 7a01 	vldr	s15, [r7, #4]
 8001676:	eef0 7ae7 	vabs.f32	s15, s15
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZSt4acosf>:
  { return __builtin_acosf(__x); }
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001692:	ed97 0a01 	vldr	s0, [r7, #4]
 8001696:	f004 f96b 	bl	8005970 <acosf>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80016b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80016b6:	f004 f9b3 	bl	8005a20 <asinf>
 80016ba:	eef0 7a40 	vmov.f32	s15, s0
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80016d2:	edc7 0a00 	vstr	s1, [r7]
 80016d6:	edd7 0a00 	vldr	s1, [r7]
 80016da:	ed97 0a01 	vldr	s0, [r7, #4]
 80016de:	f004 f9f7 	bl	8005ad0 <atan2f>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80016fe:	f003 feb9 	bl	8005474 <cosf>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	ed87 0a01 	vstr	s0, [r7, #4]
 800171a:	ed97 0a01 	vldr	s0, [r7, #4]
 800171e:	f003 fee9 	bl	80054f4 <sinf>
 8001722:	eef0 7a40 	vmov.f32	s15, s0
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]
 800173a:	ed97 0a01 	vldr	s0, [r7, #4]
 800173e:	f003 ff1b 	bl	8005578 <tanf>
 8001742:	eef0 7a40 	vmov.f32	s15, s0
 8001746:	eeb0 0a67 	vmov.f32	s0, s15
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_Z7RADIANSf>:
  float elevation; //pi/2 degrees is up
};

const uint32_t JulianDateNoonJan_1_2000 = 2451545; //https://en.wikipedia.org/wiki/Julian_day

float RADIANS(float degrees) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0a01 	vstr	s0, [r7, #4]
  return degrees * M_PI / 180.0;
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fea0 	bl	80004a0 <__aeabi_f2d>
 8001760:	a30e      	add	r3, pc, #56	; (adr r3, 800179c <_Z7RADIANSf+0x4c>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe fef3 	bl	8000550 <__aeabi_dmul>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_Z7RADIANSf+0x48>)
 8001778:	f7ff f814 	bl	80007a4 <__aeabi_ddiv>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	f7ff f9b4 	bl	8000af0 <__aeabi_d2f>
 8001788:	4603      	mov	r3, r0
 800178a:	ee07 3a90 	vmov	s15, r3
}
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	40668000 	.word	0x40668000
 800179c:	54442d18 	.word	0x54442d18
 80017a0:	400921fb 	.word	0x400921fb
 80017a4:	00000000 	.word	0x00000000

080017a8 <_Z7DEGREESf>:

float DEGREES(float radians) {
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	ed87 0a01 	vstr	s0, [r7, #4]
  return radians * 180 / M_PI;
 80017b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80017f8 <_Z7DEGREESf+0x50>
 80017ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017be:	ee17 0a90 	vmov	r0, s15
 80017c2:	f7fe fe6d 	bl	80004a0 <__aeabi_f2d>
 80017c6:	a30a      	add	r3, pc, #40	; (adr r3, 80017f0 <_Z7DEGREESf+0x48>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ffea 	bl	80007a4 <__aeabi_ddiv>
 80017d0:	4603      	mov	r3, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	4618      	mov	r0, r3
 80017d6:	4621      	mov	r1, r4
 80017d8:	f7ff f98a 	bl	8000af0 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	ee07 3a90 	vmov	s15, r3
}
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	f3af 8000 	nop.w
 80017f0:	54442d18 	.word	0x54442d18
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	43340000 	.word	0x43340000

080017fc <_Z3COSf>:

float COS(float val) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	ed87 0a01 	vstr	s0, [r7, #4]
  return cos(val);
 8001806:	ed97 0a01 	vldr	s0, [r7, #4]
 800180a:	f7ff ff71 	bl	80016f0 <_ZSt3cosf>
 800180e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_Z4ACOSf>:

float ACOS(float val) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	ed87 0a01 	vstr	s0, [r7, #4]
  return acos(val);
 8001826:	ed97 0a01 	vldr	s0, [r7, #4]
 800182a:	f7ff ff2d 	bl	8001688 <_ZSt4acosf>
 800182e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001832:	eeb0 0a67 	vmov.f32	s0, s15
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_Z3SINf>:

float SIN(float val) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	ed87 0a01 	vstr	s0, [r7, #4]
  return sin(val);
 8001846:	ed97 0a01 	vldr	s0, [r7, #4]
 800184a:	f7ff ff61 	bl	8001710 <_ZSt3sinf>
 800184e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_Z4ASINf>:

float ASIN(float val) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	ed87 0a01 	vstr	s0, [r7, #4]
  return asin(val);
 8001866:	ed97 0a01 	vldr	s0, [r7, #4]
 800186a:	f7ff ff1d 	bl	80016a8 <_ZSt4asinf>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_Z3TANf>:

float TAN(float val) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	ed87 0a01 	vstr	s0, [r7, #4]
  return tan(val);
 8001886:	ed97 0a01 	vldr	s0, [r7, #4]
 800188a:	f7ff ff51 	bl	8001730 <_ZSt3tanf>
 800188e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_Z5ATAN2ff>:

float ATAN2(float val1,float val2) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80018a6:	edc7 0a00 	vstr	s1, [r7]
  return atan2(val2,val1);
 80018aa:	edd7 0a01 	vldr	s1, [r7, #4]
 80018ae:	ed97 0a00 	vldr	s0, [r7]
 80018b2:	f7ff ff09 	bl	80016c8 <_ZSt5atan2ff>
 80018b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80018ba:	eeb0 0a67 	vmov.f32	s0, s15
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80018ce:	6038      	str	r0, [r7, #0]
      return fmod(__type(__x), __type(__y));
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7fe fde5 	bl	80004a0 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f7fe fdce 	bl	800047c <__aeabi_i2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	ec43 2b11 	vmov	d1, r2, r3
 80018e8:	ec45 4b10 	vmov	d0, r4, r5
 80018ec:	f003 fe6c 	bl	80055c8 <fmod>
 80018f0:	eeb0 7a40 	vmov.f32	s14, s0
 80018f4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80018f8:	eeb0 0a47 	vmov.f32	s0, s14
 80018fc:	eef0 0a67 	vmov.f32	s1, s15
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bdb0      	pop	{r4, r5, r7, pc}

08001906 <_Z3MODfi>:

float MOD(float val, int modulus) {
 8001906:	b590      	push	{r4, r7, lr}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001910:	6038      	str	r0, [r7, #0]
  return fmod(val, modulus);
 8001912:	6838      	ldr	r0, [r7, #0]
 8001914:	ed97 0a01 	vldr	s0, [r7, #4]
 8001918:	f7ff ffd4 	bl	80018c4 <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800191c:	ec54 3b10 	vmov	r3, r4, d0
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	f7ff f8e4 	bl	8000af0 <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	ee07 3a90 	vmov	s15, r3
}
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001942:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7fe fdab 	bl	80004a0 <__aeabi_f2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	6838      	ldr	r0, [r7, #0]
 8001950:	f7fe fd94 	bl	800047c <__aeabi_i2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	ec43 2b11 	vmov	d1, r2, r3
 800195c:	ec45 4b10 	vmov	d0, r4, r5
 8001960:	f003 fe96 	bl	8005690 <pow>
 8001964:	eeb0 7a40 	vmov.f32	s14, s0
 8001968:	eef0 7a60 	vmov.f32	s15, s1
    }
 800196c:	eeb0 0a47 	vmov.f32	s0, s14
 8001970:	eef0 0a67 	vmov.f32	s1, s15
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bdb0      	pop	{r4, r5, r7, pc}

0800197a <_Z5POWERfi>:

float POWER(float val, int power) {
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	ed87 0a01 	vstr	s0, [r7, #4]
 8001984:	6038      	str	r0, [r7, #0]
  return pow(val, power);
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	ed97 0a01 	vldr	s0, [r7, #4]
 800198c:	f7ff ffd4 	bl	8001938 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001990:	ec54 3b10 	vmov	r3, r4, d0
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	f7ff f8aa 	bl	8000af0 <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	ee07 3a90 	vmov	s15, r3
}
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	0000      	movs	r0, r0
	...

080019b0 <_Z16getTargetAzimuthm>:


//pass in seconds since 1/1/2000 by using DS3231 Library
// DateTime now = RTC.now(); //gets date
// seconds = now.get();
target getTargetAzimuth(uint32_t seconds) {
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	ed2d 8b02 	vpush	{d8}
 80019b8:	b0a4      	sub	sp, #144	; 0x90
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
  //offset from 2000
  //- 1/2  to get reference from midnight
  //+ seconds/86400 convert seconds into days

  //E2 local time (in fraction of day)
  float LocalTime = (float)(seconds % 86400) / 86400.0;
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4be5      	ldr	r3, [pc, #916]	; (8001d58 <_Z16getTargetAzimuthm+0x3a8>)
 80019c2:	fba3 1302 	umull	r1, r3, r3, r2
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	49e4      	ldr	r1, [pc, #912]	; (8001d5c <_Z16getTargetAzimuthm+0x3ac>)
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d8:	eddf 6ae1 	vldr	s13, [pc, #900]	; 8001d60 <_Z16getTargetAzimuthm+0x3b0>
 80019dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
  LocalTime -= .0000000003; //floating point error shift
 80019e4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80019e8:	f7fe fd5a 	bl	80004a0 <__aeabi_f2d>
 80019ec:	a3b6      	add	r3, pc, #728	; (adr r3, 8001cc8 <_Z16getTargetAzimuthm+0x318>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fbf5 	bl	80001e0 <__aeabi_dsub>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	4618      	mov	r0, r3
 80019fc:	4621      	mov	r1, r4
 80019fe:	f7ff f877 	bl	8000af0 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  //p(LocalTime);
  //F2
  float JulianDay = (float)JulianDateNoonJan_1_2000 - 0.5 + ((float)seconds/86400);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a12:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001d60 <_Z16getTargetAzimuthm+0x3b0>
 8001a16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a1a:	ee16 0a90 	vmov	r0, s13
 8001a1e:	f7fe fd3f 	bl	80004a0 <__aeabi_f2d>
 8001a22:	a3ab      	add	r3, pc, #684	; (adr r3, 8001cd0 <_Z16getTargetAzimuthm+0x320>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe fbdc 	bl	80001e4 <__adddf3>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4618      	mov	r0, r3
 8001a32:	4621      	mov	r1, r4
 8001a34:	f7ff f85c 	bl	8000af0 <__aeabi_d2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  //p(JulianDay);
  //G2
  float JulianCentury = (-0.5+((float)seconds / 86400)) / 36525.0;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a48:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8001d60 <_Z16getTargetAzimuthm+0x3b0>
 8001a4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a50:	ee16 0a90 	vmov	r0, s13
 8001a54:	f7fe fd24 	bl	80004a0 <__aeabi_f2d>
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4bc1      	ldr	r3, [pc, #772]	; (8001d64 <_Z16getTargetAzimuthm+0x3b4>)
 8001a5e:	f7fe fbbf 	bl	80001e0 <__aeabi_dsub>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	4618      	mov	r0, r3
 8001a68:	4621      	mov	r1, r4
 8001a6a:	a39b      	add	r3, pc, #620	; (adr r3, 8001cd8 <_Z16getTargetAzimuthm+0x328>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fe98 	bl	80007a4 <__aeabi_ddiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	f7ff f838 	bl	8000af0 <__aeabi_d2f>
 8001a80:	4603      	mov	r3, r0
 8001a82:	67fb      	str	r3, [r7, #124]	; 0x7c
  JulianCentury -= .000000008; //floating point error shift
 8001a84:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001a86:	f7fe fd0b 	bl	80004a0 <__aeabi_f2d>
 8001a8a:	a395      	add	r3, pc, #596	; (adr r3, 8001ce0 <_Z16getTargetAzimuthm+0x330>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fba6 	bl	80001e0 <__aeabi_dsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	f7ff f828 	bl	8000af0 <__aeabi_d2f>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
  //p(JulianCentury);
  //I2 -
  float GeomMeanLongSun = MOD(280.46646 + JulianCentury * (36000.76983 + JulianCentury * 0.0003032), 360);
 8001aa4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001aa6:	f7fe fcfb 	bl	80004a0 <__aeabi_f2d>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	460d      	mov	r5, r1
 8001aae:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ab0:	f7fe fcf6 	bl	80004a0 <__aeabi_f2d>
 8001ab4:	a38c      	add	r3, pc, #560	; (adr r3, 8001ce8 <_Z16getTargetAzimuthm+0x338>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fd49 	bl	8000550 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a38a      	add	r3, pc, #552	; (adr r3, 8001cf0 <_Z16getTargetAzimuthm+0x340>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fb8a 	bl	80001e4 <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fd3a 	bl	8000550 <__aeabi_dmul>
 8001adc:	4603      	mov	r3, r0
 8001ade:	460c      	mov	r4, r1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	a384      	add	r3, pc, #528	; (adr r3, 8001cf8 <_Z16getTargetAzimuthm+0x348>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fb7b 	bl	80001e4 <__adddf3>
 8001aee:	4603      	mov	r3, r0
 8001af0:	460c      	mov	r4, r1
 8001af2:	4618      	mov	r0, r3
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7fe fffb 	bl	8000af0 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001b00:	ee00 3a10 	vmov	s0, r3
 8001b04:	f7ff feff 	bl	8001906 <_Z3MODfi>
 8001b08:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78

  //J2
  float GeomMeanAnomSun = 357.52911 + JulianCentury * (35999.05029 - 0.0001537 * JulianCentury);
 8001b0c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b0e:	f7fe fcc7 	bl	80004a0 <__aeabi_f2d>
 8001b12:	4604      	mov	r4, r0
 8001b14:	460d      	mov	r5, r1
 8001b16:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b18:	f7fe fcc2 	bl	80004a0 <__aeabi_f2d>
 8001b1c:	a378      	add	r3, pc, #480	; (adr r3, 8001d00 <_Z16getTargetAzimuthm+0x350>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd15 	bl	8000550 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	a177      	add	r1, pc, #476	; (adr r1, 8001d08 <_Z16getTargetAzimuthm+0x358>)
 8001b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b30:	f7fe fb56 	bl	80001e0 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fd08 	bl	8000550 <__aeabi_dmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	4618      	mov	r0, r3
 8001b46:	4621      	mov	r1, r4
 8001b48:	a371      	add	r3, pc, #452	; (adr r3, 8001d10 <_Z16getTargetAzimuthm+0x360>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fb49 	bl	80001e4 <__adddf3>
 8001b52:	4603      	mov	r3, r0
 8001b54:	460c      	mov	r4, r1
 8001b56:	4618      	mov	r0, r3
 8001b58:	4621      	mov	r1, r4
 8001b5a:	f7fe ffc9 	bl	8000af0 <__aeabi_d2f>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	677b      	str	r3, [r7, #116]	; 0x74

  //K2
  float EccentEarthOrbit = 0.016708634 - JulianCentury * (0.000042037 + 0.0000001267 * JulianCentury);
 8001b62:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b64:	f7fe fc9c 	bl	80004a0 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001b6e:	f7fe fc97 	bl	80004a0 <__aeabi_f2d>
 8001b72:	a369      	add	r3, pc, #420	; (adr r3, 8001d18 <_Z16getTargetAzimuthm+0x368>)
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	f7fe fcea 	bl	8000550 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	a366      	add	r3, pc, #408	; (adr r3, 8001d20 <_Z16getTargetAzimuthm+0x370>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fb2b 	bl	80001e4 <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7fe fcdb 	bl	8000550 <__aeabi_dmul>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	a161      	add	r1, pc, #388	; (adr r1, 8001d28 <_Z16getTargetAzimuthm+0x378>)
 8001ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba8:	f7fe fb1a 	bl	80001e0 <__aeabi_dsub>
 8001bac:	4603      	mov	r3, r0
 8001bae:	460c      	mov	r4, r1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	f7fe ff9c 	bl	8000af0 <__aeabi_d2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	673b      	str	r3, [r7, #112]	; 0x70

  //L2
  float SunEqOfCtr = SIN(RADIANS(GeomMeanAnomSun)) * (1.914602 - JulianCentury * (0.004817 + 0.000014 * JulianCentury)) + SIN(RADIANS(2 * GeomMeanAnomSun)) * (0.019993 - 0.000101 * JulianCentury) + SIN(RADIANS(3 * GeomMeanAnomSun)) * 0.000289;
 8001bbc:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8001bc0:	f7ff fdc6 	bl	8001750 <_Z7RADIANSf>
 8001bc4:	eef0 7a40 	vmov.f32	s15, s0
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	f7ff fe36 	bl	800183c <_Z3SINf>
 8001bd0:	ee10 3a10 	vmov	r3, s0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc63 	bl	80004a0 <__aeabi_f2d>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	460d      	mov	r5, r1
 8001bde:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001be0:	f7fe fc5e 	bl	80004a0 <__aeabi_f2d>
 8001be4:	4680      	mov	r8, r0
 8001be6:	4689      	mov	r9, r1
 8001be8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001bea:	f7fe fc59 	bl	80004a0 <__aeabi_f2d>
 8001bee:	a350      	add	r3, pc, #320	; (adr r3, 8001d30 <_Z16getTargetAzimuthm+0x380>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fcac 	bl	8000550 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	a34d      	add	r3, pc, #308	; (adr r3, 8001d38 <_Z16getTargetAzimuthm+0x388>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe faed 	bl	80001e4 <__adddf3>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4640      	mov	r0, r8
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fc9d 	bl	8000550 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	a149      	add	r1, pc, #292	; (adr r1, 8001d40 <_Z16getTargetAzimuthm+0x390>)
 8001c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c20:	f7fe fade 	bl	80001e0 <__aeabi_dsub>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fc90 	bl	8000550 <__aeabi_dmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	460c      	mov	r4, r1
 8001c34:	4625      	mov	r5, r4
 8001c36:	461c      	mov	r4, r3
 8001c38:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	f7ff fd84 	bl	8001750 <_Z7RADIANSf>
 8001c48:	eef0 7a40 	vmov.f32	s15, s0
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	f7ff fdf4 	bl	800183c <_Z3SINf>
 8001c54:	ee10 3a10 	vmov	r3, s0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc21 	bl	80004a0 <__aeabi_f2d>
 8001c5e:	4680      	mov	r8, r0
 8001c60:	4689      	mov	r9, r1
 8001c62:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001c64:	f7fe fc1c 	bl	80004a0 <__aeabi_f2d>
 8001c68:	a337      	add	r3, pc, #220	; (adr r3, 8001d48 <_Z16getTargetAzimuthm+0x398>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fc6f 	bl	8000550 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	a136      	add	r1, pc, #216	; (adr r1, 8001d50 <_Z16getTargetAzimuthm+0x3a0>)
 8001c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c7c:	f7fe fab0 	bl	80001e0 <__aeabi_dsub>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4640      	mov	r0, r8
 8001c86:	4649      	mov	r1, r9
 8001c88:	f7fe fc62 	bl	8000550 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4620      	mov	r0, r4
 8001c92:	4629      	mov	r1, r5
 8001c94:	f7fe faa6 	bl	80001e4 <__adddf3>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4625      	mov	r5, r4
 8001c9e:	461c      	mov	r4, r3
 8001ca0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ca4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	f7ff fd4e 	bl	8001750 <_Z7RADIANSf>
 8001cb4:	eef0 7a40 	vmov.f32	s15, s0
 8001cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbc:	f7ff fdbe 	bl	800183c <_Z3SINf>
 8001cc0:	ee10 3a10 	vmov	r3, s0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	e04f      	b.n	8001d68 <_Z16getTargetAzimuthm+0x3b8>
 8001cc8:	e361ce4c 	.word	0xe361ce4c
 8001ccc:	3df49da7 	.word	0x3df49da7
 8001cd0:	40000000 	.word	0x40000000
 8001cd4:	4142b42c 	.word	0x4142b42c
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	40e1d5a0 	.word	0x40e1d5a0
 8001ce0:	e826d695 	.word	0xe826d695
 8001ce4:	3e412e0b 	.word	0x3e412e0b
 8001ce8:	158aabc0 	.word	0x158aabc0
 8001cec:	3f33deda 	.word	0x3f33deda
 8001cf0:	a272862f 	.word	0xa272862f
 8001cf4:	40e19418 	.word	0x40e19418
 8001cf8:	9ec2ce46 	.word	0x9ec2ce46
 8001cfc:	40718776 	.word	0x40718776
 8001d00:	f260db0c 	.word	0xf260db0c
 8001d04:	3f242550 	.word	0x3f242550
 8001d08:	9bf9c62a 	.word	0x9bf9c62a
 8001d0c:	40e193e1 	.word	0x40e193e1
 8001d10:	3c0c1fc9 	.word	0x3c0c1fc9
 8001d14:	40765877 	.word	0x40765877
 8001d18:	fc64d800 	.word	0xfc64d800
 8001d1c:	3e810160 	.word	0x3e810160
 8001d20:	525fe303 	.word	0x525fe303
 8001d24:	3f060a1c 	.word	0x3f060a1c
 8001d28:	725d0380 	.word	0x725d0380
 8001d2c:	3f911c11 	.word	0x3f911c11
 8001d30:	593e5fb7 	.word	0x593e5fb7
 8001d34:	3eed5c31 	.word	0x3eed5c31
 8001d38:	976ff3ae 	.word	0x976ff3ae
 8001d3c:	3f73bafd 	.word	0x3f73bafd
 8001d40:	b4edb2f6 	.word	0xb4edb2f6
 8001d44:	3ffea235 	.word	0x3ffea235
 8001d48:	c99f1ae3 	.word	0xc99f1ae3
 8001d4c:	3f1a79fe 	.word	0x3f1a79fe
 8001d50:	84988095 	.word	0x84988095
 8001d54:	3f94790b 	.word	0x3f94790b
 8001d58:	c22e4507 	.word	0xc22e4507
 8001d5c:	00015180 	.word	0x00015180
 8001d60:	47a8c000 	.word	0x47a8c000
 8001d64:	3fe00000 	.word	0x3fe00000
 8001d68:	f7fe fb9a 	bl	80004a0 <__aeabi_f2d>
 8001d6c:	f20f 53b0 	addw	r3, pc, #1456	; 0x5b0
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fbec 	bl	8000550 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7fe fa30 	bl	80001e4 <__adddf3>
 8001d84:	4603      	mov	r3, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	f7fe feb0 	bl	8000af0 <__aeabi_d2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	66fb      	str	r3, [r7, #108]	; 0x6c

  //M2- because of I2
  float SunTrueLong = GeomMeanLongSun + SunEqOfCtr;
 8001d94:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001d98:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

  //N2
  float SunTrueAnom = GeomMeanAnomSun + SunEqOfCtr;
 8001da4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001da8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

  //O2
  float SunRadVector = (1.000001018 * (1 - EccentEarthOrbit * EccentEarthOrbit)) / (1 + EccentEarthOrbit * COS(RADIANS(SunTrueAnom)));
 8001db4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001db8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	ee17 0a90 	vmov	r0, s15
 8001dcc:	f7fe fb68 	bl	80004a0 <__aeabi_f2d>
 8001dd0:	f20f 5354 	addw	r3, pc, #1364	; 0x554
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fbba 	bl	8000550 <__aeabi_dmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	4625      	mov	r5, r4
 8001de2:	461c      	mov	r4, r3
 8001de4:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001de8:	f7ff fcb2 	bl	8001750 <_Z7RADIANSf>
 8001dec:	eef0 7a40 	vmov.f32	s15, s0
 8001df0:	eeb0 0a67 	vmov.f32	s0, s15
 8001df4:	f7ff fd02 	bl	80017fc <_Z3COSf>
 8001df8:	eeb0 7a40 	vmov.f32	s14, s0
 8001dfc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e0c:	ee17 0a90 	vmov	r0, s15
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe fcc2 	bl	80007a4 <__aeabi_ddiv>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4618      	mov	r0, r3
 8001e26:	4621      	mov	r1, r4
 8001e28:	f7fe fe62 	bl	8000af0 <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	663b      	str	r3, [r7, #96]	; 0x60

  //P2 - because of I2
  float SunAppLong = SunTrueLong - 0.00569 - 0.00478 * SIN(RADIANS(125.04 - 1934.136 * JulianCentury));
 8001e30:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001e32:	f7fe fb35 	bl	80004a0 <__aeabi_f2d>
 8001e36:	f20f 43f8 	addw	r3, pc, #1272	; 0x4f8
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe f9cf 	bl	80001e0 <__aeabi_dsub>
 8001e42:	4603      	mov	r3, r0
 8001e44:	460c      	mov	r4, r1
 8001e46:	4625      	mov	r5, r4
 8001e48:	461c      	mov	r4, r3
 8001e4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001e4c:	f7fe fb28 	bl	80004a0 <__aeabi_f2d>
 8001e50:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fb7a 	bl	8000550 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	f20f 4194 	addw	r1, pc, #1172	; 0x494
 8001e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e68:	f7fe f9ba 	bl	80001e0 <__aeabi_dsub>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7fe fe3c 	bl	8000af0 <__aeabi_d2f>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	ee00 3a10 	vmov	s0, r3
 8001e7e:	f7ff fc67 	bl	8001750 <_Z7RADIANSf>
 8001e82:	eef0 7a40 	vmov.f32	s15, s0
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	f7ff fcd7 	bl	800183c <_Z3SINf>
 8001e8e:	ee10 3a10 	vmov	r3, s0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb04 	bl	80004a0 <__aeabi_f2d>
 8001e98:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fb56 	bl	8000550 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	4629      	mov	r1, r5
 8001eac:	f7fe f998 	bl	80001e0 <__aeabi_dsub>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	f7fe fe1a 	bl	8000af0 <__aeabi_d2f>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	65fb      	str	r3, [r7, #92]	; 0x5c

  //Q2
  float MeanObliqEcliptic = 23 + (26 + ((21.448 - JulianCentury * (46.815 + JulianCentury * (0.00059 - JulianCentury * 0.001813)))) / 60) / 60;
 8001ec0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ec2:	f7fe faed 	bl	80004a0 <__aeabi_f2d>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ecc:	f7fe fae8 	bl	80004a0 <__aeabi_f2d>
 8001ed0:	4680      	mov	r8, r0
 8001ed2:	4689      	mov	r9, r1
 8001ed4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ed6:	f7fe fae3 	bl	80004a0 <__aeabi_f2d>
 8001eda:	f20f 4364 	addw	r3, pc, #1124	; 0x464
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb35 	bl	8000550 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	f20f 415c 	addw	r1, pc, #1116	; 0x45c
 8001eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ef2:	f7fe f975 	bl	80001e0 <__aeabi_dsub>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4640      	mov	r0, r8
 8001efc:	4649      	mov	r1, r9
 8001efe:	f7fe fb27 	bl	8000550 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe f967 	bl	80001e4 <__adddf3>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	f7fe fb17 	bl	8000550 <__aeabi_dmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	460c      	mov	r4, r1
 8001f26:	461a      	mov	r2, r3
 8001f28:	4623      	mov	r3, r4
 8001f2a:	f20f 412c 	addw	r1, pc, #1068	; 0x42c
 8001f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f32:	f7fe f955 	bl	80001e0 <__aeabi_dsub>
 8001f36:	4603      	mov	r3, r0
 8001f38:	460c      	mov	r4, r1
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4bf1      	ldr	r3, [pc, #964]	; (8002308 <_Z16getTargetAzimuthm+0x958>)
 8001f44:	f7fe fc2e 	bl	80007a4 <__aeabi_ddiv>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	4621      	mov	r1, r4
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4bed      	ldr	r3, [pc, #948]	; (800230c <_Z16getTargetAzimuthm+0x95c>)
 8001f56:	f7fe f945 	bl	80001e4 <__adddf3>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	4621      	mov	r1, r4
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4be8      	ldr	r3, [pc, #928]	; (8002308 <_Z16getTargetAzimuthm+0x958>)
 8001f68:	f7fe fc1c 	bl	80007a4 <__aeabi_ddiv>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	4618      	mov	r0, r3
 8001f72:	4621      	mov	r1, r4
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4be5      	ldr	r3, [pc, #916]	; (8002310 <_Z16getTargetAzimuthm+0x960>)
 8001f7a:	f7fe f933 	bl	80001e4 <__adddf3>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	4618      	mov	r0, r3
 8001f84:	4621      	mov	r1, r4
 8001f86:	f7fe fdb3 	bl	8000af0 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	65bb      	str	r3, [r7, #88]	; 0x58

  //R2
  float ObliqCorr = MeanObliqEcliptic + 0.00256 * COS(RADIANS(125.04 - 1934.136 * JulianCentury));
 8001f8e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001f90:	f7fe fa86 	bl	80004a0 <__aeabi_f2d>
 8001f94:	4604      	mov	r4, r0
 8001f96:	460d      	mov	r5, r1
 8001f98:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001f9a:	f7fe fa81 	bl	80004a0 <__aeabi_f2d>
 8001f9e:	a3d4      	add	r3, pc, #848	; (adr r3, 80022f0 <_Z16getTargetAzimuthm+0x940>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fad4 	bl	8000550 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	a1d2      	add	r1, pc, #840	; (adr r1, 80022f8 <_Z16getTargetAzimuthm+0x948>)
 8001fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fb2:	f7fe f915 	bl	80001e0 <__aeabi_dsub>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fd97 	bl	8000af0 <__aeabi_d2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	ee00 3a10 	vmov	s0, r3
 8001fc8:	f7ff fbc2 	bl	8001750 <_Z7RADIANSf>
 8001fcc:	eef0 7a40 	vmov.f32	s15, s0
 8001fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd4:	f7ff fc12 	bl	80017fc <_Z3COSf>
 8001fd8:	ee10 3a10 	vmov	r3, s0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa5f 	bl	80004a0 <__aeabi_f2d>
 8001fe2:	a3c7      	add	r3, pc, #796	; (adr r3, 8002300 <_Z16getTargetAzimuthm+0x950>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fab2 	bl	8000550 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f8f6 	bl	80001e4 <__adddf3>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4621      	mov	r1, r4
 8002000:	f7fe fd76 	bl	8000af0 <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	657b      	str	r3, [r7, #84]	; 0x54

  //S2 - because of I2
  float SunRtAscen = DEGREES(ATAN2(COS(RADIANS(SunAppLong)), COS(RADIANS(ObliqCorr)) * SIN(RADIANS(SunAppLong))));
 8002008:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800200c:	f7ff fba0 	bl	8001750 <_Z7RADIANSf>
 8002010:	eef0 7a40 	vmov.f32	s15, s0
 8002014:	eeb0 0a67 	vmov.f32	s0, s15
 8002018:	f7ff fbf0 	bl	80017fc <_Z3COSf>
 800201c:	eef0 8a40 	vmov.f32	s17, s0
 8002020:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002024:	f7ff fb94 	bl	8001750 <_Z7RADIANSf>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	f7ff fbe4 	bl	80017fc <_Z3COSf>
 8002034:	eeb0 8a40 	vmov.f32	s16, s0
 8002038:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800203c:	f7ff fb88 	bl	8001750 <_Z7RADIANSf>
 8002040:	eef0 7a40 	vmov.f32	s15, s0
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	f7ff fbf8 	bl	800183c <_Z3SINf>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002054:	eef0 0a67 	vmov.f32	s1, s15
 8002058:	eeb0 0a68 	vmov.f32	s0, s17
 800205c:	f7ff fc1e 	bl	800189c <_Z5ATAN2ff>
 8002060:	eef0 7a40 	vmov.f32	s15, s0
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	f7ff fb9e 	bl	80017a8 <_Z7DEGREESf>
 800206c:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50

  //T2 - because of I2
  float SunDeclination = DEGREES(ASIN(SIN(RADIANS(ObliqCorr)) * SIN(RADIANS(SunAppLong))));
 8002070:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002074:	f7ff fb6c 	bl	8001750 <_Z7RADIANSf>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	eeb0 0a67 	vmov.f32	s0, s15
 8002080:	f7ff fbdc 	bl	800183c <_Z3SINf>
 8002084:	eeb0 8a40 	vmov.f32	s16, s0
 8002088:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800208c:	f7ff fb60 	bl	8001750 <_Z7RADIANSf>
 8002090:	eef0 7a40 	vmov.f32	s15, s0
 8002094:	eeb0 0a67 	vmov.f32	s0, s15
 8002098:	f7ff fbd0 	bl	800183c <_Z3SINf>
 800209c:	eef0 7a40 	vmov.f32	s15, s0
 80020a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	f7ff fbd8 	bl	800185c <_Z4ASINf>
 80020ac:	eef0 7a40 	vmov.f32	s15, s0
 80020b0:	eeb0 0a67 	vmov.f32	s0, s15
 80020b4:	f7ff fb78 	bl	80017a8 <_Z7DEGREESf>
 80020b8:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c

  //U2
  float varY = TAN(RADIANS(ObliqCorr / 2)) * TAN(RADIANS(ObliqCorr / 2));
 80020bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80020c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020c8:	eeb0 0a66 	vmov.f32	s0, s13
 80020cc:	f7ff fb40 	bl	8001750 <_Z7RADIANSf>
 80020d0:	eef0 7a40 	vmov.f32	s15, s0
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	f7ff fbd0 	bl	800187c <_Z3TANf>
 80020dc:	eeb0 8a40 	vmov.f32	s16, s0
 80020e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80020e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020ec:	eeb0 0a66 	vmov.f32	s0, s13
 80020f0:	f7ff fb2e 	bl	8001750 <_Z7RADIANSf>
 80020f4:	eef0 7a40 	vmov.f32	s15, s0
 80020f8:	eeb0 0a67 	vmov.f32	s0, s15
 80020fc:	f7ff fbbe 	bl	800187c <_Z3TANf>
 8002100:	eef0 7a40 	vmov.f32	s15, s0
 8002104:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002108:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

  //V2 - because of I2
  float EqOfTime = 4 * DEGREES(varY * SIN(2 * RADIANS(GeomMeanLongSun))
 800210c:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8002110:	f7ff fb1e 	bl	8001750 <_Z7RADIANSf>
 8002114:	eef0 7a40 	vmov.f32	s15, s0
 8002118:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800211c:	eeb0 0a67 	vmov.f32	s0, s15
 8002120:	f7ff fb8c 	bl	800183c <_Z3SINf>
 8002124:	eeb0 7a40 	vmov.f32	s14, s0
 8002128:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800212c:	ee27 8a27 	vmul.f32	s16, s14, s15
  - 2 * EccentEarthOrbit * SIN(RADIANS(GeomMeanAnomSun)) + 4 * EccentEarthOrbit * varY * SIN(RADIANS(GeomMeanAnomSun)) * COS(2 * RADIANS(GeomMeanLongSun))
 8002130:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002134:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8002138:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800213c:	f7ff fb08 	bl	8001750 <_Z7RADIANSf>
 8002140:	eef0 7a40 	vmov.f32	s15, s0
 8002144:	eeb0 0a67 	vmov.f32	s0, s15
 8002148:	f7ff fb78 	bl	800183c <_Z3SINf>
 800214c:	eef0 7a40 	vmov.f32	s15, s0
 8002150:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002154:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002158:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800215c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002160:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002164:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002168:	ee67 8a27 	vmul.f32	s17, s14, s15
 800216c:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8002170:	f7ff faee 	bl	8001750 <_Z7RADIANSf>
 8002174:	eef0 7a40 	vmov.f32	s15, s0
 8002178:	eeb0 0a67 	vmov.f32	s0, s15
 800217c:	f7ff fb5e 	bl	800183c <_Z3SINf>
 8002180:	eef0 7a40 	vmov.f32	s15, s0
 8002184:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8002188:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 800218c:	f7ff fae0 	bl	8001750 <_Z7RADIANSf>
 8002190:	eef0 7a40 	vmov.f32	s15, s0
 8002194:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002198:	eeb0 0a67 	vmov.f32	s0, s15
 800219c:	f7ff fb2e 	bl	80017fc <_Z3COSf>
 80021a0:	eef0 7a40 	vmov.f32	s15, s0
 80021a4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80021a8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80021ac:	ee17 0a90 	vmov	r0, s15
 80021b0:	f7fe f976 	bl	80004a0 <__aeabi_f2d>
 80021b4:	4604      	mov	r4, r0
 80021b6:	460d      	mov	r5, r1
  - 0.5 * varY * varY * SIN(4 * RADIANS(GeomMeanLongSun)) - 1.25 * EccentEarthOrbit * EccentEarthOrbit * SIN(2 * RADIANS(GeomMeanAnomSun)));
 80021b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021ba:	f7fe f971 	bl	80004a0 <__aeabi_f2d>
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <_Z16getTargetAzimuthm+0x964>)
 80021c4:	f7fe f9c4 	bl	8000550 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4690      	mov	r8, r2
 80021ce:	4699      	mov	r9, r3
 80021d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021d2:	f7fe f965 	bl	80004a0 <__aeabi_f2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4640      	mov	r0, r8
 80021dc:	4649      	mov	r1, r9
 80021de:	f7fe f9b7 	bl	8000550 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4690      	mov	r8, r2
 80021e8:	4699      	mov	r9, r3
 80021ea:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 80021ee:	f7ff faaf 	bl	8001750 <_Z7RADIANSf>
 80021f2:	eeb0 7a40 	vmov.f32	s14, s0
 80021f6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f7ff fb1b 	bl	800183c <_Z3SINf>
 8002206:	ee10 3a10 	vmov	r3, s0
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f948 	bl	80004a0 <__aeabi_f2d>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4640      	mov	r0, r8
 8002216:	4649      	mov	r1, r9
 8002218:	f7fe f99a 	bl	8000550 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4620      	mov	r0, r4
 8002222:	4629      	mov	r1, r5
 8002224:	f7fd ffdc 	bl	80001e0 <__aeabi_dsub>
 8002228:	4603      	mov	r3, r0
 800222a:	460c      	mov	r4, r1
 800222c:	4625      	mov	r5, r4
 800222e:	461c      	mov	r4, r3
 8002230:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002232:	f7fe f935 	bl	80004a0 <__aeabi_f2d>
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <_Z16getTargetAzimuthm+0x968>)
 800223c:	f7fe f988 	bl	8000550 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4690      	mov	r8, r2
 8002246:	4699      	mov	r9, r3
 8002248:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800224a:	f7fe f929 	bl	80004a0 <__aeabi_f2d>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4640      	mov	r0, r8
 8002254:	4649      	mov	r1, r9
 8002256:	f7fe f97b 	bl	8000550 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4690      	mov	r8, r2
 8002260:	4699      	mov	r9, r3
 8002262:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8002266:	f7ff fa73 	bl	8001750 <_Z7RADIANSf>
 800226a:	eef0 7a40 	vmov.f32	s15, s0
 800226e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002272:	eeb0 0a67 	vmov.f32	s0, s15
 8002276:	f7ff fae1 	bl	800183c <_Z3SINf>
 800227a:	ee10 3a10 	vmov	r3, s0
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f90e 	bl	80004a0 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4640      	mov	r0, r8
 800228a:	4649      	mov	r1, r9
 800228c:	f7fe f960 	bl	8000550 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fd ffa2 	bl	80001e0 <__aeabi_dsub>
 800229c:	4603      	mov	r3, r0
 800229e:	460c      	mov	r4, r1
  float EqOfTime = 4 * DEGREES(varY * SIN(2 * RADIANS(GeomMeanLongSun))
 80022a0:	4618      	mov	r0, r3
 80022a2:	4621      	mov	r1, r4
 80022a4:	f7fe fc24 	bl	8000af0 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	ee00 3a10 	vmov	s0, r3
 80022ae:	f7ff fa7b 	bl	80017a8 <_Z7DEGREESf>
 80022b2:	eeb0 7a40 	vmov.f32	s14, s0
  - 0.5 * varY * varY * SIN(4 * RADIANS(GeomMeanLongSun)) - 1.25 * EccentEarthOrbit * EccentEarthOrbit * SIN(2 * RADIANS(GeomMeanAnomSun)));
 80022b6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

  //W2
  float HASunrise = DEGREES(ACOS(COS(RADIANS(90.833)) / (COS(RADIANS(latitude)) * COS(RADIANS(SunDeclination))) - TAN(RADIANS(latitude)) * TAN(RADIANS(SunDeclination))));
 80022c2:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800231c <_Z16getTargetAzimuthm+0x96c>
 80022c6:	f7ff fa43 	bl	8001750 <_Z7RADIANSf>
 80022ca:	eef0 7a40 	vmov.f32	s15, s0
 80022ce:	eeb0 0a67 	vmov.f32	s0, s15
 80022d2:	f7ff fa93 	bl	80017fc <_Z3COSf>
 80022d6:	eef0 8a40 	vmov.f32	s17, s0
 80022da:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002374 <_Z16getTargetAzimuthm+0x9c4>
 80022de:	f7ff fa37 	bl	8001750 <_Z7RADIANSf>
 80022e2:	eef0 7a40 	vmov.f32	s15, s0
 80022e6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ea:	f7ff fa87 	bl	80017fc <_Z3COSf>
 80022ee:	e047      	b.n	8002380 <_Z16getTargetAzimuthm+0x9d0>
 80022f0:	43958106 	.word	0x43958106
 80022f4:	409e388b 	.word	0x409e388b
 80022f8:	5c28f5c3 	.word	0x5c28f5c3
 80022fc:	405f428f 	.word	0x405f428f
 8002300:	88e368f1 	.word	0x88e368f1
 8002304:	3f64f8b5 	.word	0x3f64f8b5
 8002308:	404e0000 	.word	0x404e0000
 800230c:	403a0000 	.word	0x403a0000
 8002310:	40370000 	.word	0x40370000
 8002314:	3fe00000 	.word	0x3fe00000
 8002318:	3ff40000 	.word	0x3ff40000
 800231c:	42b5aa7f 	.word	0x42b5aa7f
 8002320:	8c6d612c 	.word	0x8c6d612c
 8002324:	3f32f09d 	.word	0x3f32f09d
 8002328:	11446d65 	.word	0x11446d65
 800232c:	3ff00001 	.word	0x3ff00001
 8002330:	bea0ba1f 	.word	0xbea0ba1f
 8002334:	3f774e65 	.word	0x3f774e65
 8002338:	7acc4ef9 	.word	0x7acc4ef9
 800233c:	3f739431 	.word	0x3f739431
 8002340:	ed4a1ad6 	.word	0xed4a1ad6
 8002344:	3f5db445 	.word	0x3f5db445
 8002348:	5a31a4be 	.word	0x5a31a4be
 800234c:	3f435547 	.word	0x3f435547
 8002350:	eb851eb8 	.word	0xeb851eb8
 8002354:	40476851 	.word	0x40476851
 8002358:	20c49ba6 	.word	0x20c49ba6
 800235c:	403572b0 	.word	0x403572b0
 8002360:	44883d77 	.word	0x44883d77
 8002364:	44b40000 	.word	0x44b40000
 8002368:	43b8f5dd 	.word	0x43b8f5dd
 800236c:	43960000 	.word	0x43960000
 8002370:	43340000 	.word	0x43340000
 8002374:	42300c64 	.word	0x42300c64
 8002378:	42b40000 	.word	0x42b40000
 800237c:	42aa0000 	.word	0x42aa0000
 8002380:	eeb0 8a40 	vmov.f32	s16, s0
 8002384:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002388:	f7ff f9e2 	bl	8001750 <_Z7RADIANSf>
 800238c:	eef0 7a40 	vmov.f32	s15, s0
 8002390:	eeb0 0a67 	vmov.f32	s0, s15
 8002394:	f7ff fa32 	bl	80017fc <_Z3COSf>
 8002398:	eef0 7a40 	vmov.f32	s15, s0
 800239c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023a0:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 80023a4:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 8002374 <_Z16getTargetAzimuthm+0x9c4>
 80023a8:	f7ff f9d2 	bl	8001750 <_Z7RADIANSf>
 80023ac:	eef0 7a40 	vmov.f32	s15, s0
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f7ff fa62 	bl	800187c <_Z3TANf>
 80023b8:	eef0 8a40 	vmov.f32	s17, s0
 80023bc:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80023c0:	f7ff f9c6 	bl	8001750 <_Z7RADIANSf>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f7ff fa56 	bl	800187c <_Z3TANf>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80023d8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80023dc:	eeb0 0a67 	vmov.f32	s0, s15
 80023e0:	f7ff fa1c 	bl	800181c <_Z4ACOSf>
 80023e4:	eef0 7a40 	vmov.f32	s15, s0
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	f7ff f9dc 	bl	80017a8 <_Z7DEGREESf>
 80023f0:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

  //X2 - because of I2
  float SolarNoon = (720 - 4 * longitude - EqOfTime + timeZone * 60) / 1440;
 80023f4:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8002360 <_Z16getTargetAzimuthm+0x9b0>
 80023f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002400:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 800236c <_Z16getTargetAzimuthm+0x9bc>
 8002404:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002408:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8002364 <_Z16getTargetAzimuthm+0x9b4>
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

  //Y2 - because of I2
  float SunriseTime = SolarNoon - HASunrise * 4 / 1440;
 8002414:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002418:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800241c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002420:	ed5f 6a30 	vldr	s13, [pc, #-192]	; 8002364 <_Z16getTargetAzimuthm+0x9b4>
 8002424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002428:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800242c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002430:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

  //Z2 - because of I2
  float SunsetTime = SolarNoon + HASunrise * 4 / 1440;
 8002434:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002438:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800243c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002440:	ed5f 6a38 	vldr	s13, [pc, #-224]	; 8002364 <_Z16getTargetAzimuthm+0x9b4>
 8002444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002448:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800244c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002450:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  //AA2 (minutes)
  float SunlightDuration = 8 * HASunrise;
 8002454:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002458:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800245c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002460:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  //AB2 - because of I2
  float TrueSolarTime = MOD(LocalTime * 1440 + EqOfTime + 4 * longitude - 60 * timeZone, 1440);
 8002464:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002468:	ed1f 7a42 	vldr	s14, [pc, #-264]	; 8002364 <_Z16getTargetAzimuthm+0x9b4>
 800246c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002470:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002478:	ed1f 7a45 	vldr	s14, [pc, #-276]	; 8002368 <_Z16getTargetAzimuthm+0x9b8>
 800247c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002480:	ed1f 7a46 	vldr	s14, [pc, #-280]	; 800236c <_Z16getTargetAzimuthm+0x9bc>
 8002484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002488:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 800248c:	eeb0 0a67 	vmov.f32	s0, s15
 8002490:	f7ff fa39 	bl	8001906 <_Z3MODfi>
 8002494:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

  //AC2 radians
  float HourAngle = 0;
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (TrueSolarTime / 4 < 0) {
 80024a0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024a4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d50c      	bpl.n	80024d0 <_Z16getTargetAzimuthm+0xb20>
    HourAngle = TrueSolarTime / 4 + 180;
 80024b6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024ba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c2:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 8002370 <_Z16getTargetAzimuthm+0x9c0>
 80024c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024ca:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 80024ce:	e00b      	b.n	80024e8 <_Z16getTargetAzimuthm+0xb38>
  } else {
    HourAngle = TrueSolarTime / 4 - 180;
 80024d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024d4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024dc:	ed1f 7a5c 	vldr	s14, [pc, #-368]	; 8002370 <_Z16getTargetAzimuthm+0x9c0>
 80024e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024e4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
  }

  //AD2 radians
  float SolarZenithAngle = DEGREES(ACOS(SIN(RADIANS(latitude)) * SIN(RADIANS(SunDeclination)) + COS(RADIANS(latitude)) * COS(RADIANS(SunDeclination)) * COS(RADIANS(HourAngle))));
 80024e8:	ed1f 0a5e 	vldr	s0, [pc, #-376]	; 8002374 <_Z16getTargetAzimuthm+0x9c4>
 80024ec:	f7ff f930 	bl	8001750 <_Z7RADIANSf>
 80024f0:	eef0 7a40 	vmov.f32	s15, s0
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f7ff f9a0 	bl	800183c <_Z3SINf>
 80024fc:	eeb0 8a40 	vmov.f32	s16, s0
 8002500:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002504:	f7ff f924 	bl	8001750 <_Z7RADIANSf>
 8002508:	eef0 7a40 	vmov.f32	s15, s0
 800250c:	eeb0 0a67 	vmov.f32	s0, s15
 8002510:	f7ff f994 	bl	800183c <_Z3SINf>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	ee28 8a27 	vmul.f32	s16, s16, s15
 800251c:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8002374 <_Z16getTargetAzimuthm+0x9c4>
 8002520:	f7ff f916 	bl	8001750 <_Z7RADIANSf>
 8002524:	eef0 7a40 	vmov.f32	s15, s0
 8002528:	eeb0 0a67 	vmov.f32	s0, s15
 800252c:	f7ff f966 	bl	80017fc <_Z3COSf>
 8002530:	eef0 8a40 	vmov.f32	s17, s0
 8002534:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002538:	f7ff f90a 	bl	8001750 <_Z7RADIANSf>
 800253c:	eef0 7a40 	vmov.f32	s15, s0
 8002540:	eeb0 0a67 	vmov.f32	s0, s15
 8002544:	f7ff f95a 	bl	80017fc <_Z3COSf>
 8002548:	eef0 7a40 	vmov.f32	s15, s0
 800254c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8002550:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8002554:	f7ff f8fc 	bl	8001750 <_Z7RADIANSf>
 8002558:	eef0 7a40 	vmov.f32	s15, s0
 800255c:	eeb0 0a67 	vmov.f32	s0, s15
 8002560:	f7ff f94c 	bl	80017fc <_Z3COSf>
 8002564:	eef0 7a40 	vmov.f32	s15, s0
 8002568:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800256c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	f7ff f952 	bl	800181c <_Z4ACOSf>
 8002578:	eef0 7a40 	vmov.f32	s15, s0
 800257c:	eeb0 0a67 	vmov.f32	s0, s15
 8002580:	f7ff f912 	bl	80017a8 <_Z7DEGREESf>
 8002584:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

  //AE2
  float SolarElevationAngle = 90 - SolarZenithAngle;
 8002588:	ed1f 7a85 	vldr	s14, [pc, #-532]	; 8002378 <_Z16getTargetAzimuthm+0x9c8>
 800258c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002594:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  //AF2
  float AtmosphericRefraction;
  if (SolarElevationAngle > 85) {
 8002598:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800259c:	ed1f 7a89 	vldr	s14, [pc, #-548]	; 800237c <_Z16getTargetAzimuthm+0x9cc>
 80025a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dd04      	ble.n	80025b4 <_Z16getTargetAzimuthm+0xc04>
  AtmosphericRefraction = 0;
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025b2:	e0fb      	b.n	80027ac <_Z16getTargetAzimuthm+0xdfc>
  }
  else if (SolarElevationAngle > 5) {
 80025b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025b8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80025bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	dd6f      	ble.n	80026a6 <_Z16getTargetAzimuthm+0xcf6>
  AtmosphericRefraction = 58.1 / TAN(RADIANS(SolarElevationAngle)) - 0.07 / POWER(TAN(RADIANS(SolarElevationAngle)), 3)
 80025c6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80025ca:	f7ff f8c1 	bl	8001750 <_Z7RADIANSf>
 80025ce:	eef0 7a40 	vmov.f32	s15, s0
 80025d2:	eeb0 0a67 	vmov.f32	s0, s15
 80025d6:	f7ff f951 	bl	800187c <_Z3TANf>
 80025da:	ee10 3a10 	vmov	r3, s0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ff5e 	bl	80004a0 <__aeabi_f2d>
 80025e4:	4603      	mov	r3, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	461a      	mov	r2, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	a1f2      	add	r1, pc, #968	; (adr r1, 80029b8 <_Z16getTargetAzimuthm+0x1008>)
 80025ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025f2:	f7fe f8d7 	bl	80007a4 <__aeabi_ddiv>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	4625      	mov	r5, r4
 80025fc:	461c      	mov	r4, r3
 80025fe:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002602:	f7ff f8a5 	bl	8001750 <_Z7RADIANSf>
 8002606:	eef0 7a40 	vmov.f32	s15, s0
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	f7ff f935 	bl	800187c <_Z3TANf>
 8002612:	eef0 7a40 	vmov.f32	s15, s0
 8002616:	2003      	movs	r0, #3
 8002618:	eeb0 0a67 	vmov.f32	s0, s15
 800261c:	f7ff f9ad 	bl	800197a <_Z5POWERfi>
 8002620:	ee10 3a10 	vmov	r3, s0
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff3b 	bl	80004a0 <__aeabi_f2d>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	a1e4      	add	r1, pc, #912	; (adr r1, 80029c0 <_Z16getTargetAzimuthm+0x1010>)
 8002630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002634:	f7fe f8b6 	bl	80007a4 <__aeabi_ddiv>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4620      	mov	r0, r4
 800263e:	4629      	mov	r1, r5
 8002640:	f7fd fdce 	bl	80001e0 <__aeabi_dsub>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	4625      	mov	r5, r4
 800264a:	461c      	mov	r4, r3
    + 0.000086 / POWER(TAN(RADIANS(SolarElevationAngle)), 5);
 800264c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002650:	f7ff f87e 	bl	8001750 <_Z7RADIANSf>
 8002654:	eef0 7a40 	vmov.f32	s15, s0
 8002658:	eeb0 0a67 	vmov.f32	s0, s15
 800265c:	f7ff f90e 	bl	800187c <_Z3TANf>
 8002660:	eef0 7a40 	vmov.f32	s15, s0
 8002664:	2005      	movs	r0, #5
 8002666:	eeb0 0a67 	vmov.f32	s0, s15
 800266a:	f7ff f986 	bl	800197a <_Z5POWERfi>
 800266e:	ee10 3a10 	vmov	r3, s0
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff14 	bl	80004a0 <__aeabi_f2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	a1d2      	add	r1, pc, #840	; (adr r1, 80029c8 <_Z16getTargetAzimuthm+0x1018>)
 800267e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002682:	f7fe f88f 	bl	80007a4 <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fd fda9 	bl	80001e4 <__adddf3>
 8002692:	4603      	mov	r3, r0
 8002694:	460c      	mov	r4, r1
  AtmosphericRefraction = 58.1 / TAN(RADIANS(SolarElevationAngle)) - 0.07 / POWER(TAN(RADIANS(SolarElevationAngle)), 3)
 8002696:	4618      	mov	r0, r3
 8002698:	4621      	mov	r1, r4
 800269a:	f7fe fa29 	bl	8000af0 <__aeabi_d2f>
 800269e:	4603      	mov	r3, r0
 80026a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026a4:	e082      	b.n	80027ac <_Z16getTargetAzimuthm+0xdfc>
  }
  else if (SolarElevationAngle > -0.575) {
 80026a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026a8:	f7fd fefa 	bl	80004a0 <__aeabi_f2d>
 80026ac:	a3c8      	add	r3, pc, #800	; (adr r3, 80029d0 <_Z16getTargetAzimuthm+0x1020>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fe f9dd 	bl	8000a70 <__aeabi_dcmpgt>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d056      	beq.n	800276a <_Z16getTargetAzimuthm+0xdba>
    AtmosphericRefraction = 1735 + SolarElevationAngle * (-518.2 + SolarElevationAngle * (103.4 + SolarElevationAngle * (-12.79 + SolarElevationAngle * 0.711)));
 80026bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026be:	f7fd feef 	bl	80004a0 <__aeabi_f2d>
 80026c2:	4604      	mov	r4, r0
 80026c4:	460d      	mov	r5, r1
 80026c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026c8:	f7fd feea 	bl	80004a0 <__aeabi_f2d>
 80026cc:	4680      	mov	r8, r0
 80026ce:	4689      	mov	r9, r1
 80026d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026d2:	f7fd fee5 	bl	80004a0 <__aeabi_f2d>
 80026d6:	4682      	mov	sl, r0
 80026d8:	468b      	mov	fp, r1
 80026da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026dc:	f7fd fee0 	bl	80004a0 <__aeabi_f2d>
 80026e0:	a3bd      	add	r3, pc, #756	; (adr r3, 80029d8 <_Z16getTargetAzimuthm+0x1028>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff33 	bl	8000550 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	a3bb      	add	r3, pc, #748	; (adr r3, 80029e0 <_Z16getTargetAzimuthm+0x1030>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fd72 	bl	80001e0 <__aeabi_dsub>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4650      	mov	r0, sl
 8002702:	4659      	mov	r1, fp
 8002704:	f7fd ff24 	bl	8000550 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	a3b5      	add	r3, pc, #724	; (adr r3, 80029e8 <_Z16getTargetAzimuthm+0x1038>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fd fd65 	bl	80001e4 <__adddf3>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4640      	mov	r0, r8
 8002720:	4649      	mov	r1, r9
 8002722:	f7fd ff15 	bl	8000550 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	a3b0      	add	r3, pc, #704	; (adr r3, 80029f0 <_Z16getTargetAzimuthm+0x1040>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fd54 	bl	80001e0 <__aeabi_dsub>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4620      	mov	r0, r4
 800273e:	4629      	mov	r1, r5
 8002740:	f7fd ff06 	bl	8000550 <__aeabi_dmul>
 8002744:	4603      	mov	r3, r0
 8002746:	460c      	mov	r4, r1
 8002748:	4618      	mov	r0, r3
 800274a:	4621      	mov	r1, r4
 800274c:	a3aa      	add	r3, pc, #680	; (adr r3, 80029f8 <_Z16getTargetAzimuthm+0x1048>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd fd47 	bl	80001e4 <__adddf3>
 8002756:	4603      	mov	r3, r0
 8002758:	460c      	mov	r4, r1
 800275a:	4618      	mov	r0, r3
 800275c:	4621      	mov	r1, r4
 800275e:	f7fe f9c7 	bl	8000af0 <__aeabi_d2f>
 8002762:	4603      	mov	r3, r0
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002768:	e020      	b.n	80027ac <_Z16getTargetAzimuthm+0xdfc>
  }
  else {
    AtmosphericRefraction = -20.772 / TAN(RADIANS(SolarElevationAngle));
 800276a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800276e:	f7fe ffef 	bl	8001750 <_Z7RADIANSf>
 8002772:	eef0 7a40 	vmov.f32	s15, s0
 8002776:	eeb0 0a67 	vmov.f32	s0, s15
 800277a:	f7ff f87f 	bl	800187c <_Z3TANf>
 800277e:	ee10 3a10 	vmov	r3, s0
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fe8c 	bl	80004a0 <__aeabi_f2d>
 8002788:	4603      	mov	r3, r0
 800278a:	460c      	mov	r4, r1
 800278c:	461a      	mov	r2, r3
 800278e:	4623      	mov	r3, r4
 8002790:	a19b      	add	r1, pc, #620	; (adr r1, 8002a00 <_Z16getTargetAzimuthm+0x1050>)
 8002792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002796:	f7fe f805 	bl	80007a4 <__aeabi_ddiv>
 800279a:	4603      	mov	r3, r0
 800279c:	460c      	mov	r4, r1
 800279e:	4618      	mov	r0, r3
 80027a0:	4621      	mov	r1, r4
 80027a2:	f7fe f9a5 	bl	8000af0 <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  }
  AtmosphericRefraction /= 3600;
 80027ac:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80027b0:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80029a8 <_Z16getTargetAzimuthm+0xff8>
 80027b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

  //AG2
  out.elevation = RADIANS(SolarElevationAngle + AtmosphericRefraction);
 80027bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80027c0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80027c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	f7fe ffc0 	bl	8001750 <_Z7RADIANSf>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	edc7 7a06 	vstr	s15, [r7, #24]

  //AH2
  if (HourAngle > 0) {
 80027d8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80027dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	dd64      	ble.n	80028b0 <_Z16getTargetAzimuthm+0xf00>
    out.azimuth = RADIANS(MOD(DEGREES(ACOS(((SIN(RADIANS(latitude)) * COS(RADIANS(SolarZenithAngle))) - SIN(RADIANS(SunDeclination))) / (COS(RADIANS(latitude)) * SIN(RADIANS(SolarZenithAngle))))) + 180, 360));
 80027e6:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80029ac <_Z16getTargetAzimuthm+0xffc>
 80027ea:	f7fe ffb1 	bl	8001750 <_Z7RADIANSf>
 80027ee:	eef0 7a40 	vmov.f32	s15, s0
 80027f2:	eeb0 0a67 	vmov.f32	s0, s15
 80027f6:	f7ff f821 	bl	800183c <_Z3SINf>
 80027fa:	eeb0 8a40 	vmov.f32	s16, s0
 80027fe:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002802:	f7fe ffa5 	bl	8001750 <_Z7RADIANSf>
 8002806:	eef0 7a40 	vmov.f32	s15, s0
 800280a:	eeb0 0a67 	vmov.f32	s0, s15
 800280e:	f7fe fff5 	bl	80017fc <_Z3COSf>
 8002812:	eef0 7a40 	vmov.f32	s15, s0
 8002816:	ee28 8a27 	vmul.f32	s16, s16, s15
 800281a:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800281e:	f7fe ff97 	bl	8001750 <_Z7RADIANSf>
 8002822:	eef0 7a40 	vmov.f32	s15, s0
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	f7ff f807 	bl	800183c <_Z3SINf>
 800282e:	eef0 7a40 	vmov.f32	s15, s0
 8002832:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002836:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80029ac <_Z16getTargetAzimuthm+0xffc>
 800283a:	f7fe ff89 	bl	8001750 <_Z7RADIANSf>
 800283e:	eef0 7a40 	vmov.f32	s15, s0
 8002842:	eeb0 0a67 	vmov.f32	s0, s15
 8002846:	f7fe ffd9 	bl	80017fc <_Z3COSf>
 800284a:	eef0 8a40 	vmov.f32	s17, s0
 800284e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002852:	f7fe ff7d 	bl	8001750 <_Z7RADIANSf>
 8002856:	eef0 7a40 	vmov.f32	s15, s0
 800285a:	eeb0 0a67 	vmov.f32	s0, s15
 800285e:	f7fe ffed 	bl	800183c <_Z3SINf>
 8002862:	eef0 7a40 	vmov.f32	s15, s0
 8002866:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800286a:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800286e:	eeb0 0a47 	vmov.f32	s0, s14
 8002872:	f7fe ffd3 	bl	800181c <_Z4ACOSf>
 8002876:	eef0 7a40 	vmov.f32	s15, s0
 800287a:	eeb0 0a67 	vmov.f32	s0, s15
 800287e:	f7fe ff93 	bl	80017a8 <_Z7DEGREESf>
 8002882:	eeb0 7a40 	vmov.f32	s14, s0
 8002886:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80029b0 <_Z16getTargetAzimuthm+0x1000>
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288e:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8002892:	eeb0 0a67 	vmov.f32	s0, s15
 8002896:	f7ff f836 	bl	8001906 <_Z3MODfi>
 800289a:	eef0 7a40 	vmov.f32	s15, s0
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	f7fe ff55 	bl	8001750 <_Z7RADIANSf>
 80028a6:	eef0 7a40 	vmov.f32	s15, s0
 80028aa:	edc7 7a05 	vstr	s15, [r7, #20]
 80028ae:	e063      	b.n	8002978 <_Z16getTargetAzimuthm+0xfc8>
  } else {
    out.azimuth = RADIANS(MOD(540 - DEGREES(ACOS(((SIN(RADIANS(latitude)) * COS(RADIANS(SolarZenithAngle))) - SIN(RADIANS(SunDeclination))) / (COS(RADIANS(latitude)) * SIN(RADIANS(SolarZenithAngle))))), 360));
 80028b0:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80029ac <_Z16getTargetAzimuthm+0xffc>
 80028b4:	f7fe ff4c 	bl	8001750 <_Z7RADIANSf>
 80028b8:	eef0 7a40 	vmov.f32	s15, s0
 80028bc:	eeb0 0a67 	vmov.f32	s0, s15
 80028c0:	f7fe ffbc 	bl	800183c <_Z3SINf>
 80028c4:	eeb0 8a40 	vmov.f32	s16, s0
 80028c8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80028cc:	f7fe ff40 	bl	8001750 <_Z7RADIANSf>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
 80028d4:	eeb0 0a67 	vmov.f32	s0, s15
 80028d8:	f7fe ff90 	bl	80017fc <_Z3COSf>
 80028dc:	eef0 7a40 	vmov.f32	s15, s0
 80028e0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80028e4:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80028e8:	f7fe ff32 	bl	8001750 <_Z7RADIANSf>
 80028ec:	eef0 7a40 	vmov.f32	s15, s0
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	f7fe ffa2 	bl	800183c <_Z3SINf>
 80028f8:	eef0 7a40 	vmov.f32	s15, s0
 80028fc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002900:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80029ac <_Z16getTargetAzimuthm+0xffc>
 8002904:	f7fe ff24 	bl	8001750 <_Z7RADIANSf>
 8002908:	eef0 7a40 	vmov.f32	s15, s0
 800290c:	eeb0 0a67 	vmov.f32	s0, s15
 8002910:	f7fe ff74 	bl	80017fc <_Z3COSf>
 8002914:	eef0 8a40 	vmov.f32	s17, s0
 8002918:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800291c:	f7fe ff18 	bl	8001750 <_Z7RADIANSf>
 8002920:	eef0 7a40 	vmov.f32	s15, s0
 8002924:	eeb0 0a67 	vmov.f32	s0, s15
 8002928:	f7fe ff88 	bl	800183c <_Z3SINf>
 800292c:	eef0 7a40 	vmov.f32	s15, s0
 8002930:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002934:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8002938:	eeb0 0a47 	vmov.f32	s0, s14
 800293c:	f7fe ff6e 	bl	800181c <_Z4ACOSf>
 8002940:	eef0 7a40 	vmov.f32	s15, s0
 8002944:	eeb0 0a67 	vmov.f32	s0, s15
 8002948:	f7fe ff2e 	bl	80017a8 <_Z7DEGREESf>
 800294c:	eeb0 7a40 	vmov.f32	s14, s0
 8002950:	eddf 7a18 	vldr	s15, [pc, #96]	; 80029b4 <_Z16getTargetAzimuthm+0x1004>
 8002954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002958:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800295c:	eeb0 0a67 	vmov.f32	s0, s15
 8002960:	f7fe ffd1 	bl	8001906 <_Z3MODfi>
 8002964:	eef0 7a40 	vmov.f32	s15, s0
 8002968:	eeb0 0a67 	vmov.f32	s0, s15
 800296c:	f7fe fef0 	bl	8001750 <_Z7RADIANSf>
 8002970:	eef0 7a40 	vmov.f32	s15, s0
 8002974:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  return out;
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	f107 0214 	add.w	r2, r7, #20
 8002980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002984:	e883 0003 	stmia.w	r3, {r0, r1}
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	ee07 2a10 	vmov	s14, r2
 8002990:	ee07 3a90 	vmov	s15, r3
}
 8002994:	eeb0 0a47 	vmov.f32	s0, s14
 8002998:	eef0 0a67 	vmov.f32	s1, s15
 800299c:	3790      	adds	r7, #144	; 0x90
 800299e:	46bd      	mov	sp, r7
 80029a0:	ecbd 8b02 	vpop	{d8}
 80029a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a8:	45610000 	.word	0x45610000
 80029ac:	42300c64 	.word	0x42300c64
 80029b0:	43340000 	.word	0x43340000
 80029b4:	44070000 	.word	0x44070000
 80029b8:	cccccccd 	.word	0xcccccccd
 80029bc:	404d0ccc 	.word	0x404d0ccc
 80029c0:	1eb851ec 	.word	0x1eb851ec
 80029c4:	3fb1eb85 	.word	0x3fb1eb85
 80029c8:	bff47736 	.word	0xbff47736
 80029cc:	3f168b5c 	.word	0x3f168b5c
 80029d0:	66666666 	.word	0x66666666
 80029d4:	bfe26666 	.word	0xbfe26666
 80029d8:	126e978d 	.word	0x126e978d
 80029dc:	3fe6c083 	.word	0x3fe6c083
 80029e0:	e147ae14 	.word	0xe147ae14
 80029e4:	4029947a 	.word	0x4029947a
 80029e8:	9999999a 	.word	0x9999999a
 80029ec:	4059d999 	.word	0x4059d999
 80029f0:	9999999a 	.word	0x9999999a
 80029f4:	40803199 	.word	0x40803199
 80029f8:	00000000 	.word	0x00000000
 80029fc:	409b1c00 	.word	0x409b1c00
 8002a00:	cac08312 	.word	0xcac08312
 8002a04:	c034c5a1 	.word	0xc034c5a1

08002a08 <HAL_TIM_PeriodElapsedCallback>:
//clock
RTC_DS3231 rtc;

// callback function for stepper motor timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d102      	bne.n	8002a1e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  elStepper.update();
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002a1a:	f7fe fc71 	bl	8001300 <_ZN7Stepper6updateEv>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200000e0 	.word	0x200000e0
 8002a2c:	20000134 	.word	0x20000134

08002a30 <mainsetup>:
float pos, oldpos, targetAngle;
DateTime date;
long timeSeconds;
target Target;

void mainsetup(){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	elStepper.setFreq(100);
 8002a34:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002a68 <mainsetup+0x38>
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <mainsetup+0x3c>)
 8002a3a:	f7fe fc6d 	bl	8001318 <_ZN7Stepper7setFreqEf>
	currentpos = 0;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <mainsetup+0x40>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
	oldpos = 0;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <mainsetup+0x44>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
	pos=0;
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <mainsetup+0x48>)
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
	targetAngle = elEncoder.position();
 8002a54:	4809      	ldr	r0, [pc, #36]	; (8002a7c <mainsetup+0x4c>)
 8002a56:	f7fe fd4f 	bl	80014f8 <_ZN10absEncoder8positionEv>
 8002a5a:	eef0 7a40 	vmov.f32	s15, s0
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <mainsetup+0x50>)
 8002a60:	edc3 7a00 	vstr	s15, [r3]
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	42c80000 	.word	0x42c80000
 8002a6c:	20000134 	.word	0x20000134
 8002a70:	2000014c 	.word	0x2000014c
 8002a74:	20000154 	.word	0x20000154
 8002a78:	20000150 	.word	0x20000150
 8002a7c:	20000120 	.word	0x20000120
 8002a80:	20000158 	.word	0x20000158

08002a84 <mainloop>:

void mainloop(){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
	pos = elEncoder.position(); //get encoder angle position
 8002a8a:	4849      	ldr	r0, [pc, #292]	; (8002bb0 <mainloop+0x12c>)
 8002a8c:	f7fe fd34 	bl	80014f8 <_ZN10absEncoder8positionEv>
 8002a90:	eef0 7a40 	vmov.f32	s15, s0
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <mainloop+0x130>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
	float err = targetAngle-pos; //feedback
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <mainloop+0x134>)
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
 8002aa0:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <mainloop+0x130>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	edc7 7a04 	vstr	s15, [r7, #16]

	float p = 200;
 8002aae:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <mainloop+0x138>)
 8002ab0:	617b      	str	r3, [r7, #20]
	if (abs(err) < 1.0) p = 20;
 8002ab2:	ed97 0a04 	vldr	s0, [r7, #16]
 8002ab6:	f7fe fdd7 	bl	8001668 <_ZSt3absf>
 8002aba:	eeb0 7a40 	vmov.f32	s14, s0
 8002abe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	bf4c      	ite	mi
 8002acc:	2301      	movmi	r3, #1
 8002ace:	2300      	movpl	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <mainloop+0x56>
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <mainloop+0x13c>)
 8002ad8:	617b      	str	r3, [r7, #20]
	float vel = p*err; //proportional term
 8002ada:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	edc7 7a03 	vstr	s15, [r7, #12]

	//set velocity
	elStepper.setDir(vel > 0);
 8002aea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	bfcc      	ite	gt
 8002af8:	2301      	movgt	r3, #1
 8002afa:	2300      	movle	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4619      	mov	r1, r3
 8002b00:	4830      	ldr	r0, [pc, #192]	; (8002bc4 <mainloop+0x140>)
 8002b02:	f7fe fbcd 	bl	80012a0 <_ZN7Stepper6setDirEb>
	elStepper.setFreq(abs(vel));
 8002b06:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b0a:	f7fe fdad 	bl	8001668 <_ZSt3absf>
 8002b0e:	eef0 7a40 	vmov.f32	s15, s0
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	482b      	ldr	r0, [pc, #172]	; (8002bc4 <mainloop+0x140>)
 8002b18:	f7fe fbfe 	bl	8001318 <_ZN7Stepper7setFreqEf>

	date = rtc.now();
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fb36 	bl	8001190 <_ZN10RTC_DS32313nowEv>
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <mainloop+0x144>)
 8002b26:	1d3a      	adds	r2, r7, #4
 8002b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b2c:	6018      	str	r0, [r3, #0]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	8019      	strh	r1, [r3, #0]
	timeSeconds = date.secondstime();
 8002b32:	4825      	ldr	r0, [pc, #148]	; (8002bc8 <mainloop+0x144>)
 8002b34:	f7fe faf7 	bl	8001126 <_ZNK8DateTime11secondstimeEv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <mainloop+0x148>)
 8002b3c:	601a      	str	r2, [r3, #0]
	Target = getTargetAzimuth(timeSeconds);
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <mainloop+0x148>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe ff34 	bl	80019b0 <_Z16getTargetAzimuthm>
 8002b48:	eeb0 7a40 	vmov.f32	s14, s0
 8002b4c:	eef0 7a60 	vmov.f32	s15, s1
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <mainloop+0x14c>)
 8002b52:	ed83 7a00 	vstr	s14, [r3]
 8002b56:	edc3 7a01 	vstr	s15, [r3, #4]

	targetAngle = DEGREES(Target.elevation);
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <mainloop+0x14c>)
 8002b5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b60:	eeb0 0a67 	vmov.f32	s0, s15
 8002b64:	f7fe fe20 	bl	80017a8 <_Z7DEGREESf>
 8002b68:	eef0 7a40 	vmov.f32	s15, s0
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <mainloop+0x134>)
 8002b6e:	edc3 7a00 	vstr	s15, [r3]
	if(targetAngle < 5) targetAngle = 5;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <mainloop+0x134>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	d502      	bpl.n	8002b8c <mainloop+0x108>
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <mainloop+0x134>)
 8002b88:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <mainloop+0x150>)
 8002b8a:	601a      	str	r2, [r3, #0]
	if(targetAngle > 90) targetAngle = 90;
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <mainloop+0x134>)
 8002b8e:	edd3 7a00 	vldr	s15, [r3]
 8002b92:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002bd8 <mainloop+0x154>
 8002b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	dc00      	bgt.n	8002ba2 <mainloop+0x11e>
}
 8002ba0:	e002      	b.n	8002ba8 <mainloop+0x124>
	if(targetAngle > 90) targetAngle = 90;
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <mainloop+0x134>)
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	; (8002bdc <mainloop+0x158>)
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000120 	.word	0x20000120
 8002bb4:	20000150 	.word	0x20000150
 8002bb8:	20000158 	.word	0x20000158
 8002bbc:	43480000 	.word	0x43480000
 8002bc0:	41a00000 	.word	0x41a00000
 8002bc4:	20000134 	.word	0x20000134
 8002bc8:	2000015c 	.word	0x2000015c
 8002bcc:	20000164 	.word	0x20000164
 8002bd0:	20000168 	.word	0x20000168
 8002bd4:	40a00000 	.word	0x40a00000
 8002bd8:	42b40000 	.word	0x42b40000
 8002bdc:	42b40000 	.word	0x42b40000

08002be0 <_Z41__static_initialization_and_destruction_0ii>:
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d116      	bne.n	8002c1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d111      	bne.n	8002c1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, true, -5);
 8002bfa:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8002bfe:	2301      	movs	r3, #1
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002c02:	4911      	ldr	r1, [pc, #68]	; (8002c48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002c04:	4811      	ldr	r0, [pc, #68]	; (8002c4c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002c06:	f7fe fbc9 	bl	800139c <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf>
Stepper elStepper(ElStepperPorts,ElStepperPins, true);
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002c0e:	4911      	ldr	r1, [pc, #68]	; (8002c54 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002c10:	4811      	ldr	r0, [pc, #68]	; (8002c58 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002c12:	f7fe fb09 	bl	8001228 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb>
DateTime date;
 8002c16:	2100      	movs	r1, #0
 8002c18:	4810      	ldr	r0, [pc, #64]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002c1a:	f7fe f9b5 	bl	8000f88 <_ZN8DateTimeC1Em>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d105      	bne.n	8002c3a <_Z41__static_initialization_and_destruction_0ii+0x5a>
Stepper elStepper(ElStepperPorts,ElStepperPins, true);
 8002c2e:	480a      	ldr	r0, [pc, #40]	; (8002c58 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002c30:	f7fe fb16 	bl	8001260 <_ZN7StepperD1Ev>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, true, -5);
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002c36:	f7fe fbd3 	bl	80013e0 <_ZN10absEncoderD1Ev>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	08007ef4 	.word	0x08007ef4
 8002c48:	08007ecc 	.word	0x08007ecc
 8002c4c:	20000120 	.word	0x20000120
 8002c50:	08007f14 	.word	0x08007f14
 8002c54:	08007f08 	.word	0x08007f08
 8002c58:	20000134 	.word	0x20000134
 8002c5c:	2000015c 	.word	0x2000015c

08002c60 <_GLOBAL__sub_I__Z7RADIANSf>:
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f7ff ffb9 	bl	8002be0 <_Z41__static_initialization_and_destruction_0ii>
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_GLOBAL__sub_D__Z7RADIANSf>:
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7ff ffb1 	bl	8002be0 <_Z41__static_initialization_and_destruction_0ii>
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c84:	f000 fab6 	bl	80031f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c88:	f000 f810 	bl	8002cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c8c:	f000 f8f8 	bl	8002e80 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002c90:	f000 f876 	bl	8002d80 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002c94:	f000 f8a2 	bl	8002ddc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1); //enable steppers
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <main+0x28>)
 8002c9a:	f002 f840 	bl	8004d1e <HAL_TIM_Base_Start_IT>
  mainsetup();
 8002c9e:	f7ff fec7 	bl	8002a30 <mainsetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainloop();
 8002ca2:	f7ff feef 	bl	8002a84 <mainloop>
  {
 8002ca6:	e7fc      	b.n	8002ca2 <main+0x22>
 8002ca8:	200000e0 	.word	0x200000e0

08002cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b094      	sub	sp, #80	; 0x50
 8002cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cb2:	f107 0320 	add.w	r3, r7, #32
 8002cb6:	2230      	movs	r2, #48	; 0x30
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f005 f88a 	bl	8007dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <SystemClock_Config+0xcc>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <SystemClock_Config+0xcc>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <SystemClock_Config+0xcc>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cec:	2300      	movs	r3, #0
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <SystemClock_Config+0xd0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cf8:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <SystemClock_Config+0xd0>)
 8002cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <SystemClock_Config+0xd0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d16:	2302      	movs	r3, #2
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d20:	2304      	movs	r3, #4
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002d24:	2354      	movs	r3, #84	; 0x54
 8002d26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d30:	f107 0320 	add.w	r3, r7, #32
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 fb79 	bl	800442c <HAL_RCC_OscConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002d40:	f000 f938 	bl	8002fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d44:	230f      	movs	r3, #15
 8002d46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2102      	movs	r1, #2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fdd3 	bl	800490c <HAL_RCC_ClockConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002d6c:	f000 f922 	bl	8002fb4 <Error_Handler>
  }
}
 8002d70:	bf00      	nop
 8002d72:	3750      	adds	r7, #80	; 0x50
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000

08002d80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <MX_I2C2_Init+0x54>)
 8002d88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <MX_I2C2_Init+0x58>)
 8002d8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002da2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dbc:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <MX_I2C2_Init+0x50>)
 8002dbe:	f000 fd53 	bl	8003868 <HAL_I2C_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002dc8:	f000 f8f4 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	2000008c 	.word	0x2000008c
 8002dd4:	40005800 	.word	0x40005800
 8002dd8:	000186a0 	.word	0x000186a0

08002ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de2:	f107 0308 	add.w	r3, r7, #8
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df0:	463b      	mov	r3, r7
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002dfa:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <MX_TIM1_Init+0xa0>)
 8002dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1282;
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e00:	f240 5202 	movw	r2, #1282	; 0x502
 8002e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e08:	2210      	movs	r2, #16
 8002e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e26:	4814      	ldr	r0, [pc, #80]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e28:	f001 ff4e 	bl	8004cc8 <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002e32:	f000 f8bf 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	4619      	mov	r1, r3
 8002e42:	480d      	ldr	r0, [pc, #52]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e44:	f002 f897 	bl	8004f76 <HAL_TIM_ConfigClockSource>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002e4e:	f000 f8b1 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4806      	ldr	r0, [pc, #24]	; (8002e78 <MX_TIM1_Init+0x9c>)
 8002e60:	f002 fa82 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002e6a:	f000 f8a3 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200000e0 	.word	0x200000e0
 8002e7c:	40010000 	.word	0x40010000

08002e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b3e      	ldr	r3, [pc, #248]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a39      	ldr	r2, [pc, #228]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a32      	ldr	r2, [pc, #200]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <MX_GPIO_Init+0x120>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 8002f06:	2200      	movs	r2, #0
 8002f08:	f240 411f 	movw	r1, #1055	; 0x41f
 8002f0c:	4825      	ldr	r0, [pc, #148]	; (8002fa4 <MX_GPIO_Init+0x124>)
 8002f0e:	f000 fc77 	bl	8003800 <HAL_GPIO_WritePin>
                          |ElEna_Pin|AzEna_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <MX_GPIO_Init+0x128>)
 8002f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	4619      	mov	r1, r3
 8002f26:	4821      	ldr	r0, [pc, #132]	; (8002fac <MX_GPIO_Init+0x12c>)
 8002f28:	f000 fae8 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ElPul_Pin ElDir_Pin AzDir_Pin AzPul_Pin
                           ElEna_Pin AzEna_Pin */
  GPIO_InitStruct.Pin = ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 8002f2c:	f240 431f 	movw	r3, #1055	; 0x41f
 8002f30:	617b      	str	r3, [r7, #20]
                          |ElEna_Pin|AzEna_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	4817      	ldr	r0, [pc, #92]	; (8002fa4 <MX_GPIO_Init+0x124>)
 8002f46:	f000 fad9 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ElYellow_Pin ElGreen_Pin ElPurple_Pin ElWhite_Pin
                           ElGrey_Pin AzGreen_Pin AzYellow_Pin */
  GPIO_InitStruct.Pin = ElYellow_Pin|ElGreen_Pin|ElPurple_Pin|ElWhite_Pin
 8002f4a:	f44f 53df 	mov.w	r3, #7136	; 0x1be0
 8002f4e:	617b      	str	r3, [r7, #20]
                          |ElGrey_Pin|AzGreen_Pin|AzYellow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f54:	2301      	movs	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4811      	ldr	r0, [pc, #68]	; (8002fa4 <MX_GPIO_Init+0x124>)
 8002f60:	f000 facc 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : AzOrange_Pin AzRed_Pin AzBlack_Pin ElBlack_Pin */
  GPIO_InitStruct.Pin = AzOrange_Pin|AzRed_Pin|AzBlack_Pin|ElBlack_Pin;
 8002f64:	f44f 7358 	mov.w	r3, #864	; 0x360
 8002f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	4619      	mov	r1, r3
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <MX_GPIO_Init+0x12c>)
 8002f7a:	f000 fabf 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : AzWhite_Pin AzGrey_Pin AzPurple_Pin AzRedWhite_Pin
                           AzBlackWhite_Pin ElBlackWhite_Pin ElRedWhite_Pin ElRed_Pin
                           ElOrange_Pin */
  GPIO_InitStruct.Pin = AzWhite_Pin|AzGrey_Pin|AzPurple_Pin|AzRedWhite_Pin
 8002f7e:	f247 3336 	movw	r3, #29494	; 0x7336
 8002f82:	617b      	str	r3, [r7, #20]
                          |AzBlackWhite_Pin|ElBlackWhite_Pin|ElRedWhite_Pin|ElRed_Pin
                          |ElOrange_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4619      	mov	r1, r3
 8002f92:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <MX_GPIO_Init+0x130>)
 8002f94:	f000 fab2 	bl	80034fc <HAL_GPIO_Init>

}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	10210000 	.word	0x10210000
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	40020400 	.word	0x40020400

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fba:	e7fe      	b.n	8002fba <Error_Handler+0x6>

08002fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_MspInit+0x4c>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_MspInit+0x4c>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_MspInit+0x4c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_MspInit+0x4c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a08      	ldr	r2, [pc, #32]	; (8003008 <HAL_MspInit+0x4c>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_MspInit+0x4c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ffa:	2007      	movs	r0, #7
 8002ffc:	f000 fa3c 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800

0800300c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_I2C_MspInit+0xa4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d13c      	bne.n	80030a8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_D6_Pin;
 800304a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800304e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003050:	2312      	movs	r3, #18
 8003052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003054:	2301      	movs	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800305c:	2304      	movs	r3, #4
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SCL_D6_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	4619      	mov	r1, r3
 8003066:	4814      	ldr	r0, [pc, #80]	; (80030b8 <HAL_I2C_MspInit+0xac>)
 8003068:	f000 fa48 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_D3_Pin;
 800306c:	2308      	movs	r3, #8
 800306e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003070:	2312      	movs	r3, #18
 8003072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003074:	2301      	movs	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800307c:	2309      	movs	r3, #9
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SDA_D3_GPIO_Port, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	480c      	ldr	r0, [pc, #48]	; (80030b8 <HAL_I2C_MspInit+0xac>)
 8003088:	f000 fa38 	bl	80034fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_I2C_MspInit+0xa8>)
 8003096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_I2C_MspInit+0xa8>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80030a8:	bf00      	nop
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40005800 	.word	0x40005800
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020400 	.word	0x40020400

080030bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_TIM_Base_MspInit+0x48>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d115      	bne.n	80030fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_TIM_Base_MspInit+0x4c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <HAL_TIM_Base_MspInit+0x4c>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_TIM_Base_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2019      	movs	r0, #25
 80030f0:	f000 f9cd 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030f4:	2019      	movs	r0, #25
 80030f6:	f000 f9e6 	bl	80034c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40023800 	.word	0x40023800

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <NMI_Handler+0x4>

08003112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <HardFault_Handler+0x4>

08003118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <MemManage_Handler+0x4>

0800311e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <BusFault_Handler+0x4>

08003124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <UsageFault_Handler+0x4>

0800312a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003158:	f000 f89e 	bl	8003298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003166:	f001 fdfe 	bl	8004d66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200000e0 	.word	0x200000e0

08003174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <SystemInit+0x28>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	4a07      	ldr	r2, [pc, #28]	; (800319c <SystemInit+0x28>)
 8003180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <SystemInit+0x28>)
 800318a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800318e:	609a      	str	r2, [r3, #8]
#endif
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031a6:	e003      	b.n	80031b0 <LoopCopyDataInit>

080031a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031ae:	3104      	adds	r1, #4

080031b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031b0:	480b      	ldr	r0, [pc, #44]	; (80031e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031b8:	d3f6      	bcc.n	80031a8 <CopyDataInit>
  ldr  r2, =_sbss
 80031ba:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031bc:	e002      	b.n	80031c4 <LoopFillZerobss>

080031be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031c0:	f842 3b04 	str.w	r3, [r2], #4

080031c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031c8:	d3f9      	bcc.n	80031be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031ca:	f7ff ffd3 	bl	8003174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ce:	f004 fdd5 	bl	8007d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d2:	f7ff fd55 	bl	8002c80 <main>
  bx  lr    
 80031d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031d8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80031dc:	080083a8 	.word	0x080083a8
  ldr  r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031e4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80031e8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80031ec:	20000178 	.word	0x20000178

080031f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f0:	e7fe      	b.n	80031f0 <ADC_IRQHandler>
	...

080031f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0d      	ldr	r2, [pc, #52]	; (8003234 <HAL_Init+0x40>)
 80031fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_Init+0x40>)
 800320a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800320e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_Init+0x40>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321c:	2003      	movs	r0, #3
 800321e:	f000 f92b 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003222:	2000      	movs	r0, #0
 8003224:	f000 f808 	bl	8003238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003228:	f7ff fec8 	bl	8002fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00

08003238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_InitTick+0x54>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x58>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800324e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f943 	bl	80034e2 <HAL_SYSTICK_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00e      	b.n	8003284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d80a      	bhi.n	8003282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800326c:	2200      	movs	r2, #0
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f000 f90b 	bl	800348e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003278:	4a06      	ldr	r2, [pc, #24]	; (8003294 <HAL_InitTick+0x5c>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000000 	.word	0x20000000
 8003290:	20000008 	.word	0x20000008
 8003294:	20000004 	.word	0x20000004

08003298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_IncTick+0x20>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x24>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_IncTick+0x24>)
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000008 	.word	0x20000008
 80032bc:	20000174 	.word	0x20000174

080032c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return uwTick;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_GetTick+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000174 	.word	0x20000174

080032d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <__NVIC_SetPriorityGrouping+0x44>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f4:	4013      	ands	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800330a:	4a04      	ldr	r2, [pc, #16]	; (800331c <__NVIC_SetPriorityGrouping+0x44>)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	60d3      	str	r3, [r2, #12]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <__NVIC_GetPriorityGrouping+0x18>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 0307 	and.w	r3, r3, #7
}
 800332e:	4618      	mov	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db0b      	blt.n	8003366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <__NVIC_EnableIRQ+0x38>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2001      	movs	r0, #1
 800335e:	fa00 f202 	lsl.w	r2, r0, r2
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	e000e100 	.word	0xe000e100

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0a      	blt.n	80033a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <__NVIC_SetPriority+0x4c>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	440b      	add	r3, r1
 800339c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a0:	e00a      	b.n	80033b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4908      	ldr	r1, [pc, #32]	; (80033c8 <__NVIC_SetPriority+0x50>)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3b04      	subs	r3, #4
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	440b      	add	r3, r1
 80033b6:	761a      	strb	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f1c3 0307 	rsb	r3, r3, #7
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf28      	it	cs
 80033ea:	2304      	movcs	r3, #4
 80033ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d902      	bls.n	80033fc <NVIC_EncodePriority+0x30>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3b03      	subs	r3, #3
 80033fa:	e000      	b.n	80033fe <NVIC_EncodePriority+0x32>
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43d9      	mvns	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	4313      	orrs	r3, r2
         );
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003444:	d301      	bcc.n	800344a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003446:	2301      	movs	r3, #1
 8003448:	e00f      	b.n	800346a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <SysTick_Config+0x40>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003452:	210f      	movs	r1, #15
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f7ff ff8e 	bl	8003378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SysTick_Config+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <SysTick_Config+0x40>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff29 	bl	80032d8 <__NVIC_SetPriorityGrouping>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a0:	f7ff ff3e 	bl	8003320 <__NVIC_GetPriorityGrouping>
 80034a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ff8e 	bl	80033cc <NVIC_EncodePriority>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff5d 	bl	8003378 <__NVIC_SetPriority>
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff31 	bl	800333c <__NVIC_EnableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffa2 	bl	8003434 <SysTick_Config>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e159      	b.n	80037cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003518:	2201      	movs	r2, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	f040 8148 	bne.w	80037c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d00b      	beq.n	8003556 <HAL_GPIO_Init+0x5a>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d007      	beq.n	8003556 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800354a:	2b11      	cmp	r3, #17
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b12      	cmp	r3, #18
 8003554:	d130      	bne.n	80035b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2203      	movs	r2, #3
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358c:	2201      	movs	r2, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 0201 	and.w	r2, r3, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0xfc>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b12      	cmp	r3, #18
 80035f6:	d123      	bne.n	8003640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3208      	adds	r2, #8
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	08da      	lsrs	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3208      	adds	r2, #8
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a2 	beq.w	80037c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b56      	ldr	r3, [pc, #344]	; (80037e0 <HAL_GPIO_Init+0x2e4>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a55      	ldr	r2, [pc, #340]	; (80037e0 <HAL_GPIO_Init+0x2e4>)
 800368c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_GPIO_Init+0x2e4>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369e:	4a51      	ldr	r2, [pc, #324]	; (80037e4 <HAL_GPIO_Init+0x2e8>)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a48      	ldr	r2, [pc, #288]	; (80037e8 <HAL_GPIO_Init+0x2ec>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d019      	beq.n	80036fe <HAL_GPIO_Init+0x202>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a47      	ldr	r2, [pc, #284]	; (80037ec <HAL_GPIO_Init+0x2f0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_GPIO_Init+0x1fe>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a46      	ldr	r2, [pc, #280]	; (80037f0 <HAL_GPIO_Init+0x2f4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00d      	beq.n	80036f6 <HAL_GPIO_Init+0x1fa>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <HAL_GPIO_Init+0x2f8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <HAL_GPIO_Init+0x1f6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a44      	ldr	r2, [pc, #272]	; (80037f8 <HAL_GPIO_Init+0x2fc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_GPIO_Init+0x1f2>
 80036ea:	2304      	movs	r3, #4
 80036ec:	e008      	b.n	8003700 <HAL_GPIO_Init+0x204>
 80036ee:	2307      	movs	r3, #7
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x204>
 80036f2:	2303      	movs	r3, #3
 80036f4:	e004      	b.n	8003700 <HAL_GPIO_Init+0x204>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e002      	b.n	8003700 <HAL_GPIO_Init+0x204>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_GPIO_Init+0x204>
 80036fe:	2300      	movs	r3, #0
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	f002 0203 	and.w	r2, r2, #3
 8003706:	0092      	lsls	r2, r2, #2
 8003708:	4093      	lsls	r3, r2
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003710:	4934      	ldr	r1, [pc, #208]	; (80037e4 <HAL_GPIO_Init+0x2e8>)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800371e:	4b37      	ldr	r3, [pc, #220]	; (80037fc <HAL_GPIO_Init+0x300>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003742:	4a2e      	ldr	r2, [pc, #184]	; (80037fc <HAL_GPIO_Init+0x300>)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_GPIO_Init+0x300>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_GPIO_Init+0x300>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_GPIO_Init+0x300>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003796:	4a19      	ldr	r2, [pc, #100]	; (80037fc <HAL_GPIO_Init+0x300>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_GPIO_Init+0x300>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c0:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_GPIO_Init+0x300>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3301      	adds	r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	f67f aea2 	bls.w	8003518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037d4:	bf00      	nop
 80037d6:	3724      	adds	r7, #36	; 0x24
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40020800 	.word	0x40020800
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40013c00 	.word	0x40013c00

08003800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800381c:	e003      	b.n	8003826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	041a      	lsls	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	619a      	str	r2, [r3, #24]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	401a      	ands	r2, r3
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	429a      	cmp	r2, r3
 800384a:	d104      	bne.n	8003856 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	041a      	lsls	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003854:	e002      	b.n	800385c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	619a      	str	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e11f      	b.n	8003aba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff fbbc 	bl	800300c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038cc:	f001 f9e8 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80038d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a7b      	ldr	r2, [pc, #492]	; (8003ac4 <HAL_I2C_Init+0x25c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d807      	bhi.n	80038ec <HAL_I2C_Init+0x84>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a7a      	ldr	r2, [pc, #488]	; (8003ac8 <HAL_I2C_Init+0x260>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bf94      	ite	ls
 80038e4:	2301      	movls	r3, #1
 80038e6:	2300      	movhi	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e006      	b.n	80038fa <HAL_I2C_Init+0x92>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a77      	ldr	r2, [pc, #476]	; (8003acc <HAL_I2C_Init+0x264>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	bf94      	ite	ls
 80038f4:	2301      	movls	r3, #1
 80038f6:	2300      	movhi	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0db      	b.n	8003aba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <HAL_I2C_Init+0x268>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0c9b      	lsrs	r3, r3, #18
 800390c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a64      	ldr	r2, [pc, #400]	; (8003ac4 <HAL_I2C_Init+0x25c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d802      	bhi.n	800393c <HAL_I2C_Init+0xd4>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3301      	adds	r3, #1
 800393a:	e009      	b.n	8003950 <HAL_I2C_Init+0xe8>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	4a63      	ldr	r2, [pc, #396]	; (8003ad4 <HAL_I2C_Init+0x26c>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	3301      	adds	r3, #1
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	430b      	orrs	r3, r1
 8003956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4956      	ldr	r1, [pc, #344]	; (8003ac4 <HAL_I2C_Init+0x25c>)
 800396c:	428b      	cmp	r3, r1
 800396e:	d80d      	bhi.n	800398c <HAL_I2C_Init+0x124>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1e59      	subs	r1, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fbb1 f3f3 	udiv	r3, r1, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	2b04      	cmp	r3, #4
 8003986:	bf38      	it	cc
 8003988:	2304      	movcc	r3, #4
 800398a:	e04f      	b.n	8003a2c <HAL_I2C_Init+0x1c4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d111      	bne.n	80039b8 <HAL_I2C_Init+0x150>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e012      	b.n	80039de <HAL_I2C_Init+0x176>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x17e>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <HAL_I2C_Init+0x1c4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10e      	bne.n	8003a0c <HAL_I2C_Init+0x1a4>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e58      	subs	r0, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	440b      	add	r3, r1
 80039fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0a:	e00f      	b.n	8003a2c <HAL_I2C_Init+0x1c4>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6809      	ldr	r1, [r1, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6911      	ldr	r1, [r2, #16]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	000186a0 	.word	0x000186a0
 8003ac8:	001e847f 	.word	0x001e847f
 8003acc:	003d08ff 	.word	0x003d08ff
 8003ad0:	431bde83 	.word	0x431bde83
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08c      	sub	sp, #48	; 0x30
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	817b      	strh	r3, [r7, #10]
 8003aea:	460b      	mov	r3, r1
 8003aec:	813b      	strh	r3, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af2:	f7ff fbe5 	bl	80032c0 <HAL_GetTick>
 8003af6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	f040 8208 	bne.w	8003f16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2319      	movs	r3, #25
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	497b      	ldr	r1, [pc, #492]	; (8003cfc <HAL_I2C_Mem_Read+0x224>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 faef 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e1fb      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_I2C_Mem_Read+0x56>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e1f4      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d007      	beq.n	8003b54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2222      	movs	r2, #34	; 0x22
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a5b      	ldr	r2, [pc, #364]	; (8003d00 <HAL_I2C_Mem_Read+0x228>)
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b96:	88f8      	ldrh	r0, [r7, #6]
 8003b98:	893a      	ldrh	r2, [r7, #8]
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f9bc 	bl	8003f24 <I2C_RequestMemoryRead>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1b0      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d113      	bne.n	8003be6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e184      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d11b      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e164      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d11b      	bne.n	8003c66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	e144      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c7c:	e138      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	f200 80f1 	bhi.w	8003e6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d123      	bne.n	8003cd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fb44 	bl	8004322 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e139      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd6:	e10b      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d14e      	bne.n	8003d7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4906      	ldr	r1, [pc, #24]	; (8003d04 <HAL_I2C_Mem_Read+0x22c>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fa02 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e10e      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
 8003cfa:	bf00      	nop
 8003cfc:	00100002 	.word	0x00100002
 8003d00:	ffff0000 	.word	0xffff0000
 8003d04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d7c:	e0b8      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	2200      	movs	r2, #0
 8003d86:	4966      	ldr	r1, [pc, #408]	; (8003f20 <HAL_I2C_Mem_Read+0x448>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f9b3 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0bf      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2200      	movs	r2, #0
 8003de2:	494f      	ldr	r1, [pc, #316]	; (8003f20 <HAL_I2C_Mem_Read+0x448>)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f985 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e091      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e68:	e042      	b.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fa57 	bl	8004322 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e04c      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d118      	bne.n	8003ef0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f aec2 	bne.w	8003c7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	00010004 	.word	0x00010004

08003f24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f8c2 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f84:	d103      	bne.n	8003f8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0aa      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	4952      	ldr	r1, [pc, #328]	; (80040f0 <I2C_RequestMemoryRead+0x1cc>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f8fa 	bl	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e097      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f964 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e076      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e021      	b.n	8004050 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29b      	uxth	r3, r3
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f93e 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e050      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004046:	893b      	ldrh	r3, [r7, #8]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	6a39      	ldr	r1, [r7, #32]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f923 	bl	80042a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b04      	cmp	r3, #4
 8004066:	d107      	bne.n	8004078 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e035      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2200      	movs	r2, #0
 8004094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f82b 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d103      	bne.n	80040bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e013      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	4906      	ldr	r1, [pc, #24]	; (80040f0 <I2C_RequestMemoryRead+0x1cc>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f863 	bl	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	e025      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d021      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7ff f8d7 	bl	80032c0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e023      	b.n	800419a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10d      	bne.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x84>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	e00c      	b.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	429a      	cmp	r2, r3
 8004196:	d0b6      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041b0:	e051      	b.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d123      	bne.n	800420a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e046      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d021      	beq.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7ff f855 	bl	80032c0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d116      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e020      	b.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10c      	bne.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	e00b      	b.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d18d      	bne.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ac:	e02d      	b.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f88d 	bl	80043ce <I2C_IsAcknowledgeFailed>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e02d      	b.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d021      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe fffb 	bl	80032c0 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e007      	b.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d1ca      	bne.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800432e:	e042      	b.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b10      	cmp	r3, #16
 800433c:	d119      	bne.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0210 	mvn.w	r2, #16
 8004346:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e029      	b.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fe ffa5 	bl	80032c0 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e007      	b.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d1b5      	bne.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e4:	d11b      	bne.n	800441e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e25b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d075      	beq.n	8004536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444a:	4ba3      	ldr	r3, [pc, #652]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00c      	beq.n	8004470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004456:	4ba0      	ldr	r3, [pc, #640]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d112      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b9d      	ldr	r3, [pc, #628]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b99      	ldr	r3, [pc, #612]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d05b      	beq.n	8004534 <HAL_RCC_OscConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d157      	bne.n	8004534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e236      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x74>
 8004492:	4b91      	ldr	r3, [pc, #580]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a90      	ldr	r2, [pc, #576]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x98>
 80044aa:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a8a      	ldr	r2, [pc, #552]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b88      	ldr	r3, [pc, #544]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a87      	ldr	r2, [pc, #540]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044c4:	4b84      	ldr	r3, [pc, #528]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a83      	ldr	r2, [pc, #524]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a80      	ldr	r2, [pc, #512]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe feec 	bl	80032c0 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fe fee8 	bl	80032c0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1fb      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b76      	ldr	r3, [pc, #472]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xc0>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fe fed8 	bl	80032c0 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004514:	f7fe fed4 	bl	80032c0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1e7      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xe8>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004542:	4b65      	ldr	r3, [pc, #404]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b5f      	ldr	r3, [pc, #380]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b5c      	ldr	r3, [pc, #368]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1bb      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4952      	ldr	r1, [pc, #328]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b4f      	ldr	r3, [pc, #316]	; (80046dc <HAL_RCC_OscConfig+0x2b0>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fe fe8d 	bl	80032c0 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fe fe89 	bl	80032c0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e19c      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b46      	ldr	r3, [pc, #280]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4940      	ldr	r1, [pc, #256]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_OscConfig+0x2b0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fe fe6c 	bl	80032c0 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fe fe68 	bl	80032c0 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e17b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d030      	beq.n	8004678 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x2b4>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fe fe4c 	bl	80032c0 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462c:	f7fe fe48 	bl	80032c0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e15b      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x200>
 800464a:	e015      	b.n	8004678 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_RCC_OscConfig+0x2b4>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fe fe35 	bl	80032c0 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465a:	f7fe fe31 	bl	80032c0 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e144      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800466e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a0 	beq.w	80047c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6413      	str	r3, [r2, #64]	; 0x40
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <HAL_RCC_OscConfig+0x2b8>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ce:	f7fe fdf7 	bl	80032c0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	e011      	b.n	80046fa <HAL_RCC_OscConfig+0x2ce>
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	42470000 	.word	0x42470000
 80046e0:	42470e80 	.word	0x42470e80
 80046e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fe fdea 	bl	80032c0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0fd      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <HAL_RCC_OscConfig+0x4d4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x2f0>
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a7c      	ldr	r2, [pc, #496]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e01c      	b.n	8004756 <HAL_RCC_OscConfig+0x32a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b05      	cmp	r3, #5
 8004722:	d10c      	bne.n	800473e <HAL_RCC_OscConfig+0x312>
 8004724:	4b77      	ldr	r3, [pc, #476]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	4a76      	ldr	r2, [pc, #472]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	6713      	str	r3, [r2, #112]	; 0x70
 8004730:	4b74      	ldr	r3, [pc, #464]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a73      	ldr	r2, [pc, #460]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	e00b      	b.n	8004756 <HAL_RCC_OscConfig+0x32a>
 800473e:	4b71      	ldr	r3, [pc, #452]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a70      	ldr	r2, [pc, #448]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	4b6e      	ldr	r3, [pc, #440]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a6d      	ldr	r2, [pc, #436]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d015      	beq.n	800478a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fe fdaf 	bl	80032c0 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fe fdab 	bl	80032c0 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0bc      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	4b61      	ldr	r3, [pc, #388]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ee      	beq.n	8004766 <HAL_RCC_OscConfig+0x33a>
 8004788:	e014      	b.n	80047b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fe fd99 	bl	80032c0 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004790:	e00a      	b.n	80047a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7fe fd95 	bl	80032c0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0a6      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a8:	4b56      	ldr	r3, [pc, #344]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ee      	bne.n	8004792 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ba:	4b52      	ldr	r3, [pc, #328]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8092 	beq.w	80048f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d0:	4b4c      	ldr	r3, [pc, #304]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d05c      	beq.n	8004896 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d141      	bne.n	8004868 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b48      	ldr	r3, [pc, #288]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fe fd69 	bl	80032c0 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fe fd65 	bl	80032c0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e078      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004804:	4b3f      	ldr	r3, [pc, #252]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	019b      	lsls	r3, r3, #6
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	3b01      	subs	r3, #1
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	061b      	lsls	r3, r3, #24
 8004834:	4933      	ldr	r1, [pc, #204]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483a:	4b33      	ldr	r3, [pc, #204]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fe fd3e 	bl	80032c0 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004848:	f7fe fd3a 	bl	80032c0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e04d      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x41c>
 8004866:	e045      	b.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b27      	ldr	r3, [pc, #156]	; (8004908 <HAL_RCC_OscConfig+0x4dc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fe fd27 	bl	80032c0 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004876:	f7fe fd23 	bl	80032c0 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e036      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x44a>
 8004894:	e02e      	b.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e029      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_RCC_OscConfig+0x4d8>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d115      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ca:	4013      	ands	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40007000 	.word	0x40007000
 8004904:	40023800 	.word	0x40023800
 8004908:	42470060 	.word	0x42470060

0800490c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cc      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b68      	ldr	r3, [pc, #416]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d90c      	bls.n	8004948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a58      	ldr	r2, [pc, #352]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800496a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a52      	ldr	r2, [pc, #328]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d044      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d119      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d003      	beq.n	80049ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e067      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4934      	ldr	r1, [pc, #208]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fe fc60 	bl	80032c0 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fe fc5c 	bl	80032c0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e04f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d20c      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b22      	ldr	r3, [pc, #136]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4601      	mov	r1, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	5cd3      	ldrb	r3, [r2, r3]
 8004aa6:	fa21 f303 	lsr.w	r3, r1, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fbc0 	bl	8003238 <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023c00 	.word	0x40023c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	08007f1c 	.word	0x08007f1c
 8004ad0:	20000000 	.word	0x20000000
 8004ad4:	20000004 	.word	0x20000004

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aee:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d007      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x32>
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d008      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0x38>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 80b4 	bne.w	8004c6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b04:	4b5e      	ldr	r3, [pc, #376]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b06:	60bb      	str	r3, [r7, #8]
       break;
 8004b08:	e0b3      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b0c:	60bb      	str	r3, [r7, #8]
      break;
 8004b0e:	e0b0      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b10:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1a:	4b58      	ldr	r3, [pc, #352]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d04a      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b26:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	f04f 0400 	mov.w	r4, #0
 8004b30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	ea03 0501 	and.w	r5, r3, r1
 8004b3c:	ea04 0602 	and.w	r6, r4, r2
 8004b40:	4629      	mov	r1, r5
 8004b42:	4632      	mov	r2, r6
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	f04f 0400 	mov.w	r4, #0
 8004b4c:	0154      	lsls	r4, r2, #5
 8004b4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b52:	014b      	lsls	r3, r1, #5
 8004b54:	4619      	mov	r1, r3
 8004b56:	4622      	mov	r2, r4
 8004b58:	1b49      	subs	r1, r1, r5
 8004b5a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	0194      	lsls	r4, r2, #6
 8004b68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b6c:	018b      	lsls	r3, r1, #6
 8004b6e:	1a5b      	subs	r3, r3, r1
 8004b70:	eb64 0402 	sbc.w	r4, r4, r2
 8004b74:	f04f 0100 	mov.w	r1, #0
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	00e2      	lsls	r2, r4, #3
 8004b7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b82:	00d9      	lsls	r1, r3, #3
 8004b84:	460b      	mov	r3, r1
 8004b86:	4614      	mov	r4, r2
 8004b88:	195b      	adds	r3, r3, r5
 8004b8a:	eb44 0406 	adc.w	r4, r4, r6
 8004b8e:	f04f 0100 	mov.w	r1, #0
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	0262      	lsls	r2, r4, #9
 8004b98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b9c:	0259      	lsls	r1, r3, #9
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	461a      	mov	r2, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	f7fb ffee 	bl	8000b90 <__aeabi_uldivmod>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e049      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	f04f 0400 	mov.w	r4, #0
 8004bc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	ea03 0501 	and.w	r5, r3, r1
 8004bd2:	ea04 0602 	and.w	r6, r4, r2
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	4632      	mov	r2, r6
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	f04f 0400 	mov.w	r4, #0
 8004be2:	0154      	lsls	r4, r2, #5
 8004be4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004be8:	014b      	lsls	r3, r1, #5
 8004bea:	4619      	mov	r1, r3
 8004bec:	4622      	mov	r2, r4
 8004bee:	1b49      	subs	r1, r1, r5
 8004bf0:	eb62 0206 	sbc.w	r2, r2, r6
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	f04f 0400 	mov.w	r4, #0
 8004bfc:	0194      	lsls	r4, r2, #6
 8004bfe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c02:	018b      	lsls	r3, r1, #6
 8004c04:	1a5b      	subs	r3, r3, r1
 8004c06:	eb64 0402 	sbc.w	r4, r4, r2
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	00e2      	lsls	r2, r4, #3
 8004c14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c18:	00d9      	lsls	r1, r3, #3
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	195b      	adds	r3, r3, r5
 8004c20:	eb44 0406 	adc.w	r4, r4, r6
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	02a2      	lsls	r2, r4, #10
 8004c2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c32:	0299      	lsls	r1, r3, #10
 8004c34:	460b      	mov	r3, r1
 8004c36:	4614      	mov	r4, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f04f 0400 	mov.w	r4, #0
 8004c42:	461a      	mov	r2, r3
 8004c44:	4623      	mov	r3, r4
 8004c46:	f7fb ffa3 	bl	8000b90 <__aeabi_uldivmod>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
      break;
 8004c6a:	e002      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c6e:	60bb      	str	r3, [r7, #8]
      break;
 8004c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c72:	68bb      	ldr	r3, [r7, #8]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	007a1200 	.word	0x007a1200

08004c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000000 	.word	0x20000000

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4601      	mov	r1, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0a9b      	lsrs	r3, r3, #10
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb6:	5cd3      	ldrb	r3, [r2, r3]
 8004cb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	08007f2c 	.word	0x08007f2c

08004cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e01d      	b.n	8004d16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fe f9e4 	bl	80030bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 fa14 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b06      	cmp	r3, #6
 8004d46:	d007      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d122      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d11b      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0202 	mvn.w	r2, #2
 8004d92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f9a5 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004dae:	e005      	b.n	8004dbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f997 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9a8 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d122      	bne.n	8004e16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d11b      	bne.n	8004e16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0204 	mvn.w	r2, #4
 8004de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f97b 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004e02:	e005      	b.n	8004e10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f96d 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f97e 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d122      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d11b      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f06f 0208 	mvn.w	r2, #8
 8004e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f951 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004e56:	e005      	b.n	8004e64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f943 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f954 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d122      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d11b      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f06f 0210 	mvn.w	r2, #16
 8004e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2208      	movs	r2, #8
 8004e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f927 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004eaa:	e005      	b.n	8004eb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f919 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f92a 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d10e      	bne.n	8004eea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d107      	bne.n	8004eea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0201 	mvn.w	r2, #1
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fd fd8f 	bl	8002a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d10e      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d107      	bne.n	8004f16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 faa1 	bl	8005458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f20:	2b40      	cmp	r3, #64	; 0x40
 8004f22:	d10e      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d107      	bne.n	8004f42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8ef 	bl	8005120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d10e      	bne.n	8004f6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d107      	bne.n	8004f6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f06f 0220 	mvn.w	r2, #32
 8004f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fa6b 	bl	8005444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_ConfigClockSource+0x18>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e0a6      	b.n	80050dc <HAL_TIM_ConfigClockSource+0x166>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d067      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x120>
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d80b      	bhi.n	8004fe2 <HAL_TIM_ConfigClockSource+0x6c>
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d073      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x140>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d802      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x62>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d06f      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fd6:	e078      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d06c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x140>
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d06a      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004fe0:	e073      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fe2:	2b70      	cmp	r3, #112	; 0x70
 8004fe4:	d00d      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x8c>
 8004fe6:	2b70      	cmp	r3, #112	; 0x70
 8004fe8:	d804      	bhi.n	8004ff4 <HAL_TIM_ConfigClockSource+0x7e>
 8004fea:	2b50      	cmp	r3, #80	; 0x50
 8004fec:	d033      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0xe0>
 8004fee:	2b60      	cmp	r3, #96	; 0x60
 8004ff0:	d041      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ff2:	e06a      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff8:	d066      	beq.n	80050c8 <HAL_TIM_ConfigClockSource+0x152>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffe:	d017      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005000:	e063      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f000 f989 	bl	8005328 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005024:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	609a      	str	r2, [r3, #8]
      break;
 800502e:	e04c      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6899      	ldr	r1, [r3, #8]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f000 f972 	bl	8005328 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005052:	609a      	str	r2, [r3, #8]
      break;
 8005054:	e039      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	461a      	mov	r2, r3
 8005064:	f000 f8e6 	bl	8005234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2150      	movs	r1, #80	; 0x50
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f93f 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 8005074:	e029      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	461a      	mov	r2, r3
 8005084:	f000 f905 	bl	8005292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2160      	movs	r1, #96	; 0x60
 800508e:	4618      	mov	r0, r3
 8005090:	f000 f92f 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 8005094:	e019      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 f8c6 	bl	8005234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2140      	movs	r1, #64	; 0x40
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f91f 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 80050b4:	e009      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f000 f916 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 80050c6:	e000      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x154>
      break;
 80050c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a34      	ldr	r2, [pc, #208]	; (8005218 <TIM_Base_SetConfig+0xe4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00f      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005152:	d00b      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a31      	ldr	r2, [pc, #196]	; (800521c <TIM_Base_SetConfig+0xe8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a30      	ldr	r2, [pc, #192]	; (8005220 <TIM_Base_SetConfig+0xec>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a2f      	ldr	r2, [pc, #188]	; (8005224 <TIM_Base_SetConfig+0xf0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d108      	bne.n	800517e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <TIM_Base_SetConfig+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d017      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a22      	ldr	r2, [pc, #136]	; (800521c <TIM_Base_SetConfig+0xe8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a21      	ldr	r2, [pc, #132]	; (8005220 <TIM_Base_SetConfig+0xec>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a20      	ldr	r2, [pc, #128]	; (8005224 <TIM_Base_SetConfig+0xf0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <TIM_Base_SetConfig+0xf4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a1e      	ldr	r2, [pc, #120]	; (800522c <TIM_Base_SetConfig+0xf8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <TIM_Base_SetConfig+0xfc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a08      	ldr	r2, [pc, #32]	; (8005218 <TIM_Base_SetConfig+0xe4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0201 	bic.w	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800525e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 030a 	bic.w	r3, r3, #10
 8005270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0210 	bic.w	r2, r3, #16
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	f043 0307 	orr.w	r3, r3, #7
 8005314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	021a      	lsls	r2, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	431a      	orrs	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4313      	orrs	r3, r2
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800537c:	2302      	movs	r3, #2
 800537e:	e050      	b.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d013      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a13      	ldr	r2, [pc, #76]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10c      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	4313      	orrs	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40014000 	.word	0x40014000

08005444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <_ZdlPvj>:
 800546c:	f000 b800 	b.w	8005470 <_ZdlPv>

08005470 <_ZdlPv>:
 8005470:	f002 bca8 	b.w	8007dc4 <free>

08005474 <cosf>:
 8005474:	ee10 3a10 	vmov	r3, s0
 8005478:	b507      	push	{r0, r1, r2, lr}
 800547a:	4a1c      	ldr	r2, [pc, #112]	; (80054ec <cosf+0x78>)
 800547c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005480:	4293      	cmp	r3, r2
 8005482:	dc04      	bgt.n	800548e <cosf+0x1a>
 8005484:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80054f0 <cosf+0x7c>
 8005488:	f001 fdb6 	bl	8006ff8 <__kernel_cosf>
 800548c:	e004      	b.n	8005498 <cosf+0x24>
 800548e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005492:	db04      	blt.n	800549e <cosf+0x2a>
 8005494:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005498:	b003      	add	sp, #12
 800549a:	f85d fb04 	ldr.w	pc, [sp], #4
 800549e:	4668      	mov	r0, sp
 80054a0:	f001 fc7a 	bl	8006d98 <__ieee754_rem_pio2f>
 80054a4:	f000 0003 	and.w	r0, r0, #3
 80054a8:	2801      	cmp	r0, #1
 80054aa:	d007      	beq.n	80054bc <cosf+0x48>
 80054ac:	2802      	cmp	r0, #2
 80054ae:	d00e      	beq.n	80054ce <cosf+0x5a>
 80054b0:	b9a0      	cbnz	r0, 80054dc <cosf+0x68>
 80054b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80054b6:	ed9d 0a00 	vldr	s0, [sp]
 80054ba:	e7e5      	b.n	8005488 <cosf+0x14>
 80054bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80054c0:	ed9d 0a00 	vldr	s0, [sp]
 80054c4:	f002 f878 	bl	80075b8 <__kernel_sinf>
 80054c8:	eeb1 0a40 	vneg.f32	s0, s0
 80054cc:	e7e4      	b.n	8005498 <cosf+0x24>
 80054ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80054d2:	ed9d 0a00 	vldr	s0, [sp]
 80054d6:	f001 fd8f 	bl	8006ff8 <__kernel_cosf>
 80054da:	e7f5      	b.n	80054c8 <cosf+0x54>
 80054dc:	2001      	movs	r0, #1
 80054de:	eddd 0a01 	vldr	s1, [sp, #4]
 80054e2:	ed9d 0a00 	vldr	s0, [sp]
 80054e6:	f002 f867 	bl	80075b8 <__kernel_sinf>
 80054ea:	e7d5      	b.n	8005498 <cosf+0x24>
 80054ec:	3f490fd8 	.word	0x3f490fd8
 80054f0:	00000000 	.word	0x00000000

080054f4 <sinf>:
 80054f4:	ee10 3a10 	vmov	r3, s0
 80054f8:	b507      	push	{r0, r1, r2, lr}
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <sinf+0x7c>)
 80054fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005500:	4293      	cmp	r3, r2
 8005502:	dc05      	bgt.n	8005510 <sinf+0x1c>
 8005504:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005574 <sinf+0x80>
 8005508:	2000      	movs	r0, #0
 800550a:	f002 f855 	bl	80075b8 <__kernel_sinf>
 800550e:	e004      	b.n	800551a <sinf+0x26>
 8005510:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005514:	db04      	blt.n	8005520 <sinf+0x2c>
 8005516:	ee30 0a40 	vsub.f32	s0, s0, s0
 800551a:	b003      	add	sp, #12
 800551c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005520:	4668      	mov	r0, sp
 8005522:	f001 fc39 	bl	8006d98 <__ieee754_rem_pio2f>
 8005526:	f000 0003 	and.w	r0, r0, #3
 800552a:	2801      	cmp	r0, #1
 800552c:	d008      	beq.n	8005540 <sinf+0x4c>
 800552e:	2802      	cmp	r0, #2
 8005530:	d00d      	beq.n	800554e <sinf+0x5a>
 8005532:	b9b0      	cbnz	r0, 8005562 <sinf+0x6e>
 8005534:	2001      	movs	r0, #1
 8005536:	eddd 0a01 	vldr	s1, [sp, #4]
 800553a:	ed9d 0a00 	vldr	s0, [sp]
 800553e:	e7e4      	b.n	800550a <sinf+0x16>
 8005540:	eddd 0a01 	vldr	s1, [sp, #4]
 8005544:	ed9d 0a00 	vldr	s0, [sp]
 8005548:	f001 fd56 	bl	8006ff8 <__kernel_cosf>
 800554c:	e7e5      	b.n	800551a <sinf+0x26>
 800554e:	2001      	movs	r0, #1
 8005550:	eddd 0a01 	vldr	s1, [sp, #4]
 8005554:	ed9d 0a00 	vldr	s0, [sp]
 8005558:	f002 f82e 	bl	80075b8 <__kernel_sinf>
 800555c:	eeb1 0a40 	vneg.f32	s0, s0
 8005560:	e7db      	b.n	800551a <sinf+0x26>
 8005562:	eddd 0a01 	vldr	s1, [sp, #4]
 8005566:	ed9d 0a00 	vldr	s0, [sp]
 800556a:	f001 fd45 	bl	8006ff8 <__kernel_cosf>
 800556e:	e7f5      	b.n	800555c <sinf+0x68>
 8005570:	3f490fd8 	.word	0x3f490fd8
 8005574:	00000000 	.word	0x00000000

08005578 <tanf>:
 8005578:	ee10 3a10 	vmov	r3, s0
 800557c:	b507      	push	{r0, r1, r2, lr}
 800557e:	4a10      	ldr	r2, [pc, #64]	; (80055c0 <tanf+0x48>)
 8005580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005584:	4293      	cmp	r3, r2
 8005586:	dc05      	bgt.n	8005594 <tanf+0x1c>
 8005588:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80055c4 <tanf+0x4c>
 800558c:	2001      	movs	r0, #1
 800558e:	f002 f85b 	bl	8007648 <__kernel_tanf>
 8005592:	e004      	b.n	800559e <tanf+0x26>
 8005594:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005598:	db04      	blt.n	80055a4 <tanf+0x2c>
 800559a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800559e:	b003      	add	sp, #12
 80055a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80055a4:	4668      	mov	r0, sp
 80055a6:	f001 fbf7 	bl	8006d98 <__ieee754_rem_pio2f>
 80055aa:	0040      	lsls	r0, r0, #1
 80055ac:	f000 0002 	and.w	r0, r0, #2
 80055b0:	f1c0 0001 	rsb	r0, r0, #1
 80055b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80055b8:	ed9d 0a00 	vldr	s0, [sp]
 80055bc:	e7e7      	b.n	800558e <tanf+0x16>
 80055be:	bf00      	nop
 80055c0:	3f490fda 	.word	0x3f490fda
 80055c4:	00000000 	.word	0x00000000

080055c8 <fmod>:
 80055c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055cc:	ed2d 8b02 	vpush	{d8}
 80055d0:	b08b      	sub	sp, #44	; 0x2c
 80055d2:	ec55 4b10 	vmov	r4, r5, d0
 80055d6:	ec57 6b11 	vmov	r6, r7, d1
 80055da:	f000 fa7b 	bl	8005ad4 <__ieee754_fmod>
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <fmod+0xc0>)
 80055e0:	eeb0 8a40 	vmov.f32	s16, s0
 80055e4:	eef0 8a60 	vmov.f32	s17, s1
 80055e8:	f993 8000 	ldrsb.w	r8, [r3]
 80055ec:	f1b8 3fff 	cmp.w	r8, #4294967295
 80055f0:	d030      	beq.n	8005654 <fmod+0x8c>
 80055f2:	4632      	mov	r2, r6
 80055f4:	463b      	mov	r3, r7
 80055f6:	4630      	mov	r0, r6
 80055f8:	4639      	mov	r1, r7
 80055fa:	f7fb fa43 	bl	8000a84 <__aeabi_dcmpun>
 80055fe:	bb48      	cbnz	r0, 8005654 <fmod+0x8c>
 8005600:	4622      	mov	r2, r4
 8005602:	462b      	mov	r3, r5
 8005604:	4620      	mov	r0, r4
 8005606:	4629      	mov	r1, r5
 8005608:	f7fb fa3c 	bl	8000a84 <__aeabi_dcmpun>
 800560c:	4681      	mov	r9, r0
 800560e:	bb08      	cbnz	r0, 8005654 <fmod+0x8c>
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fb fa02 	bl	8000a20 <__aeabi_dcmpeq>
 800561c:	b1d0      	cbz	r0, 8005654 <fmod+0x8c>
 800561e:	2301      	movs	r3, #1
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4b1a      	ldr	r3, [pc, #104]	; (800568c <fmod+0xc4>)
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800562a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800562e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005632:	f1b8 0f00 	cmp.w	r8, #0
 8005636:	d116      	bne.n	8005666 <fmod+0x9e>
 8005638:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800563c:	4668      	mov	r0, sp
 800563e:	f002 f8f8 	bl	8007832 <matherr>
 8005642:	b1d8      	cbz	r0, 800567c <fmod+0xb4>
 8005644:	9b08      	ldr	r3, [sp, #32]
 8005646:	b11b      	cbz	r3, 8005650 <fmod+0x88>
 8005648:	f002 fb92 	bl	8007d70 <__errno>
 800564c:	9b08      	ldr	r3, [sp, #32]
 800564e:	6003      	str	r3, [r0, #0]
 8005650:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005654:	eeb0 0a48 	vmov.f32	s0, s16
 8005658:	eef0 0a68 	vmov.f32	s1, s17
 800565c:	b00b      	add	sp, #44	; 0x2c
 800565e:	ecbd 8b02 	vpop	{d8}
 8005662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005666:	2200      	movs	r2, #0
 8005668:	2300      	movs	r3, #0
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	f7fb f899 	bl	80007a4 <__aeabi_ddiv>
 8005672:	f1b8 0f02 	cmp.w	r8, #2
 8005676:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800567a:	d1df      	bne.n	800563c <fmod+0x74>
 800567c:	f002 fb78 	bl	8007d70 <__errno>
 8005680:	2321      	movs	r3, #33	; 0x21
 8005682:	6003      	str	r3, [r0, #0]
 8005684:	e7de      	b.n	8005644 <fmod+0x7c>
 8005686:	bf00      	nop
 8005688:	20000009 	.word	0x20000009
 800568c:	08007f34 	.word	0x08007f34

08005690 <pow>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ed2d 8b04 	vpush	{d8-d9}
 8005698:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800596c <pow+0x2dc>
 800569c:	b08d      	sub	sp, #52	; 0x34
 800569e:	ec57 6b10 	vmov	r6, r7, d0
 80056a2:	ec55 4b11 	vmov	r4, r5, d1
 80056a6:	f000 fb27 	bl	8005cf8 <__ieee754_pow>
 80056aa:	f999 3000 	ldrsb.w	r3, [r9]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	eeb0 8a40 	vmov.f32	s16, s0
 80056b6:	eef0 8a60 	vmov.f32	s17, s1
 80056ba:	46c8      	mov	r8, r9
 80056bc:	d05f      	beq.n	800577e <pow+0xee>
 80056be:	4622      	mov	r2, r4
 80056c0:	462b      	mov	r3, r5
 80056c2:	4620      	mov	r0, r4
 80056c4:	4629      	mov	r1, r5
 80056c6:	f7fb f9dd 	bl	8000a84 <__aeabi_dcmpun>
 80056ca:	4683      	mov	fp, r0
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d156      	bne.n	800577e <pow+0xee>
 80056d0:	4632      	mov	r2, r6
 80056d2:	463b      	mov	r3, r7
 80056d4:	4630      	mov	r0, r6
 80056d6:	4639      	mov	r1, r7
 80056d8:	f7fb f9d4 	bl	8000a84 <__aeabi_dcmpun>
 80056dc:	9001      	str	r0, [sp, #4]
 80056de:	b1e8      	cbz	r0, 800571c <pow+0x8c>
 80056e0:	2200      	movs	r2, #0
 80056e2:	2300      	movs	r3, #0
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7fb f99a 	bl	8000a20 <__aeabi_dcmpeq>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d046      	beq.n	800577e <pow+0xee>
 80056f0:	2301      	movs	r3, #1
 80056f2:	9302      	str	r3, [sp, #8]
 80056f4:	4b96      	ldr	r3, [pc, #600]	; (8005950 <pow+0x2c0>)
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	4b96      	ldr	r3, [pc, #600]	; (8005954 <pow+0x2c4>)
 80056fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80056fe:	2200      	movs	r2, #0
 8005700:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005704:	9b00      	ldr	r3, [sp, #0]
 8005706:	2b02      	cmp	r3, #2
 8005708:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800570c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005710:	d033      	beq.n	800577a <pow+0xea>
 8005712:	a802      	add	r0, sp, #8
 8005714:	f002 f88d 	bl	8007832 <matherr>
 8005718:	bb48      	cbnz	r0, 800576e <pow+0xde>
 800571a:	e05d      	b.n	80057d8 <pow+0x148>
 800571c:	f04f 0a00 	mov.w	sl, #0
 8005720:	f04f 0b00 	mov.w	fp, #0
 8005724:	4652      	mov	r2, sl
 8005726:	465b      	mov	r3, fp
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fb f978 	bl	8000a20 <__aeabi_dcmpeq>
 8005730:	ec4b ab19 	vmov	d9, sl, fp
 8005734:	2800      	cmp	r0, #0
 8005736:	d054      	beq.n	80057e2 <pow+0x152>
 8005738:	4652      	mov	r2, sl
 800573a:	465b      	mov	r3, fp
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fb f96e 	bl	8000a20 <__aeabi_dcmpeq>
 8005744:	4680      	mov	r8, r0
 8005746:	b318      	cbz	r0, 8005790 <pow+0x100>
 8005748:	2301      	movs	r3, #1
 800574a:	9302      	str	r3, [sp, #8]
 800574c:	4b80      	ldr	r3, [pc, #512]	; (8005950 <pow+0x2c0>)
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	9b01      	ldr	r3, [sp, #4]
 8005752:	930a      	str	r3, [sp, #40]	; 0x28
 8005754:	9b00      	ldr	r3, [sp, #0]
 8005756:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800575a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800575e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0d5      	beq.n	8005712 <pow+0x82>
 8005766:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <pow+0x2c4>)
 8005768:	2200      	movs	r2, #0
 800576a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800576e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005770:	b11b      	cbz	r3, 800577a <pow+0xea>
 8005772:	f002 fafd 	bl	8007d70 <__errno>
 8005776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005778:	6003      	str	r3, [r0, #0]
 800577a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800577e:	eeb0 0a48 	vmov.f32	s0, s16
 8005782:	eef0 0a68 	vmov.f32	s1, s17
 8005786:	b00d      	add	sp, #52	; 0x34
 8005788:	ecbd 8b04 	vpop	{d8-d9}
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	ec45 4b10 	vmov	d0, r4, r5
 8005794:	f002 f845 	bl	8007822 <finite>
 8005798:	2800      	cmp	r0, #0
 800579a:	d0f0      	beq.n	800577e <pow+0xee>
 800579c:	4652      	mov	r2, sl
 800579e:	465b      	mov	r3, fp
 80057a0:	4620      	mov	r0, r4
 80057a2:	4629      	mov	r1, r5
 80057a4:	f7fb f946 	bl	8000a34 <__aeabi_dcmplt>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d0e8      	beq.n	800577e <pow+0xee>
 80057ac:	2301      	movs	r3, #1
 80057ae:	9302      	str	r3, [sp, #8]
 80057b0:	4b67      	ldr	r3, [pc, #412]	; (8005950 <pow+0x2c0>)
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	f999 3000 	ldrsb.w	r3, [r9]
 80057b8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80057bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80057c4:	b913      	cbnz	r3, 80057cc <pow+0x13c>
 80057c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80057ca:	e7a2      	b.n	8005712 <pow+0x82>
 80057cc:	4962      	ldr	r1, [pc, #392]	; (8005958 <pow+0x2c8>)
 80057ce:	2000      	movs	r0, #0
 80057d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d19c      	bne.n	8005712 <pow+0x82>
 80057d8:	f002 faca 	bl	8007d70 <__errno>
 80057dc:	2321      	movs	r3, #33	; 0x21
 80057de:	6003      	str	r3, [r0, #0]
 80057e0:	e7c5      	b.n	800576e <pow+0xde>
 80057e2:	eeb0 0a48 	vmov.f32	s0, s16
 80057e6:	eef0 0a68 	vmov.f32	s1, s17
 80057ea:	f002 f81a 	bl	8007822 <finite>
 80057ee:	9000      	str	r0, [sp, #0]
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f040 8081 	bne.w	80058f8 <pow+0x268>
 80057f6:	ec47 6b10 	vmov	d0, r6, r7
 80057fa:	f002 f812 	bl	8007822 <finite>
 80057fe:	2800      	cmp	r0, #0
 8005800:	d07a      	beq.n	80058f8 <pow+0x268>
 8005802:	ec45 4b10 	vmov	d0, r4, r5
 8005806:	f002 f80c 	bl	8007822 <finite>
 800580a:	2800      	cmp	r0, #0
 800580c:	d074      	beq.n	80058f8 <pow+0x268>
 800580e:	ec53 2b18 	vmov	r2, r3, d8
 8005812:	ee18 0a10 	vmov	r0, s16
 8005816:	4619      	mov	r1, r3
 8005818:	f7fb f934 	bl	8000a84 <__aeabi_dcmpun>
 800581c:	f999 9000 	ldrsb.w	r9, [r9]
 8005820:	4b4b      	ldr	r3, [pc, #300]	; (8005950 <pow+0x2c0>)
 8005822:	b1b0      	cbz	r0, 8005852 <pow+0x1c2>
 8005824:	2201      	movs	r2, #1
 8005826:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800582a:	9b00      	ldr	r3, [sp, #0]
 800582c:	930a      	str	r3, [sp, #40]	; 0x28
 800582e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005832:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005836:	f1b9 0f00 	cmp.w	r9, #0
 800583a:	d0c4      	beq.n	80057c6 <pow+0x136>
 800583c:	4652      	mov	r2, sl
 800583e:	465b      	mov	r3, fp
 8005840:	4650      	mov	r0, sl
 8005842:	4659      	mov	r1, fp
 8005844:	f7fa ffae 	bl	80007a4 <__aeabi_ddiv>
 8005848:	f1b9 0f02 	cmp.w	r9, #2
 800584c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005850:	e7c1      	b.n	80057d6 <pow+0x146>
 8005852:	2203      	movs	r2, #3
 8005854:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005858:	900a      	str	r0, [sp, #40]	; 0x28
 800585a:	4629      	mov	r1, r5
 800585c:	4620      	mov	r0, r4
 800585e:	2200      	movs	r2, #0
 8005860:	4b3e      	ldr	r3, [pc, #248]	; (800595c <pow+0x2cc>)
 8005862:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005866:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800586a:	f7fa fe71 	bl	8000550 <__aeabi_dmul>
 800586e:	4604      	mov	r4, r0
 8005870:	460d      	mov	r5, r1
 8005872:	f1b9 0f00 	cmp.w	r9, #0
 8005876:	d124      	bne.n	80058c2 <pow+0x232>
 8005878:	4b39      	ldr	r3, [pc, #228]	; (8005960 <pow+0x2d0>)
 800587a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800587e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005882:	4630      	mov	r0, r6
 8005884:	4652      	mov	r2, sl
 8005886:	465b      	mov	r3, fp
 8005888:	4639      	mov	r1, r7
 800588a:	f7fb f8d3 	bl	8000a34 <__aeabi_dcmplt>
 800588e:	2800      	cmp	r0, #0
 8005890:	d056      	beq.n	8005940 <pow+0x2b0>
 8005892:	ec45 4b10 	vmov	d0, r4, r5
 8005896:	f001 ffd7 	bl	8007848 <rint>
 800589a:	4622      	mov	r2, r4
 800589c:	462b      	mov	r3, r5
 800589e:	ec51 0b10 	vmov	r0, r1, d0
 80058a2:	f7fb f8bd 	bl	8000a20 <__aeabi_dcmpeq>
 80058a6:	b920      	cbnz	r0, 80058b2 <pow+0x222>
 80058a8:	4b2e      	ldr	r3, [pc, #184]	; (8005964 <pow+0x2d4>)
 80058aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80058ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80058b2:	f998 3000 	ldrsb.w	r3, [r8]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d142      	bne.n	8005940 <pow+0x2b0>
 80058ba:	f002 fa59 	bl	8007d70 <__errno>
 80058be:	2322      	movs	r3, #34	; 0x22
 80058c0:	e78d      	b.n	80057de <pow+0x14e>
 80058c2:	4b29      	ldr	r3, [pc, #164]	; (8005968 <pow+0x2d8>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80058ca:	4630      	mov	r0, r6
 80058cc:	4652      	mov	r2, sl
 80058ce:	465b      	mov	r3, fp
 80058d0:	4639      	mov	r1, r7
 80058d2:	f7fb f8af 	bl	8000a34 <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d0eb      	beq.n	80058b2 <pow+0x222>
 80058da:	ec45 4b10 	vmov	d0, r4, r5
 80058de:	f001 ffb3 	bl	8007848 <rint>
 80058e2:	4622      	mov	r2, r4
 80058e4:	462b      	mov	r3, r5
 80058e6:	ec51 0b10 	vmov	r0, r1, d0
 80058ea:	f7fb f899 	bl	8000a20 <__aeabi_dcmpeq>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d1df      	bne.n	80058b2 <pow+0x222>
 80058f2:	2200      	movs	r2, #0
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <pow+0x2c8>)
 80058f6:	e7da      	b.n	80058ae <pow+0x21e>
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	ec51 0b18 	vmov	r0, r1, d8
 8005900:	f7fb f88e 	bl	8000a20 <__aeabi_dcmpeq>
 8005904:	2800      	cmp	r0, #0
 8005906:	f43f af3a 	beq.w	800577e <pow+0xee>
 800590a:	ec47 6b10 	vmov	d0, r6, r7
 800590e:	f001 ff88 	bl	8007822 <finite>
 8005912:	2800      	cmp	r0, #0
 8005914:	f43f af33 	beq.w	800577e <pow+0xee>
 8005918:	ec45 4b10 	vmov	d0, r4, r5
 800591c:	f001 ff81 	bl	8007822 <finite>
 8005920:	2800      	cmp	r0, #0
 8005922:	f43f af2c 	beq.w	800577e <pow+0xee>
 8005926:	2304      	movs	r3, #4
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <pow+0x2c0>)
 800592c:	9303      	str	r3, [sp, #12]
 800592e:	2300      	movs	r3, #0
 8005930:	930a      	str	r3, [sp, #40]	; 0x28
 8005932:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005936:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800593a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800593e:	e7b8      	b.n	80058b2 <pow+0x222>
 8005940:	a802      	add	r0, sp, #8
 8005942:	f001 ff76 	bl	8007832 <matherr>
 8005946:	2800      	cmp	r0, #0
 8005948:	f47f af11 	bne.w	800576e <pow+0xde>
 800594c:	e7b5      	b.n	80058ba <pow+0x22a>
 800594e:	bf00      	nop
 8005950:	08007f39 	.word	0x08007f39
 8005954:	3ff00000 	.word	0x3ff00000
 8005958:	fff00000 	.word	0xfff00000
 800595c:	3fe00000 	.word	0x3fe00000
 8005960:	47efffff 	.word	0x47efffff
 8005964:	c7efffff 	.word	0xc7efffff
 8005968:	7ff00000 	.word	0x7ff00000
 800596c:	20000009 	.word	0x20000009

08005970 <acosf>:
 8005970:	b510      	push	{r4, lr}
 8005972:	ed2d 8b02 	vpush	{d8}
 8005976:	4c27      	ldr	r4, [pc, #156]	; (8005a14 <acosf+0xa4>)
 8005978:	b08a      	sub	sp, #40	; 0x28
 800597a:	eeb0 8a40 	vmov.f32	s16, s0
 800597e:	f000 ff79 	bl	8006874 <__ieee754_acosf>
 8005982:	f994 3000 	ldrsb.w	r3, [r4]
 8005986:	3301      	adds	r3, #1
 8005988:	eef0 8a40 	vmov.f32	s17, s0
 800598c:	d03c      	beq.n	8005a08 <acosf+0x98>
 800598e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	d637      	bvs.n	8005a08 <acosf+0x98>
 8005998:	eeb0 0a48 	vmov.f32	s0, s16
 800599c:	f002 f922 	bl	8007be4 <fabsf>
 80059a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80059a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80059a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ac:	dd2c      	ble.n	8005a08 <acosf+0x98>
 80059ae:	2301      	movs	r3, #1
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <acosf+0xa8>)
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	ee18 0a10 	vmov	r0, s16
 80059ba:	2300      	movs	r3, #0
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	f7fa fd6f 	bl	80004a0 <__aeabi_f2d>
 80059c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ca:	4814      	ldr	r0, [pc, #80]	; (8005a1c <acosf+0xac>)
 80059cc:	f001 ff34 	bl	8007838 <nan>
 80059d0:	f994 3000 	ldrsb.w	r3, [r4]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80059da:	d104      	bne.n	80059e6 <acosf+0x76>
 80059dc:	f002 f9c8 	bl	8007d70 <__errno>
 80059e0:	2321      	movs	r3, #33	; 0x21
 80059e2:	6003      	str	r3, [r0, #0]
 80059e4:	e004      	b.n	80059f0 <acosf+0x80>
 80059e6:	4668      	mov	r0, sp
 80059e8:	f001 ff23 	bl	8007832 <matherr>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d0f5      	beq.n	80059dc <acosf+0x6c>
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	b11b      	cbz	r3, 80059fc <acosf+0x8c>
 80059f4:	f002 f9bc 	bl	8007d70 <__errno>
 80059f8:	9b08      	ldr	r3, [sp, #32]
 80059fa:	6003      	str	r3, [r0, #0]
 80059fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a00:	f7fb f876 	bl	8000af0 <__aeabi_d2f>
 8005a04:	ee08 0a90 	vmov	s17, r0
 8005a08:	eeb0 0a68 	vmov.f32	s0, s17
 8005a0c:	b00a      	add	sp, #40	; 0x28
 8005a0e:	ecbd 8b02 	vpop	{d8}
 8005a12:	bd10      	pop	{r4, pc}
 8005a14:	20000009 	.word	0x20000009
 8005a18:	08007f3d 	.word	0x08007f3d
 8005a1c:	08007f38 	.word	0x08007f38

08005a20 <asinf>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	ed2d 8b02 	vpush	{d8}
 8005a26:	4c27      	ldr	r4, [pc, #156]	; (8005ac4 <asinf+0xa4>)
 8005a28:	b08a      	sub	sp, #40	; 0x28
 8005a2a:	eeb0 8a40 	vmov.f32	s16, s0
 8005a2e:	f001 f81d 	bl	8006a6c <__ieee754_asinf>
 8005a32:	f994 3000 	ldrsb.w	r3, [r4]
 8005a36:	3301      	adds	r3, #1
 8005a38:	eef0 8a40 	vmov.f32	s17, s0
 8005a3c:	d03c      	beq.n	8005ab8 <asinf+0x98>
 8005a3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a46:	d637      	bvs.n	8005ab8 <asinf+0x98>
 8005a48:	eeb0 0a48 	vmov.f32	s0, s16
 8005a4c:	f002 f8ca 	bl	8007be4 <fabsf>
 8005a50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005a54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5c:	dd2c      	ble.n	8005ab8 <asinf+0x98>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <asinf+0xa8>)
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	ee18 0a10 	vmov	r0, s16
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9308      	str	r3, [sp, #32]
 8005a6e:	f7fa fd17 	bl	80004a0 <__aeabi_f2d>
 8005a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a7a:	4814      	ldr	r0, [pc, #80]	; (8005acc <asinf+0xac>)
 8005a7c:	f001 fedc 	bl	8007838 <nan>
 8005a80:	f994 3000 	ldrsb.w	r3, [r4]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005a8a:	d104      	bne.n	8005a96 <asinf+0x76>
 8005a8c:	f002 f970 	bl	8007d70 <__errno>
 8005a90:	2321      	movs	r3, #33	; 0x21
 8005a92:	6003      	str	r3, [r0, #0]
 8005a94:	e004      	b.n	8005aa0 <asinf+0x80>
 8005a96:	4668      	mov	r0, sp
 8005a98:	f001 fecb 	bl	8007832 <matherr>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d0f5      	beq.n	8005a8c <asinf+0x6c>
 8005aa0:	9b08      	ldr	r3, [sp, #32]
 8005aa2:	b11b      	cbz	r3, 8005aac <asinf+0x8c>
 8005aa4:	f002 f964 	bl	8007d70 <__errno>
 8005aa8:	9b08      	ldr	r3, [sp, #32]
 8005aaa:	6003      	str	r3, [r0, #0]
 8005aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ab0:	f7fb f81e 	bl	8000af0 <__aeabi_d2f>
 8005ab4:	ee08 0a90 	vmov	s17, r0
 8005ab8:	eeb0 0a68 	vmov.f32	s0, s17
 8005abc:	b00a      	add	sp, #40	; 0x28
 8005abe:	ecbd 8b02 	vpop	{d8}
 8005ac2:	bd10      	pop	{r4, pc}
 8005ac4:	20000009 	.word	0x20000009
 8005ac8:	08007f43 	.word	0x08007f43
 8005acc:	08007f38 	.word	0x08007f38

08005ad0 <atan2f>:
 8005ad0:	f001 b8b4 	b.w	8006c3c <__ieee754_atan2f>

08005ad4 <__ieee754_fmod>:
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	ec53 2b11 	vmov	r2, r3, d1
 8005adc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8005ae0:	ea5e 0402 	orrs.w	r4, lr, r2
 8005ae4:	ec51 0b10 	vmov	r0, r1, d0
 8005ae8:	461e      	mov	r6, r3
 8005aea:	ee11 5a10 	vmov	r5, s2
 8005aee:	4694      	mov	ip, r2
 8005af0:	d00c      	beq.n	8005b0c <__ieee754_fmod+0x38>
 8005af2:	4c7a      	ldr	r4, [pc, #488]	; (8005cdc <__ieee754_fmod+0x208>)
 8005af4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8005af8:	45a0      	cmp	r8, r4
 8005afa:	4689      	mov	r9, r1
 8005afc:	dc06      	bgt.n	8005b0c <__ieee754_fmod+0x38>
 8005afe:	4254      	negs	r4, r2
 8005b00:	4314      	orrs	r4, r2
 8005b02:	4f77      	ldr	r7, [pc, #476]	; (8005ce0 <__ieee754_fmod+0x20c>)
 8005b04:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8005b08:	42bc      	cmp	r4, r7
 8005b0a:	d909      	bls.n	8005b20 <__ieee754_fmod+0x4c>
 8005b0c:	f7fa fd20 	bl	8000550 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	f7fa fe46 	bl	80007a4 <__aeabi_ddiv>
 8005b18:	ec41 0b10 	vmov	d0, r0, r1
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	45f0      	cmp	r8, lr
 8005b22:	ee10 2a10 	vmov	r2, s0
 8005b26:	4607      	mov	r7, r0
 8005b28:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8005b2c:	dc0a      	bgt.n	8005b44 <__ieee754_fmod+0x70>
 8005b2e:	dbf3      	blt.n	8005b18 <__ieee754_fmod+0x44>
 8005b30:	42a8      	cmp	r0, r5
 8005b32:	d3f1      	bcc.n	8005b18 <__ieee754_fmod+0x44>
 8005b34:	d106      	bne.n	8005b44 <__ieee754_fmod+0x70>
 8005b36:	496b      	ldr	r1, [pc, #428]	; (8005ce4 <__ieee754_fmod+0x210>)
 8005b38:	0fe4      	lsrs	r4, r4, #31
 8005b3a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005b3e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b42:	e7e9      	b.n	8005b18 <__ieee754_fmod+0x44>
 8005b44:	4b68      	ldr	r3, [pc, #416]	; (8005ce8 <__ieee754_fmod+0x214>)
 8005b46:	4598      	cmp	r8, r3
 8005b48:	dc49      	bgt.n	8005bde <__ieee754_fmod+0x10a>
 8005b4a:	f1b8 0f00 	cmp.w	r8, #0
 8005b4e:	d13d      	bne.n	8005bcc <__ieee754_fmod+0xf8>
 8005b50:	4866      	ldr	r0, [pc, #408]	; (8005cec <__ieee754_fmod+0x218>)
 8005b52:	4611      	mov	r1, r2
 8005b54:	2900      	cmp	r1, #0
 8005b56:	dc36      	bgt.n	8005bc6 <__ieee754_fmod+0xf2>
 8005b58:	459e      	cmp	lr, r3
 8005b5a:	dc51      	bgt.n	8005c00 <__ieee754_fmod+0x12c>
 8005b5c:	f1be 0f00 	cmp.w	lr, #0
 8005b60:	d145      	bne.n	8005bee <__ieee754_fmod+0x11a>
 8005b62:	4b62      	ldr	r3, [pc, #392]	; (8005cec <__ieee754_fmod+0x218>)
 8005b64:	4629      	mov	r1, r5
 8005b66:	2900      	cmp	r1, #0
 8005b68:	dc3e      	bgt.n	8005be8 <__ieee754_fmod+0x114>
 8005b6a:	4961      	ldr	r1, [pc, #388]	; (8005cf0 <__ieee754_fmod+0x21c>)
 8005b6c:	4288      	cmp	r0, r1
 8005b6e:	db4c      	blt.n	8005c0a <__ieee754_fmod+0x136>
 8005b70:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8005b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005b78:	4a5d      	ldr	r2, [pc, #372]	; (8005cf0 <__ieee754_fmod+0x21c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	db59      	blt.n	8005c32 <__ieee754_fmod+0x15e>
 8005b7e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8005b82:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8005b86:	1ac0      	subs	r0, r0, r3
 8005b88:	1b8a      	subs	r2, r1, r6
 8005b8a:	eba7 050c 	sub.w	r5, r7, ip
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d166      	bne.n	8005c60 <__ieee754_fmod+0x18c>
 8005b92:	4567      	cmp	r7, ip
 8005b94:	bf38      	it	cc
 8005b96:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	bfbc      	itt	lt
 8005b9e:	463d      	movlt	r5, r7
 8005ba0:	460a      	movlt	r2, r1
 8005ba2:	ea52 0105 	orrs.w	r1, r2, r5
 8005ba6:	d0c6      	beq.n	8005b36 <__ieee754_fmod+0x62>
 8005ba8:	494f      	ldr	r1, [pc, #316]	; (8005ce8 <__ieee754_fmod+0x214>)
 8005baa:	428a      	cmp	r2, r1
 8005bac:	dd6d      	ble.n	8005c8a <__ieee754_fmod+0x1b6>
 8005bae:	4950      	ldr	r1, [pc, #320]	; (8005cf0 <__ieee754_fmod+0x21c>)
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	db70      	blt.n	8005c96 <__ieee754_fmod+0x1c2>
 8005bb4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8005bb8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005bbc:	4314      	orrs	r4, r2
 8005bbe:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	e7a8      	b.n	8005b18 <__ieee754_fmod+0x44>
 8005bc6:	3801      	subs	r0, #1
 8005bc8:	0049      	lsls	r1, r1, #1
 8005bca:	e7c3      	b.n	8005b54 <__ieee754_fmod+0x80>
 8005bcc:	4848      	ldr	r0, [pc, #288]	; (8005cf0 <__ieee754_fmod+0x21c>)
 8005bce:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8005bd2:	0049      	lsls	r1, r1, #1
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	f100 30ff 	add.w	r0, r0, #4294967295
 8005bda:	dcfa      	bgt.n	8005bd2 <__ieee754_fmod+0xfe>
 8005bdc:	e7bc      	b.n	8005b58 <__ieee754_fmod+0x84>
 8005bde:	ea4f 5028 	mov.w	r0, r8, asr #20
 8005be2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005be6:	e7b7      	b.n	8005b58 <__ieee754_fmod+0x84>
 8005be8:	3b01      	subs	r3, #1
 8005bea:	0049      	lsls	r1, r1, #1
 8005bec:	e7bb      	b.n	8005b66 <__ieee754_fmod+0x92>
 8005bee:	4b40      	ldr	r3, [pc, #256]	; (8005cf0 <__ieee754_fmod+0x21c>)
 8005bf0:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8005bf4:	0049      	lsls	r1, r1, #1
 8005bf6:	2900      	cmp	r1, #0
 8005bf8:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bfc:	dcfa      	bgt.n	8005bf4 <__ieee754_fmod+0x120>
 8005bfe:	e7b4      	b.n	8005b6a <__ieee754_fmod+0x96>
 8005c00:	ea4f 532e 	mov.w	r3, lr, asr #20
 8005c04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c08:	e7af      	b.n	8005b6a <__ieee754_fmod+0x96>
 8005c0a:	1a0f      	subs	r7, r1, r0
 8005c0c:	2f1f      	cmp	r7, #31
 8005c0e:	dc0a      	bgt.n	8005c26 <__ieee754_fmod+0x152>
 8005c10:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8005c14:	fa08 f807 	lsl.w	r8, r8, r7
 8005c18:	fa22 f101 	lsr.w	r1, r2, r1
 8005c1c:	ea41 0108 	orr.w	r1, r1, r8
 8005c20:	fa02 f707 	lsl.w	r7, r2, r7
 8005c24:	e7a8      	b.n	8005b78 <__ieee754_fmod+0xa4>
 8005c26:	4933      	ldr	r1, [pc, #204]	; (8005cf4 <__ieee754_fmod+0x220>)
 8005c28:	1a09      	subs	r1, r1, r0
 8005c2a:	fa02 f101 	lsl.w	r1, r2, r1
 8005c2e:	2700      	movs	r7, #0
 8005c30:	e7a2      	b.n	8005b78 <__ieee754_fmod+0xa4>
 8005c32:	eba2 0c03 	sub.w	ip, r2, r3
 8005c36:	f1bc 0f1f 	cmp.w	ip, #31
 8005c3a:	dc0a      	bgt.n	8005c52 <__ieee754_fmod+0x17e>
 8005c3c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8005c40:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005c44:	fa25 f606 	lsr.w	r6, r5, r6
 8005c48:	ea46 060e 	orr.w	r6, r6, lr
 8005c4c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005c50:	e799      	b.n	8005b86 <__ieee754_fmod+0xb2>
 8005c52:	4e28      	ldr	r6, [pc, #160]	; (8005cf4 <__ieee754_fmod+0x220>)
 8005c54:	1af6      	subs	r6, r6, r3
 8005c56:	fa05 f606 	lsl.w	r6, r5, r6
 8005c5a:	f04f 0c00 	mov.w	ip, #0
 8005c5e:	e792      	b.n	8005b86 <__ieee754_fmod+0xb2>
 8005c60:	4567      	cmp	r7, ip
 8005c62:	bf38      	it	cc
 8005c64:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005c68:	2a00      	cmp	r2, #0
 8005c6a:	da05      	bge.n	8005c78 <__ieee754_fmod+0x1a4>
 8005c6c:	0ffa      	lsrs	r2, r7, #31
 8005c6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005c72:	007f      	lsls	r7, r7, #1
 8005c74:	3801      	subs	r0, #1
 8005c76:	e787      	b.n	8005b88 <__ieee754_fmod+0xb4>
 8005c78:	ea52 0105 	orrs.w	r1, r2, r5
 8005c7c:	f43f af5b 	beq.w	8005b36 <__ieee754_fmod+0x62>
 8005c80:	0fe9      	lsrs	r1, r5, #31
 8005c82:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005c86:	006f      	lsls	r7, r5, #1
 8005c88:	e7f4      	b.n	8005c74 <__ieee754_fmod+0x1a0>
 8005c8a:	0fe8      	lsrs	r0, r5, #31
 8005c8c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005c90:	006d      	lsls	r5, r5, #1
 8005c92:	3b01      	subs	r3, #1
 8005c94:	e789      	b.n	8005baa <__ieee754_fmod+0xd6>
 8005c96:	1ac9      	subs	r1, r1, r3
 8005c98:	2914      	cmp	r1, #20
 8005c9a:	dc0a      	bgt.n	8005cb2 <__ieee754_fmod+0x1de>
 8005c9c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	40cd      	lsrs	r5, r1
 8005ca6:	432b      	orrs	r3, r5
 8005ca8:	410a      	asrs	r2, r1
 8005caa:	ea42 0104 	orr.w	r1, r2, r4
 8005cae:	4618      	mov	r0, r3
 8005cb0:	e732      	b.n	8005b18 <__ieee754_fmod+0x44>
 8005cb2:	291f      	cmp	r1, #31
 8005cb4:	dc07      	bgt.n	8005cc6 <__ieee754_fmod+0x1f2>
 8005cb6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005cba:	40cd      	lsrs	r5, r1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	432b      	orrs	r3, r5
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	e7f1      	b.n	8005caa <__ieee754_fmod+0x1d6>
 8005cc6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005cca:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005cce:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8005cd2:	33e2      	adds	r3, #226	; 0xe2
 8005cd4:	fa42 f303 	asr.w	r3, r2, r3
 8005cd8:	e7f3      	b.n	8005cc2 <__ieee754_fmod+0x1ee>
 8005cda:	bf00      	nop
 8005cdc:	7fefffff 	.word	0x7fefffff
 8005ce0:	7ff00000 	.word	0x7ff00000
 8005ce4:	08007f50 	.word	0x08007f50
 8005ce8:	000fffff 	.word	0x000fffff
 8005cec:	fffffbed 	.word	0xfffffbed
 8005cf0:	fffffc02 	.word	0xfffffc02
 8005cf4:	fffffbe2 	.word	0xfffffbe2

08005cf8 <__ieee754_pow>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	b091      	sub	sp, #68	; 0x44
 8005cfe:	ed8d 1b00 	vstr	d1, [sp]
 8005d02:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005d06:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005d0a:	ea58 0302 	orrs.w	r3, r8, r2
 8005d0e:	ec57 6b10 	vmov	r6, r7, d0
 8005d12:	f000 84be 	beq.w	8006692 <__ieee754_pow+0x99a>
 8005d16:	4b7a      	ldr	r3, [pc, #488]	; (8005f00 <__ieee754_pow+0x208>)
 8005d18:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	463d      	mov	r5, r7
 8005d20:	ee10 aa10 	vmov	sl, s0
 8005d24:	dc09      	bgt.n	8005d3a <__ieee754_pow+0x42>
 8005d26:	d103      	bne.n	8005d30 <__ieee754_pow+0x38>
 8005d28:	b93e      	cbnz	r6, 8005d3a <__ieee754_pow+0x42>
 8005d2a:	45a0      	cmp	r8, r4
 8005d2c:	dc0d      	bgt.n	8005d4a <__ieee754_pow+0x52>
 8005d2e:	e001      	b.n	8005d34 <__ieee754_pow+0x3c>
 8005d30:	4598      	cmp	r8, r3
 8005d32:	dc02      	bgt.n	8005d3a <__ieee754_pow+0x42>
 8005d34:	4598      	cmp	r8, r3
 8005d36:	d10e      	bne.n	8005d56 <__ieee754_pow+0x5e>
 8005d38:	b16a      	cbz	r2, 8005d56 <__ieee754_pow+0x5e>
 8005d3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d42:	ea54 030a 	orrs.w	r3, r4, sl
 8005d46:	f000 84a4 	beq.w	8006692 <__ieee754_pow+0x99a>
 8005d4a:	486e      	ldr	r0, [pc, #440]	; (8005f04 <__ieee754_pow+0x20c>)
 8005d4c:	b011      	add	sp, #68	; 0x44
 8005d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d52:	f001 bd71 	b.w	8007838 <nan>
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	da53      	bge.n	8005e02 <__ieee754_pow+0x10a>
 8005d5a:	4b6b      	ldr	r3, [pc, #428]	; (8005f08 <__ieee754_pow+0x210>)
 8005d5c:	4598      	cmp	r8, r3
 8005d5e:	dc4d      	bgt.n	8005dfc <__ieee754_pow+0x104>
 8005d60:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005d64:	4598      	cmp	r8, r3
 8005d66:	dd4c      	ble.n	8005e02 <__ieee754_pow+0x10a>
 8005d68:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d70:	2b14      	cmp	r3, #20
 8005d72:	dd26      	ble.n	8005dc2 <__ieee754_pow+0xca>
 8005d74:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005d78:	fa22 f103 	lsr.w	r1, r2, r3
 8005d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d13e      	bne.n	8005e02 <__ieee754_pow+0x10a>
 8005d84:	f001 0101 	and.w	r1, r1, #1
 8005d88:	f1c1 0b02 	rsb	fp, r1, #2
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	d15b      	bne.n	8005e48 <__ieee754_pow+0x150>
 8005d90:	4b5b      	ldr	r3, [pc, #364]	; (8005f00 <__ieee754_pow+0x208>)
 8005d92:	4598      	cmp	r8, r3
 8005d94:	d124      	bne.n	8005de0 <__ieee754_pow+0xe8>
 8005d96:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005d9a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005d9e:	ea53 030a 	orrs.w	r3, r3, sl
 8005da2:	f000 8476 	beq.w	8006692 <__ieee754_pow+0x99a>
 8005da6:	4b59      	ldr	r3, [pc, #356]	; (8005f0c <__ieee754_pow+0x214>)
 8005da8:	429c      	cmp	r4, r3
 8005daa:	dd2d      	ble.n	8005e08 <__ieee754_pow+0x110>
 8005dac:	f1b9 0f00 	cmp.w	r9, #0
 8005db0:	f280 8473 	bge.w	800669a <__ieee754_pow+0x9a2>
 8005db4:	2000      	movs	r0, #0
 8005db6:	2100      	movs	r1, #0
 8005db8:	ec41 0b10 	vmov	d0, r0, r1
 8005dbc:	b011      	add	sp, #68	; 0x44
 8005dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	d13e      	bne.n	8005e44 <__ieee754_pow+0x14c>
 8005dc6:	f1c3 0314 	rsb	r3, r3, #20
 8005dca:	fa48 f103 	asr.w	r1, r8, r3
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	4543      	cmp	r3, r8
 8005dd4:	f040 8469 	bne.w	80066aa <__ieee754_pow+0x9b2>
 8005dd8:	f001 0101 	and.w	r1, r1, #1
 8005ddc:	f1c1 0b02 	rsb	fp, r1, #2
 8005de0:	4b4b      	ldr	r3, [pc, #300]	; (8005f10 <__ieee754_pow+0x218>)
 8005de2:	4598      	cmp	r8, r3
 8005de4:	d118      	bne.n	8005e18 <__ieee754_pow+0x120>
 8005de6:	f1b9 0f00 	cmp.w	r9, #0
 8005dea:	f280 845a 	bge.w	80066a2 <__ieee754_pow+0x9aa>
 8005dee:	4948      	ldr	r1, [pc, #288]	; (8005f10 <__ieee754_pow+0x218>)
 8005df0:	4632      	mov	r2, r6
 8005df2:	463b      	mov	r3, r7
 8005df4:	2000      	movs	r0, #0
 8005df6:	f7fa fcd5 	bl	80007a4 <__aeabi_ddiv>
 8005dfa:	e7dd      	b.n	8005db8 <__ieee754_pow+0xc0>
 8005dfc:	f04f 0b02 	mov.w	fp, #2
 8005e00:	e7c4      	b.n	8005d8c <__ieee754_pow+0x94>
 8005e02:	f04f 0b00 	mov.w	fp, #0
 8005e06:	e7c1      	b.n	8005d8c <__ieee754_pow+0x94>
 8005e08:	f1b9 0f00 	cmp.w	r9, #0
 8005e0c:	dad2      	bge.n	8005db4 <__ieee754_pow+0xbc>
 8005e0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005e12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e16:	e7cf      	b.n	8005db8 <__ieee754_pow+0xc0>
 8005e18:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005e1c:	d106      	bne.n	8005e2c <__ieee754_pow+0x134>
 8005e1e:	4632      	mov	r2, r6
 8005e20:	463b      	mov	r3, r7
 8005e22:	4610      	mov	r0, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7fa fb93 	bl	8000550 <__aeabi_dmul>
 8005e2a:	e7c5      	b.n	8005db8 <__ieee754_pow+0xc0>
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <__ieee754_pow+0x21c>)
 8005e2e:	4599      	cmp	r9, r3
 8005e30:	d10a      	bne.n	8005e48 <__ieee754_pow+0x150>
 8005e32:	2d00      	cmp	r5, #0
 8005e34:	db08      	blt.n	8005e48 <__ieee754_pow+0x150>
 8005e36:	ec47 6b10 	vmov	d0, r6, r7
 8005e3a:	b011      	add	sp, #68	; 0x44
 8005e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	f000 bc68 	b.w	8006714 <__ieee754_sqrt>
 8005e44:	f04f 0b00 	mov.w	fp, #0
 8005e48:	ec47 6b10 	vmov	d0, r6, r7
 8005e4c:	f001 fce0 	bl	8007810 <fabs>
 8005e50:	ec51 0b10 	vmov	r0, r1, d0
 8005e54:	f1ba 0f00 	cmp.w	sl, #0
 8005e58:	d127      	bne.n	8005eaa <__ieee754_pow+0x1b2>
 8005e5a:	b124      	cbz	r4, 8005e66 <__ieee754_pow+0x16e>
 8005e5c:	4b2c      	ldr	r3, [pc, #176]	; (8005f10 <__ieee754_pow+0x218>)
 8005e5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d121      	bne.n	8005eaa <__ieee754_pow+0x1b2>
 8005e66:	f1b9 0f00 	cmp.w	r9, #0
 8005e6a:	da05      	bge.n	8005e78 <__ieee754_pow+0x180>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	2000      	movs	r0, #0
 8005e72:	4927      	ldr	r1, [pc, #156]	; (8005f10 <__ieee754_pow+0x218>)
 8005e74:	f7fa fc96 	bl	80007a4 <__aeabi_ddiv>
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	da9d      	bge.n	8005db8 <__ieee754_pow+0xc0>
 8005e7c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e80:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e84:	ea54 030b 	orrs.w	r3, r4, fp
 8005e88:	d108      	bne.n	8005e9c <__ieee754_pow+0x1a4>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7fa f9a5 	bl	80001e0 <__aeabi_dsub>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	e7ac      	b.n	8005df6 <__ieee754_pow+0xfe>
 8005e9c:	f1bb 0f01 	cmp.w	fp, #1
 8005ea0:	d18a      	bne.n	8005db8 <__ieee754_pow+0xc0>
 8005ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	e786      	b.n	8005db8 <__ieee754_pow+0xc0>
 8005eaa:	0fed      	lsrs	r5, r5, #31
 8005eac:	1e6b      	subs	r3, r5, #1
 8005eae:	930d      	str	r3, [sp, #52]	; 0x34
 8005eb0:	ea5b 0303 	orrs.w	r3, fp, r3
 8005eb4:	d102      	bne.n	8005ebc <__ieee754_pow+0x1c4>
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	463b      	mov	r3, r7
 8005eba:	e7e8      	b.n	8005e8e <__ieee754_pow+0x196>
 8005ebc:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <__ieee754_pow+0x220>)
 8005ebe:	4598      	cmp	r8, r3
 8005ec0:	f340 80fe 	ble.w	80060c0 <__ieee754_pow+0x3c8>
 8005ec4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005ec8:	4598      	cmp	r8, r3
 8005eca:	dd0a      	ble.n	8005ee2 <__ieee754_pow+0x1ea>
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <__ieee754_pow+0x214>)
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	dc0d      	bgt.n	8005eee <__ieee754_pow+0x1f6>
 8005ed2:	f1b9 0f00 	cmp.w	r9, #0
 8005ed6:	f6bf af6d 	bge.w	8005db4 <__ieee754_pow+0xbc>
 8005eda:	a307      	add	r3, pc, #28	; (adr r3, 8005ef8 <__ieee754_pow+0x200>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	e79f      	b.n	8005e22 <__ieee754_pow+0x12a>
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <__ieee754_pow+0x224>)
 8005ee4:	429c      	cmp	r4, r3
 8005ee6:	ddf4      	ble.n	8005ed2 <__ieee754_pow+0x1da>
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <__ieee754_pow+0x218>)
 8005eea:	429c      	cmp	r4, r3
 8005eec:	dd18      	ble.n	8005f20 <__ieee754_pow+0x228>
 8005eee:	f1b9 0f00 	cmp.w	r9, #0
 8005ef2:	dcf2      	bgt.n	8005eda <__ieee754_pow+0x1e2>
 8005ef4:	e75e      	b.n	8005db4 <__ieee754_pow+0xbc>
 8005ef6:	bf00      	nop
 8005ef8:	8800759c 	.word	0x8800759c
 8005efc:	7e37e43c 	.word	0x7e37e43c
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	08007f38 	.word	0x08007f38
 8005f08:	433fffff 	.word	0x433fffff
 8005f0c:	3fefffff 	.word	0x3fefffff
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	3fe00000 	.word	0x3fe00000
 8005f18:	41e00000 	.word	0x41e00000
 8005f1c:	3feffffe 	.word	0x3feffffe
 8005f20:	2200      	movs	r2, #0
 8005f22:	4b63      	ldr	r3, [pc, #396]	; (80060b0 <__ieee754_pow+0x3b8>)
 8005f24:	f7fa f95c 	bl	80001e0 <__aeabi_dsub>
 8005f28:	a355      	add	r3, pc, #340	; (adr r3, 8006080 <__ieee754_pow+0x388>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	f7fa fb0d 	bl	8000550 <__aeabi_dmul>
 8005f36:	a354      	add	r3, pc, #336	; (adr r3, 8006088 <__ieee754_pow+0x390>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	460f      	mov	r7, r1
 8005f40:	4620      	mov	r0, r4
 8005f42:	4629      	mov	r1, r5
 8005f44:	f7fa fb04 	bl	8000550 <__aeabi_dmul>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f4e:	4b59      	ldr	r3, [pc, #356]	; (80060b4 <__ieee754_pow+0x3bc>)
 8005f50:	4620      	mov	r0, r4
 8005f52:	4629      	mov	r1, r5
 8005f54:	f7fa fafc 	bl	8000550 <__aeabi_dmul>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	a14c      	add	r1, pc, #304	; (adr r1, 8006090 <__ieee754_pow+0x398>)
 8005f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f62:	f7fa f93d 	bl	80001e0 <__aeabi_dsub>
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	f7fa faf1 	bl	8000550 <__aeabi_dmul>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	2000      	movs	r0, #0
 8005f74:	4950      	ldr	r1, [pc, #320]	; (80060b8 <__ieee754_pow+0x3c0>)
 8005f76:	f7fa f933 	bl	80001e0 <__aeabi_dsub>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	4680      	mov	r8, r0
 8005f80:	4689      	mov	r9, r1
 8005f82:	4620      	mov	r0, r4
 8005f84:	4629      	mov	r1, r5
 8005f86:	f7fa fae3 	bl	8000550 <__aeabi_dmul>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4649      	mov	r1, r9
 8005f92:	f7fa fadd 	bl	8000550 <__aeabi_dmul>
 8005f96:	a340      	add	r3, pc, #256	; (adr r3, 8006098 <__ieee754_pow+0x3a0>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa fad8 	bl	8000550 <__aeabi_dmul>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa8:	f7fa f91a 	bl	80001e0 <__aeabi_dsub>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	f7fa f914 	bl	80001e4 <__adddf3>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fc2:	4632      	mov	r2, r6
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	f7fa f90b 	bl	80001e0 <__aeabi_dsub>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7fa f905 	bl	80001e0 <__aeabi_dsub>
 8005fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fd8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	4606      	mov	r6, r0
 8005fe0:	460f      	mov	r7, r1
 8005fe2:	f040 81eb 	bne.w	80063bc <__ieee754_pow+0x6c4>
 8005fe6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80060a0 <__ieee754_pow+0x3a8>
 8005fea:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005fee:	2400      	movs	r4, #0
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ffc:	f7fa f8f0 	bl	80001e0 <__aeabi_dsub>
 8006000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006004:	f7fa faa4 	bl	8000550 <__aeabi_dmul>
 8006008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800600c:	4680      	mov	r8, r0
 800600e:	4689      	mov	r9, r1
 8006010:	4630      	mov	r0, r6
 8006012:	4639      	mov	r1, r7
 8006014:	f7fa fa9c 	bl	8000550 <__aeabi_dmul>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4640      	mov	r0, r8
 800601e:	4649      	mov	r1, r9
 8006020:	f7fa f8e0 	bl	80001e4 <__adddf3>
 8006024:	4622      	mov	r2, r4
 8006026:	462b      	mov	r3, r5
 8006028:	4680      	mov	r8, r0
 800602a:	4689      	mov	r9, r1
 800602c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006030:	f7fa fa8e 	bl	8000550 <__aeabi_dmul>
 8006034:	460b      	mov	r3, r1
 8006036:	4604      	mov	r4, r0
 8006038:	460d      	mov	r5, r1
 800603a:	4602      	mov	r2, r0
 800603c:	4649      	mov	r1, r9
 800603e:	4640      	mov	r0, r8
 8006040:	e9cd 4500 	strd	r4, r5, [sp]
 8006044:	f7fa f8ce 	bl	80001e4 <__adddf3>
 8006048:	4b1c      	ldr	r3, [pc, #112]	; (80060bc <__ieee754_pow+0x3c4>)
 800604a:	4299      	cmp	r1, r3
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	468b      	mov	fp, r1
 8006052:	f340 82f7 	ble.w	8006644 <__ieee754_pow+0x94c>
 8006056:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800605a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800605e:	4303      	orrs	r3, r0
 8006060:	f000 81ea 	beq.w	8006438 <__ieee754_pow+0x740>
 8006064:	a310      	add	r3, pc, #64	; (adr r3, 80060a8 <__ieee754_pow+0x3b0>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800606e:	f7fa fa6f 	bl	8000550 <__aeabi_dmul>
 8006072:	a30d      	add	r3, pc, #52	; (adr r3, 80060a8 <__ieee754_pow+0x3b0>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	e6d5      	b.n	8005e26 <__ieee754_pow+0x12e>
 800607a:	bf00      	nop
 800607c:	f3af 8000 	nop.w
 8006080:	60000000 	.word	0x60000000
 8006084:	3ff71547 	.word	0x3ff71547
 8006088:	f85ddf44 	.word	0xf85ddf44
 800608c:	3e54ae0b 	.word	0x3e54ae0b
 8006090:	55555555 	.word	0x55555555
 8006094:	3fd55555 	.word	0x3fd55555
 8006098:	652b82fe 	.word	0x652b82fe
 800609c:	3ff71547 	.word	0x3ff71547
 80060a0:	00000000 	.word	0x00000000
 80060a4:	bff00000 	.word	0xbff00000
 80060a8:	8800759c 	.word	0x8800759c
 80060ac:	7e37e43c 	.word	0x7e37e43c
 80060b0:	3ff00000 	.word	0x3ff00000
 80060b4:	3fd00000 	.word	0x3fd00000
 80060b8:	3fe00000 	.word	0x3fe00000
 80060bc:	408fffff 	.word	0x408fffff
 80060c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	da05      	bge.n	80060d6 <__ieee754_pow+0x3de>
 80060ca:	4bd3      	ldr	r3, [pc, #844]	; (8006418 <__ieee754_pow+0x720>)
 80060cc:	f7fa fa40 	bl	8000550 <__aeabi_dmul>
 80060d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80060d4:	460c      	mov	r4, r1
 80060d6:	1523      	asrs	r3, r4, #20
 80060d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80060dc:	4413      	add	r3, r2
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	4bce      	ldr	r3, [pc, #824]	; (800641c <__ieee754_pow+0x724>)
 80060e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80060e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80060ea:	429c      	cmp	r4, r3
 80060ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80060f0:	dd08      	ble.n	8006104 <__ieee754_pow+0x40c>
 80060f2:	4bcb      	ldr	r3, [pc, #812]	; (8006420 <__ieee754_pow+0x728>)
 80060f4:	429c      	cmp	r4, r3
 80060f6:	f340 815e 	ble.w	80063b6 <__ieee754_pow+0x6be>
 80060fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fc:	3301      	adds	r3, #1
 80060fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006100:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006104:	f04f 0a00 	mov.w	sl, #0
 8006108:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800610c:	930c      	str	r3, [sp, #48]	; 0x30
 800610e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006110:	4bc4      	ldr	r3, [pc, #784]	; (8006424 <__ieee754_pow+0x72c>)
 8006112:	4413      	add	r3, r2
 8006114:	ed93 7b00 	vldr	d7, [r3]
 8006118:	4629      	mov	r1, r5
 800611a:	ec53 2b17 	vmov	r2, r3, d7
 800611e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006122:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006126:	f7fa f85b 	bl	80001e0 <__aeabi_dsub>
 800612a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800612e:	4606      	mov	r6, r0
 8006130:	460f      	mov	r7, r1
 8006132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006136:	f7fa f855 	bl	80001e4 <__adddf3>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	2000      	movs	r0, #0
 8006140:	49b9      	ldr	r1, [pc, #740]	; (8006428 <__ieee754_pow+0x730>)
 8006142:	f7fa fb2f 	bl	80007a4 <__aeabi_ddiv>
 8006146:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4630      	mov	r0, r6
 8006150:	4639      	mov	r1, r7
 8006152:	f7fa f9fd 	bl	8000550 <__aeabi_dmul>
 8006156:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800615a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800615e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006162:	2300      	movs	r3, #0
 8006164:	9302      	str	r3, [sp, #8]
 8006166:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800616a:	106d      	asrs	r5, r5, #1
 800616c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006170:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006174:	2200      	movs	r2, #0
 8006176:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	4614      	mov	r4, r2
 8006180:	461d      	mov	r5, r3
 8006182:	f7fa f9e5 	bl	8000550 <__aeabi_dmul>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4630      	mov	r0, r6
 800618c:	4639      	mov	r1, r7
 800618e:	f7fa f827 	bl	80001e0 <__aeabi_dsub>
 8006192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006196:	4606      	mov	r6, r0
 8006198:	460f      	mov	r7, r1
 800619a:	4620      	mov	r0, r4
 800619c:	4629      	mov	r1, r5
 800619e:	f7fa f81f 	bl	80001e0 <__aeabi_dsub>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061aa:	f7fa f819 	bl	80001e0 <__aeabi_dsub>
 80061ae:	4642      	mov	r2, r8
 80061b0:	464b      	mov	r3, r9
 80061b2:	f7fa f9cd 	bl	8000550 <__aeabi_dmul>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4630      	mov	r0, r6
 80061bc:	4639      	mov	r1, r7
 80061be:	f7fa f80f 	bl	80001e0 <__aeabi_dsub>
 80061c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80061c6:	f7fa f9c3 	bl	8000550 <__aeabi_dmul>
 80061ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061d2:	4610      	mov	r0, r2
 80061d4:	4619      	mov	r1, r3
 80061d6:	f7fa f9bb 	bl	8000550 <__aeabi_dmul>
 80061da:	a37b      	add	r3, pc, #492	; (adr r3, 80063c8 <__ieee754_pow+0x6d0>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	4604      	mov	r4, r0
 80061e2:	460d      	mov	r5, r1
 80061e4:	f7fa f9b4 	bl	8000550 <__aeabi_dmul>
 80061e8:	a379      	add	r3, pc, #484	; (adr r3, 80063d0 <__ieee754_pow+0x6d8>)
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f7f9 fff9 	bl	80001e4 <__adddf3>
 80061f2:	4622      	mov	r2, r4
 80061f4:	462b      	mov	r3, r5
 80061f6:	f7fa f9ab 	bl	8000550 <__aeabi_dmul>
 80061fa:	a377      	add	r3, pc, #476	; (adr r3, 80063d8 <__ieee754_pow+0x6e0>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f7f9 fff0 	bl	80001e4 <__adddf3>
 8006204:	4622      	mov	r2, r4
 8006206:	462b      	mov	r3, r5
 8006208:	f7fa f9a2 	bl	8000550 <__aeabi_dmul>
 800620c:	a374      	add	r3, pc, #464	; (adr r3, 80063e0 <__ieee754_pow+0x6e8>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f7f9 ffe7 	bl	80001e4 <__adddf3>
 8006216:	4622      	mov	r2, r4
 8006218:	462b      	mov	r3, r5
 800621a:	f7fa f999 	bl	8000550 <__aeabi_dmul>
 800621e:	a372      	add	r3, pc, #456	; (adr r3, 80063e8 <__ieee754_pow+0x6f0>)
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f7f9 ffde 	bl	80001e4 <__adddf3>
 8006228:	4622      	mov	r2, r4
 800622a:	462b      	mov	r3, r5
 800622c:	f7fa f990 	bl	8000550 <__aeabi_dmul>
 8006230:	a36f      	add	r3, pc, #444	; (adr r3, 80063f0 <__ieee754_pow+0x6f8>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7f9 ffd5 	bl	80001e4 <__adddf3>
 800623a:	4622      	mov	r2, r4
 800623c:	4606      	mov	r6, r0
 800623e:	460f      	mov	r7, r1
 8006240:	462b      	mov	r3, r5
 8006242:	4620      	mov	r0, r4
 8006244:	4629      	mov	r1, r5
 8006246:	f7fa f983 	bl	8000550 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4630      	mov	r0, r6
 8006250:	4639      	mov	r1, r7
 8006252:	f7fa f97d 	bl	8000550 <__aeabi_dmul>
 8006256:	4642      	mov	r2, r8
 8006258:	4604      	mov	r4, r0
 800625a:	460d      	mov	r5, r1
 800625c:	464b      	mov	r3, r9
 800625e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006262:	f7f9 ffbf 	bl	80001e4 <__adddf3>
 8006266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800626a:	f7fa f971 	bl	8000550 <__aeabi_dmul>
 800626e:	4622      	mov	r2, r4
 8006270:	462b      	mov	r3, r5
 8006272:	f7f9 ffb7 	bl	80001e4 <__adddf3>
 8006276:	4642      	mov	r2, r8
 8006278:	4606      	mov	r6, r0
 800627a:	460f      	mov	r7, r1
 800627c:	464b      	mov	r3, r9
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	f7fa f965 	bl	8000550 <__aeabi_dmul>
 8006286:	2200      	movs	r2, #0
 8006288:	4b68      	ldr	r3, [pc, #416]	; (800642c <__ieee754_pow+0x734>)
 800628a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800628e:	f7f9 ffa9 	bl	80001e4 <__adddf3>
 8006292:	4632      	mov	r2, r6
 8006294:	463b      	mov	r3, r7
 8006296:	f7f9 ffa5 	bl	80001e4 <__adddf3>
 800629a:	9802      	ldr	r0, [sp, #8]
 800629c:	460d      	mov	r5, r1
 800629e:	4604      	mov	r4, r0
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa f952 	bl	8000550 <__aeabi_dmul>
 80062ac:	2200      	movs	r2, #0
 80062ae:	4680      	mov	r8, r0
 80062b0:	4689      	mov	r9, r1
 80062b2:	4b5e      	ldr	r3, [pc, #376]	; (800642c <__ieee754_pow+0x734>)
 80062b4:	4620      	mov	r0, r4
 80062b6:	4629      	mov	r1, r5
 80062b8:	f7f9 ff92 	bl	80001e0 <__aeabi_dsub>
 80062bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062c0:	f7f9 ff8e 	bl	80001e0 <__aeabi_dsub>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7f9 ff88 	bl	80001e0 <__aeabi_dsub>
 80062d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d4:	f7fa f93c 	bl	8000550 <__aeabi_dmul>
 80062d8:	4622      	mov	r2, r4
 80062da:	4606      	mov	r6, r0
 80062dc:	460f      	mov	r7, r1
 80062de:	462b      	mov	r3, r5
 80062e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e4:	f7fa f934 	bl	8000550 <__aeabi_dmul>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7f9 ff78 	bl	80001e4 <__adddf3>
 80062f4:	4606      	mov	r6, r0
 80062f6:	460f      	mov	r7, r1
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4640      	mov	r0, r8
 80062fe:	4649      	mov	r1, r9
 8006300:	f7f9 ff70 	bl	80001e4 <__adddf3>
 8006304:	9802      	ldr	r0, [sp, #8]
 8006306:	a33c      	add	r3, pc, #240	; (adr r3, 80063f8 <__ieee754_pow+0x700>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	4604      	mov	r4, r0
 800630e:	460d      	mov	r5, r1
 8006310:	f7fa f91e 	bl	8000550 <__aeabi_dmul>
 8006314:	4642      	mov	r2, r8
 8006316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800631a:	464b      	mov	r3, r9
 800631c:	4620      	mov	r0, r4
 800631e:	4629      	mov	r1, r5
 8006320:	f7f9 ff5e 	bl	80001e0 <__aeabi_dsub>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7f9 ff58 	bl	80001e0 <__aeabi_dsub>
 8006330:	a333      	add	r3, pc, #204	; (adr r3, 8006400 <__ieee754_pow+0x708>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f7fa f90b 	bl	8000550 <__aeabi_dmul>
 800633a:	a333      	add	r3, pc, #204	; (adr r3, 8006408 <__ieee754_pow+0x710>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	4606      	mov	r6, r0
 8006342:	460f      	mov	r7, r1
 8006344:	4620      	mov	r0, r4
 8006346:	4629      	mov	r1, r5
 8006348:	f7fa f902 	bl	8000550 <__aeabi_dmul>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4630      	mov	r0, r6
 8006352:	4639      	mov	r1, r7
 8006354:	f7f9 ff46 	bl	80001e4 <__adddf3>
 8006358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800635a:	4b35      	ldr	r3, [pc, #212]	; (8006430 <__ieee754_pow+0x738>)
 800635c:	4413      	add	r3, r2
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7f9 ff3f 	bl	80001e4 <__adddf3>
 8006366:	4604      	mov	r4, r0
 8006368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800636a:	460d      	mov	r5, r1
 800636c:	f7fa f886 	bl	800047c <__aeabi_i2d>
 8006370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006372:	4b30      	ldr	r3, [pc, #192]	; (8006434 <__ieee754_pow+0x73c>)
 8006374:	4413      	add	r3, r2
 8006376:	e9d3 8900 	ldrd	r8, r9, [r3]
 800637a:	4606      	mov	r6, r0
 800637c:	460f      	mov	r7, r1
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006386:	f7f9 ff2d 	bl	80001e4 <__adddf3>
 800638a:	4642      	mov	r2, r8
 800638c:	464b      	mov	r3, r9
 800638e:	f7f9 ff29 	bl	80001e4 <__adddf3>
 8006392:	4632      	mov	r2, r6
 8006394:	463b      	mov	r3, r7
 8006396:	f7f9 ff25 	bl	80001e4 <__adddf3>
 800639a:	9802      	ldr	r0, [sp, #8]
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063a4:	f7f9 ff1c 	bl	80001e0 <__aeabi_dsub>
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	f7f9 ff18 	bl	80001e0 <__aeabi_dsub>
 80063b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b4:	e607      	b.n	8005fc6 <__ieee754_pow+0x2ce>
 80063b6:	f04f 0a01 	mov.w	sl, #1
 80063ba:	e6a5      	b.n	8006108 <__ieee754_pow+0x410>
 80063bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006410 <__ieee754_pow+0x718>
 80063c0:	e613      	b.n	8005fea <__ieee754_pow+0x2f2>
 80063c2:	bf00      	nop
 80063c4:	f3af 8000 	nop.w
 80063c8:	4a454eef 	.word	0x4a454eef
 80063cc:	3fca7e28 	.word	0x3fca7e28
 80063d0:	93c9db65 	.word	0x93c9db65
 80063d4:	3fcd864a 	.word	0x3fcd864a
 80063d8:	a91d4101 	.word	0xa91d4101
 80063dc:	3fd17460 	.word	0x3fd17460
 80063e0:	518f264d 	.word	0x518f264d
 80063e4:	3fd55555 	.word	0x3fd55555
 80063e8:	db6fabff 	.word	0xdb6fabff
 80063ec:	3fdb6db6 	.word	0x3fdb6db6
 80063f0:	33333303 	.word	0x33333303
 80063f4:	3fe33333 	.word	0x3fe33333
 80063f8:	e0000000 	.word	0xe0000000
 80063fc:	3feec709 	.word	0x3feec709
 8006400:	dc3a03fd 	.word	0xdc3a03fd
 8006404:	3feec709 	.word	0x3feec709
 8006408:	145b01f5 	.word	0x145b01f5
 800640c:	be3e2fe0 	.word	0xbe3e2fe0
 8006410:	00000000 	.word	0x00000000
 8006414:	3ff00000 	.word	0x3ff00000
 8006418:	43400000 	.word	0x43400000
 800641c:	0003988e 	.word	0x0003988e
 8006420:	000bb679 	.word	0x000bb679
 8006424:	08007f60 	.word	0x08007f60
 8006428:	3ff00000 	.word	0x3ff00000
 800642c:	40080000 	.word	0x40080000
 8006430:	08007f80 	.word	0x08007f80
 8006434:	08007f70 	.word	0x08007f70
 8006438:	a3b4      	add	r3, pc, #720	; (adr r3, 800670c <__ieee754_pow+0xa14>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	4640      	mov	r0, r8
 8006440:	4649      	mov	r1, r9
 8006442:	f7f9 fecf 	bl	80001e4 <__adddf3>
 8006446:	4622      	mov	r2, r4
 8006448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800644c:	462b      	mov	r3, r5
 800644e:	4630      	mov	r0, r6
 8006450:	4639      	mov	r1, r7
 8006452:	f7f9 fec5 	bl	80001e0 <__aeabi_dsub>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800645e:	f7fa fb07 	bl	8000a70 <__aeabi_dcmpgt>
 8006462:	2800      	cmp	r0, #0
 8006464:	f47f adfe 	bne.w	8006064 <__ieee754_pow+0x36c>
 8006468:	4aa3      	ldr	r2, [pc, #652]	; (80066f8 <__ieee754_pow+0xa00>)
 800646a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800646e:	4293      	cmp	r3, r2
 8006470:	f340 810a 	ble.w	8006688 <__ieee754_pow+0x990>
 8006474:	151b      	asrs	r3, r3, #20
 8006476:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800647a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800647e:	fa4a f303 	asr.w	r3, sl, r3
 8006482:	445b      	add	r3, fp
 8006484:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006488:	4e9c      	ldr	r6, [pc, #624]	; (80066fc <__ieee754_pow+0xa04>)
 800648a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800648e:	4116      	asrs	r6, r2
 8006490:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006494:	2000      	movs	r0, #0
 8006496:	ea23 0106 	bic.w	r1, r3, r6
 800649a:	f1c2 0214 	rsb	r2, r2, #20
 800649e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80064a2:	fa4a fa02 	asr.w	sl, sl, r2
 80064a6:	f1bb 0f00 	cmp.w	fp, #0
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	bfb8      	it	lt
 80064b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80064b8:	f7f9 fe92 	bl	80001e0 <__aeabi_dsub>
 80064bc:	e9cd 0100 	strd	r0, r1, [sp]
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064c8:	f7f9 fe8c 	bl	80001e4 <__adddf3>
 80064cc:	2000      	movs	r0, #0
 80064ce:	a378      	add	r3, pc, #480	; (adr r3, 80066b0 <__ieee754_pow+0x9b8>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	f7fa f83a 	bl	8000550 <__aeabi_dmul>
 80064dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064e0:	4606      	mov	r6, r0
 80064e2:	460f      	mov	r7, r1
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7f9 fe7a 	bl	80001e0 <__aeabi_dsub>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7f9 fe74 	bl	80001e0 <__aeabi_dsub>
 80064f8:	a36f      	add	r3, pc, #444	; (adr r3, 80066b8 <__ieee754_pow+0x9c0>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7fa f827 	bl	8000550 <__aeabi_dmul>
 8006502:	a36f      	add	r3, pc, #444	; (adr r3, 80066c0 <__ieee754_pow+0x9c8>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	4680      	mov	r8, r0
 800650a:	4689      	mov	r9, r1
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	f7fa f81e 	bl	8000550 <__aeabi_dmul>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4640      	mov	r0, r8
 800651a:	4649      	mov	r1, r9
 800651c:	f7f9 fe62 	bl	80001e4 <__adddf3>
 8006520:	4604      	mov	r4, r0
 8006522:	460d      	mov	r5, r1
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7f9 fe5a 	bl	80001e4 <__adddf3>
 8006530:	4632      	mov	r2, r6
 8006532:	463b      	mov	r3, r7
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	f7f9 fe52 	bl	80001e0 <__aeabi_dsub>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4620      	mov	r0, r4
 8006542:	4629      	mov	r1, r5
 8006544:	f7f9 fe4c 	bl	80001e0 <__aeabi_dsub>
 8006548:	4642      	mov	r2, r8
 800654a:	4606      	mov	r6, r0
 800654c:	460f      	mov	r7, r1
 800654e:	464b      	mov	r3, r9
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7f9 fffc 	bl	8000550 <__aeabi_dmul>
 8006558:	a35b      	add	r3, pc, #364	; (adr r3, 80066c8 <__ieee754_pow+0x9d0>)
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	f7f9 fff5 	bl	8000550 <__aeabi_dmul>
 8006566:	a35a      	add	r3, pc, #360	; (adr r3, 80066d0 <__ieee754_pow+0x9d8>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7f9 fe38 	bl	80001e0 <__aeabi_dsub>
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	f7f9 ffec 	bl	8000550 <__aeabi_dmul>
 8006578:	a357      	add	r3, pc, #348	; (adr r3, 80066d8 <__ieee754_pow+0x9e0>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7f9 fe31 	bl	80001e4 <__adddf3>
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	f7f9 ffe3 	bl	8000550 <__aeabi_dmul>
 800658a:	a355      	add	r3, pc, #340	; (adr r3, 80066e0 <__ieee754_pow+0x9e8>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7f9 fe26 	bl	80001e0 <__aeabi_dsub>
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	f7f9 ffda 	bl	8000550 <__aeabi_dmul>
 800659c:	a352      	add	r3, pc, #328	; (adr r3, 80066e8 <__ieee754_pow+0x9f0>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe1f 	bl	80001e4 <__adddf3>
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f7f9 ffd1 	bl	8000550 <__aeabi_dmul>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4640      	mov	r0, r8
 80065b4:	4649      	mov	r1, r9
 80065b6:	f7f9 fe13 	bl	80001e0 <__aeabi_dsub>
 80065ba:	4604      	mov	r4, r0
 80065bc:	460d      	mov	r5, r1
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4640      	mov	r0, r8
 80065c4:	4649      	mov	r1, r9
 80065c6:	f7f9 ffc3 	bl	8000550 <__aeabi_dmul>
 80065ca:	2200      	movs	r2, #0
 80065cc:	e9cd 0100 	strd	r0, r1, [sp]
 80065d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065d4:	4620      	mov	r0, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	f7f9 fe02 	bl	80001e0 <__aeabi_dsub>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065e4:	f7fa f8de 	bl	80007a4 <__aeabi_ddiv>
 80065e8:	4632      	mov	r2, r6
 80065ea:	4604      	mov	r4, r0
 80065ec:	460d      	mov	r5, r1
 80065ee:	463b      	mov	r3, r7
 80065f0:	4640      	mov	r0, r8
 80065f2:	4649      	mov	r1, r9
 80065f4:	f7f9 ffac 	bl	8000550 <__aeabi_dmul>
 80065f8:	4632      	mov	r2, r6
 80065fa:	463b      	mov	r3, r7
 80065fc:	f7f9 fdf2 	bl	80001e4 <__adddf3>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	f7f9 fdea 	bl	80001e0 <__aeabi_dsub>
 800660c:	4642      	mov	r2, r8
 800660e:	464b      	mov	r3, r9
 8006610:	f7f9 fde6 	bl	80001e0 <__aeabi_dsub>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	2000      	movs	r0, #0
 800661a:	4939      	ldr	r1, [pc, #228]	; (8006700 <__ieee754_pow+0xa08>)
 800661c:	f7f9 fde0 	bl	80001e0 <__aeabi_dsub>
 8006620:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006624:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	da2f      	bge.n	800668e <__ieee754_pow+0x996>
 800662e:	4650      	mov	r0, sl
 8006630:	ec43 2b10 	vmov	d0, r2, r3
 8006634:	f001 f98c 	bl	8007950 <scalbn>
 8006638:	ec51 0b10 	vmov	r0, r1, d0
 800663c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006640:	f7ff bbf1 	b.w	8005e26 <__ieee754_pow+0x12e>
 8006644:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <__ieee754_pow+0xa0c>)
 8006646:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800664a:	429e      	cmp	r6, r3
 800664c:	f77f af0c 	ble.w	8006468 <__ieee754_pow+0x770>
 8006650:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <__ieee754_pow+0xa10>)
 8006652:	440b      	add	r3, r1
 8006654:	4303      	orrs	r3, r0
 8006656:	d00b      	beq.n	8006670 <__ieee754_pow+0x978>
 8006658:	a325      	add	r3, pc, #148	; (adr r3, 80066f0 <__ieee754_pow+0x9f8>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006662:	f7f9 ff75 	bl	8000550 <__aeabi_dmul>
 8006666:	a322      	add	r3, pc, #136	; (adr r3, 80066f0 <__ieee754_pow+0x9f8>)
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f7ff bbdb 	b.w	8005e26 <__ieee754_pow+0x12e>
 8006670:	4622      	mov	r2, r4
 8006672:	462b      	mov	r3, r5
 8006674:	f7f9 fdb4 	bl	80001e0 <__aeabi_dsub>
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	f7fa f9ee 	bl	8000a5c <__aeabi_dcmpge>
 8006680:	2800      	cmp	r0, #0
 8006682:	f43f aef1 	beq.w	8006468 <__ieee754_pow+0x770>
 8006686:	e7e7      	b.n	8006658 <__ieee754_pow+0x960>
 8006688:	f04f 0a00 	mov.w	sl, #0
 800668c:	e718      	b.n	80064c0 <__ieee754_pow+0x7c8>
 800668e:	4621      	mov	r1, r4
 8006690:	e7d4      	b.n	800663c <__ieee754_pow+0x944>
 8006692:	2000      	movs	r0, #0
 8006694:	491a      	ldr	r1, [pc, #104]	; (8006700 <__ieee754_pow+0xa08>)
 8006696:	f7ff bb8f 	b.w	8005db8 <__ieee754_pow+0xc0>
 800669a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800669e:	f7ff bb8b 	b.w	8005db8 <__ieee754_pow+0xc0>
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7ff bb87 	b.w	8005db8 <__ieee754_pow+0xc0>
 80066aa:	4693      	mov	fp, r2
 80066ac:	f7ff bb98 	b.w	8005de0 <__ieee754_pow+0xe8>
 80066b0:	00000000 	.word	0x00000000
 80066b4:	3fe62e43 	.word	0x3fe62e43
 80066b8:	fefa39ef 	.word	0xfefa39ef
 80066bc:	3fe62e42 	.word	0x3fe62e42
 80066c0:	0ca86c39 	.word	0x0ca86c39
 80066c4:	be205c61 	.word	0xbe205c61
 80066c8:	72bea4d0 	.word	0x72bea4d0
 80066cc:	3e663769 	.word	0x3e663769
 80066d0:	c5d26bf1 	.word	0xc5d26bf1
 80066d4:	3ebbbd41 	.word	0x3ebbbd41
 80066d8:	af25de2c 	.word	0xaf25de2c
 80066dc:	3f11566a 	.word	0x3f11566a
 80066e0:	16bebd93 	.word	0x16bebd93
 80066e4:	3f66c16c 	.word	0x3f66c16c
 80066e8:	5555553e 	.word	0x5555553e
 80066ec:	3fc55555 	.word	0x3fc55555
 80066f0:	c2f8f359 	.word	0xc2f8f359
 80066f4:	01a56e1f 	.word	0x01a56e1f
 80066f8:	3fe00000 	.word	0x3fe00000
 80066fc:	000fffff 	.word	0x000fffff
 8006700:	3ff00000 	.word	0x3ff00000
 8006704:	4090cbff 	.word	0x4090cbff
 8006708:	3f6f3400 	.word	0x3f6f3400
 800670c:	652b82fe 	.word	0x652b82fe
 8006710:	3c971547 	.word	0x3c971547

08006714 <__ieee754_sqrt>:
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	4955      	ldr	r1, [pc, #340]	; (8006870 <__ieee754_sqrt+0x15c>)
 800671a:	ec55 4b10 	vmov	r4, r5, d0
 800671e:	43a9      	bics	r1, r5
 8006720:	462b      	mov	r3, r5
 8006722:	462a      	mov	r2, r5
 8006724:	d112      	bne.n	800674c <__ieee754_sqrt+0x38>
 8006726:	ee10 2a10 	vmov	r2, s0
 800672a:	ee10 0a10 	vmov	r0, s0
 800672e:	4629      	mov	r1, r5
 8006730:	f7f9 ff0e 	bl	8000550 <__aeabi_dmul>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4620      	mov	r0, r4
 800673a:	4629      	mov	r1, r5
 800673c:	f7f9 fd52 	bl	80001e4 <__adddf3>
 8006740:	4604      	mov	r4, r0
 8006742:	460d      	mov	r5, r1
 8006744:	ec45 4b10 	vmov	d0, r4, r5
 8006748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800674c:	2d00      	cmp	r5, #0
 800674e:	ee10 0a10 	vmov	r0, s0
 8006752:	4621      	mov	r1, r4
 8006754:	dc0f      	bgt.n	8006776 <__ieee754_sqrt+0x62>
 8006756:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800675a:	4330      	orrs	r0, r6
 800675c:	d0f2      	beq.n	8006744 <__ieee754_sqrt+0x30>
 800675e:	b155      	cbz	r5, 8006776 <__ieee754_sqrt+0x62>
 8006760:	ee10 2a10 	vmov	r2, s0
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	f7f9 fd3a 	bl	80001e0 <__aeabi_dsub>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	f7fa f818 	bl	80007a4 <__aeabi_ddiv>
 8006774:	e7e4      	b.n	8006740 <__ieee754_sqrt+0x2c>
 8006776:	151b      	asrs	r3, r3, #20
 8006778:	d073      	beq.n	8006862 <__ieee754_sqrt+0x14e>
 800677a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800677e:	07dd      	lsls	r5, r3, #31
 8006780:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006784:	bf48      	it	mi
 8006786:	0fc8      	lsrmi	r0, r1, #31
 8006788:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800678c:	bf44      	itt	mi
 800678e:	0049      	lslmi	r1, r1, #1
 8006790:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006794:	2500      	movs	r5, #0
 8006796:	1058      	asrs	r0, r3, #1
 8006798:	0fcb      	lsrs	r3, r1, #31
 800679a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800679e:	0049      	lsls	r1, r1, #1
 80067a0:	2316      	movs	r3, #22
 80067a2:	462c      	mov	r4, r5
 80067a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80067a8:	19a7      	adds	r7, r4, r6
 80067aa:	4297      	cmp	r7, r2
 80067ac:	bfde      	ittt	le
 80067ae:	19bc      	addle	r4, r7, r6
 80067b0:	1bd2      	suble	r2, r2, r7
 80067b2:	19ad      	addle	r5, r5, r6
 80067b4:	0fcf      	lsrs	r7, r1, #31
 80067b6:	3b01      	subs	r3, #1
 80067b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80067bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80067c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067c4:	d1f0      	bne.n	80067a8 <__ieee754_sqrt+0x94>
 80067c6:	f04f 0c20 	mov.w	ip, #32
 80067ca:	469e      	mov	lr, r3
 80067cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80067d0:	42a2      	cmp	r2, r4
 80067d2:	eb06 070e 	add.w	r7, r6, lr
 80067d6:	dc02      	bgt.n	80067de <__ieee754_sqrt+0xca>
 80067d8:	d112      	bne.n	8006800 <__ieee754_sqrt+0xec>
 80067da:	428f      	cmp	r7, r1
 80067dc:	d810      	bhi.n	8006800 <__ieee754_sqrt+0xec>
 80067de:	2f00      	cmp	r7, #0
 80067e0:	eb07 0e06 	add.w	lr, r7, r6
 80067e4:	da42      	bge.n	800686c <__ieee754_sqrt+0x158>
 80067e6:	f1be 0f00 	cmp.w	lr, #0
 80067ea:	db3f      	blt.n	800686c <__ieee754_sqrt+0x158>
 80067ec:	f104 0801 	add.w	r8, r4, #1
 80067f0:	1b12      	subs	r2, r2, r4
 80067f2:	428f      	cmp	r7, r1
 80067f4:	bf88      	it	hi
 80067f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80067fa:	1bc9      	subs	r1, r1, r7
 80067fc:	4433      	add	r3, r6
 80067fe:	4644      	mov	r4, r8
 8006800:	0052      	lsls	r2, r2, #1
 8006802:	f1bc 0c01 	subs.w	ip, ip, #1
 8006806:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800680a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800680e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006812:	d1dd      	bne.n	80067d0 <__ieee754_sqrt+0xbc>
 8006814:	430a      	orrs	r2, r1
 8006816:	d006      	beq.n	8006826 <__ieee754_sqrt+0x112>
 8006818:	1c5c      	adds	r4, r3, #1
 800681a:	bf13      	iteet	ne
 800681c:	3301      	addne	r3, #1
 800681e:	3501      	addeq	r5, #1
 8006820:	4663      	moveq	r3, ip
 8006822:	f023 0301 	bicne.w	r3, r3, #1
 8006826:	106a      	asrs	r2, r5, #1
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	07e9      	lsls	r1, r5, #31
 800682c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006830:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006834:	bf48      	it	mi
 8006836:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800683a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800683e:	461c      	mov	r4, r3
 8006840:	e780      	b.n	8006744 <__ieee754_sqrt+0x30>
 8006842:	0aca      	lsrs	r2, r1, #11
 8006844:	3815      	subs	r0, #21
 8006846:	0549      	lsls	r1, r1, #21
 8006848:	2a00      	cmp	r2, #0
 800684a:	d0fa      	beq.n	8006842 <__ieee754_sqrt+0x12e>
 800684c:	02d6      	lsls	r6, r2, #11
 800684e:	d50a      	bpl.n	8006866 <__ieee754_sqrt+0x152>
 8006850:	f1c3 0420 	rsb	r4, r3, #32
 8006854:	fa21 f404 	lsr.w	r4, r1, r4
 8006858:	1e5d      	subs	r5, r3, #1
 800685a:	4099      	lsls	r1, r3
 800685c:	4322      	orrs	r2, r4
 800685e:	1b43      	subs	r3, r0, r5
 8006860:	e78b      	b.n	800677a <__ieee754_sqrt+0x66>
 8006862:	4618      	mov	r0, r3
 8006864:	e7f0      	b.n	8006848 <__ieee754_sqrt+0x134>
 8006866:	0052      	lsls	r2, r2, #1
 8006868:	3301      	adds	r3, #1
 800686a:	e7ef      	b.n	800684c <__ieee754_sqrt+0x138>
 800686c:	46a0      	mov	r8, r4
 800686e:	e7bf      	b.n	80067f0 <__ieee754_sqrt+0xdc>
 8006870:	7ff00000 	.word	0x7ff00000

08006874 <__ieee754_acosf>:
 8006874:	b508      	push	{r3, lr}
 8006876:	ee10 3a10 	vmov	r3, s0
 800687a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800687e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006882:	ed2d 8b0c 	vpush	{d8-d13}
 8006886:	d10a      	bne.n	800689e <__ieee754_acosf+0x2a>
 8006888:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8006a28 <__ieee754_acosf+0x1b4>
 800688c:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8006a2c <__ieee754_acosf+0x1b8>
 8006890:	2b00      	cmp	r3, #0
 8006892:	bfd8      	it	le
 8006894:	eeb0 0a48 	vmovle.f32	s0, s16
 8006898:	ecbd 8b0c 	vpop	{d8-d13}
 800689c:	bd08      	pop	{r3, pc}
 800689e:	dd04      	ble.n	80068aa <__ieee754_acosf+0x36>
 80068a0:	ee30 8a40 	vsub.f32	s16, s0, s0
 80068a4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80068a8:	e7f6      	b.n	8006898 <__ieee754_acosf+0x24>
 80068aa:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80068ae:	da3e      	bge.n	800692e <__ieee754_acosf+0xba>
 80068b0:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80068b4:	f340 80b5 	ble.w	8006a22 <__ieee754_acosf+0x1ae>
 80068b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80068bc:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8006a30 <__ieee754_acosf+0x1bc>
 80068c0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006a34 <__ieee754_acosf+0x1c0>
 80068c4:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8006a38 <__ieee754_acosf+0x1c4>
 80068c8:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8006a3c <__ieee754_acosf+0x1c8>
 80068cc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80068d0:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8006a40 <__ieee754_acosf+0x1cc>
 80068d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80068d8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8006a44 <__ieee754_acosf+0x1d0>
 80068dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068e0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8006a48 <__ieee754_acosf+0x1d4>
 80068e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80068e8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006a4c <__ieee754_acosf+0x1d8>
 80068ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80068f0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006a50 <__ieee754_acosf+0x1dc>
 80068f4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80068f8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8006a54 <__ieee754_acosf+0x1e0>
 80068fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006900:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8006a58 <__ieee754_acosf+0x1e4>
 8006904:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006914:	eef0 7a66 	vmov.f32	s15, s13
 8006918:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800691c:	eea0 8a66 	vfms.f32	s16, s0, s13
 8006920:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006924:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8006a5c <__ieee754_acosf+0x1e8>
 8006928:	ee30 0a48 	vsub.f32	s0, s0, s16
 800692c:	e7b4      	b.n	8006898 <__ieee754_acosf+0x24>
 800692e:	2b00      	cmp	r3, #0
 8006930:	eddf da3f 	vldr	s27, [pc, #252]	; 8006a30 <__ieee754_acosf+0x1bc>
 8006934:	eddf ca3f 	vldr	s25, [pc, #252]	; 8006a34 <__ieee754_acosf+0x1c0>
 8006938:	ed9f ca41 	vldr	s24, [pc, #260]	; 8006a40 <__ieee754_acosf+0x1cc>
 800693c:	eddf ba41 	vldr	s23, [pc, #260]	; 8006a44 <__ieee754_acosf+0x1d0>
 8006940:	ed9f ba41 	vldr	s22, [pc, #260]	; 8006a48 <__ieee754_acosf+0x1d4>
 8006944:	eddf 8a41 	vldr	s17, [pc, #260]	; 8006a4c <__ieee754_acosf+0x1d8>
 8006948:	ed9f da41 	vldr	s26, [pc, #260]	; 8006a50 <__ieee754_acosf+0x1dc>
 800694c:	eddf aa3a 	vldr	s21, [pc, #232]	; 8006a38 <__ieee754_acosf+0x1c4>
 8006950:	ed9f aa40 	vldr	s20, [pc, #256]	; 8006a54 <__ieee754_acosf+0x1e0>
 8006954:	eddf 9a40 	vldr	s19, [pc, #256]	; 8006a58 <__ieee754_acosf+0x1e4>
 8006958:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800695c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006960:	da28      	bge.n	80069b4 <__ieee754_acosf+0x140>
 8006962:	ee30 0a09 	vadd.f32	s0, s0, s18
 8006966:	ee20 0a27 	vmul.f32	s0, s0, s15
 800696a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800696e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8006972:	eeac ca80 	vfma.f32	s24, s25, s0
 8006976:	eeaa aa80 	vfma.f32	s20, s21, s0
 800697a:	eeec ba00 	vfma.f32	s23, s24, s0
 800697e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8006982:	eeab ba80 	vfma.f32	s22, s23, s0
 8006986:	eea9 9a80 	vfma.f32	s18, s19, s0
 800698a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800698e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8006992:	f000 fb2d 	bl	8006ff0 <__ieee754_sqrtf>
 8006996:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800699a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006a60 <__ieee754_acosf+0x1ec>
 800699e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80069a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80069aa:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8006a64 <__ieee754_acosf+0x1f0>
 80069ae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80069b2:	e771      	b.n	8006898 <__ieee754_acosf+0x24>
 80069b4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80069b8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80069bc:	eeb0 0a48 	vmov.f32	s0, s16
 80069c0:	f000 fb16 	bl	8006ff0 <__ieee754_sqrtf>
 80069c4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80069c8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80069cc:	eeac ca88 	vfma.f32	s24, s25, s16
 80069d0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80069d4:	eeec ba08 	vfma.f32	s23, s24, s16
 80069d8:	ee10 3a10 	vmov	r3, s0
 80069dc:	eeab ba88 	vfma.f32	s22, s23, s16
 80069e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80069e4:	f023 030f 	bic.w	r3, r3, #15
 80069e8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80069f4:	eeb0 6a48 	vmov.f32	s12, s16
 80069f8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80069fc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8006a00:	ee70 6a27 	vadd.f32	s13, s0, s15
 8006a04:	ee68 8a88 	vmul.f32	s17, s17, s16
 8006a08:	eeb0 7a40 	vmov.f32	s14, s0
 8006a0c:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8006a10:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8006a14:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006a18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006a20:	e73a      	b.n	8006898 <__ieee754_acosf+0x24>
 8006a22:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006a68 <__ieee754_acosf+0x1f4>
 8006a26:	e737      	b.n	8006898 <__ieee754_acosf+0x24>
 8006a28:	00000000 	.word	0x00000000
 8006a2c:	40490fdb 	.word	0x40490fdb
 8006a30:	3811ef08 	.word	0x3811ef08
 8006a34:	3a4f7f04 	.word	0x3a4f7f04
 8006a38:	bf303361 	.word	0xbf303361
 8006a3c:	33a22168 	.word	0x33a22168
 8006a40:	bd241146 	.word	0xbd241146
 8006a44:	3e4e0aa8 	.word	0x3e4e0aa8
 8006a48:	bea6b090 	.word	0xbea6b090
 8006a4c:	3e2aaaab 	.word	0x3e2aaaab
 8006a50:	3d9dc62e 	.word	0x3d9dc62e
 8006a54:	4001572d 	.word	0x4001572d
 8006a58:	c019d139 	.word	0xc019d139
 8006a5c:	3fc90fda 	.word	0x3fc90fda
 8006a60:	b3a22168 	.word	0xb3a22168
 8006a64:	40490fda 	.word	0x40490fda
 8006a68:	3fc90fdb 	.word	0x3fc90fdb

08006a6c <__ieee754_asinf>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	ee10 5a10 	vmov	r5, s0
 8006a72:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006a76:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006a7a:	ed2d 8b04 	vpush	{d8-d9}
 8006a7e:	d10c      	bne.n	8006a9a <__ieee754_asinf+0x2e>
 8006a80:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8006bfc <__ieee754_asinf+0x190>
 8006a84:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006c00 <__ieee754_asinf+0x194>
 8006a88:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006a8c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006a90:	eeb0 0a67 	vmov.f32	s0, s15
 8006a94:	ecbd 8b04 	vpop	{d8-d9}
 8006a98:	bd38      	pop	{r3, r4, r5, pc}
 8006a9a:	dd04      	ble.n	8006aa6 <__ieee754_asinf+0x3a>
 8006a9c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006aa0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006aa4:	e7f6      	b.n	8006a94 <__ieee754_asinf+0x28>
 8006aa6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006aaa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006aae:	da0b      	bge.n	8006ac8 <__ieee754_asinf+0x5c>
 8006ab0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8006ab4:	da52      	bge.n	8006b5c <__ieee754_asinf+0xf0>
 8006ab6:	eddf 7a53 	vldr	s15, [pc, #332]	; 8006c04 <__ieee754_asinf+0x198>
 8006aba:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006abe:	eef4 7ae8 	vcmpe.f32	s15, s17
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	dce5      	bgt.n	8006a94 <__ieee754_asinf+0x28>
 8006ac8:	f001 f88c 	bl	8007be4 <fabsf>
 8006acc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8006ad0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8006ad4:	ee20 8a08 	vmul.f32	s16, s0, s16
 8006ad8:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8006c08 <__ieee754_asinf+0x19c>
 8006adc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006c0c <__ieee754_asinf+0x1a0>
 8006ae0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8006c10 <__ieee754_asinf+0x1a4>
 8006ae4:	eea8 7a27 	vfma.f32	s14, s16, s15
 8006ae8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8006c14 <__ieee754_asinf+0x1a8>
 8006aec:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006af0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006c18 <__ieee754_asinf+0x1ac>
 8006af4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006af8:	eddf 7a48 	vldr	s15, [pc, #288]	; 8006c1c <__ieee754_asinf+0x1b0>
 8006afc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006b00:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006c20 <__ieee754_asinf+0x1b4>
 8006b04:	eea7 9a88 	vfma.f32	s18, s15, s16
 8006b08:	eddf 7a46 	vldr	s15, [pc, #280]	; 8006c24 <__ieee754_asinf+0x1b8>
 8006b0c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8006b10:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8006c28 <__ieee754_asinf+0x1bc>
 8006b14:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006b18:	eddf 7a44 	vldr	s15, [pc, #272]	; 8006c2c <__ieee754_asinf+0x1c0>
 8006b1c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8006b20:	eeb0 0a48 	vmov.f32	s0, s16
 8006b24:	eee7 8a88 	vfma.f32	s17, s15, s16
 8006b28:	f000 fa62 	bl	8006ff0 <__ieee754_sqrtf>
 8006b2c:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <__ieee754_asinf+0x1c4>)
 8006b2e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8006b32:	429c      	cmp	r4, r3
 8006b34:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8006b38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b3c:	dd3d      	ble.n	8006bba <__ieee754_asinf+0x14e>
 8006b3e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8006b42:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8006c34 <__ieee754_asinf+0x1c8>
 8006b46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006b4a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8006c00 <__ieee754_asinf+0x194>
 8006b4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	bfd8      	it	le
 8006b56:	eeb1 0a40 	vnegle.f32	s0, s0
 8006b5a:	e79b      	b.n	8006a94 <__ieee754_asinf+0x28>
 8006b5c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006b60:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006c08 <__ieee754_asinf+0x19c>
 8006b64:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006c0c <__ieee754_asinf+0x1a0>
 8006b68:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8006c20 <__ieee754_asinf+0x1b4>
 8006b6c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006b70:	eddf 6a28 	vldr	s13, [pc, #160]	; 8006c14 <__ieee754_asinf+0x1a8>
 8006b74:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b78:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006c18 <__ieee754_asinf+0x1ac>
 8006b7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b80:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c1c <__ieee754_asinf+0x1b0>
 8006b84:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b88:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006c10 <__ieee754_asinf+0x1a4>
 8006b8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b90:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006c24 <__ieee754_asinf+0x1b8>
 8006b94:	eee7 6a86 	vfma.f32	s13, s15, s12
 8006b98:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8006c28 <__ieee754_asinf+0x1bc>
 8006b9c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8006ba0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8006c2c <__ieee754_asinf+0x1c0>
 8006ba4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bac:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8006bb0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8006bb4:	eea0 0a27 	vfma.f32	s0, s0, s15
 8006bb8:	e76c      	b.n	8006a94 <__ieee754_asinf+0x28>
 8006bba:	ee10 3a10 	vmov	r3, s0
 8006bbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006bc2:	f023 030f 	bic.w	r3, r3, #15
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef1 6a67 	vneg.f32	s13, s15
 8006bce:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8006bd2:	ee70 5a00 	vadd.f32	s11, s0, s0
 8006bd6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006bda:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006bfc <__ieee754_asinf+0x190>
 8006bde:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8006be2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8006c38 <__ieee754_asinf+0x1cc>
 8006be6:	eee5 7a47 	vfms.f32	s15, s10, s14
 8006bea:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8006bee:	eeb0 6a40 	vmov.f32	s12, s0
 8006bf2:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006bf6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006bfa:	e7a8      	b.n	8006b4e <__ieee754_asinf+0xe2>
 8006bfc:	b33bbd2e 	.word	0xb33bbd2e
 8006c00:	3fc90fdb 	.word	0x3fc90fdb
 8006c04:	7149f2ca 	.word	0x7149f2ca
 8006c08:	3811ef08 	.word	0x3811ef08
 8006c0c:	3a4f7f04 	.word	0x3a4f7f04
 8006c10:	3e2aaaab 	.word	0x3e2aaaab
 8006c14:	bd241146 	.word	0xbd241146
 8006c18:	3e4e0aa8 	.word	0x3e4e0aa8
 8006c1c:	bea6b090 	.word	0xbea6b090
 8006c20:	3d9dc62e 	.word	0x3d9dc62e
 8006c24:	bf303361 	.word	0xbf303361
 8006c28:	4001572d 	.word	0x4001572d
 8006c2c:	c019d139 	.word	0xc019d139
 8006c30:	3f799999 	.word	0x3f799999
 8006c34:	333bbd2e 	.word	0x333bbd2e
 8006c38:	3f490fdb 	.word	0x3f490fdb

08006c3c <__ieee754_atan2f>:
 8006c3c:	ee10 2a90 	vmov	r2, s1
 8006c40:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006c44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	eef0 7a40 	vmov.f32	s15, s0
 8006c4e:	dc06      	bgt.n	8006c5e <__ieee754_atan2f+0x22>
 8006c50:	ee10 0a10 	vmov	r0, s0
 8006c54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006c58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006c5c:	dd04      	ble.n	8006c68 <__ieee754_atan2f+0x2c>
 8006c5e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006c62:	eeb0 0a67 	vmov.f32	s0, s15
 8006c66:	bd10      	pop	{r4, pc}
 8006c68:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006c6c:	d103      	bne.n	8006c76 <__ieee754_atan2f+0x3a>
 8006c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c72:	f000 bee3 	b.w	8007a3c <atanf>
 8006c76:	1794      	asrs	r4, r2, #30
 8006c78:	f004 0402 	and.w	r4, r4, #2
 8006c7c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006c80:	b943      	cbnz	r3, 8006c94 <__ieee754_atan2f+0x58>
 8006c82:	2c02      	cmp	r4, #2
 8006c84:	d06e      	beq.n	8006d64 <__ieee754_atan2f+0x128>
 8006c86:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006d6c <__ieee754_atan2f+0x130>
 8006c8a:	2c03      	cmp	r4, #3
 8006c8c:	bf08      	it	eq
 8006c8e:	eef0 7a47 	vmoveq.f32	s15, s14
 8006c92:	e7e6      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006c94:	b941      	cbnz	r1, 8006ca8 <__ieee754_atan2f+0x6c>
 8006c96:	eddf 7a36 	vldr	s15, [pc, #216]	; 8006d70 <__ieee754_atan2f+0x134>
 8006c9a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006d74 <__ieee754_atan2f+0x138>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	bfb8      	it	lt
 8006ca2:	eef0 7a47 	vmovlt.f32	s15, s14
 8006ca6:	e7dc      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006ca8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006cac:	d122      	bne.n	8006cf4 <__ieee754_atan2f+0xb8>
 8006cae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006cb2:	d112      	bne.n	8006cda <__ieee754_atan2f+0x9e>
 8006cb4:	2c02      	cmp	r4, #2
 8006cb6:	d00a      	beq.n	8006cce <__ieee754_atan2f+0x92>
 8006cb8:	2c03      	cmp	r4, #3
 8006cba:	d00b      	beq.n	8006cd4 <__ieee754_atan2f+0x98>
 8006cbc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006d78 <__ieee754_atan2f+0x13c>
 8006cc0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006d7c <__ieee754_atan2f+0x140>
 8006cc4:	2c01      	cmp	r4, #1
 8006cc6:	bf18      	it	ne
 8006cc8:	eef0 7a47 	vmovne.f32	s15, s14
 8006ccc:	e7c9      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006cce:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006d80 <__ieee754_atan2f+0x144>
 8006cd2:	e7c6      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006cd4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006d84 <__ieee754_atan2f+0x148>
 8006cd8:	e7c3      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006cda:	2c02      	cmp	r4, #2
 8006cdc:	d042      	beq.n	8006d64 <__ieee754_atan2f+0x128>
 8006cde:	2c03      	cmp	r4, #3
 8006ce0:	d005      	beq.n	8006cee <__ieee754_atan2f+0xb2>
 8006ce2:	2c01      	cmp	r4, #1
 8006ce4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006d88 <__ieee754_atan2f+0x14c>
 8006ce8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006d8c <__ieee754_atan2f+0x150>
 8006cec:	e7eb      	b.n	8006cc6 <__ieee754_atan2f+0x8a>
 8006cee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006d6c <__ieee754_atan2f+0x130>
 8006cf2:	e7b6      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006cf4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006cf8:	d0cd      	beq.n	8006c96 <__ieee754_atan2f+0x5a>
 8006cfa:	1a5b      	subs	r3, r3, r1
 8006cfc:	15db      	asrs	r3, r3, #23
 8006cfe:	2b3c      	cmp	r3, #60	; 0x3c
 8006d00:	dc1a      	bgt.n	8006d38 <__ieee754_atan2f+0xfc>
 8006d02:	2a00      	cmp	r2, #0
 8006d04:	da01      	bge.n	8006d0a <__ieee754_atan2f+0xce>
 8006d06:	333c      	adds	r3, #60	; 0x3c
 8006d08:	db19      	blt.n	8006d3e <__ieee754_atan2f+0x102>
 8006d0a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8006d0e:	f000 ff69 	bl	8007be4 <fabsf>
 8006d12:	f000 fe93 	bl	8007a3c <atanf>
 8006d16:	eef0 7a40 	vmov.f32	s15, s0
 8006d1a:	2c01      	cmp	r4, #1
 8006d1c:	d012      	beq.n	8006d44 <__ieee754_atan2f+0x108>
 8006d1e:	2c02      	cmp	r4, #2
 8006d20:	d017      	beq.n	8006d52 <__ieee754_atan2f+0x116>
 8006d22:	2c00      	cmp	r4, #0
 8006d24:	d09d      	beq.n	8006c62 <__ieee754_atan2f+0x26>
 8006d26:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006d90 <__ieee754_atan2f+0x154>
 8006d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d2e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006d94 <__ieee754_atan2f+0x158>
 8006d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d36:	e794      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006d38:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006d70 <__ieee754_atan2f+0x134>
 8006d3c:	e7ed      	b.n	8006d1a <__ieee754_atan2f+0xde>
 8006d3e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006d8c <__ieee754_atan2f+0x150>
 8006d42:	e7ea      	b.n	8006d1a <__ieee754_atan2f+0xde>
 8006d44:	ee17 3a90 	vmov	r3, s15
 8006d48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	e787      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006d52:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006d90 <__ieee754_atan2f+0x154>
 8006d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d5a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006d94 <__ieee754_atan2f+0x158>
 8006d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d62:	e77e      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006d64:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8006d94 <__ieee754_atan2f+0x158>
 8006d68:	e77b      	b.n	8006c62 <__ieee754_atan2f+0x26>
 8006d6a:	bf00      	nop
 8006d6c:	c0490fdb 	.word	0xc0490fdb
 8006d70:	3fc90fdb 	.word	0x3fc90fdb
 8006d74:	bfc90fdb 	.word	0xbfc90fdb
 8006d78:	bf490fdb 	.word	0xbf490fdb
 8006d7c:	3f490fdb 	.word	0x3f490fdb
 8006d80:	4016cbe4 	.word	0x4016cbe4
 8006d84:	c016cbe4 	.word	0xc016cbe4
 8006d88:	80000000 	.word	0x80000000
 8006d8c:	00000000 	.word	0x00000000
 8006d90:	33bbbd2e 	.word	0x33bbbd2e
 8006d94:	40490fdb 	.word	0x40490fdb

08006d98 <__ieee754_rem_pio2f>:
 8006d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d9a:	ee10 6a10 	vmov	r6, s0
 8006d9e:	4b86      	ldr	r3, [pc, #536]	; (8006fb8 <__ieee754_rem_pio2f+0x220>)
 8006da0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8006da4:	429c      	cmp	r4, r3
 8006da6:	b087      	sub	sp, #28
 8006da8:	4605      	mov	r5, r0
 8006daa:	dc05      	bgt.n	8006db8 <__ieee754_rem_pio2f+0x20>
 8006dac:	2300      	movs	r3, #0
 8006dae:	ed85 0a00 	vstr	s0, [r5]
 8006db2:	6043      	str	r3, [r0, #4]
 8006db4:	2000      	movs	r0, #0
 8006db6:	e020      	b.n	8006dfa <__ieee754_rem_pio2f+0x62>
 8006db8:	4b80      	ldr	r3, [pc, #512]	; (8006fbc <__ieee754_rem_pio2f+0x224>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	dc38      	bgt.n	8006e30 <__ieee754_rem_pio2f+0x98>
 8006dbe:	2e00      	cmp	r6, #0
 8006dc0:	f024 040f 	bic.w	r4, r4, #15
 8006dc4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006fc0 <__ieee754_rem_pio2f+0x228>
 8006dc8:	4b7e      	ldr	r3, [pc, #504]	; (8006fc4 <__ieee754_rem_pio2f+0x22c>)
 8006dca:	dd18      	ble.n	8006dfe <__ieee754_rem_pio2f+0x66>
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006dd2:	bf09      	itett	eq
 8006dd4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8006fc8 <__ieee754_rem_pio2f+0x230>
 8006dd8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8006fcc <__ieee754_rem_pio2f+0x234>
 8006ddc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006de0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8006fd0 <__ieee754_rem_pio2f+0x238>
 8006de4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006de8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dec:	edc0 6a00 	vstr	s13, [r0]
 8006df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006df4:	edc0 7a01 	vstr	s15, [r0, #4]
 8006df8:	2001      	movs	r0, #1
 8006dfa:	b007      	add	sp, #28
 8006dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006e04:	bf09      	itett	eq
 8006e06:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8006fc8 <__ieee754_rem_pio2f+0x230>
 8006e0a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8006fcc <__ieee754_rem_pio2f+0x234>
 8006e0e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006e12:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8006fd0 <__ieee754_rem_pio2f+0x238>
 8006e16:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006e1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e1e:	edc0 6a00 	vstr	s13, [r0]
 8006e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e26:	edc0 7a01 	vstr	s15, [r0, #4]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	e7e4      	b.n	8006dfa <__ieee754_rem_pio2f+0x62>
 8006e30:	4b68      	ldr	r3, [pc, #416]	; (8006fd4 <__ieee754_rem_pio2f+0x23c>)
 8006e32:	429c      	cmp	r4, r3
 8006e34:	dc71      	bgt.n	8006f1a <__ieee754_rem_pio2f+0x182>
 8006e36:	f000 fed5 	bl	8007be4 <fabsf>
 8006e3a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006fd8 <__ieee754_rem_pio2f+0x240>
 8006e3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006e42:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e4a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006e4e:	ee17 0a90 	vmov	r0, s15
 8006e52:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006fc0 <__ieee754_rem_pio2f+0x228>
 8006e56:	eeb1 7a46 	vneg.f32	s14, s12
 8006e5a:	eea7 0a27 	vfma.f32	s0, s14, s15
 8006e5e:	281f      	cmp	r0, #31
 8006e60:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8006fcc <__ieee754_rem_pio2f+0x234>
 8006e64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e68:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006e6c:	ee16 3a90 	vmov	r3, s13
 8006e70:	dc1c      	bgt.n	8006eac <__ieee754_rem_pio2f+0x114>
 8006e72:	1e47      	subs	r7, r0, #1
 8006e74:	4959      	ldr	r1, [pc, #356]	; (8006fdc <__ieee754_rem_pio2f+0x244>)
 8006e76:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006e7a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8006e7e:	428a      	cmp	r2, r1
 8006e80:	d014      	beq.n	8006eac <__ieee754_rem_pio2f+0x114>
 8006e82:	602b      	str	r3, [r5, #0]
 8006e84:	ed95 7a00 	vldr	s14, [r5]
 8006e88:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006e8c:	2e00      	cmp	r6, #0
 8006e8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006e92:	ed85 0a01 	vstr	s0, [r5, #4]
 8006e96:	dab0      	bge.n	8006dfa <__ieee754_rem_pio2f+0x62>
 8006e98:	eeb1 7a47 	vneg.f32	s14, s14
 8006e9c:	eeb1 0a40 	vneg.f32	s0, s0
 8006ea0:	ed85 7a00 	vstr	s14, [r5]
 8006ea4:	ed85 0a01 	vstr	s0, [r5, #4]
 8006ea8:	4240      	negs	r0, r0
 8006eaa:	e7a6      	b.n	8006dfa <__ieee754_rem_pio2f+0x62>
 8006eac:	15e4      	asrs	r4, r4, #23
 8006eae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006eb2:	1aa2      	subs	r2, r4, r2
 8006eb4:	2a08      	cmp	r2, #8
 8006eb6:	dde4      	ble.n	8006e82 <__ieee754_rem_pio2f+0xea>
 8006eb8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8006fc8 <__ieee754_rem_pio2f+0x230>
 8006ebc:	eef0 6a40 	vmov.f32	s13, s0
 8006ec0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ec4:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006ec8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8006ecc:	eddf 7a40 	vldr	s15, [pc, #256]	; 8006fd0 <__ieee754_rem_pio2f+0x238>
 8006ed0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8006ed4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8006ed8:	eef0 7a40 	vmov.f32	s15, s0
 8006edc:	ee15 3a90 	vmov	r3, s11
 8006ee0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006ee4:	1aa4      	subs	r4, r4, r2
 8006ee6:	2c19      	cmp	r4, #25
 8006ee8:	dc04      	bgt.n	8006ef4 <__ieee754_rem_pio2f+0x15c>
 8006eea:	edc5 5a00 	vstr	s11, [r5]
 8006eee:	eeb0 0a66 	vmov.f32	s0, s13
 8006ef2:	e7c7      	b.n	8006e84 <__ieee754_rem_pio2f+0xec>
 8006ef4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8006fe0 <__ieee754_rem_pio2f+0x248>
 8006ef8:	eeb0 0a66 	vmov.f32	s0, s13
 8006efc:	eea7 0a25 	vfma.f32	s0, s14, s11
 8006f00:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006f04:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006f08:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006fe4 <__ieee754_rem_pio2f+0x24c>
 8006f0c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8006f10:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006f14:	ed85 7a00 	vstr	s14, [r5]
 8006f18:	e7b4      	b.n	8006e84 <__ieee754_rem_pio2f+0xec>
 8006f1a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006f1e:	db06      	blt.n	8006f2e <__ieee754_rem_pio2f+0x196>
 8006f20:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006f24:	edc0 7a01 	vstr	s15, [r0, #4]
 8006f28:	edc0 7a00 	vstr	s15, [r0]
 8006f2c:	e742      	b.n	8006db4 <__ieee754_rem_pio2f+0x1c>
 8006f2e:	15e2      	asrs	r2, r4, #23
 8006f30:	3a86      	subs	r2, #134	; 0x86
 8006f32:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f3e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8006fe8 <__ieee754_rem_pio2f+0x250>
 8006f42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f4a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006f4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f5e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006f62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6e:	edcd 7a05 	vstr	s15, [sp, #20]
 8006f72:	d11e      	bne.n	8006fb2 <__ieee754_rem_pio2f+0x21a>
 8006f74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7c:	bf0c      	ite	eq
 8006f7e:	2301      	moveq	r3, #1
 8006f80:	2302      	movne	r3, #2
 8006f82:	491a      	ldr	r1, [pc, #104]	; (8006fec <__ieee754_rem_pio2f+0x254>)
 8006f84:	9101      	str	r1, [sp, #4]
 8006f86:	2102      	movs	r1, #2
 8006f88:	9100      	str	r1, [sp, #0]
 8006f8a:	a803      	add	r0, sp, #12
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	f000 f891 	bl	80070b4 <__kernel_rem_pio2f>
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	f6bf af31 	bge.w	8006dfa <__ieee754_rem_pio2f+0x62>
 8006f98:	edd5 7a00 	vldr	s15, [r5]
 8006f9c:	eef1 7a67 	vneg.f32	s15, s15
 8006fa0:	edc5 7a00 	vstr	s15, [r5]
 8006fa4:	edd5 7a01 	vldr	s15, [r5, #4]
 8006fa8:	eef1 7a67 	vneg.f32	s15, s15
 8006fac:	edc5 7a01 	vstr	s15, [r5, #4]
 8006fb0:	e77a      	b.n	8006ea8 <__ieee754_rem_pio2f+0x110>
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e7e5      	b.n	8006f82 <__ieee754_rem_pio2f+0x1ea>
 8006fb6:	bf00      	nop
 8006fb8:	3f490fd8 	.word	0x3f490fd8
 8006fbc:	4016cbe3 	.word	0x4016cbe3
 8006fc0:	3fc90f80 	.word	0x3fc90f80
 8006fc4:	3fc90fd0 	.word	0x3fc90fd0
 8006fc8:	37354400 	.word	0x37354400
 8006fcc:	37354443 	.word	0x37354443
 8006fd0:	2e85a308 	.word	0x2e85a308
 8006fd4:	43490f80 	.word	0x43490f80
 8006fd8:	3f22f984 	.word	0x3f22f984
 8006fdc:	08007f90 	.word	0x08007f90
 8006fe0:	2e85a300 	.word	0x2e85a300
 8006fe4:	248d3132 	.word	0x248d3132
 8006fe8:	43800000 	.word	0x43800000
 8006fec:	08008010 	.word	0x08008010

08006ff0 <__ieee754_sqrtf>:
 8006ff0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006ff4:	4770      	bx	lr
	...

08006ff8 <__kernel_cosf>:
 8006ff8:	ee10 3a10 	vmov	r3, s0
 8006ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007000:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007008:	da05      	bge.n	8007016 <__kernel_cosf+0x1e>
 800700a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800700e:	ee17 2a90 	vmov	r2, s15
 8007012:	2a00      	cmp	r2, #0
 8007014:	d03b      	beq.n	800708e <__kernel_cosf+0x96>
 8007016:	ee20 6a00 	vmul.f32	s12, s0, s0
 800701a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800701e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007094 <__kernel_cosf+0x9c>
 8007022:	4a1d      	ldr	r2, [pc, #116]	; (8007098 <__kernel_cosf+0xa0>)
 8007024:	ee66 7a07 	vmul.f32	s15, s12, s14
 8007028:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800709c <__kernel_cosf+0xa4>
 800702c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007030:	4293      	cmp	r3, r2
 8007032:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80070a0 <__kernel_cosf+0xa8>
 8007036:	eee7 5a06 	vfma.f32	s11, s14, s12
 800703a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80070a4 <__kernel_cosf+0xac>
 800703e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007042:	eddf 5a19 	vldr	s11, [pc, #100]	; 80070a8 <__kernel_cosf+0xb0>
 8007046:	eee7 5a06 	vfma.f32	s11, s14, s12
 800704a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80070ac <__kernel_cosf+0xb4>
 800704e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007052:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007056:	ee27 7a06 	vmul.f32	s14, s14, s12
 800705a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800705e:	dc04      	bgt.n	800706a <__kernel_cosf+0x72>
 8007060:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8007064:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8007068:	4770      	bx	lr
 800706a:	4a11      	ldr	r2, [pc, #68]	; (80070b0 <__kernel_cosf+0xb8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	bfda      	itte	le
 8007070:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007074:	ee07 3a10 	vmovle	s14, r3
 8007078:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800707c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007080:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007084:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007088:	ee30 0a67 	vsub.f32	s0, s0, s15
 800708c:	4770      	bx	lr
 800708e:	eeb0 0a66 	vmov.f32	s0, s13
 8007092:	4770      	bx	lr
 8007094:	ad47d74e 	.word	0xad47d74e
 8007098:	3e999999 	.word	0x3e999999
 800709c:	310f74f6 	.word	0x310f74f6
 80070a0:	b493f27c 	.word	0xb493f27c
 80070a4:	37d00d01 	.word	0x37d00d01
 80070a8:	bab60b61 	.word	0xbab60b61
 80070ac:	3d2aaaab 	.word	0x3d2aaaab
 80070b0:	3f480000 	.word	0x3f480000

080070b4 <__kernel_rem_pio2f>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	ed2d 8b04 	vpush	{d8-d9}
 80070bc:	b0d7      	sub	sp, #348	; 0x15c
 80070be:	469b      	mov	fp, r3
 80070c0:	460e      	mov	r6, r1
 80070c2:	4bbe      	ldr	r3, [pc, #760]	; (80073bc <__kernel_rem_pio2f+0x308>)
 80070c4:	9964      	ldr	r1, [sp, #400]	; 0x190
 80070c6:	9002      	str	r0, [sp, #8]
 80070c8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80070cc:	9865      	ldr	r0, [sp, #404]	; 0x194
 80070ce:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80073cc <__kernel_rem_pio2f+0x318>
 80070d2:	1ed1      	subs	r1, r2, #3
 80070d4:	2308      	movs	r3, #8
 80070d6:	fb91 f1f3 	sdiv	r1, r1, r3
 80070da:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80070de:	f10b 3aff 	add.w	sl, fp, #4294967295
 80070e2:	1c4c      	adds	r4, r1, #1
 80070e4:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80070e8:	eba1 050a 	sub.w	r5, r1, sl
 80070ec:	aa1a      	add	r2, sp, #104	; 0x68
 80070ee:	eb09 070a 	add.w	r7, r9, sl
 80070f2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80070f6:	4696      	mov	lr, r2
 80070f8:	2300      	movs	r3, #0
 80070fa:	42bb      	cmp	r3, r7
 80070fc:	dd0f      	ble.n	800711e <__kernel_rem_pio2f+0x6a>
 80070fe:	af42      	add	r7, sp, #264	; 0x108
 8007100:	2200      	movs	r2, #0
 8007102:	454a      	cmp	r2, r9
 8007104:	dc27      	bgt.n	8007156 <__kernel_rem_pio2f+0xa2>
 8007106:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800710a:	eb0b 0302 	add.w	r3, fp, r2
 800710e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007112:	9d02      	ldr	r5, [sp, #8]
 8007114:	eddf 7aad 	vldr	s15, [pc, #692]	; 80073cc <__kernel_rem_pio2f+0x318>
 8007118:	f04f 0c00 	mov.w	ip, #0
 800711c:	e015      	b.n	800714a <__kernel_rem_pio2f+0x96>
 800711e:	42dd      	cmn	r5, r3
 8007120:	bf5d      	ittte	pl
 8007122:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8007126:	ee07 2a90 	vmovpl	s15, r2
 800712a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800712e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007132:	ecee 7a01 	vstmia	lr!, {s15}
 8007136:	3301      	adds	r3, #1
 8007138:	e7df      	b.n	80070fa <__kernel_rem_pio2f+0x46>
 800713a:	ecf5 6a01 	vldmia	r5!, {s13}
 800713e:	ed33 7a01 	vldmdb	r3!, {s14}
 8007142:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007146:	f10c 0c01 	add.w	ip, ip, #1
 800714a:	45d4      	cmp	ip, sl
 800714c:	ddf5      	ble.n	800713a <__kernel_rem_pio2f+0x86>
 800714e:	ece7 7a01 	vstmia	r7!, {s15}
 8007152:	3201      	adds	r2, #1
 8007154:	e7d5      	b.n	8007102 <__kernel_rem_pio2f+0x4e>
 8007156:	ab06      	add	r3, sp, #24
 8007158:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80073c8 <__kernel_rem_pio2f+0x314>
 8007162:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80073c4 <__kernel_rem_pio2f+0x310>
 8007166:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800716a:	9303      	str	r3, [sp, #12]
 800716c:	464d      	mov	r5, r9
 800716e:	ab56      	add	r3, sp, #344	; 0x158
 8007170:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8007174:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007178:	3f01      	subs	r7, #1
 800717a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800717e:	00bf      	lsls	r7, r7, #2
 8007180:	ab56      	add	r3, sp, #344	; 0x158
 8007182:	19da      	adds	r2, r3, r7
 8007184:	3a4c      	subs	r2, #76	; 0x4c
 8007186:	2300      	movs	r3, #0
 8007188:	1ae9      	subs	r1, r5, r3
 800718a:	2900      	cmp	r1, #0
 800718c:	dc4c      	bgt.n	8007228 <__kernel_rem_pio2f+0x174>
 800718e:	4620      	mov	r0, r4
 8007190:	f000 fd72 	bl	8007c78 <scalbnf>
 8007194:	eeb0 8a40 	vmov.f32	s16, s0
 8007198:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800719c:	ee28 0a00 	vmul.f32	s0, s16, s0
 80071a0:	f000 fd28 	bl	8007bf4 <floorf>
 80071a4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80071a8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80071ac:	2c00      	cmp	r4, #0
 80071ae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80071b2:	edcd 7a01 	vstr	s15, [sp, #4]
 80071b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071ba:	ee38 8a67 	vsub.f32	s16, s16, s15
 80071be:	dd48      	ble.n	8007252 <__kernel_rem_pio2f+0x19e>
 80071c0:	1e69      	subs	r1, r5, #1
 80071c2:	ab06      	add	r3, sp, #24
 80071c4:	f1c4 0008 	rsb	r0, r4, #8
 80071c8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80071cc:	9a01      	ldr	r2, [sp, #4]
 80071ce:	fa4c f300 	asr.w	r3, ip, r0
 80071d2:	441a      	add	r2, r3
 80071d4:	4083      	lsls	r3, r0
 80071d6:	9201      	str	r2, [sp, #4]
 80071d8:	ebac 0203 	sub.w	r2, ip, r3
 80071dc:	ab06      	add	r3, sp, #24
 80071de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80071e2:	f1c4 0307 	rsb	r3, r4, #7
 80071e6:	fa42 f803 	asr.w	r8, r2, r3
 80071ea:	f1b8 0f00 	cmp.w	r8, #0
 80071ee:	dd41      	ble.n	8007274 <__kernel_rem_pio2f+0x1c0>
 80071f0:	9b01      	ldr	r3, [sp, #4]
 80071f2:	2000      	movs	r0, #0
 80071f4:	3301      	adds	r3, #1
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	4601      	mov	r1, r0
 80071fa:	4285      	cmp	r5, r0
 80071fc:	dc6d      	bgt.n	80072da <__kernel_rem_pio2f+0x226>
 80071fe:	2c00      	cmp	r4, #0
 8007200:	dd04      	ble.n	800720c <__kernel_rem_pio2f+0x158>
 8007202:	2c01      	cmp	r4, #1
 8007204:	d07e      	beq.n	8007304 <__kernel_rem_pio2f+0x250>
 8007206:	2c02      	cmp	r4, #2
 8007208:	f000 8086 	beq.w	8007318 <__kernel_rem_pio2f+0x264>
 800720c:	f1b8 0f02 	cmp.w	r8, #2
 8007210:	d130      	bne.n	8007274 <__kernel_rem_pio2f+0x1c0>
 8007212:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007216:	ee30 8a48 	vsub.f32	s16, s0, s16
 800721a:	b359      	cbz	r1, 8007274 <__kernel_rem_pio2f+0x1c0>
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fd2b 	bl	8007c78 <scalbnf>
 8007222:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007226:	e025      	b.n	8007274 <__kernel_rem_pio2f+0x1c0>
 8007228:	ee60 7a28 	vmul.f32	s15, s0, s17
 800722c:	a806      	add	r0, sp, #24
 800722e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007236:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800723a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800723e:	ee10 1a10 	vmov	r1, s0
 8007242:	ed32 0a01 	vldmdb	r2!, {s0}
 8007246:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800724a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800724e:	3301      	adds	r3, #1
 8007250:	e79a      	b.n	8007188 <__kernel_rem_pio2f+0xd4>
 8007252:	d106      	bne.n	8007262 <__kernel_rem_pio2f+0x1ae>
 8007254:	1e6b      	subs	r3, r5, #1
 8007256:	aa06      	add	r2, sp, #24
 8007258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800725c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8007260:	e7c3      	b.n	80071ea <__kernel_rem_pio2f+0x136>
 8007262:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007266:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	da31      	bge.n	80072d4 <__kernel_rem_pio2f+0x220>
 8007270:	f04f 0800 	mov.w	r8, #0
 8007274:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727c:	f040 80a8 	bne.w	80073d0 <__kernel_rem_pio2f+0x31c>
 8007280:	1e6b      	subs	r3, r5, #1
 8007282:	4618      	mov	r0, r3
 8007284:	2200      	movs	r2, #0
 8007286:	4548      	cmp	r0, r9
 8007288:	da4d      	bge.n	8007326 <__kernel_rem_pio2f+0x272>
 800728a:	2a00      	cmp	r2, #0
 800728c:	f000 8087 	beq.w	800739e <__kernel_rem_pio2f+0x2ea>
 8007290:	aa06      	add	r2, sp, #24
 8007292:	3c08      	subs	r4, #8
 8007294:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007298:	2900      	cmp	r1, #0
 800729a:	f000 808d 	beq.w	80073b8 <__kernel_rem_pio2f+0x304>
 800729e:	4620      	mov	r0, r4
 80072a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072a4:	9302      	str	r3, [sp, #8]
 80072a6:	f000 fce7 	bl	8007c78 <scalbnf>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80073c8 <__kernel_rem_pio2f+0x314>
 80072b0:	0099      	lsls	r1, r3, #2
 80072b2:	aa42      	add	r2, sp, #264	; 0x108
 80072b4:	1850      	adds	r0, r2, r1
 80072b6:	1d05      	adds	r5, r0, #4
 80072b8:	461c      	mov	r4, r3
 80072ba:	2c00      	cmp	r4, #0
 80072bc:	f280 80b8 	bge.w	8007430 <__kernel_rem_pio2f+0x37c>
 80072c0:	2500      	movs	r5, #0
 80072c2:	1b5c      	subs	r4, r3, r5
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	f2c0 80d8 	blt.w	800747a <__kernel_rem_pio2f+0x3c6>
 80072ca:	4f3d      	ldr	r7, [pc, #244]	; (80073c0 <__kernel_rem_pio2f+0x30c>)
 80072cc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80073cc <__kernel_rem_pio2f+0x318>
 80072d0:	2400      	movs	r4, #0
 80072d2:	e0c6      	b.n	8007462 <__kernel_rem_pio2f+0x3ae>
 80072d4:	f04f 0802 	mov.w	r8, #2
 80072d8:	e78a      	b.n	80071f0 <__kernel_rem_pio2f+0x13c>
 80072da:	ab06      	add	r3, sp, #24
 80072dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80072e0:	b949      	cbnz	r1, 80072f6 <__kernel_rem_pio2f+0x242>
 80072e2:	b12b      	cbz	r3, 80072f0 <__kernel_rem_pio2f+0x23c>
 80072e4:	aa06      	add	r2, sp, #24
 80072e6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80072ea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80072ee:	2301      	movs	r3, #1
 80072f0:	3001      	adds	r0, #1
 80072f2:	4619      	mov	r1, r3
 80072f4:	e781      	b.n	80071fa <__kernel_rem_pio2f+0x146>
 80072f6:	aa06      	add	r2, sp, #24
 80072f8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80072fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007300:	460b      	mov	r3, r1
 8007302:	e7f5      	b.n	80072f0 <__kernel_rem_pio2f+0x23c>
 8007304:	1e68      	subs	r0, r5, #1
 8007306:	ab06      	add	r3, sp, #24
 8007308:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800730c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007310:	aa06      	add	r2, sp, #24
 8007312:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007316:	e779      	b.n	800720c <__kernel_rem_pio2f+0x158>
 8007318:	1e68      	subs	r0, r5, #1
 800731a:	ab06      	add	r3, sp, #24
 800731c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007324:	e7f4      	b.n	8007310 <__kernel_rem_pio2f+0x25c>
 8007326:	a906      	add	r1, sp, #24
 8007328:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800732c:	3801      	subs	r0, #1
 800732e:	430a      	orrs	r2, r1
 8007330:	e7a9      	b.n	8007286 <__kernel_rem_pio2f+0x1d2>
 8007332:	f10c 0c01 	add.w	ip, ip, #1
 8007336:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800733a:	2a00      	cmp	r2, #0
 800733c:	d0f9      	beq.n	8007332 <__kernel_rem_pio2f+0x27e>
 800733e:	eb0b 0305 	add.w	r3, fp, r5
 8007342:	aa1a      	add	r2, sp, #104	; 0x68
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	1898      	adds	r0, r3, r2
 8007348:	3004      	adds	r0, #4
 800734a:	1c69      	adds	r1, r5, #1
 800734c:	3704      	adds	r7, #4
 800734e:	2200      	movs	r2, #0
 8007350:	4465      	add	r5, ip
 8007352:	9005      	str	r0, [sp, #20]
 8007354:	428d      	cmp	r5, r1
 8007356:	f6ff af0a 	blt.w	800716e <__kernel_rem_pio2f+0xba>
 800735a:	a81a      	add	r0, sp, #104	; 0x68
 800735c:	eb02 0c03 	add.w	ip, r2, r3
 8007360:	4484      	add	ip, r0
 8007362:	9803      	ldr	r0, [sp, #12]
 8007364:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007368:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800736c:	9001      	str	r0, [sp, #4]
 800736e:	ee07 0a90 	vmov	s15, r0
 8007372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007376:	9805      	ldr	r0, [sp, #20]
 8007378:	edcc 7a00 	vstr	s15, [ip]
 800737c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80073cc <__kernel_rem_pio2f+0x318>
 8007380:	eb00 0802 	add.w	r8, r0, r2
 8007384:	f04f 0c00 	mov.w	ip, #0
 8007388:	45d4      	cmp	ip, sl
 800738a:	dd0c      	ble.n	80073a6 <__kernel_rem_pio2f+0x2f2>
 800738c:	eb02 0c07 	add.w	ip, r2, r7
 8007390:	a842      	add	r0, sp, #264	; 0x108
 8007392:	4484      	add	ip, r0
 8007394:	edcc 7a01 	vstr	s15, [ip, #4]
 8007398:	3101      	adds	r1, #1
 800739a:	3204      	adds	r2, #4
 800739c:	e7da      	b.n	8007354 <__kernel_rem_pio2f+0x2a0>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	f04f 0c01 	mov.w	ip, #1
 80073a4:	e7c7      	b.n	8007336 <__kernel_rem_pio2f+0x282>
 80073a6:	ecfe 6a01 	vldmia	lr!, {s13}
 80073aa:	ed38 7a01 	vldmdb	r8!, {s14}
 80073ae:	f10c 0c01 	add.w	ip, ip, #1
 80073b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073b6:	e7e7      	b.n	8007388 <__kernel_rem_pio2f+0x2d4>
 80073b8:	3b01      	subs	r3, #1
 80073ba:	e769      	b.n	8007290 <__kernel_rem_pio2f+0x1dc>
 80073bc:	08008354 	.word	0x08008354
 80073c0:	08008328 	.word	0x08008328
 80073c4:	43800000 	.word	0x43800000
 80073c8:	3b800000 	.word	0x3b800000
 80073cc:	00000000 	.word	0x00000000
 80073d0:	4260      	negs	r0, r4
 80073d2:	eeb0 0a48 	vmov.f32	s0, s16
 80073d6:	f000 fc4f 	bl	8007c78 <scalbnf>
 80073da:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80073c4 <__kernel_rem_pio2f+0x310>
 80073de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80073e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e6:	db1a      	blt.n	800741e <__kernel_rem_pio2f+0x36a>
 80073e8:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80073c8 <__kernel_rem_pio2f+0x314>
 80073ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80073f0:	aa06      	add	r2, sp, #24
 80073f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073f6:	a906      	add	r1, sp, #24
 80073f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073fc:	3408      	adds	r4, #8
 80073fe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007406:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800740a:	ee10 3a10 	vmov	r3, s0
 800740e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007412:	1c6b      	adds	r3, r5, #1
 8007414:	ee17 2a90 	vmov	r2, s15
 8007418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800741c:	e73f      	b.n	800729e <__kernel_rem_pio2f+0x1ea>
 800741e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007422:	aa06      	add	r2, sp, #24
 8007424:	ee10 3a10 	vmov	r3, s0
 8007428:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800742c:	462b      	mov	r3, r5
 800742e:	e736      	b.n	800729e <__kernel_rem_pio2f+0x1ea>
 8007430:	aa06      	add	r2, sp, #24
 8007432:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007436:	9202      	str	r2, [sp, #8]
 8007438:	ee07 2a90 	vmov	s15, r2
 800743c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007440:	3c01      	subs	r4, #1
 8007442:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007446:	ee20 0a07 	vmul.f32	s0, s0, s14
 800744a:	ed65 7a01 	vstmdb	r5!, {s15}
 800744e:	e734      	b.n	80072ba <__kernel_rem_pio2f+0x206>
 8007450:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007454:	ecf7 6a01 	vldmia	r7!, {s13}
 8007458:	ed9c 7a00 	vldr	s14, [ip]
 800745c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007460:	3401      	adds	r4, #1
 8007462:	454c      	cmp	r4, r9
 8007464:	dc01      	bgt.n	800746a <__kernel_rem_pio2f+0x3b6>
 8007466:	42a5      	cmp	r5, r4
 8007468:	daf2      	bge.n	8007450 <__kernel_rem_pio2f+0x39c>
 800746a:	aa56      	add	r2, sp, #344	; 0x158
 800746c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007470:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007474:	3501      	adds	r5, #1
 8007476:	3804      	subs	r0, #4
 8007478:	e723      	b.n	80072c2 <__kernel_rem_pio2f+0x20e>
 800747a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800747c:	2a03      	cmp	r2, #3
 800747e:	d84d      	bhi.n	800751c <__kernel_rem_pio2f+0x468>
 8007480:	e8df f002 	tbb	[pc, r2]
 8007484:	021f1f3e 	.word	0x021f1f3e
 8007488:	aa56      	add	r2, sp, #344	; 0x158
 800748a:	4411      	add	r1, r2
 800748c:	399c      	subs	r1, #156	; 0x9c
 800748e:	4608      	mov	r0, r1
 8007490:	461c      	mov	r4, r3
 8007492:	2c00      	cmp	r4, #0
 8007494:	dc5f      	bgt.n	8007556 <__kernel_rem_pio2f+0x4a2>
 8007496:	4608      	mov	r0, r1
 8007498:	461c      	mov	r4, r3
 800749a:	2c01      	cmp	r4, #1
 800749c:	dc6b      	bgt.n	8007576 <__kernel_rem_pio2f+0x4c2>
 800749e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80073cc <__kernel_rem_pio2f+0x318>
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	dc77      	bgt.n	8007596 <__kernel_rem_pio2f+0x4e2>
 80074a6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80074aa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80074ae:	f1b8 0f00 	cmp.w	r8, #0
 80074b2:	d176      	bne.n	80075a2 <__kernel_rem_pio2f+0x4ee>
 80074b4:	edc6 6a00 	vstr	s13, [r6]
 80074b8:	ed86 7a01 	vstr	s14, [r6, #4]
 80074bc:	edc6 7a02 	vstr	s15, [r6, #8]
 80074c0:	e02c      	b.n	800751c <__kernel_rem_pio2f+0x468>
 80074c2:	aa56      	add	r2, sp, #344	; 0x158
 80074c4:	4411      	add	r1, r2
 80074c6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80073cc <__kernel_rem_pio2f+0x318>
 80074ca:	399c      	subs	r1, #156	; 0x9c
 80074cc:	4618      	mov	r0, r3
 80074ce:	2800      	cmp	r0, #0
 80074d0:	da32      	bge.n	8007538 <__kernel_rem_pio2f+0x484>
 80074d2:	f1b8 0f00 	cmp.w	r8, #0
 80074d6:	d035      	beq.n	8007544 <__kernel_rem_pio2f+0x490>
 80074d8:	eef1 7a47 	vneg.f32	s15, s14
 80074dc:	edc6 7a00 	vstr	s15, [r6]
 80074e0:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80074e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074e8:	a82f      	add	r0, sp, #188	; 0xbc
 80074ea:	2101      	movs	r1, #1
 80074ec:	428b      	cmp	r3, r1
 80074ee:	da2c      	bge.n	800754a <__kernel_rem_pio2f+0x496>
 80074f0:	f1b8 0f00 	cmp.w	r8, #0
 80074f4:	d001      	beq.n	80074fa <__kernel_rem_pio2f+0x446>
 80074f6:	eef1 7a67 	vneg.f32	s15, s15
 80074fa:	edc6 7a01 	vstr	s15, [r6, #4]
 80074fe:	e00d      	b.n	800751c <__kernel_rem_pio2f+0x468>
 8007500:	aa56      	add	r2, sp, #344	; 0x158
 8007502:	4411      	add	r1, r2
 8007504:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80073cc <__kernel_rem_pio2f+0x318>
 8007508:	399c      	subs	r1, #156	; 0x9c
 800750a:	2b00      	cmp	r3, #0
 800750c:	da0e      	bge.n	800752c <__kernel_rem_pio2f+0x478>
 800750e:	f1b8 0f00 	cmp.w	r8, #0
 8007512:	d001      	beq.n	8007518 <__kernel_rem_pio2f+0x464>
 8007514:	eef1 7a67 	vneg.f32	s15, s15
 8007518:	edc6 7a00 	vstr	s15, [r6]
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	f003 0007 	and.w	r0, r3, #7
 8007522:	b057      	add	sp, #348	; 0x15c
 8007524:	ecbd 8b04 	vpop	{d8-d9}
 8007528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752c:	ed31 7a01 	vldmdb	r1!, {s14}
 8007530:	3b01      	subs	r3, #1
 8007532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007536:	e7e8      	b.n	800750a <__kernel_rem_pio2f+0x456>
 8007538:	ed71 7a01 	vldmdb	r1!, {s15}
 800753c:	3801      	subs	r0, #1
 800753e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007542:	e7c4      	b.n	80074ce <__kernel_rem_pio2f+0x41a>
 8007544:	eef0 7a47 	vmov.f32	s15, s14
 8007548:	e7c8      	b.n	80074dc <__kernel_rem_pio2f+0x428>
 800754a:	ecb0 7a01 	vldmia	r0!, {s14}
 800754e:	3101      	adds	r1, #1
 8007550:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007554:	e7ca      	b.n	80074ec <__kernel_rem_pio2f+0x438>
 8007556:	ed50 7a02 	vldr	s15, [r0, #-8]
 800755a:	ed70 6a01 	vldmdb	r0!, {s13}
 800755e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007562:	3c01      	subs	r4, #1
 8007564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007568:	ed00 7a01 	vstr	s14, [r0, #-4]
 800756c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007570:	edc0 7a00 	vstr	s15, [r0]
 8007574:	e78d      	b.n	8007492 <__kernel_rem_pio2f+0x3de>
 8007576:	ed50 7a02 	vldr	s15, [r0, #-8]
 800757a:	ed70 6a01 	vldmdb	r0!, {s13}
 800757e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007582:	3c01      	subs	r4, #1
 8007584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007588:	ed00 7a01 	vstr	s14, [r0, #-4]
 800758c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007590:	edc0 7a00 	vstr	s15, [r0]
 8007594:	e781      	b.n	800749a <__kernel_rem_pio2f+0x3e6>
 8007596:	ed31 7a01 	vldmdb	r1!, {s14}
 800759a:	3b01      	subs	r3, #1
 800759c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075a0:	e77f      	b.n	80074a2 <__kernel_rem_pio2f+0x3ee>
 80075a2:	eef1 6a66 	vneg.f32	s13, s13
 80075a6:	eeb1 7a47 	vneg.f32	s14, s14
 80075aa:	edc6 6a00 	vstr	s13, [r6]
 80075ae:	ed86 7a01 	vstr	s14, [r6, #4]
 80075b2:	eef1 7a67 	vneg.f32	s15, s15
 80075b6:	e781      	b.n	80074bc <__kernel_rem_pio2f+0x408>

080075b8 <__kernel_sinf>:
 80075b8:	ee10 3a10 	vmov	r3, s0
 80075bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80075c4:	da04      	bge.n	80075d0 <__kernel_sinf+0x18>
 80075c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80075ca:	ee17 3a90 	vmov	r3, s15
 80075ce:	b35b      	cbz	r3, 8007628 <__kernel_sinf+0x70>
 80075d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80075d4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800762c <__kernel_sinf+0x74>
 80075d8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007630 <__kernel_sinf+0x78>
 80075dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80075e0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007634 <__kernel_sinf+0x7c>
 80075e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80075e8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007638 <__kernel_sinf+0x80>
 80075ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80075f0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800763c <__kernel_sinf+0x84>
 80075f4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80075f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80075fc:	b930      	cbnz	r0, 800760c <__kernel_sinf+0x54>
 80075fe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007640 <__kernel_sinf+0x88>
 8007602:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007606:	eea6 0a26 	vfma.f32	s0, s12, s13
 800760a:	4770      	bx	lr
 800760c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007610:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007614:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007618:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800761c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007644 <__kernel_sinf+0x8c>
 8007620:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007624:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	2f2ec9d3 	.word	0x2f2ec9d3
 8007630:	b2d72f34 	.word	0xb2d72f34
 8007634:	3638ef1b 	.word	0x3638ef1b
 8007638:	b9500d01 	.word	0xb9500d01
 800763c:	3c088889 	.word	0x3c088889
 8007640:	be2aaaab 	.word	0xbe2aaaab
 8007644:	3e2aaaab 	.word	0x3e2aaaab

08007648 <__kernel_tanf>:
 8007648:	b508      	push	{r3, lr}
 800764a:	ee10 3a10 	vmov	r3, s0
 800764e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007652:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8007656:	eef0 7a40 	vmov.f32	s15, s0
 800765a:	da17      	bge.n	800768c <__kernel_tanf+0x44>
 800765c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8007660:	ee17 1a10 	vmov	r1, s14
 8007664:	bb41      	cbnz	r1, 80076b8 <__kernel_tanf+0x70>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	4313      	orrs	r3, r2
 800766a:	d108      	bne.n	800767e <__kernel_tanf+0x36>
 800766c:	f000 faba 	bl	8007be4 <fabsf>
 8007670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007674:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007678:	eeb0 0a67 	vmov.f32	s0, s15
 800767c:	bd08      	pop	{r3, pc}
 800767e:	2801      	cmp	r0, #1
 8007680:	d0fa      	beq.n	8007678 <__kernel_tanf+0x30>
 8007682:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007686:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800768a:	e7f5      	b.n	8007678 <__kernel_tanf+0x30>
 800768c:	494e      	ldr	r1, [pc, #312]	; (80077c8 <__kernel_tanf+0x180>)
 800768e:	428a      	cmp	r2, r1
 8007690:	dd12      	ble.n	80076b8 <__kernel_tanf+0x70>
 8007692:	2b00      	cmp	r3, #0
 8007694:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80077cc <__kernel_tanf+0x184>
 8007698:	bfb8      	it	lt
 800769a:	eef1 7a40 	vneglt.f32	s15, s0
 800769e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076a2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80077d0 <__kernel_tanf+0x188>
 80076a6:	bfb8      	it	lt
 80076a8:	eef1 0a60 	vneglt.f32	s1, s1
 80076ac:	ee77 0a60 	vsub.f32	s1, s14, s1
 80076b0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80076b4:	eddf 0a47 	vldr	s1, [pc, #284]	; 80077d4 <__kernel_tanf+0x18c>
 80076b8:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80077d8 <__kernel_tanf+0x190>
 80076bc:	eddf 5a47 	vldr	s11, [pc, #284]	; 80077dc <__kernel_tanf+0x194>
 80076c0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 80077e0 <__kernel_tanf+0x198>
 80076c4:	4940      	ldr	r1, [pc, #256]	; (80077c8 <__kernel_tanf+0x180>)
 80076c6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80076ca:	428a      	cmp	r2, r1
 80076cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80076d0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80076d4:	eee7 5a06 	vfma.f32	s11, s14, s12
 80076d8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 80077e4 <__kernel_tanf+0x19c>
 80076dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80076e0:	eddf 5a41 	vldr	s11, [pc, #260]	; 80077e8 <__kernel_tanf+0x1a0>
 80076e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80076e8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80077ec <__kernel_tanf+0x1a4>
 80076ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80076f0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80077f0 <__kernel_tanf+0x1a8>
 80076f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80076f8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80077f4 <__kernel_tanf+0x1ac>
 80076fc:	eea7 6a05 	vfma.f32	s12, s14, s10
 8007700:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80077f8 <__kernel_tanf+0x1b0>
 8007704:	eea6 5a07 	vfma.f32	s10, s12, s14
 8007708:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 80077fc <__kernel_tanf+0x1b4>
 800770c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8007710:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8007800 <__kernel_tanf+0x1b8>
 8007714:	eea6 5a07 	vfma.f32	s10, s12, s14
 8007718:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8007804 <__kernel_tanf+0x1bc>
 800771c:	eea5 6a07 	vfma.f32	s12, s10, s14
 8007720:	eeb0 7a46 	vmov.f32	s14, s12
 8007724:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007728:	eeb0 6a60 	vmov.f32	s12, s1
 800772c:	eea7 6a24 	vfma.f32	s12, s14, s9
 8007730:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007808 <__kernel_tanf+0x1c0>
 8007734:	eee6 0a26 	vfma.f32	s1, s12, s13
 8007738:	eee4 0a87 	vfma.f32	s1, s9, s14
 800773c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007740:	dd1d      	ble.n	800777e <__kernel_tanf+0x136>
 8007742:	ee07 0a10 	vmov	s14, r0
 8007746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800774a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800774e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007752:	179b      	asrs	r3, r3, #30
 8007754:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	f1c3 0301 	rsb	r3, r3, #1
 8007760:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007764:	ee76 0a60 	vsub.f32	s1, s12, s1
 8007768:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800776c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777c:	e77c      	b.n	8007678 <__kernel_tanf+0x30>
 800777e:	2801      	cmp	r0, #1
 8007780:	d01f      	beq.n	80077c2 <__kernel_tanf+0x17a>
 8007782:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007786:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800778a:	4b20      	ldr	r3, [pc, #128]	; (800780c <__kernel_tanf+0x1c4>)
 800778c:	ee16 2a90 	vmov	r2, s13
 8007790:	401a      	ands	r2, r3
 8007792:	ee06 2a10 	vmov	s12, r2
 8007796:	ee15 2a90 	vmov	r2, s11
 800779a:	4013      	ands	r3, r2
 800779c:	ee07 3a10 	vmov	s14, r3
 80077a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80077a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80077ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80077b0:	eef0 7a66 	vmov.f32	s15, s13
 80077b4:	eee7 7a20 	vfma.f32	s15, s14, s1
 80077b8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80077bc:	eef0 7a47 	vmov.f32	s15, s14
 80077c0:	e75a      	b.n	8007678 <__kernel_tanf+0x30>
 80077c2:	eef0 7a66 	vmov.f32	s15, s13
 80077c6:	e757      	b.n	8007678 <__kernel_tanf+0x30>
 80077c8:	3f2ca13f 	.word	0x3f2ca13f
 80077cc:	3f490fda 	.word	0x3f490fda
 80077d0:	33222168 	.word	0x33222168
 80077d4:	00000000 	.word	0x00000000
 80077d8:	37d95384 	.word	0x37d95384
 80077dc:	3895c07a 	.word	0x3895c07a
 80077e0:	b79bae5f 	.word	0xb79bae5f
 80077e4:	398137b9 	.word	0x398137b9
 80077e8:	3abede48 	.word	0x3abede48
 80077ec:	3c11371f 	.word	0x3c11371f
 80077f0:	3d5d0dd1 	.word	0x3d5d0dd1
 80077f4:	38a3f445 	.word	0x38a3f445
 80077f8:	3a1a26c8 	.word	0x3a1a26c8
 80077fc:	3b6b6916 	.word	0x3b6b6916
 8007800:	3cb327a4 	.word	0x3cb327a4
 8007804:	3e088889 	.word	0x3e088889
 8007808:	3eaaaaab 	.word	0x3eaaaaab
 800780c:	fffff000 	.word	0xfffff000

08007810 <fabs>:
 8007810:	ec51 0b10 	vmov	r0, r1, d0
 8007814:	ee10 2a10 	vmov	r2, s0
 8007818:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800781c:	ec43 2b10 	vmov	d0, r2, r3
 8007820:	4770      	bx	lr

08007822 <finite>:
 8007822:	ee10 3a90 	vmov	r3, s1
 8007826:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800782a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800782e:	0fc0      	lsrs	r0, r0, #31
 8007830:	4770      	bx	lr

08007832 <matherr>:
 8007832:	2000      	movs	r0, #0
 8007834:	4770      	bx	lr
	...

08007838 <nan>:
 8007838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007840 <nan+0x8>
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	00000000 	.word	0x00000000
 8007844:	7ff80000 	.word	0x7ff80000

08007848 <rint>:
 8007848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800784a:	ec51 0b10 	vmov	r0, r1, d0
 800784e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007852:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007856:	2e13      	cmp	r6, #19
 8007858:	460b      	mov	r3, r1
 800785a:	ee10 4a10 	vmov	r4, s0
 800785e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007862:	dc56      	bgt.n	8007912 <rint+0xca>
 8007864:	2e00      	cmp	r6, #0
 8007866:	da2b      	bge.n	80078c0 <rint+0x78>
 8007868:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800786c:	4302      	orrs	r2, r0
 800786e:	d023      	beq.n	80078b8 <rint+0x70>
 8007870:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007874:	4302      	orrs	r2, r0
 8007876:	4254      	negs	r4, r2
 8007878:	4314      	orrs	r4, r2
 800787a:	0c4b      	lsrs	r3, r1, #17
 800787c:	0b24      	lsrs	r4, r4, #12
 800787e:	045b      	lsls	r3, r3, #17
 8007880:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007884:	ea44 0103 	orr.w	r1, r4, r3
 8007888:	460b      	mov	r3, r1
 800788a:	492f      	ldr	r1, [pc, #188]	; (8007948 <rint+0x100>)
 800788c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007890:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007894:	4602      	mov	r2, r0
 8007896:	4639      	mov	r1, r7
 8007898:	4630      	mov	r0, r6
 800789a:	f7f8 fca3 	bl	80001e4 <__adddf3>
 800789e:	e9cd 0100 	strd	r0, r1, [sp]
 80078a2:	463b      	mov	r3, r7
 80078a4:	4632      	mov	r2, r6
 80078a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078aa:	f7f8 fc99 	bl	80001e0 <__aeabi_dsub>
 80078ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078b2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80078b6:	4639      	mov	r1, r7
 80078b8:	ec41 0b10 	vmov	d0, r0, r1
 80078bc:	b003      	add	sp, #12
 80078be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c0:	4a22      	ldr	r2, [pc, #136]	; (800794c <rint+0x104>)
 80078c2:	4132      	asrs	r2, r6
 80078c4:	ea01 0702 	and.w	r7, r1, r2
 80078c8:	4307      	orrs	r7, r0
 80078ca:	d0f5      	beq.n	80078b8 <rint+0x70>
 80078cc:	0852      	lsrs	r2, r2, #1
 80078ce:	4011      	ands	r1, r2
 80078d0:	430c      	orrs	r4, r1
 80078d2:	d00b      	beq.n	80078ec <rint+0xa4>
 80078d4:	ea23 0202 	bic.w	r2, r3, r2
 80078d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80078dc:	2e13      	cmp	r6, #19
 80078de:	fa43 f306 	asr.w	r3, r3, r6
 80078e2:	bf0c      	ite	eq
 80078e4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80078e8:	2400      	movne	r4, #0
 80078ea:	4313      	orrs	r3, r2
 80078ec:	4916      	ldr	r1, [pc, #88]	; (8007948 <rint+0x100>)
 80078ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80078f2:	4622      	mov	r2, r4
 80078f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7f8 fc72 	bl	80001e4 <__adddf3>
 8007900:	e9cd 0100 	strd	r0, r1, [sp]
 8007904:	4622      	mov	r2, r4
 8007906:	462b      	mov	r3, r5
 8007908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800790c:	f7f8 fc68 	bl	80001e0 <__aeabi_dsub>
 8007910:	e7d2      	b.n	80078b8 <rint+0x70>
 8007912:	2e33      	cmp	r6, #51	; 0x33
 8007914:	dd07      	ble.n	8007926 <rint+0xde>
 8007916:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800791a:	d1cd      	bne.n	80078b8 <rint+0x70>
 800791c:	ee10 2a10 	vmov	r2, s0
 8007920:	f7f8 fc60 	bl	80001e4 <__adddf3>
 8007924:	e7c8      	b.n	80078b8 <rint+0x70>
 8007926:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800792a:	f04f 32ff 	mov.w	r2, #4294967295
 800792e:	40f2      	lsrs	r2, r6
 8007930:	4210      	tst	r0, r2
 8007932:	d0c1      	beq.n	80078b8 <rint+0x70>
 8007934:	0852      	lsrs	r2, r2, #1
 8007936:	4210      	tst	r0, r2
 8007938:	bf1f      	itttt	ne
 800793a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800793e:	ea20 0202 	bicne.w	r2, r0, r2
 8007942:	4134      	asrne	r4, r6
 8007944:	4314      	orrne	r4, r2
 8007946:	e7d1      	b.n	80078ec <rint+0xa4>
 8007948:	08008360 	.word	0x08008360
 800794c:	000fffff 	.word	0x000fffff

08007950 <scalbn>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	ec55 4b10 	vmov	r4, r5, d0
 8007956:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800795a:	4606      	mov	r6, r0
 800795c:	462b      	mov	r3, r5
 800795e:	b9aa      	cbnz	r2, 800798c <scalbn+0x3c>
 8007960:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007964:	4323      	orrs	r3, r4
 8007966:	d03b      	beq.n	80079e0 <scalbn+0x90>
 8007968:	4b31      	ldr	r3, [pc, #196]	; (8007a30 <scalbn+0xe0>)
 800796a:	4629      	mov	r1, r5
 800796c:	2200      	movs	r2, #0
 800796e:	ee10 0a10 	vmov	r0, s0
 8007972:	f7f8 fded 	bl	8000550 <__aeabi_dmul>
 8007976:	4b2f      	ldr	r3, [pc, #188]	; (8007a34 <scalbn+0xe4>)
 8007978:	429e      	cmp	r6, r3
 800797a:	4604      	mov	r4, r0
 800797c:	460d      	mov	r5, r1
 800797e:	da12      	bge.n	80079a6 <scalbn+0x56>
 8007980:	a327      	add	r3, pc, #156	; (adr r3, 8007a20 <scalbn+0xd0>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fde3 	bl	8000550 <__aeabi_dmul>
 800798a:	e009      	b.n	80079a0 <scalbn+0x50>
 800798c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007990:	428a      	cmp	r2, r1
 8007992:	d10c      	bne.n	80079ae <scalbn+0x5e>
 8007994:	ee10 2a10 	vmov	r2, s0
 8007998:	4620      	mov	r0, r4
 800799a:	4629      	mov	r1, r5
 800799c:	f7f8 fc22 	bl	80001e4 <__adddf3>
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	e01c      	b.n	80079e0 <scalbn+0x90>
 80079a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079aa:	460b      	mov	r3, r1
 80079ac:	3a36      	subs	r2, #54	; 0x36
 80079ae:	4432      	add	r2, r6
 80079b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079b4:	428a      	cmp	r2, r1
 80079b6:	dd0b      	ble.n	80079d0 <scalbn+0x80>
 80079b8:	ec45 4b11 	vmov	d1, r4, r5
 80079bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007a28 <scalbn+0xd8>
 80079c0:	f000 f9ba 	bl	8007d38 <copysign>
 80079c4:	a318      	add	r3, pc, #96	; (adr r3, 8007a28 <scalbn+0xd8>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	ec51 0b10 	vmov	r0, r1, d0
 80079ce:	e7da      	b.n	8007986 <scalbn+0x36>
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	dd08      	ble.n	80079e6 <scalbn+0x96>
 80079d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079e0:	ec45 4b10 	vmov	d0, r4, r5
 80079e4:	bd70      	pop	{r4, r5, r6, pc}
 80079e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80079ea:	da0d      	bge.n	8007a08 <scalbn+0xb8>
 80079ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079f0:	429e      	cmp	r6, r3
 80079f2:	ec45 4b11 	vmov	d1, r4, r5
 80079f6:	dce1      	bgt.n	80079bc <scalbn+0x6c>
 80079f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007a20 <scalbn+0xd0>
 80079fc:	f000 f99c 	bl	8007d38 <copysign>
 8007a00:	a307      	add	r3, pc, #28	; (adr r3, 8007a20 <scalbn+0xd0>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	e7e0      	b.n	80079ca <scalbn+0x7a>
 8007a08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a0c:	3236      	adds	r2, #54	; 0x36
 8007a0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a16:	4620      	mov	r0, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <scalbn+0xe8>)
 8007a1e:	e7b2      	b.n	8007986 <scalbn+0x36>
 8007a20:	c2f8f359 	.word	0xc2f8f359
 8007a24:	01a56e1f 	.word	0x01a56e1f
 8007a28:	8800759c 	.word	0x8800759c
 8007a2c:	7e37e43c 	.word	0x7e37e43c
 8007a30:	43500000 	.word	0x43500000
 8007a34:	ffff3cb0 	.word	0xffff3cb0
 8007a38:	3c900000 	.word	0x3c900000

08007a3c <atanf>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	ee10 5a10 	vmov	r5, s0
 8007a42:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007a46:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007a4a:	eef0 7a40 	vmov.f32	s15, s0
 8007a4e:	db10      	blt.n	8007a72 <atanf+0x36>
 8007a50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007a54:	dd04      	ble.n	8007a60 <atanf+0x24>
 8007a56:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007b98 <atanf+0x15c>
 8007a64:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007b9c <atanf+0x160>
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	bfd8      	it	le
 8007a6c:	eef0 7a47 	vmovle.f32	s15, s14
 8007a70:	e7f3      	b.n	8007a5a <atanf+0x1e>
 8007a72:	4b4b      	ldr	r3, [pc, #300]	; (8007ba0 <atanf+0x164>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	dc10      	bgt.n	8007a9a <atanf+0x5e>
 8007a78:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007a7c:	da0a      	bge.n	8007a94 <atanf+0x58>
 8007a7e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007ba4 <atanf+0x168>
 8007a82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a92:	dce2      	bgt.n	8007a5a <atanf+0x1e>
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295
 8007a98:	e013      	b.n	8007ac2 <atanf+0x86>
 8007a9a:	f000 f8a3 	bl	8007be4 <fabsf>
 8007a9e:	4b42      	ldr	r3, [pc, #264]	; (8007ba8 <atanf+0x16c>)
 8007aa0:	429c      	cmp	r4, r3
 8007aa2:	dc4f      	bgt.n	8007b44 <atanf+0x108>
 8007aa4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	dc41      	bgt.n	8007b30 <atanf+0xf4>
 8007aac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007ab0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007ab4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007ab8:	2300      	movs	r3, #0
 8007aba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007abe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007ac8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007bac <atanf+0x170>
 8007acc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007bb0 <atanf+0x174>
 8007ad0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007bb4 <atanf+0x178>
 8007ad4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007ad8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007adc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007bb8 <atanf+0x17c>
 8007ae0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007ae4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007bbc <atanf+0x180>
 8007ae8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007aec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007bc0 <atanf+0x184>
 8007af0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007af4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007bc4 <atanf+0x188>
 8007af8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007afc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007bc8 <atanf+0x18c>
 8007b00:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007b04:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007bcc <atanf+0x190>
 8007b08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007b0c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007bd0 <atanf+0x194>
 8007b10:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007b14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007bd4 <atanf+0x198>
 8007b18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007b1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b20:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b28:	d121      	bne.n	8007b6e <atanf+0x132>
 8007b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b2e:	e794      	b.n	8007a5a <atanf+0x1e>
 8007b30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007b38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b42:	e7be      	b.n	8007ac2 <atanf+0x86>
 8007b44:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <atanf+0x19c>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	dc0b      	bgt.n	8007b62 <atanf+0x126>
 8007b4a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b52:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007b56:	2302      	movs	r3, #2
 8007b58:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b60:	e7af      	b.n	8007ac2 <atanf+0x86>
 8007b62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007b66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e7a9      	b.n	8007ac2 <atanf+0x86>
 8007b6e:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <atanf+0x1a0>)
 8007b70:	491b      	ldr	r1, [pc, #108]	; (8007be0 <atanf+0x1a4>)
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	441a      	add	r2, r3
 8007b76:	440b      	add	r3, r1
 8007b78:	edd3 6a00 	vldr	s13, [r3]
 8007b7c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b86:	ed92 7a00 	vldr	s14, [r2]
 8007b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b8e:	bfb8      	it	lt
 8007b90:	eef1 7a67 	vneglt.f32	s15, s15
 8007b94:	e761      	b.n	8007a5a <atanf+0x1e>
 8007b96:	bf00      	nop
 8007b98:	bfc90fdb 	.word	0xbfc90fdb
 8007b9c:	3fc90fdb 	.word	0x3fc90fdb
 8007ba0:	3edfffff 	.word	0x3edfffff
 8007ba4:	7149f2ca 	.word	0x7149f2ca
 8007ba8:	3f97ffff 	.word	0x3f97ffff
 8007bac:	3c8569d7 	.word	0x3c8569d7
 8007bb0:	3d4bda59 	.word	0x3d4bda59
 8007bb4:	bd6ef16b 	.word	0xbd6ef16b
 8007bb8:	3d886b35 	.word	0x3d886b35
 8007bbc:	3dba2e6e 	.word	0x3dba2e6e
 8007bc0:	3e124925 	.word	0x3e124925
 8007bc4:	3eaaaaab 	.word	0x3eaaaaab
 8007bc8:	bd15a221 	.word	0xbd15a221
 8007bcc:	bd9d8795 	.word	0xbd9d8795
 8007bd0:	bde38e38 	.word	0xbde38e38
 8007bd4:	be4ccccd 	.word	0xbe4ccccd
 8007bd8:	401bffff 	.word	0x401bffff
 8007bdc:	08008370 	.word	0x08008370
 8007be0:	08008380 	.word	0x08008380

08007be4 <fabsf>:
 8007be4:	ee10 3a10 	vmov	r3, s0
 8007be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bec:	ee00 3a10 	vmov	s0, r3
 8007bf0:	4770      	bx	lr
	...

08007bf4 <floorf>:
 8007bf4:	ee10 3a10 	vmov	r3, s0
 8007bf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bfc:	0dca      	lsrs	r2, r1, #23
 8007bfe:	3a7f      	subs	r2, #127	; 0x7f
 8007c00:	2a16      	cmp	r2, #22
 8007c02:	dc2a      	bgt.n	8007c5a <floorf+0x66>
 8007c04:	2a00      	cmp	r2, #0
 8007c06:	da11      	bge.n	8007c2c <floorf+0x38>
 8007c08:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007c6c <floorf+0x78>
 8007c0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c18:	dd05      	ble.n	8007c26 <floorf+0x32>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da23      	bge.n	8007c66 <floorf+0x72>
 8007c1e:	4a14      	ldr	r2, [pc, #80]	; (8007c70 <floorf+0x7c>)
 8007c20:	2900      	cmp	r1, #0
 8007c22:	bf18      	it	ne
 8007c24:	4613      	movne	r3, r2
 8007c26:	ee00 3a10 	vmov	s0, r3
 8007c2a:	4770      	bx	lr
 8007c2c:	4911      	ldr	r1, [pc, #68]	; (8007c74 <floorf+0x80>)
 8007c2e:	4111      	asrs	r1, r2
 8007c30:	420b      	tst	r3, r1
 8007c32:	d0fa      	beq.n	8007c2a <floorf+0x36>
 8007c34:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007c6c <floorf+0x78>
 8007c38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c44:	ddef      	ble.n	8007c26 <floorf+0x32>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bfbe      	ittt	lt
 8007c4a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007c4e:	fa40 f202 	asrlt.w	r2, r0, r2
 8007c52:	189b      	addlt	r3, r3, r2
 8007c54:	ea23 0301 	bic.w	r3, r3, r1
 8007c58:	e7e5      	b.n	8007c26 <floorf+0x32>
 8007c5a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c5e:	d3e4      	bcc.n	8007c2a <floorf+0x36>
 8007c60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c64:	4770      	bx	lr
 8007c66:	2300      	movs	r3, #0
 8007c68:	e7dd      	b.n	8007c26 <floorf+0x32>
 8007c6a:	bf00      	nop
 8007c6c:	7149f2ca 	.word	0x7149f2ca
 8007c70:	bf800000 	.word	0xbf800000
 8007c74:	007fffff 	.word	0x007fffff

08007c78 <scalbnf>:
 8007c78:	b508      	push	{r3, lr}
 8007c7a:	ee10 2a10 	vmov	r2, s0
 8007c7e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007c82:	ed2d 8b02 	vpush	{d8}
 8007c86:	eef0 0a40 	vmov.f32	s1, s0
 8007c8a:	d004      	beq.n	8007c96 <scalbnf+0x1e>
 8007c8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007c90:	d306      	bcc.n	8007ca0 <scalbnf+0x28>
 8007c92:	ee70 0a00 	vadd.f32	s1, s0, s0
 8007c96:	ecbd 8b02 	vpop	{d8}
 8007c9a:	eeb0 0a60 	vmov.f32	s0, s1
 8007c9e:	bd08      	pop	{r3, pc}
 8007ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ca4:	d21c      	bcs.n	8007ce0 <scalbnf+0x68>
 8007ca6:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <scalbnf+0xac>)
 8007ca8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007d28 <scalbnf+0xb0>
 8007cac:	4298      	cmp	r0, r3
 8007cae:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007cb2:	db10      	blt.n	8007cd6 <scalbnf+0x5e>
 8007cb4:	ee10 2a90 	vmov	r2, s1
 8007cb8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007cbc:	3b19      	subs	r3, #25
 8007cbe:	4403      	add	r3, r0
 8007cc0:	2bfe      	cmp	r3, #254	; 0xfe
 8007cc2:	dd0f      	ble.n	8007ce4 <scalbnf+0x6c>
 8007cc4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007d2c <scalbnf+0xb4>
 8007cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8007ccc:	f000 f843 	bl	8007d56 <copysignf>
 8007cd0:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007cd4:	e7df      	b.n	8007c96 <scalbnf+0x1e>
 8007cd6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007d30 <scalbnf+0xb8>
 8007cda:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007cde:	e7da      	b.n	8007c96 <scalbnf+0x1e>
 8007ce0:	0ddb      	lsrs	r3, r3, #23
 8007ce2:	e7ec      	b.n	8007cbe <scalbnf+0x46>
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dd06      	ble.n	8007cf6 <scalbnf+0x7e>
 8007ce8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007cec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007cf0:	ee00 3a90 	vmov	s1, r3
 8007cf4:	e7cf      	b.n	8007c96 <scalbnf+0x1e>
 8007cf6:	f113 0f16 	cmn.w	r3, #22
 8007cfa:	da06      	bge.n	8007d0a <scalbnf+0x92>
 8007cfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d00:	4298      	cmp	r0, r3
 8007d02:	dcdf      	bgt.n	8007cc4 <scalbnf+0x4c>
 8007d04:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007d30 <scalbnf+0xb8>
 8007d08:	e7de      	b.n	8007cc8 <scalbnf+0x50>
 8007d0a:	3319      	adds	r3, #25
 8007d0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007d10:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007d14:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007d34 <scalbnf+0xbc>
 8007d18:	ee07 3a10 	vmov	s14, r3
 8007d1c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007d20:	e7b9      	b.n	8007c96 <scalbnf+0x1e>
 8007d22:	bf00      	nop
 8007d24:	ffff3cb0 	.word	0xffff3cb0
 8007d28:	4c000000 	.word	0x4c000000
 8007d2c:	7149f2ca 	.word	0x7149f2ca
 8007d30:	0da24260 	.word	0x0da24260
 8007d34:	33000000 	.word	0x33000000

08007d38 <copysign>:
 8007d38:	ec51 0b10 	vmov	r0, r1, d0
 8007d3c:	ee11 0a90 	vmov	r0, s3
 8007d40:	ee10 2a10 	vmov	r2, s0
 8007d44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007d4c:	ea41 0300 	orr.w	r3, r1, r0
 8007d50:	ec43 2b10 	vmov	d0, r2, r3
 8007d54:	4770      	bx	lr

08007d56 <copysignf>:
 8007d56:	ee10 3a10 	vmov	r3, s0
 8007d5a:	ee10 2a90 	vmov	r2, s1
 8007d5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007d66:	4313      	orrs	r3, r2
 8007d68:	ee00 3a10 	vmov	s0, r3
 8007d6c:	4770      	bx	lr
	...

08007d70 <__errno>:
 8007d70:	4b01      	ldr	r3, [pc, #4]	; (8007d78 <__errno+0x8>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	2000000c 	.word	0x2000000c

08007d7c <__libc_init_array>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4e0d      	ldr	r6, [pc, #52]	; (8007db4 <__libc_init_array+0x38>)
 8007d80:	4c0d      	ldr	r4, [pc, #52]	; (8007db8 <__libc_init_array+0x3c>)
 8007d82:	1ba4      	subs	r4, r4, r6
 8007d84:	10a4      	asrs	r4, r4, #2
 8007d86:	2500      	movs	r5, #0
 8007d88:	42a5      	cmp	r5, r4
 8007d8a:	d109      	bne.n	8007da0 <__libc_init_array+0x24>
 8007d8c:	4e0b      	ldr	r6, [pc, #44]	; (8007dbc <__libc_init_array+0x40>)
 8007d8e:	4c0c      	ldr	r4, [pc, #48]	; (8007dc0 <__libc_init_array+0x44>)
 8007d90:	f000 f878 	bl	8007e84 <_init>
 8007d94:	1ba4      	subs	r4, r4, r6
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	2500      	movs	r5, #0
 8007d9a:	42a5      	cmp	r5, r4
 8007d9c:	d105      	bne.n	8007daa <__libc_init_array+0x2e>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007da4:	4798      	blx	r3
 8007da6:	3501      	adds	r5, #1
 8007da8:	e7ee      	b.n	8007d88 <__libc_init_array+0xc>
 8007daa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dae:	4798      	blx	r3
 8007db0:	3501      	adds	r5, #1
 8007db2:	e7f2      	b.n	8007d9a <__libc_init_array+0x1e>
 8007db4:	08008398 	.word	0x08008398
 8007db8:	08008398 	.word	0x08008398
 8007dbc:	08008398 	.word	0x08008398
 8007dc0:	080083a0 	.word	0x080083a0

08007dc4 <free>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <free+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f000 b80b 	b.w	8007de4 <_free_r>
 8007dce:	bf00      	nop
 8007dd0:	2000000c 	.word	0x2000000c

08007dd4 <memset>:
 8007dd4:	4402      	add	r2, r0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d100      	bne.n	8007dde <memset+0xa>
 8007ddc:	4770      	bx	lr
 8007dde:	f803 1b01 	strb.w	r1, [r3], #1
 8007de2:	e7f9      	b.n	8007dd8 <memset+0x4>

08007de4 <_free_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4605      	mov	r5, r0
 8007de8:	2900      	cmp	r1, #0
 8007dea:	d045      	beq.n	8007e78 <_free_r+0x94>
 8007dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df0:	1f0c      	subs	r4, r1, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bfb8      	it	lt
 8007df6:	18e4      	addlt	r4, r4, r3
 8007df8:	f000 f842 	bl	8007e80 <__malloc_lock>
 8007dfc:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <_free_r+0x98>)
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	4610      	mov	r0, r2
 8007e02:	b933      	cbnz	r3, 8007e12 <_free_r+0x2e>
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	6014      	str	r4, [r2, #0]
 8007e08:	4628      	mov	r0, r5
 8007e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e0e:	f000 b838 	b.w	8007e82 <__malloc_unlock>
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	d90c      	bls.n	8007e30 <_free_r+0x4c>
 8007e16:	6821      	ldr	r1, [r4, #0]
 8007e18:	1862      	adds	r2, r4, r1
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bf04      	itt	eq
 8007e1e:	681a      	ldreq	r2, [r3, #0]
 8007e20:	685b      	ldreq	r3, [r3, #4]
 8007e22:	6063      	str	r3, [r4, #4]
 8007e24:	bf04      	itt	eq
 8007e26:	1852      	addeq	r2, r2, r1
 8007e28:	6022      	streq	r2, [r4, #0]
 8007e2a:	6004      	str	r4, [r0, #0]
 8007e2c:	e7ec      	b.n	8007e08 <_free_r+0x24>
 8007e2e:	4613      	mov	r3, r2
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	b10a      	cbz	r2, 8007e38 <_free_r+0x54>
 8007e34:	42a2      	cmp	r2, r4
 8007e36:	d9fa      	bls.n	8007e2e <_free_r+0x4a>
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	1858      	adds	r0, r3, r1
 8007e3c:	42a0      	cmp	r0, r4
 8007e3e:	d10b      	bne.n	8007e58 <_free_r+0x74>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	4401      	add	r1, r0
 8007e44:	1858      	adds	r0, r3, r1
 8007e46:	4282      	cmp	r2, r0
 8007e48:	6019      	str	r1, [r3, #0]
 8007e4a:	d1dd      	bne.n	8007e08 <_free_r+0x24>
 8007e4c:	6810      	ldr	r0, [r2, #0]
 8007e4e:	6852      	ldr	r2, [r2, #4]
 8007e50:	605a      	str	r2, [r3, #4]
 8007e52:	4401      	add	r1, r0
 8007e54:	6019      	str	r1, [r3, #0]
 8007e56:	e7d7      	b.n	8007e08 <_free_r+0x24>
 8007e58:	d902      	bls.n	8007e60 <_free_r+0x7c>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	e7d3      	b.n	8007e08 <_free_r+0x24>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	1821      	adds	r1, r4, r0
 8007e64:	428a      	cmp	r2, r1
 8007e66:	bf04      	itt	eq
 8007e68:	6811      	ldreq	r1, [r2, #0]
 8007e6a:	6852      	ldreq	r2, [r2, #4]
 8007e6c:	6062      	str	r2, [r4, #4]
 8007e6e:	bf04      	itt	eq
 8007e70:	1809      	addeq	r1, r1, r0
 8007e72:	6021      	streq	r1, [r4, #0]
 8007e74:	605c      	str	r4, [r3, #4]
 8007e76:	e7c7      	b.n	8007e08 <_free_r+0x24>
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000170 	.word	0x20000170

08007e80 <__malloc_lock>:
 8007e80:	4770      	bx	lr

08007e82 <__malloc_unlock>:
 8007e82:	4770      	bx	lr

08007e84 <_init>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	bf00      	nop
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr

08007e90 <_fini>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	bf00      	nop
 8007e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e96:	bc08      	pop	{r3}
 8007e98:	469e      	mov	lr, r3
 8007e9a:	4770      	bx	lr
