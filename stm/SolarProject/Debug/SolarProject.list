
SolarProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003748  08003748  00013748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e8  080037e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037f0  080037f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08003870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003870  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4db  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002076  00000000  00000000  0002e57b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  000305f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  000312b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004ca7  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a38f  00000000  00000000  00036b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e39b  00000000  00000000  00040eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  000cf304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003730 	.word	0x08003730

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003730 	.word	0x08003730

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b972 	b.w	8000e8c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4688      	mov	r8, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14b      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	d967      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0720 	rsb	r7, r2, #32
 8000bde:	fa01 f302 	lsl.w	r3, r1, r2
 8000be2:	fa20 f707 	lsr.w	r7, r0, r7
 8000be6:	4095      	lsls	r5, r2
 8000be8:	ea47 0803 	orr.w	r8, r7, r3
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf8:	fa1f fc85 	uxth.w	ip, r5
 8000bfc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	fb07 f10c 	mul.w	r1, r7, ip
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18eb      	adds	r3, r5, r3
 8000c0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c12:	f080 811b 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8118 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c1c:	3f02      	subs	r7, #2
 8000c1e:	442b      	add	r3, r5
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	442c      	add	r4, r5
 8000c4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c50:	eba4 040c 	sub.w	r4, r4, ip
 8000c54:	2700      	movs	r7, #0
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xbe>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80eb 	beq.w	8000e46 <__udivmoddi4+0x286>
 8000c70:	2700      	movs	r7, #0
 8000c72:	e9c6 0100 	strd	r0, r1, [r6]
 8000c76:	4638      	mov	r0, r7
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f783 	clz	r7, r3
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d147      	bne.n	8000d16 <__udivmoddi4+0x156>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd0>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80fa 	bhi.w	8000e84 <__udivmoddi4+0x2c4>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000c9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xe8>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 808f 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb2:	1b49      	subs	r1, r1, r5
 8000cb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb8:	fa1f f885 	uxth.w	r8, r5
 8000cbc:	2701      	movs	r7, #1
 8000cbe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cc2:	0c23      	lsrs	r3, r4, #16
 8000cc4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1a59      	subs	r1, r3, r1
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x14c>
 8000cfc:	192c      	adds	r4, r5, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x14a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80b6 	bhi.w	8000e76 <__udivmoddi4+0x2b6>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e79f      	b.n	8000c56 <__udivmoddi4+0x96>
 8000d16:	f1c7 0c20 	rsb	ip, r7, #32
 8000d1a:	40bb      	lsls	r3, r7
 8000d1c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d20:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d24:	fa01 f407 	lsl.w	r4, r1, r7
 8000d28:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d2c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d30:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d34:	4325      	orrs	r5, r4
 8000d36:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d3a:	0c2c      	lsrs	r4, r5, #16
 8000d3c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d40:	fa1f fa8e 	uxth.w	sl, lr
 8000d44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d48:	fb09 f40a 	mul.w	r4, r9, sl
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d52:	fa00 f107 	lsl.w	r1, r0, r7
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1e 0303 	adds.w	r3, lr, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	f080 8087 	bcs.w	8000e72 <__udivmoddi4+0x2b2>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f240 8084 	bls.w	8000e72 <__udivmoddi4+0x2b2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4473      	add	r3, lr
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	b2ad      	uxth	r5, r5
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3310 	mls	r3, r8, r0, r3
 8000d7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d80:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d84:	45a2      	cmp	sl, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1e 0404 	adds.w	r4, lr, r4
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d90:	d26b      	bcs.n	8000e6a <__udivmoddi4+0x2aa>
 8000d92:	45a2      	cmp	sl, r4
 8000d94:	d969      	bls.n	8000e6a <__udivmoddi4+0x2aa>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4474      	add	r4, lr
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	eba4 040a 	sub.w	r4, r4, sl
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c2      	mov	sl, r8
 8000daa:	464b      	mov	r3, r9
 8000dac:	d354      	bcc.n	8000e58 <__udivmoddi4+0x298>
 8000dae:	d051      	beq.n	8000e54 <__udivmoddi4+0x294>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2c8>
 8000db4:	ebb1 050a 	subs.w	r5, r1, sl
 8000db8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dbc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc0:	40fd      	lsrs	r5, r7
 8000dc2:	40fc      	lsrs	r4, r7
 8000dc4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	fa21 f303 	lsr.w	r3, r1, r3
 8000de2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de6:	4338      	orrs	r0, r7
 8000de8:	0c01      	lsrs	r1, r0, #16
 8000dea:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dee:	fa1f f885 	uxth.w	r8, r5
 8000df2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb07 f308 	mul.w	r3, r7, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x256>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e0c:	d22f      	bcs.n	8000e6e <__udivmoddi4+0x2ae>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d92d      	bls.n	8000e6e <__udivmoddi4+0x2ae>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	b281      	uxth	r1, r0
 8000e1a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb00 f308 	mul.w	r3, r0, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x27e>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e34:	d217      	bcs.n	8000e66 <__udivmoddi4+0x2a6>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d915      	bls.n	8000e66 <__udivmoddi4+0x2a6>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1ac9      	subs	r1, r1, r3
 8000e40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e44:	e73b      	b.n	8000cbe <__udivmoddi4+0xfe>
 8000e46:	4637      	mov	r7, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e709      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e4c:	4607      	mov	r7, r0
 8000e4e:	e6e7      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e54:	4541      	cmp	r1, r8
 8000e56:	d2ab      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e58:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e5c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e60:	3801      	subs	r0, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	e7a4      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e66:	4660      	mov	r0, ip
 8000e68:	e7e9      	b.n	8000e3e <__udivmoddi4+0x27e>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e795      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e6e:	4667      	mov	r7, ip
 8000e70:	e7d1      	b.n	8000e16 <__udivmoddi4+0x256>
 8000e72:	4681      	mov	r9, r0
 8000e74:	e77c      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e76:	3802      	subs	r0, #2
 8000e78:	442c      	add	r4, r5
 8000e7a:	e747      	b.n	8000d0c <__udivmoddi4+0x14c>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	442b      	add	r3, r5
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e84:	4638      	mov	r0, r7
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xda>
 8000e88:	4637      	mov	r7, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa0>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb>:
 *      Author: Duane Mathias
 */

#include "Stepper.h"

Stepper::Stepper(const GPIO_TypeDef* const gpioPorts[3], const uint16_t gpioPins[3], const bool reverseDirection):ports(gpioPorts),pins(gpioPins), reverse(reverseDirection) {
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	70fb      	strb	r3, [r7, #3]
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb+0x34>)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	751a      	strb	r2, [r3, #20]

}
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	08003750 	.word	0x08003750

08000ec8 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <_ZN7StepperD1Ev+0x1c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	08003750 	.word	0x08003750

08000ee8 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
}
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe9 	bl	8000ec8 <_ZN7StepperD1Ev>
 8000ef6:	2118      	movs	r1, #24
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f002 fa13 	bl	8003324 <_ZdlPvj>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_ZN7Stepper6setDirEb>:

void Stepper::setDir(bool dir){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
	if(reverse) dir = !dir;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7d1b      	ldrb	r3, [r3, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <_ZN7Stepper6setDirEb+0x1c>
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	f083 0301 	eor.w	r3, r3, #1
 8000f22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef*)ports[1],pins[1],(GPIO_PinState)dir);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	3302      	adds	r3, #2
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	78fa      	ldrb	r2, [r7, #3]
 8000f36:	4619      	mov	r1, r3
 8000f38:	f001 f868 	bl	800200c <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZN7Stepper4stepEv>:

void Stepper::step() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	//bool dirState = ((ports[1]->ODR & pins[1]) == pins[1]);
	HAL_GPIO_TogglePin((GPIO_TypeDef*) ports[0], pins[0]);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	f001 f86f 	bl	800203e <HAL_GPIO_TogglePin>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN7Stepper6updateEv>:

void Stepper::update(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	step();
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffe7 	bl	8000f44 <_ZN7Stepper4stepEv>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <_ZN7Stepper7setFreqEf>:

void Stepper::setFreq(float Hz){
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	ed87 0a00 	vstr	s0, [r7]
	if(Hz < 1) Hz = 1;
 8000f8c:	edd7 7a00 	vldr	s15, [r7]
 8000f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	d502      	bpl.n	8000fa4 <_ZN7Stepper7setFreqEf+0x24>
 8000f9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fa2:	603b      	str	r3, [r7, #0]
	if(Hz > 2000) Hz = 2000;
 8000fa4:	edd7 7a00 	vldr	s15, [r7]
 8000fa8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ff8 <_ZN7Stepper7setFreqEf+0x78>
 8000fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb4:	dd01      	ble.n	8000fba <_ZN7Stepper7setFreqEf+0x3a>
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_ZN7Stepper7setFreqEf+0x7c>)
 8000fb8:	603b      	str	r3, [r7, #0]
	TIM1->ARR = (uint16_t)(65535.0/Hz);
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f7ff fa70 	bl	80004a0 <__aeabi_f2d>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	a109      	add	r1, pc, #36	; (adr r1, 8000ff0 <_ZN7Stepper7setFreqEf+0x70>)
 8000fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fce:	f7ff fbe9 	bl	80007a4 <__aeabi_ddiv>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460c      	mov	r4, r1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	4621      	mov	r1, r4
 8000fda:	f7ff fd69 	bl	8000ab0 <__aeabi_d2uiz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_ZN7Stepper7setFreqEf+0x80>)
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40efffe0 	.word	0x40efffe0
 8000ff8:	44fa0000 	.word	0x44fa0000
 8000ffc:	44fa0000 	.word	0x44fa0000
 8001000:	40010000 	.word	0x40010000

08001004 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf>:
 *      Author: Duane Mathias
 */

#include "absEncoder.h"

absEncoder::absEncoder(const GPIO_TypeDef* const gpioPorts[10], const uint16_t gpioPins[10], bool reverseDirection, float offset):ports(gpioPorts),pins(gpioPins),reverse(reverseDirection),degreeOffset(offset) {
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6178      	str	r0, [r7, #20]
 800100c:	6139      	str	r1, [r7, #16]
 800100e:	60fa      	str	r2, [r7, #12]
 8001010:	ed87 0a01 	vstr	s0, [r7, #4]
 8001014:	72fb      	strb	r3, [r7, #11]
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf+0x40>)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	7afa      	ldrb	r2, [r7, #11]
 800102c:	731a      	strb	r2, [r3, #12]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	611a      	str	r2, [r3, #16]

}
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4618      	mov	r0, r3
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	08003760 	.word	0x08003760

08001048 <_ZN10absEncoderD1Ev>:

absEncoder::~absEncoder() {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <_ZN10absEncoderD1Ev+0x1c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	08003760 	.word	0x08003760

08001068 <_ZN10absEncoderD0Ev>:
absEncoder::~absEncoder() {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
}
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffe9 	bl	8001048 <_ZN10absEncoderD1Ev>
 8001076:	2114      	movs	r1, #20
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f002 f953 	bl	8003324 <_ZdlPvj>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN10absEncoder11positionRawEv>:

uint16_t absEncoder::positionRaw(){
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	// read all gpio at once
	uint16_t a = GPIOA->IDR;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <_ZN10absEncoder11positionRawEv+0xcc>)
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	81fb      	strh	r3, [r7, #14]
	uint16_t b = GPIOB->IDR;
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <_ZN10absEncoder11positionRawEv+0xd0>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	81bb      	strh	r3, [r7, #12]
	uint16_t c = GPIOC->IDR;
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <_ZN10absEncoder11positionRawEv+0xd4>)
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	817b      	strh	r3, [r7, #10]

	//construct greycode
	uint16_t grey = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	82fb      	strh	r3, [r7, #22]
	uint16_t p = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	82bb      	strh	r3, [r7, #20]
	uint8_t bit = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	727b      	strb	r3, [r7, #9]
	for(int i = 0; i<10; i++){
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	dc3d      	bgt.n	8001134 <_ZN10absEncoder11positionRawEv+0xac>
		if(ports[i]==GPIOA){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <_ZN10absEncoder11positionRawEv+0xcc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d102      	bne.n	80010d0 <_ZN10absEncoder11positionRawEv+0x48>
			p = a;
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	82bb      	strh	r3, [r7, #20]
 80010ce:	e016      	b.n	80010fe <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOB){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <_ZN10absEncoder11positionRawEv+0xd0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d102      	bne.n	80010e8 <_ZN10absEncoder11positionRawEv+0x60>
			p = b;
 80010e2:	89bb      	ldrh	r3, [r7, #12]
 80010e4:	82bb      	strh	r3, [r7, #20]
 80010e6:	e00a      	b.n	80010fe <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOC){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <_ZN10absEncoder11positionRawEv+0xd4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <_ZN10absEncoder11positionRawEv+0x76>
			p = c;
 80010fa:	897b      	ldrh	r3, [r7, #10]
 80010fc:	82bb      	strh	r3, [r7, #20]
		}
		bit = (p&pins[i])>0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	8abb      	ldrh	r3, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf14      	ite	ne
 8001114:	2301      	movne	r3, #1
 8001116:	2300      	moveq	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	727b      	strb	r3, [r7, #9]
		grey += bit<<i;
 800111c:	7a7a      	ldrb	r2, [r7, #9]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	b29a      	uxth	r2, r3
 8001126:	8afb      	ldrh	r3, [r7, #22]
 8001128:	4413      	add	r3, r2
 800112a:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<10; i++){
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	3301      	adds	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	e7be      	b.n	80010b2 <_ZN10absEncoder11positionRawEv+0x2a>
	}
	grey = (0xffff^grey)&0x02ff; //bitwise invert because the encoder is active low
 8001134:	8afb      	ldrh	r3, [r7, #22]
 8001136:	43db      	mvns	r3, r3
 8001138:	b29a      	uxth	r2, r3
 800113a:	f240 23ff 	movw	r3, #767	; 0x2ff
 800113e:	4013      	ands	r3, r2
 8001140:	82fb      	strh	r3, [r7, #22]
	return grayToBinary(grey);
 8001142:	8afb      	ldrh	r3, [r7, #22]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f88d 	bl	8001264 <_Z12grayToBinaryt>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800

08001160 <_ZN10absEncoder8positionEv>:

//return the position of the encoder in degrees -180.0 to 180.0 range
float absEncoder::position(){
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	float deg = positionRaw()*360.0/1024.0;
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff8d 	bl	8001088 <_ZN10absEncoder11positionRawEv>
 800116e:	4603      	mov	r3, r0
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f983 	bl	800047c <__aeabi_i2d>
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <_ZN10absEncoder8positionEv+0xf0>)
 800117c:	f7ff f9e8 	bl	8000550 <__aeabi_dmul>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4618      	mov	r0, r3
 8001186:	4621      	mov	r1, r4
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <_ZN10absEncoder8positionEv+0xf4>)
 800118e:	f7ff fb09 	bl	80007a4 <__aeabi_ddiv>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	4618      	mov	r0, r3
 8001198:	4621      	mov	r1, r4
 800119a:	f7ff fca9 	bl	8000af0 <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	60fb      	str	r3, [r7, #12]
	if(reverse) deg = -deg;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7b1b      	ldrb	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <_ZN10absEncoder8positionEv+0x56>
 80011aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ae:	eef1 7a67 	vneg.f32	s15, s15
 80011b2:	edc7 7a03 	vstr	s15, [r7, #12]
	deg += degreeOffset;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(deg != 0) deg = fmod(deg,360.0);
 80011c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d4:	d00d      	beq.n	80011f2 <_ZN10absEncoder8positionEv+0x92>
 80011d6:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001248 <_ZN10absEncoder8positionEv+0xe8>
 80011da:	ed97 0a03 	vldr	s0, [r7, #12]
 80011de:	f000 f85a 	bl	8001296 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011e2:	ec54 3b10 	vmov	r3, r4, d0
 80011e6:	4618      	mov	r0, r3
 80011e8:	4621      	mov	r1, r4
 80011ea:	f7ff fc81 	bl	8000af0 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	60fb      	str	r3, [r7, #12]
	if(deg < -180.0)deg+=360;
 80011f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001258 <_ZN10absEncoder8positionEv+0xf8>
 80011fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	d508      	bpl.n	8001216 <_ZN10absEncoder8positionEv+0xb6>
 8001204:	edd7 7a03 	vldr	s15, [r7, #12]
 8001208:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800125c <_ZN10absEncoder8positionEv+0xfc>
 800120c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001210:	edc7 7a03 	vstr	s15, [r7, #12]
 8001214:	e010      	b.n	8001238 <_ZN10absEncoder8positionEv+0xd8>
	else if(deg > 180.0)deg-=360;
 8001216:	edd7 7a03 	vldr	s15, [r7, #12]
 800121a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001260 <_ZN10absEncoder8positionEv+0x100>
 800121e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	dd07      	ble.n	8001238 <_ZN10absEncoder8positionEv+0xd8>
 8001228:	edd7 7a03 	vldr	s15, [r7, #12]
 800122c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800125c <_ZN10absEncoder8positionEv+0xfc>
 8001230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001234:	edc7 7a03 	vstr	s15, [r7, #12]
	return deg;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	ee07 3a90 	vmov	s15, r3
}
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	00000000 	.word	0x00000000
 800124c:	40768000 	.word	0x40768000
 8001250:	40768000 	.word	0x40768000
 8001254:	40900000 	.word	0x40900000
 8001258:	c3340000 	.word	0xc3340000
 800125c:	43b40000 	.word	0x43b40000
 8001260:	43340000 	.word	0x43340000

08001264 <_Z12grayToBinaryt>:

uint16_t grayToBinary(uint16_t num){
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
	uint16_t mask = num;
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	81fb      	strh	r3, [r7, #14]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <_Z12grayToBinaryt+0x24>
		mask >>= 1;
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	105b      	asrs	r3, r3, #1
 800127c:	81fb      	strh	r3, [r7, #14]
		num   ^= mask;
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	4053      	eors	r3, r2
 8001284:	80fb      	strh	r3, [r7, #6]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 8001286:	e7f4      	b.n	8001272 <_Z12grayToBinaryt+0xe>
	}
	return num;
 8001288:	88fb      	ldrh	r3, [r7, #6]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 8001296:	b590      	push	{r4, r7, lr}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	ed87 0a03 	vstr	s0, [r7, #12]
 80012a0:	ed87 1b00 	vstr	d1, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff f8fb 	bl	80004a0 <__aeabi_f2d>
 80012aa:	4603      	mov	r3, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	ed97 1b00 	vldr	d1, [r7]
 80012b2:	ec44 3b10 	vmov	d0, r3, r4
 80012b6:	f002 f839 	bl	800332c <fmod>
 80012ba:	eeb0 7a40 	vmov.f32	s14, s0
 80012be:	eef0 7a60 	vmov.f32	s15, s1
    }
 80012c2:	eeb0 0a47 	vmov.f32	s0, s14
 80012c6:	eef0 0a67 	vmov.f32	s1, s15
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}

080012d0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012da:	edd7 7a01 	vldr	s15, [r7, #4]
 80012de:	eef0 7ae7 	vabs.f32	s15, s15
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_TIM_PeriodElapsedCallback>:
//motors
Stepper elStepper(ElStepperPorts,ElStepperPins, false);

// callback function for stepper motor timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d102      	bne.n	8001306 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  elStepper.update();
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001302:	f7ff fe31 	bl	8000f68 <_ZN7Stepper6updateEv>
  }
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000008c 	.word	0x2000008c
 8001314:	200000e0 	.word	0x200000e0

08001318 <mainsetup>:

int currentpos;
float pos, oldpos, targetAngle;
void mainsetup(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	elStepper.setFreq(100);
 800131c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001350 <mainsetup+0x38>
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <mainsetup+0x3c>)
 8001322:	f7ff fe2d 	bl	8000f80 <_ZN7Stepper7setFreqEf>
	currentpos = 0;
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <mainsetup+0x40>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
	oldpos = 0;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <mainsetup+0x44>)
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
	pos=0;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <mainsetup+0x48>)
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
	targetAngle = elEncoder.position();
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <mainsetup+0x4c>)
 800133e:	f7ff ff0f 	bl	8001160 <_ZN10absEncoder8positionEv>
 8001342:	eef0 7a40 	vmov.f32	s15, s0
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <mainsetup+0x50>)
 8001348:	edc3 7a00 	vstr	s15, [r3]
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	42c80000 	.word	0x42c80000
 8001354:	200000e0 	.word	0x200000e0
 8001358:	200000f8 	.word	0x200000f8
 800135c:	20000100 	.word	0x20000100
 8001360:	200000fc 	.word	0x200000fc
 8001364:	200000cc 	.word	0x200000cc
 8001368:	20000104 	.word	0x20000104

0800136c <mainloop>:

void mainloop(){
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	pos = elEncoder.position(); //get encoder angle position
 8001372:	481b      	ldr	r0, [pc, #108]	; (80013e0 <mainloop+0x74>)
 8001374:	f7ff fef4 	bl	8001160 <_ZN10absEncoder8positionEv>
 8001378:	eef0 7a40 	vmov.f32	s15, s0
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <mainloop+0x78>)
 800137e:	edc3 7a00 	vstr	s15, [r3]
	float err = targetAngle-pos; //feedback
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <mainloop+0x7c>)
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <mainloop+0x78>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001392:	edc7 7a01 	vstr	s15, [r7, #4]
	float vel = 100*err; //proportional term
 8001396:	edd7 7a01 	vldr	s15, [r7, #4]
 800139a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80013ec <mainloop+0x80>
 800139e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a2:	edc7 7a00 	vstr	s15, [r7]

	//set velocity
	elStepper.setDir(vel > 0);
 80013a6:	edd7 7a00 	vldr	s15, [r7]
 80013aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	bfcc      	ite	gt
 80013b4:	2301      	movgt	r3, #1
 80013b6:	2300      	movle	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <mainloop+0x84>)
 80013be:	f7ff fda3 	bl	8000f08 <_ZN7Stepper6setDirEb>
	elStepper.setFreq(abs(vel));
 80013c2:	ed97 0a00 	vldr	s0, [r7]
 80013c6:	f7ff ff83 	bl	80012d0 <_ZSt3absf>
 80013ca:	eef0 7a40 	vmov.f32	s15, s0
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <mainloop+0x84>)
 80013d4:	f7ff fdd4 	bl	8000f80 <_ZN7Stepper7setFreqEf>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000cc 	.word	0x200000cc
 80013e4:	200000fc 	.word	0x200000fc
 80013e8:	20000104 	.word	0x20000104
 80013ec:	42c80000 	.word	0x42c80000
 80013f0:	200000e0 	.word	0x200000e0

080013f4 <_Z41__static_initialization_and_destruction_0ii>:
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d112      	bne.n	800142a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140a:	4293      	cmp	r3, r2
 800140c:	d10d      	bne.n	800142a <_Z41__static_initialization_and_destruction_0ii+0x36>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, false, 88.6875);
 800140e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001450 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8001412:	2300      	movs	r3, #0
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001416:	4910      	ldr	r1, [pc, #64]	; (8001458 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800141a:	f7ff fdf3 	bl	8001004 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf>
Stepper elStepper(ElStepperPorts,ElStepperPins, false);
 800141e:	2300      	movs	r3, #0
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001422:	4910      	ldr	r1, [pc, #64]	; (8001464 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001424:	4810      	ldr	r0, [pc, #64]	; (8001468 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001426:	f7ff fd33 	bl	8000e90 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10a      	bne.n	8001446 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001436:	4293      	cmp	r3, r2
 8001438:	d105      	bne.n	8001446 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800143c:	f7ff fd44 	bl	8000ec8 <_ZN7StepperD1Ev>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, false, 88.6875);
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001442:	f7ff fe01 	bl	8001048 <_ZN10absEncoderD1Ev>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	42b16000 	.word	0x42b16000
 8001454:	08003790 	.word	0x08003790
 8001458:	08003768 	.word	0x08003768
 800145c:	200000cc 	.word	0x200000cc
 8001460:	080037b0 	.word	0x080037b0
 8001464:	080037a4 	.word	0x080037a4
 8001468:	200000e0 	.word	0x200000e0

0800146c <_GLOBAL__sub_I_htim1>:
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
 8001470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff ffbd 	bl	80013f4 <_Z41__static_initialization_and_destruction_0ii>
 800147a:	bd80      	pop	{r7, pc}

0800147c <_GLOBAL__sub_D_htim1>:
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
 8001480:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff ffb5 	bl	80013f4 <_Z41__static_initialization_and_destruction_0ii>
 800148a:	bd80      	pop	{r7, pc}

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001490:	f000 fab6 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001494:	f000 f810 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f000 f8f8 	bl	800168c <MX_GPIO_Init>
  MX_I2C2_Init();
 800149c:	f000 f876 	bl	800158c <MX_I2C2_Init>
  MX_TIM1_Init();
 80014a0:	f000 f8a2 	bl	80015e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1); //enable steppers
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <main+0x28>)
 80014a6:	f001 fb96 	bl	8002bd6 <HAL_TIM_Base_Start_IT>
  mainsetup();
 80014aa:	f7ff ff35 	bl	8001318 <mainsetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainloop();
 80014ae:	f7ff ff5d 	bl	800136c <mainloop>
  {
 80014b2:	e7fc      	b.n	80014ae <main+0x22>
 80014b4:	2000008c 	.word	0x2000008c

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b094      	sub	sp, #80	; 0x50
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	2230      	movs	r2, #48	; 0x30
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 f8da 	bl	8003680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SystemClock_Config+0xcc>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <SystemClock_Config+0xcc>)
 80014e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <SystemClock_Config+0xcc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <SystemClock_Config+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001504:	4a20      	ldr	r2, [pc, #128]	; (8001588 <SystemClock_Config+0xd0>)
 8001506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <SystemClock_Config+0xd0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001518:	2301      	movs	r3, #1
 800151a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800151c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001530:	2354      	movs	r3, #84	; 0x54
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001538:	2307      	movs	r3, #7
 800153a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fecf 	bl	80022e4 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800154c:	f000 f938 	bl	80017c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001554:	2302      	movs	r3, #2
 8001556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f001 f929 	bl	80027c4 <HAL_RCC_ClockConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001578:	f000 f922 	bl	80017c0 <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	; 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000

0800158c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C2_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C2_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C2_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C2_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C2_Init+0x50>)
 80015ca:	f000 fd53 	bl	8002074 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 f8f4 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000010c 	.word	0x2000010c
 80015e0:	40005800 	.word	0x40005800
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001606:	4a20      	ldr	r2, [pc, #128]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1282;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_TIM1_Init+0x9c>)
 800160c:	f240 5202 	movw	r2, #1282	; 0x502
 8001610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001614:	2210      	movs	r2, #16
 8001616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_TIM1_Init+0x9c>)
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM1_Init+0x9c>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001632:	4814      	ldr	r0, [pc, #80]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001634:	f001 faa4 	bl	8002b80 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800163e:	f000 f8bf 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_TIM1_Init+0x9c>)
 8001650:	f001 fbed 	bl	8002e2e <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800165a:	f000 f8b1 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_TIM1_Init+0x9c>)
 800166c:	f001 fdd8 	bl	8003220 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001676:	f000 f8a3 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000008c 	.word	0x2000008c
 8001688:	40010000 	.word	0x40010000

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <MX_GPIO_Init+0x120>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a40      	ldr	r2, [pc, #256]	; (80017ac <MX_GPIO_Init+0x120>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <MX_GPIO_Init+0x120>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <MX_GPIO_Init+0x120>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a39      	ldr	r2, [pc, #228]	; (80017ac <MX_GPIO_Init+0x120>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <MX_GPIO_Init+0x120>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <MX_GPIO_Init+0x120>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a32      	ldr	r2, [pc, #200]	; (80017ac <MX_GPIO_Init+0x120>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <MX_GPIO_Init+0x120>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <MX_GPIO_Init+0x120>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a2b      	ldr	r2, [pc, #172]	; (80017ac <MX_GPIO_Init+0x120>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <MX_GPIO_Init+0x120>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 8001712:	2200      	movs	r2, #0
 8001714:	f240 411f 	movw	r1, #1055	; 0x41f
 8001718:	4825      	ldr	r0, [pc, #148]	; (80017b0 <MX_GPIO_Init+0x124>)
 800171a:	f000 fc77 	bl	800200c <HAL_GPIO_WritePin>
                          |ElEna_Pin|AzEna_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <MX_GPIO_Init+0x128>)
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4821      	ldr	r0, [pc, #132]	; (80017b8 <MX_GPIO_Init+0x12c>)
 8001734:	f000 fae8 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ElPul_Pin ElDir_Pin AzDir_Pin AzPul_Pin
                           ElEna_Pin AzEna_Pin */
  GPIO_InitStruct.Pin = ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 8001738:	f240 431f 	movw	r3, #1055	; 0x41f
 800173c:	617b      	str	r3, [r7, #20]
                          |ElEna_Pin|AzEna_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <MX_GPIO_Init+0x124>)
 8001752:	f000 fad9 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ElYellow_Pin ElGreen_Pin ElPurple_Pin ElWhite_Pin
                           ElGrey_Pin AzGreen_Pin AzYellow_Pin */
  GPIO_InitStruct.Pin = ElYellow_Pin|ElGreen_Pin|ElPurple_Pin|ElWhite_Pin
 8001756:	f44f 53df 	mov.w	r3, #7136	; 0x1be0
 800175a:	617b      	str	r3, [r7, #20]
                          |ElGrey_Pin|AzGreen_Pin|AzYellow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	2301      	movs	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4811      	ldr	r0, [pc, #68]	; (80017b0 <MX_GPIO_Init+0x124>)
 800176c:	f000 facc 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : AzOrange_Pin AzRed_Pin AzBlack_Pin ElBlack_Pin */
  GPIO_InitStruct.Pin = AzOrange_Pin|AzRed_Pin|AzBlack_Pin|ElBlack_Pin;
 8001770:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	2301      	movs	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_GPIO_Init+0x12c>)
 8001786:	f000 fabf 	bl	8001d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : AzWhite_Pin AzGrey_Pin AzPurple_Pin AzRedWhite_Pin
                           AzBlackWhite_Pin ElBlackWhite_Pin ElRedWhite_Pin ElRed_Pin
                           ElOrange_Pin */
  GPIO_InitStruct.Pin = AzWhite_Pin|AzGrey_Pin|AzPurple_Pin|AzRedWhite_Pin
 800178a:	f247 3336 	movw	r3, #29494	; 0x7336
 800178e:	617b      	str	r3, [r7, #20]
                          |AzBlackWhite_Pin|ElBlackWhite_Pin|ElRedWhite_Pin|ElRed_Pin
                          |ElOrange_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001794:	2301      	movs	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <MX_GPIO_Init+0x130>)
 80017a0:	f000 fab2 	bl	8001d08 <HAL_GPIO_Init>

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	10210000 	.word	0x10210000
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020400 	.word	0x40020400

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <Error_Handler+0x6>

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <HAL_MspInit+0x4c>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_MspInit+0x4c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_MspInit+0x4c>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001806:	2007      	movs	r0, #7
 8001808:	f000 fa3c 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800

08001818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_I2C_MspInit+0xa4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d13c      	bne.n	80018b4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_I2C_MspInit+0xa8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_I2C_MspInit+0xa8>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_I2C_MspInit+0xa8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_D6_Pin;
 8001856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001868:	2304      	movs	r3, #4
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SCL_D6_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4814      	ldr	r0, [pc, #80]	; (80018c4 <HAL_I2C_MspInit+0xac>)
 8001874:	f000 fa48 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_D3_Pin;
 8001878:	2308      	movs	r3, #8
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187c:	2312      	movs	r3, #18
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001880:	2301      	movs	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001888:	2309      	movs	r3, #9
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SDA_D3_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <HAL_I2C_MspInit+0xac>)
 8001894:	f000 fa38 	bl	8001d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_I2C_MspInit+0xa8>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_I2C_MspInit+0xa8>)
 80018a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_I2C_MspInit+0xa8>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40005800 	.word	0x40005800
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020400 	.word	0x40020400

080018c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_TIM_Base_MspInit+0x48>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d115      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_TIM_Base_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <HAL_TIM_Base_MspInit+0x4c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_TIM_Base_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2019      	movs	r0, #25
 80018fc:	f000 f9cd 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001900:	2019      	movs	r0, #25
 8001902:	f000 f9e6 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40010000 	.word	0x40010000
 8001914:	40023800 	.word	0x40023800

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 f89e 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001972:	f001 f954 	bl	8002c1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000008c 	.word	0x2000008c

08001980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <SystemInit+0x28>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <SystemInit+0x28>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SystemInit+0x28>)
 8001996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199a:	609a      	str	r2, [r3, #8]
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019b2:	e003      	b.n	80019bc <LoopCopyDataInit>

080019b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ba:	3104      	adds	r1, #4

080019bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c4:	d3f6      	bcc.n	80019b4 <CopyDataInit>
  ldr  r2, =_sbss
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019c8:	e002      	b.n	80019d0 <LoopFillZerobss>

080019ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019cc:	f842 3b04 	str.w	r3, [r2], #4

080019d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d4:	d3f9      	bcc.n	80019ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019d6:	f7ff ffd3 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f001 fe25 	bl	8003628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7ff fd55 	bl	800148c <main>
  bx  lr    
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80019e8:	08003800 	.word	0x08003800
  ldr  r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80019f4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80019f8:	20000164 	.word	0x20000164

080019fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_Init+0x40>)
 8001a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_Init+0x40>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_Init+0x40>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f92b 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f808 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a34:	f7ff fec8 	bl	80017c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x54>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f943 	bl	8001cee <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f000 f90b 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x5c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20000160 	.word	0x20000160

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000160 	.word	0x20000160

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e159      	b.n	8001fd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8148 	bne.w	8001fd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d00b      	beq.n	8001d62 <HAL_GPIO_Init+0x5a>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d007      	beq.n	8001d62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d56:	2b11      	cmp	r3, #17
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d130      	bne.n	8001dc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0xfc>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b12      	cmp	r3, #18
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a2 	beq.w	8001fd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_GPIO_Init+0x2e4>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a55      	ldr	r2, [pc, #340]	; (8001fec <HAL_GPIO_Init+0x2e4>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_GPIO_Init+0x2e4>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a48      	ldr	r2, [pc, #288]	; (8001ff4 <HAL_GPIO_Init+0x2ec>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x202>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <HAL_GPIO_Init+0x2f0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x1fe>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a46      	ldr	r2, [pc, #280]	; (8001ffc <HAL_GPIO_Init+0x2f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x1fa>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a45      	ldr	r2, [pc, #276]	; (8002000 <HAL_GPIO_Init+0x2f8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x1f6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a44      	ldr	r2, [pc, #272]	; (8002004 <HAL_GPIO_Init+0x2fc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x1f2>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e008      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001efa:	2307      	movs	r3, #7
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e004      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x204>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	f002 0203 	and.w	r2, r2, #3
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4093      	lsls	r3, r2
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1c:	4934      	ldr	r1, [pc, #208]	; (8001ff0 <HAL_GPIO_Init+0x2e8>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f4e:	4a2e      	ldr	r2, [pc, #184]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f78:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HAL_GPIO_Init+0x300>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	f67f aea2 	bls.w	8001d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3724      	adds	r7, #36	; 0x24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	619a      	str	r2, [r3, #24]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	401a      	ands	r2, r3
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	429a      	cmp	r2, r3
 8002056:	d104      	bne.n	8002062 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	041a      	lsls	r2, r3, #16
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002060:	e002      	b.n	8002068 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e11f      	b.n	80022c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fbbc 	bl	8001818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2224      	movs	r2, #36	; 0x24
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020d8:	f000 fd3e 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80020dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a7b      	ldr	r2, [pc, #492]	; (80022d0 <HAL_I2C_Init+0x25c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d807      	bhi.n	80020f8 <HAL_I2C_Init+0x84>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_I2C_Init+0x260>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	bf94      	ite	ls
 80020f0:	2301      	movls	r3, #1
 80020f2:	2300      	movhi	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e006      	b.n	8002106 <HAL_I2C_Init+0x92>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a77      	ldr	r2, [pc, #476]	; (80022d8 <HAL_I2C_Init+0x264>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	bf94      	ite	ls
 8002100:	2301      	movls	r3, #1
 8002102:	2300      	movhi	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0db      	b.n	80022c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4a72      	ldr	r2, [pc, #456]	; (80022dc <HAL_I2C_Init+0x268>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9b      	lsrs	r3, r3, #18
 8002118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a64      	ldr	r2, [pc, #400]	; (80022d0 <HAL_I2C_Init+0x25c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d802      	bhi.n	8002148 <HAL_I2C_Init+0xd4>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3301      	adds	r3, #1
 8002146:	e009      	b.n	800215c <HAL_I2C_Init+0xe8>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_I2C_Init+0x26c>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	3301      	adds	r3, #1
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	430b      	orrs	r3, r1
 8002162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800216e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4956      	ldr	r1, [pc, #344]	; (80022d0 <HAL_I2C_Init+0x25c>)
 8002178:	428b      	cmp	r3, r1
 800217a:	d80d      	bhi.n	8002198 <HAL_I2C_Init+0x124>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e59      	subs	r1, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fbb1 f3f3 	udiv	r3, r1, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	2b04      	cmp	r3, #4
 8002192:	bf38      	it	cc
 8002194:	2304      	movcc	r3, #4
 8002196:	e04f      	b.n	8002238 <HAL_I2C_Init+0x1c4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_I2C_Init+0x150>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e012      	b.n	80021ea <HAL_I2C_Init+0x176>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	0099      	lsls	r1, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Init+0x17e>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e022      	b.n	8002238 <HAL_I2C_Init+0x1c4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <HAL_I2C_Init+0x1a4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e58      	subs	r0, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	440b      	add	r3, r1
 8002208:	fbb0 f3f3 	udiv	r3, r0, r3
 800220c:	3301      	adds	r3, #1
 800220e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002216:	e00f      	b.n	8002238 <HAL_I2C_Init+0x1c4>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	0099      	lsls	r1, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	6809      	ldr	r1, [r1, #0]
 800223c:	4313      	orrs	r3, r2
 800223e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6911      	ldr	r1, [r2, #16]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68d2      	ldr	r2, [r2, #12]
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	430b      	orrs	r3, r1
 800227a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	000186a0 	.word	0x000186a0
 80022d4:	001e847f 	.word	0x001e847f
 80022d8:	003d08ff 	.word	0x003d08ff
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e25b      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d075      	beq.n	80023ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00c      	beq.n	8002328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4ba0      	ldr	r3, [pc, #640]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d112      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002326:	d10b      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4b99      	ldr	r3, [pc, #612]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05b      	beq.n	80023ec <HAL_RCC_OscConfig+0x108>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d157      	bne.n	80023ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e236      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x74>
 800234a:	4b91      	ldr	r3, [pc, #580]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a90      	ldr	r2, [pc, #576]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a8a      	ldr	r2, [pc, #552]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a87      	ldr	r2, [pc, #540]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 800237c:	4b84      	ldr	r3, [pc, #528]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a83      	ldr	r2, [pc, #524]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a80      	ldr	r2, [pc, #512]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fb96 	bl	8001acc <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff fb92 	bl	8001acc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1fb      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xc0>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff fb82 	bl	8001acc <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff fb7e 	bl	8001acc <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1e7      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0xe8>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1bb      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4952      	ldr	r1, [pc, #328]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_OscConfig+0x2b0>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7ff fb37 	bl	8001acc <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff fb33 	bl	8001acc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e19c      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4940      	ldr	r1, [pc, #256]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_OscConfig+0x2b0>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7ff fb16 	bl	8001acc <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a4:	f7ff fb12 	bl	8001acc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e17b      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d030      	beq.n	8002530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7ff faf6 	bl	8001acc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e4:	f7ff faf2 	bl	8001acc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e15b      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x200>
 8002502:	e015      	b.n	8002530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7ff fadf 	bl	8001acc <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7ff fadb 	bl	8001acc <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e144      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a0 	beq.w	800267e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d121      	bne.n	80025be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7ff faa1 	bl	8001acc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	e011      	b.n	80025b2 <HAL_RCC_OscConfig+0x2ce>
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	42470000 	.word	0x42470000
 8002598:	42470e80 	.word	0x42470e80
 800259c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7ff fa94 	bl	8001acc <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0fd      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_RCC_OscConfig+0x4d4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2f0>
 80025c6:	4b7d      	ldr	r3, [pc, #500]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a7c      	ldr	r2, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x312>
 80025dc:	4b77      	ldr	r3, [pc, #476]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a76      	ldr	r2, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	4b74      	ldr	r3, [pc, #464]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a73      	ldr	r2, [pc, #460]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x32a>
 80025f6:	4b71      	ldr	r3, [pc, #452]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a70      	ldr	r2, [pc, #448]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a6d      	ldr	r2, [pc, #436]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff fa59 	bl	8001acc <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7ff fa55 	bl	8001acc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0bc      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x33a>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7ff fa43 	bl	8001acc <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7ff fa3f 	bl	8001acc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0a6      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b56      	ldr	r3, [pc, #344]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a51      	ldr	r2, [pc, #324]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8092 	beq.w	80027ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002688:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d05c      	beq.n	800274e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d141      	bne.n	8002720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <HAL_RCC_OscConfig+0x4dc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7ff fa13 	bl	8001acc <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7ff fa0f 	bl	8001acc <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e078      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	019b      	lsls	r3, r3, #6
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	061b      	lsls	r3, r3, #24
 80026ec:	4933      	ldr	r1, [pc, #204]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f9e8 	bl	8001acc <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7ff f9e4 	bl	8001acc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04d      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x41c>
 800271e:	e045      	b.n	80027ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCC_OscConfig+0x4dc>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff f9d1 	bl	8001acc <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff f9cd 	bl	8001acc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e036      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x44a>
 800274c:	e02e      	b.n	80027ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e029      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_RCC_OscConfig+0x4d8>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	429a      	cmp	r2, r3
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d115      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002788:	4293      	cmp	r3, r2
 800278a:	d10d      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40007000 	.word	0x40007000
 80027bc:	40023800 	.word	0x40023800
 80027c0:	42470060 	.word	0x42470060

080027c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0cc      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d8:	4b68      	ldr	r3, [pc, #416]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d90c      	bls.n	8002800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b63      	ldr	r3, [pc, #396]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b8      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002830:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	494d      	ldr	r1, [pc, #308]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d044      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d119      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e07f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d003      	beq.n	8002882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e067      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b37      	ldr	r3, [pc, #220]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4934      	ldr	r1, [pc, #208]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b4:	f7ff f90a 	bl	8001acc <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7ff f906 	bl	8001acc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e04f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d20c      	bcs.n	800290c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e032      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4916      	ldr	r1, [pc, #88]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294a:	f000 f821 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800294e:	4601      	mov	r1, r0
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	fa21 f303 	lsr.w	r3, r1, r3
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f86a 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00
 8002980:	40023800 	.word	0x40023800
 8002984:	080037b8 	.word	0x080037b8
 8002988:	20000000 	.word	0x20000000
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	2300      	movs	r3, #0
 80029a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a6:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d007      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x32>
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d008      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x38>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 80b4 	bne.w	8002b24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029be:	60bb      	str	r3, [r7, #8]
       break;
 80029c0:	e0b3      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c2:	4b5e      	ldr	r3, [pc, #376]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029c4:	60bb      	str	r3, [r7, #8]
      break;
 80029c6:	e0b0      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c8:	4b5a      	ldr	r3, [pc, #360]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d2:	4b58      	ldr	r3, [pc, #352]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04a      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029de:	4b55      	ldr	r3, [pc, #340]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	099b      	lsrs	r3, r3, #6
 80029e4:	f04f 0400 	mov.w	r4, #0
 80029e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	ea03 0501 	and.w	r5, r3, r1
 80029f4:	ea04 0602 	and.w	r6, r4, r2
 80029f8:	4629      	mov	r1, r5
 80029fa:	4632      	mov	r2, r6
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	f04f 0400 	mov.w	r4, #0
 8002a04:	0154      	lsls	r4, r2, #5
 8002a06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a0a:	014b      	lsls	r3, r1, #5
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4622      	mov	r2, r4
 8002a10:	1b49      	subs	r1, r1, r5
 8002a12:	eb62 0206 	sbc.w	r2, r2, r6
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f04f 0400 	mov.w	r4, #0
 8002a1e:	0194      	lsls	r4, r2, #6
 8002a20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a24:	018b      	lsls	r3, r1, #6
 8002a26:	1a5b      	subs	r3, r3, r1
 8002a28:	eb64 0402 	sbc.w	r4, r4, r2
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	00e2      	lsls	r2, r4, #3
 8002a36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a3a:	00d9      	lsls	r1, r3, #3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4614      	mov	r4, r2
 8002a40:	195b      	adds	r3, r3, r5
 8002a42:	eb44 0406 	adc.w	r4, r4, r6
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	0262      	lsls	r2, r4, #9
 8002a50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a54:	0259      	lsls	r1, r3, #9
 8002a56:	460b      	mov	r3, r1
 8002a58:	4614      	mov	r4, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f04f 0400 	mov.w	r4, #0
 8002a64:	461a      	mov	r2, r3
 8002a66:	4623      	mov	r3, r4
 8002a68:	f7fe f892 	bl	8000b90 <__aeabi_uldivmod>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e049      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a74:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	f04f 0400 	mov.w	r4, #0
 8002a7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	ea03 0501 	and.w	r5, r3, r1
 8002a8a:	ea04 0602 	and.w	r6, r4, r2
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4632      	mov	r2, r6
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	f04f 0400 	mov.w	r4, #0
 8002a9a:	0154      	lsls	r4, r2, #5
 8002a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aa0:	014b      	lsls	r3, r1, #5
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	1b49      	subs	r1, r1, r5
 8002aa8:	eb62 0206 	sbc.w	r2, r2, r6
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	0194      	lsls	r4, r2, #6
 8002ab6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aba:	018b      	lsls	r3, r1, #6
 8002abc:	1a5b      	subs	r3, r3, r1
 8002abe:	eb64 0402 	sbc.w	r4, r4, r2
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	00e2      	lsls	r2, r4, #3
 8002acc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ad0:	00d9      	lsls	r1, r3, #3
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	195b      	adds	r3, r3, r5
 8002ad8:	eb44 0406 	adc.w	r4, r4, r6
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	02a2      	lsls	r2, r4, #10
 8002ae6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002aea:	0299      	lsls	r1, r3, #10
 8002aec:	460b      	mov	r3, r1
 8002aee:	4614      	mov	r4, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	4621      	mov	r1, r4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f04f 0400 	mov.w	r4, #0
 8002afa:	461a      	mov	r2, r3
 8002afc:	4623      	mov	r3, r4
 8002afe:	f7fe f847 	bl	8000b90 <__aeabi_uldivmod>
 8002b02:	4603      	mov	r3, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	60bb      	str	r3, [r7, #8]
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b26:	60bb      	str	r3, [r7, #8]
      break;
 8002b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b34:	40023800 	.word	0x40023800
 8002b38:	00f42400 	.word	0x00f42400
 8002b3c:	007a1200 	.word	0x007a1200

08002b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000000 	.word	0x20000000

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b60:	4601      	mov	r1, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4a03      	ldr	r2, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	080037c8 	.word	0x080037c8

08002b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e01d      	b.n	8002bce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fe8e 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f000 fa14 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d007      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d122      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d11b      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0202 	mvn.w	r2, #2
 8002c4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9a5 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002c66:	e005      	b.n	8002c74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f997 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f9a8 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d122      	bne.n	8002cce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d11b      	bne.n	8002cce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f06f 0204 	mvn.w	r2, #4
 8002c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f97b 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002cba:	e005      	b.n	8002cc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f96d 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f97e 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d122      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11b      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0208 	mvn.w	r2, #8
 8002cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f951 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002d0e:	e005      	b.n	8002d1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f943 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f954 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d122      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d11b      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f06f 0210 	mvn.w	r2, #16
 8002d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f927 	bl	8002fb0 <HAL_TIM_IC_CaptureCallback>
 8002d62:	e005      	b.n	8002d70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f919 	bl	8002f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f92a 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10e      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f06f 0201 	mvn.w	r2, #1
 8002d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fe faa7 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d10e      	bne.n	8002dce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d107      	bne.n	8002dce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 faa1 	bl	8003310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d10e      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d107      	bne.n	8002dfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8ef 	bl	8002fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d10e      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d107      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0220 	mvn.w	r2, #32
 8002e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fa6b 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_ConfigClockSource+0x18>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0a6      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x166>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d067      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x120>
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d80b      	bhi.n	8002e9a <HAL_TIM_ConfigClockSource+0x6c>
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d073      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x140>
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d802      	bhi.n	8002e90 <HAL_TIM_ConfigClockSource+0x62>
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d06f      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e8e:	e078      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d06c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x140>
 8002e94:	2b30      	cmp	r3, #48	; 0x30
 8002e96:	d06a      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e98:	e073      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e9a:	2b70      	cmp	r3, #112	; 0x70
 8002e9c:	d00d      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x8c>
 8002e9e:	2b70      	cmp	r3, #112	; 0x70
 8002ea0:	d804      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x7e>
 8002ea2:	2b50      	cmp	r3, #80	; 0x50
 8002ea4:	d033      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xe0>
 8002ea6:	2b60      	cmp	r3, #96	; 0x60
 8002ea8:	d041      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002eaa:	e06a      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb0:	d066      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x152>
 8002eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb6:	d017      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002eb8:	e063      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f000 f989 	bl	80031e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002edc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	609a      	str	r2, [r3, #8]
      break;
 8002ee6:	e04c      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f000 f972 	bl	80031e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f0a:	609a      	str	r2, [r3, #8]
      break;
 8002f0c:	e039      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f8e6 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2150      	movs	r1, #80	; 0x50
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f93f 	bl	80031aa <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e029      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f905 	bl	800314a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2160      	movs	r1, #96	; 0x60
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f92f 	bl	80031aa <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e019      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f000 f8c6 	bl	80030ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2140      	movs	r1, #64	; 0x40
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f91f 	bl	80031aa <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e009      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f000 f916 	bl	80031aa <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e000      	b.n	8002f82 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <TIM_Base_SetConfig+0xe4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00f      	beq.n	8003024 <TIM_Base_SetConfig+0x38>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d00b      	beq.n	8003024 <TIM_Base_SetConfig+0x38>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <TIM_Base_SetConfig+0xe8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <TIM_Base_SetConfig+0x38>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <TIM_Base_SetConfig+0xec>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0x38>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a2f      	ldr	r2, [pc, #188]	; (80030dc <TIM_Base_SetConfig+0xf0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d108      	bne.n	8003036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a25      	ldr	r2, [pc, #148]	; (80030d0 <TIM_Base_SetConfig+0xe4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01b      	beq.n	8003076 <TIM_Base_SetConfig+0x8a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d017      	beq.n	8003076 <TIM_Base_SetConfig+0x8a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <TIM_Base_SetConfig+0xe8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <TIM_Base_SetConfig+0x8a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <TIM_Base_SetConfig+0xec>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00f      	beq.n	8003076 <TIM_Base_SetConfig+0x8a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a20      	ldr	r2, [pc, #128]	; (80030dc <TIM_Base_SetConfig+0xf0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00b      	beq.n	8003076 <TIM_Base_SetConfig+0x8a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <TIM_Base_SetConfig+0xf4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <TIM_Base_SetConfig+0x8a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <TIM_Base_SetConfig+0xf8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0x8a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <TIM_Base_SetConfig+0xfc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <TIM_Base_SetConfig+0xe4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40014400 	.word	0x40014400
 80030e8:	40014800 	.word	0x40014800

080030ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f023 0201 	bic.w	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 030a 	bic.w	r3, r3, #10
 8003128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800314a:	b480      	push	{r7}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0210 	bic.w	r2, r3, #16
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	031b      	lsls	r3, r3, #12
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	621a      	str	r2, [r3, #32]
}
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f043 0307 	orr.w	r3, r3, #7
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	021a      	lsls	r2, r3, #8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	431a      	orrs	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003234:	2302      	movs	r3, #2
 8003236:	e050      	b.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d018      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d013      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00e      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10c      	bne.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800
 80032f4:	40000c00 	.word	0x40000c00
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_ZdlPvj>:
 8003324:	f000 b800 	b.w	8003328 <_ZdlPv>

08003328 <_ZdlPv>:
 8003328:	f000 b9a2 	b.w	8003670 <free>

0800332c <fmod>:
 800332c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003330:	ed2d 8b02 	vpush	{d8}
 8003334:	b08b      	sub	sp, #44	; 0x2c
 8003336:	ec55 4b10 	vmov	r4, r5, d0
 800333a:	ec57 6b11 	vmov	r6, r7, d1
 800333e:	f000 f859 	bl	80033f4 <__ieee754_fmod>
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <fmod+0xc0>)
 8003344:	eeb0 8a40 	vmov.f32	s16, s0
 8003348:	eef0 8a60 	vmov.f32	s17, s1
 800334c:	f993 8000 	ldrsb.w	r8, [r3]
 8003350:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003354:	d030      	beq.n	80033b8 <fmod+0x8c>
 8003356:	4632      	mov	r2, r6
 8003358:	463b      	mov	r3, r7
 800335a:	4630      	mov	r0, r6
 800335c:	4639      	mov	r1, r7
 800335e:	f7fd fb91 	bl	8000a84 <__aeabi_dcmpun>
 8003362:	bb48      	cbnz	r0, 80033b8 <fmod+0x8c>
 8003364:	4622      	mov	r2, r4
 8003366:	462b      	mov	r3, r5
 8003368:	4620      	mov	r0, r4
 800336a:	4629      	mov	r1, r5
 800336c:	f7fd fb8a 	bl	8000a84 <__aeabi_dcmpun>
 8003370:	4681      	mov	r9, r0
 8003372:	bb08      	cbnz	r0, 80033b8 <fmod+0x8c>
 8003374:	2200      	movs	r2, #0
 8003376:	2300      	movs	r3, #0
 8003378:	4630      	mov	r0, r6
 800337a:	4639      	mov	r1, r7
 800337c:	f7fd fb50 	bl	8000a20 <__aeabi_dcmpeq>
 8003380:	b1d0      	cbz	r0, 80033b8 <fmod+0x8c>
 8003382:	2301      	movs	r3, #1
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <fmod+0xc4>)
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800338e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003392:	f8cd 9020 	str.w	r9, [sp, #32]
 8003396:	f1b8 0f00 	cmp.w	r8, #0
 800339a:	d116      	bne.n	80033ca <fmod+0x9e>
 800339c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80033a0:	4668      	mov	r0, sp
 80033a2:	f000 f939 	bl	8003618 <matherr>
 80033a6:	b1d8      	cbz	r0, 80033e0 <fmod+0xb4>
 80033a8:	9b08      	ldr	r3, [sp, #32]
 80033aa:	b11b      	cbz	r3, 80033b4 <fmod+0x88>
 80033ac:	f000 f936 	bl	800361c <__errno>
 80033b0:	9b08      	ldr	r3, [sp, #32]
 80033b2:	6003      	str	r3, [r0, #0]
 80033b4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80033b8:	eeb0 0a48 	vmov.f32	s0, s16
 80033bc:	eef0 0a68 	vmov.f32	s1, s17
 80033c0:	b00b      	add	sp, #44	; 0x2c
 80033c2:	ecbd 8b02 	vpop	{d8}
 80033c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ca:	2200      	movs	r2, #0
 80033cc:	2300      	movs	r3, #0
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f7fd f9e7 	bl	80007a4 <__aeabi_ddiv>
 80033d6:	f1b8 0f02 	cmp.w	r8, #2
 80033da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80033de:	d1df      	bne.n	80033a0 <fmod+0x74>
 80033e0:	f000 f91c 	bl	800361c <__errno>
 80033e4:	2321      	movs	r3, #33	; 0x21
 80033e6:	6003      	str	r3, [r0, #0]
 80033e8:	e7de      	b.n	80033a8 <fmod+0x7c>
 80033ea:	bf00      	nop
 80033ec:	20000009 	.word	0x20000009
 80033f0:	080037d0 	.word	0x080037d0

080033f4 <__ieee754_fmod>:
 80033f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f8:	ec53 2b11 	vmov	r2, r3, d1
 80033fc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8003400:	ea5e 0402 	orrs.w	r4, lr, r2
 8003404:	ec51 0b10 	vmov	r0, r1, d0
 8003408:	461e      	mov	r6, r3
 800340a:	ee11 5a10 	vmov	r5, s2
 800340e:	4694      	mov	ip, r2
 8003410:	d00c      	beq.n	800342c <__ieee754_fmod+0x38>
 8003412:	4c7a      	ldr	r4, [pc, #488]	; (80035fc <__ieee754_fmod+0x208>)
 8003414:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8003418:	45a0      	cmp	r8, r4
 800341a:	4689      	mov	r9, r1
 800341c:	dc06      	bgt.n	800342c <__ieee754_fmod+0x38>
 800341e:	4254      	negs	r4, r2
 8003420:	4314      	orrs	r4, r2
 8003422:	4f77      	ldr	r7, [pc, #476]	; (8003600 <__ieee754_fmod+0x20c>)
 8003424:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8003428:	42bc      	cmp	r4, r7
 800342a:	d909      	bls.n	8003440 <__ieee754_fmod+0x4c>
 800342c:	f7fd f890 	bl	8000550 <__aeabi_dmul>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	f7fd f9b6 	bl	80007a4 <__aeabi_ddiv>
 8003438:	ec41 0b10 	vmov	d0, r0, r1
 800343c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003440:	45f0      	cmp	r8, lr
 8003442:	ee10 2a10 	vmov	r2, s0
 8003446:	4607      	mov	r7, r0
 8003448:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800344c:	dc0a      	bgt.n	8003464 <__ieee754_fmod+0x70>
 800344e:	dbf3      	blt.n	8003438 <__ieee754_fmod+0x44>
 8003450:	42a8      	cmp	r0, r5
 8003452:	d3f1      	bcc.n	8003438 <__ieee754_fmod+0x44>
 8003454:	d106      	bne.n	8003464 <__ieee754_fmod+0x70>
 8003456:	496b      	ldr	r1, [pc, #428]	; (8003604 <__ieee754_fmod+0x210>)
 8003458:	0fe4      	lsrs	r4, r4, #31
 800345a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800345e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003462:	e7e9      	b.n	8003438 <__ieee754_fmod+0x44>
 8003464:	4b68      	ldr	r3, [pc, #416]	; (8003608 <__ieee754_fmod+0x214>)
 8003466:	4598      	cmp	r8, r3
 8003468:	dc49      	bgt.n	80034fe <__ieee754_fmod+0x10a>
 800346a:	f1b8 0f00 	cmp.w	r8, #0
 800346e:	d13d      	bne.n	80034ec <__ieee754_fmod+0xf8>
 8003470:	4866      	ldr	r0, [pc, #408]	; (800360c <__ieee754_fmod+0x218>)
 8003472:	4611      	mov	r1, r2
 8003474:	2900      	cmp	r1, #0
 8003476:	dc36      	bgt.n	80034e6 <__ieee754_fmod+0xf2>
 8003478:	459e      	cmp	lr, r3
 800347a:	dc51      	bgt.n	8003520 <__ieee754_fmod+0x12c>
 800347c:	f1be 0f00 	cmp.w	lr, #0
 8003480:	d145      	bne.n	800350e <__ieee754_fmod+0x11a>
 8003482:	4b62      	ldr	r3, [pc, #392]	; (800360c <__ieee754_fmod+0x218>)
 8003484:	4629      	mov	r1, r5
 8003486:	2900      	cmp	r1, #0
 8003488:	dc3e      	bgt.n	8003508 <__ieee754_fmod+0x114>
 800348a:	4961      	ldr	r1, [pc, #388]	; (8003610 <__ieee754_fmod+0x21c>)
 800348c:	4288      	cmp	r0, r1
 800348e:	db4c      	blt.n	800352a <__ieee754_fmod+0x136>
 8003490:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8003494:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003498:	4a5d      	ldr	r2, [pc, #372]	; (8003610 <__ieee754_fmod+0x21c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	db59      	blt.n	8003552 <__ieee754_fmod+0x15e>
 800349e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80034a2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80034a6:	1ac0      	subs	r0, r0, r3
 80034a8:	1b8a      	subs	r2, r1, r6
 80034aa:	eba7 050c 	sub.w	r5, r7, ip
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d166      	bne.n	8003580 <__ieee754_fmod+0x18c>
 80034b2:	4567      	cmp	r7, ip
 80034b4:	bf38      	it	cc
 80034b6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80034ba:	2a00      	cmp	r2, #0
 80034bc:	bfbc      	itt	lt
 80034be:	463d      	movlt	r5, r7
 80034c0:	460a      	movlt	r2, r1
 80034c2:	ea52 0105 	orrs.w	r1, r2, r5
 80034c6:	d0c6      	beq.n	8003456 <__ieee754_fmod+0x62>
 80034c8:	494f      	ldr	r1, [pc, #316]	; (8003608 <__ieee754_fmod+0x214>)
 80034ca:	428a      	cmp	r2, r1
 80034cc:	dd6d      	ble.n	80035aa <__ieee754_fmod+0x1b6>
 80034ce:	4950      	ldr	r1, [pc, #320]	; (8003610 <__ieee754_fmod+0x21c>)
 80034d0:	428b      	cmp	r3, r1
 80034d2:	db70      	blt.n	80035b6 <__ieee754_fmod+0x1c2>
 80034d4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80034d8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80034dc:	4314      	orrs	r4, r2
 80034de:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80034e2:	4628      	mov	r0, r5
 80034e4:	e7a8      	b.n	8003438 <__ieee754_fmod+0x44>
 80034e6:	3801      	subs	r0, #1
 80034e8:	0049      	lsls	r1, r1, #1
 80034ea:	e7c3      	b.n	8003474 <__ieee754_fmod+0x80>
 80034ec:	4848      	ldr	r0, [pc, #288]	; (8003610 <__ieee754_fmod+0x21c>)
 80034ee:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80034f2:	0049      	lsls	r1, r1, #1
 80034f4:	2900      	cmp	r1, #0
 80034f6:	f100 30ff 	add.w	r0, r0, #4294967295
 80034fa:	dcfa      	bgt.n	80034f2 <__ieee754_fmod+0xfe>
 80034fc:	e7bc      	b.n	8003478 <__ieee754_fmod+0x84>
 80034fe:	ea4f 5028 	mov.w	r0, r8, asr #20
 8003502:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003506:	e7b7      	b.n	8003478 <__ieee754_fmod+0x84>
 8003508:	3b01      	subs	r3, #1
 800350a:	0049      	lsls	r1, r1, #1
 800350c:	e7bb      	b.n	8003486 <__ieee754_fmod+0x92>
 800350e:	4b40      	ldr	r3, [pc, #256]	; (8003610 <__ieee754_fmod+0x21c>)
 8003510:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8003514:	0049      	lsls	r1, r1, #1
 8003516:	2900      	cmp	r1, #0
 8003518:	f103 33ff 	add.w	r3, r3, #4294967295
 800351c:	dcfa      	bgt.n	8003514 <__ieee754_fmod+0x120>
 800351e:	e7b4      	b.n	800348a <__ieee754_fmod+0x96>
 8003520:	ea4f 532e 	mov.w	r3, lr, asr #20
 8003524:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003528:	e7af      	b.n	800348a <__ieee754_fmod+0x96>
 800352a:	1a0f      	subs	r7, r1, r0
 800352c:	2f1f      	cmp	r7, #31
 800352e:	dc0a      	bgt.n	8003546 <__ieee754_fmod+0x152>
 8003530:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8003534:	fa08 f807 	lsl.w	r8, r8, r7
 8003538:	fa22 f101 	lsr.w	r1, r2, r1
 800353c:	ea41 0108 	orr.w	r1, r1, r8
 8003540:	fa02 f707 	lsl.w	r7, r2, r7
 8003544:	e7a8      	b.n	8003498 <__ieee754_fmod+0xa4>
 8003546:	4933      	ldr	r1, [pc, #204]	; (8003614 <__ieee754_fmod+0x220>)
 8003548:	1a09      	subs	r1, r1, r0
 800354a:	fa02 f101 	lsl.w	r1, r2, r1
 800354e:	2700      	movs	r7, #0
 8003550:	e7a2      	b.n	8003498 <__ieee754_fmod+0xa4>
 8003552:	eba2 0c03 	sub.w	ip, r2, r3
 8003556:	f1bc 0f1f 	cmp.w	ip, #31
 800355a:	dc0a      	bgt.n	8003572 <__ieee754_fmod+0x17e>
 800355c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8003560:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003564:	fa25 f606 	lsr.w	r6, r5, r6
 8003568:	ea46 060e 	orr.w	r6, r6, lr
 800356c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003570:	e799      	b.n	80034a6 <__ieee754_fmod+0xb2>
 8003572:	4e28      	ldr	r6, [pc, #160]	; (8003614 <__ieee754_fmod+0x220>)
 8003574:	1af6      	subs	r6, r6, r3
 8003576:	fa05 f606 	lsl.w	r6, r5, r6
 800357a:	f04f 0c00 	mov.w	ip, #0
 800357e:	e792      	b.n	80034a6 <__ieee754_fmod+0xb2>
 8003580:	4567      	cmp	r7, ip
 8003582:	bf38      	it	cc
 8003584:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8003588:	2a00      	cmp	r2, #0
 800358a:	da05      	bge.n	8003598 <__ieee754_fmod+0x1a4>
 800358c:	0ffa      	lsrs	r2, r7, #31
 800358e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003592:	007f      	lsls	r7, r7, #1
 8003594:	3801      	subs	r0, #1
 8003596:	e787      	b.n	80034a8 <__ieee754_fmod+0xb4>
 8003598:	ea52 0105 	orrs.w	r1, r2, r5
 800359c:	f43f af5b 	beq.w	8003456 <__ieee754_fmod+0x62>
 80035a0:	0fe9      	lsrs	r1, r5, #31
 80035a2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80035a6:	006f      	lsls	r7, r5, #1
 80035a8:	e7f4      	b.n	8003594 <__ieee754_fmod+0x1a0>
 80035aa:	0fe8      	lsrs	r0, r5, #31
 80035ac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80035b0:	006d      	lsls	r5, r5, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	e789      	b.n	80034ca <__ieee754_fmod+0xd6>
 80035b6:	1ac9      	subs	r1, r1, r3
 80035b8:	2914      	cmp	r1, #20
 80035ba:	dc0a      	bgt.n	80035d2 <__ieee754_fmod+0x1de>
 80035bc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	40cd      	lsrs	r5, r1
 80035c6:	432b      	orrs	r3, r5
 80035c8:	410a      	asrs	r2, r1
 80035ca:	ea42 0104 	orr.w	r1, r2, r4
 80035ce:	4618      	mov	r0, r3
 80035d0:	e732      	b.n	8003438 <__ieee754_fmod+0x44>
 80035d2:	291f      	cmp	r1, #31
 80035d4:	dc07      	bgt.n	80035e6 <__ieee754_fmod+0x1f2>
 80035d6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80035da:	40cd      	lsrs	r5, r1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	432b      	orrs	r3, r5
 80035e2:	4622      	mov	r2, r4
 80035e4:	e7f1      	b.n	80035ca <__ieee754_fmod+0x1d6>
 80035e6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80035ea:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80035ee:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80035f2:	33e2      	adds	r3, #226	; 0xe2
 80035f4:	fa42 f303 	asr.w	r3, r2, r3
 80035f8:	e7f3      	b.n	80035e2 <__ieee754_fmod+0x1ee>
 80035fa:	bf00      	nop
 80035fc:	7fefffff 	.word	0x7fefffff
 8003600:	7ff00000 	.word	0x7ff00000
 8003604:	080037d8 	.word	0x080037d8
 8003608:	000fffff 	.word	0x000fffff
 800360c:	fffffbed 	.word	0xfffffbed
 8003610:	fffffc02 	.word	0xfffffc02
 8003614:	fffffbe2 	.word	0xfffffbe2

08003618 <matherr>:
 8003618:	2000      	movs	r0, #0
 800361a:	4770      	bx	lr

0800361c <__errno>:
 800361c:	4b01      	ldr	r3, [pc, #4]	; (8003624 <__errno+0x8>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2000000c 	.word	0x2000000c

08003628 <__libc_init_array>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	4e0d      	ldr	r6, [pc, #52]	; (8003660 <__libc_init_array+0x38>)
 800362c:	4c0d      	ldr	r4, [pc, #52]	; (8003664 <__libc_init_array+0x3c>)
 800362e:	1ba4      	subs	r4, r4, r6
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	2500      	movs	r5, #0
 8003634:	42a5      	cmp	r5, r4
 8003636:	d109      	bne.n	800364c <__libc_init_array+0x24>
 8003638:	4e0b      	ldr	r6, [pc, #44]	; (8003668 <__libc_init_array+0x40>)
 800363a:	4c0c      	ldr	r4, [pc, #48]	; (800366c <__libc_init_array+0x44>)
 800363c:	f000 f878 	bl	8003730 <_init>
 8003640:	1ba4      	subs	r4, r4, r6
 8003642:	10a4      	asrs	r4, r4, #2
 8003644:	2500      	movs	r5, #0
 8003646:	42a5      	cmp	r5, r4
 8003648:	d105      	bne.n	8003656 <__libc_init_array+0x2e>
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003650:	4798      	blx	r3
 8003652:	3501      	adds	r5, #1
 8003654:	e7ee      	b.n	8003634 <__libc_init_array+0xc>
 8003656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800365a:	4798      	blx	r3
 800365c:	3501      	adds	r5, #1
 800365e:	e7f2      	b.n	8003646 <__libc_init_array+0x1e>
 8003660:	080037f0 	.word	0x080037f0
 8003664:	080037f0 	.word	0x080037f0
 8003668:	080037f0 	.word	0x080037f0
 800366c:	080037f8 	.word	0x080037f8

08003670 <free>:
 8003670:	4b02      	ldr	r3, [pc, #8]	; (800367c <free+0xc>)
 8003672:	4601      	mov	r1, r0
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	f000 b80b 	b.w	8003690 <_free_r>
 800367a:	bf00      	nop
 800367c:	2000000c 	.word	0x2000000c

08003680 <memset>:
 8003680:	4402      	add	r2, r0
 8003682:	4603      	mov	r3, r0
 8003684:	4293      	cmp	r3, r2
 8003686:	d100      	bne.n	800368a <memset+0xa>
 8003688:	4770      	bx	lr
 800368a:	f803 1b01 	strb.w	r1, [r3], #1
 800368e:	e7f9      	b.n	8003684 <memset+0x4>

08003690 <_free_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4605      	mov	r5, r0
 8003694:	2900      	cmp	r1, #0
 8003696:	d045      	beq.n	8003724 <_free_r+0x94>
 8003698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800369c:	1f0c      	subs	r4, r1, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bfb8      	it	lt
 80036a2:	18e4      	addlt	r4, r4, r3
 80036a4:	f000 f842 	bl	800372c <__malloc_lock>
 80036a8:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <_free_r+0x98>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	4610      	mov	r0, r2
 80036ae:	b933      	cbnz	r3, 80036be <_free_r+0x2e>
 80036b0:	6063      	str	r3, [r4, #4]
 80036b2:	6014      	str	r4, [r2, #0]
 80036b4:	4628      	mov	r0, r5
 80036b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036ba:	f000 b838 	b.w	800372e <__malloc_unlock>
 80036be:	42a3      	cmp	r3, r4
 80036c0:	d90c      	bls.n	80036dc <_free_r+0x4c>
 80036c2:	6821      	ldr	r1, [r4, #0]
 80036c4:	1862      	adds	r2, r4, r1
 80036c6:	4293      	cmp	r3, r2
 80036c8:	bf04      	itt	eq
 80036ca:	681a      	ldreq	r2, [r3, #0]
 80036cc:	685b      	ldreq	r3, [r3, #4]
 80036ce:	6063      	str	r3, [r4, #4]
 80036d0:	bf04      	itt	eq
 80036d2:	1852      	addeq	r2, r2, r1
 80036d4:	6022      	streq	r2, [r4, #0]
 80036d6:	6004      	str	r4, [r0, #0]
 80036d8:	e7ec      	b.n	80036b4 <_free_r+0x24>
 80036da:	4613      	mov	r3, r2
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	b10a      	cbz	r2, 80036e4 <_free_r+0x54>
 80036e0:	42a2      	cmp	r2, r4
 80036e2:	d9fa      	bls.n	80036da <_free_r+0x4a>
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	1858      	adds	r0, r3, r1
 80036e8:	42a0      	cmp	r0, r4
 80036ea:	d10b      	bne.n	8003704 <_free_r+0x74>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	4401      	add	r1, r0
 80036f0:	1858      	adds	r0, r3, r1
 80036f2:	4282      	cmp	r2, r0
 80036f4:	6019      	str	r1, [r3, #0]
 80036f6:	d1dd      	bne.n	80036b4 <_free_r+0x24>
 80036f8:	6810      	ldr	r0, [r2, #0]
 80036fa:	6852      	ldr	r2, [r2, #4]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	4401      	add	r1, r0
 8003700:	6019      	str	r1, [r3, #0]
 8003702:	e7d7      	b.n	80036b4 <_free_r+0x24>
 8003704:	d902      	bls.n	800370c <_free_r+0x7c>
 8003706:	230c      	movs	r3, #12
 8003708:	602b      	str	r3, [r5, #0]
 800370a:	e7d3      	b.n	80036b4 <_free_r+0x24>
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	1821      	adds	r1, r4, r0
 8003710:	428a      	cmp	r2, r1
 8003712:	bf04      	itt	eq
 8003714:	6811      	ldreq	r1, [r2, #0]
 8003716:	6852      	ldreq	r2, [r2, #4]
 8003718:	6062      	str	r2, [r4, #4]
 800371a:	bf04      	itt	eq
 800371c:	1809      	addeq	r1, r1, r0
 800371e:	6021      	streq	r1, [r4, #0]
 8003720:	605c      	str	r4, [r3, #4]
 8003722:	e7c7      	b.n	80036b4 <_free_r+0x24>
 8003724:	bd38      	pop	{r3, r4, r5, pc}
 8003726:	bf00      	nop
 8003728:	20000108 	.word	0x20000108

0800372c <__malloc_lock>:
 800372c:	4770      	bx	lr

0800372e <__malloc_unlock>:
 800372e:	4770      	bx	lr

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr
