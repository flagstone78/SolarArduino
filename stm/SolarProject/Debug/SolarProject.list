
SolarProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08008838  08008838  00018838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d60  08008d60  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d68  08008d68  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08008d78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000248  08008fbc  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08008fbc  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d8  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000291e  00000000  00000000  0003134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  00033c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006bcb  00000000  00000000  00035538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b877  00000000  00000000  0003c103  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000941b3  00000000  00000000  0004797a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbb2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  000dbba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008820 	.word	0x08008820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	08008820 	.word	0x08008820

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb>:
 *      Author: Duane Mathias
 */

#include "Stepper.h"

Stepper::Stepper(const GPIO_TypeDef* const gpioPorts[3], const uint16_t gpioPins[3], const bool reverseDirection):ports(gpioPorts),pins(gpioPins), reverse(reverseDirection) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	70fb      	strb	r3, [r7, #3]
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb+0x34>)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	78fa      	ldrb	r2, [r7, #3]
 8000fdc:	751a      	strb	r2, [r3, #20]

}
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	0800884c 	.word	0x0800884c

08000ff0 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <_ZN7StepperD1Ev+0x1c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	0800884c 	.word	0x0800884c

08001010 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
}
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ffe9 	bl	8000ff0 <_ZN7StepperD1Ev>
 800101e:	2118      	movs	r1, #24
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f003 fef3 	bl	8004e0c <_ZdlPvj>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_ZN7Stepper6setDirEb>:

void Stepper::setDir(bool dir){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
	if(reverse) dir = !dir;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7d1b      	ldrb	r3, [r3, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <_ZN7Stepper6setDirEb+0x1c>
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	f083 0301 	eor.w	r3, r3, #1
 800104a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef*)ports[1],pins[1],(GPIO_PinState)dir);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	3304      	adds	r3, #4
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	3302      	adds	r3, #2
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	4619      	mov	r1, r3
 8001060:	f002 fc02 	bl	8003868 <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN7Stepper4stepEv>:

void Stepper::step() {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	//bool dirState = ((ports[1]->ODR & pins[1]) == pins[1]);
	HAL_GPIO_TogglePin((GPIO_TypeDef*) ports[0], pins[0]);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f002 fc09 	bl	800389a <HAL_GPIO_TogglePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN7Stepper6updateEv>:

void Stepper::update(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	step();
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffe7 	bl	800106c <_ZN7Stepper4stepEv>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <_ZN7Stepper7setFreqEf>:

void Stepper::setFreq(float Hz){
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	ed87 0a00 	vstr	s0, [r7]
	if(Hz < 1) Hz = 1;
 80010b4:	edd7 7a00 	vldr	s15, [r7]
 80010b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	d502      	bpl.n	80010cc <_ZN7Stepper7setFreqEf+0x24>
 80010c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ca:	603b      	str	r3, [r7, #0]
	if(Hz > 2000) Hz = 2000;
 80010cc:	edd7 7a00 	vldr	s15, [r7]
 80010d0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001120 <_ZN7Stepper7setFreqEf+0x78>
 80010d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd01      	ble.n	80010e2 <_ZN7Stepper7setFreqEf+0x3a>
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_ZN7Stepper7setFreqEf+0x7c>)
 80010e0:	603b      	str	r3, [r7, #0]
	TIM1->ARR = (uint16_t)(65535.0/Hz);
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	f7ff fa48 	bl	8000578 <__aeabi_f2d>
 80010e8:	4603      	mov	r3, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	a109      	add	r1, pc, #36	; (adr r1, 8001118 <_ZN7Stepper7setFreqEf+0x70>)
 80010f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010f6:	f7ff fbc1 	bl	800087c <__aeabi_ddiv>
 80010fa:	4603      	mov	r3, r0
 80010fc:	460c      	mov	r4, r1
 80010fe:	4618      	mov	r0, r3
 8001100:	4621      	mov	r1, r4
 8001102:	f7ff fd69 	bl	8000bd8 <__aeabi_d2uiz>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <_ZN7Stepper7setFreqEf+0x80>)
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	bf00      	nop
 8001118:	00000000 	.word	0x00000000
 800111c:	40efffe0 	.word	0x40efffe0
 8001120:	44fa0000 	.word	0x44fa0000
 8001124:	44fa0000 	.word	0x44fa0000
 8001128:	40010000 	.word	0x40010000

0800112c <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf>:
 *      Author: Duane Mathias
 */

#include "absEncoder.h"

absEncoder::absEncoder(const GPIO_TypeDef* const gpioPorts[10], const uint16_t gpioPins[10], bool reverseDirection, float offset):ports(gpioPorts),pins(gpioPins),reverse(reverseDirection),degreeOffset(offset) {
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6178      	str	r0, [r7, #20]
 8001134:	6139      	str	r1, [r7, #16]
 8001136:	60fa      	str	r2, [r7, #12]
 8001138:	ed87 0a01 	vstr	s0, [r7, #4]
 800113c:	72fb      	strb	r3, [r7, #11]
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf+0x40>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	7afa      	ldrb	r2, [r7, #11]
 8001154:	731a      	strb	r2, [r3, #12]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	611a      	str	r2, [r3, #16]

}
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	0800885c 	.word	0x0800885c

08001170 <_ZN10absEncoderD1Ev>:

absEncoder::~absEncoder() {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <_ZN10absEncoderD1Ev+0x1c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	0800885c 	.word	0x0800885c

08001190 <_ZN10absEncoderD0Ev>:
absEncoder::~absEncoder() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
}
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffe9 	bl	8001170 <_ZN10absEncoderD1Ev>
 800119e:	2114      	movs	r1, #20
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f003 fe33 	bl	8004e0c <_ZdlPvj>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN10absEncoder11positionRawEv>:

uint16_t absEncoder::positionRaw(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	// read all gpio at once
	uint16_t a = GPIOA->IDR;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <_ZN10absEncoder11positionRawEv+0xcc>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	81fb      	strh	r3, [r7, #14]
	uint16_t b = GPIOB->IDR;
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <_ZN10absEncoder11positionRawEv+0xd0>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	81bb      	strh	r3, [r7, #12]
	uint16_t c = GPIOC->IDR;
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <_ZN10absEncoder11positionRawEv+0xd4>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	817b      	strh	r3, [r7, #10]

	//construct greycode
	uint16_t grey = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	82fb      	strh	r3, [r7, #22]
	uint16_t p = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	82bb      	strh	r3, [r7, #20]
	uint8_t bit = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	727b      	strb	r3, [r7, #9]
	for(int i = 0; i<10; i++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b09      	cmp	r3, #9
 80011de:	dc3d      	bgt.n	800125c <_ZN10absEncoder11positionRawEv+0xac>
		if(ports[i]==GPIOA){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <_ZN10absEncoder11positionRawEv+0xcc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d102      	bne.n	80011f8 <_ZN10absEncoder11positionRawEv+0x48>
			p = a;
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	82bb      	strh	r3, [r7, #20]
 80011f6:	e016      	b.n	8001226 <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOB){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <_ZN10absEncoder11positionRawEv+0xd0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d102      	bne.n	8001210 <_ZN10absEncoder11positionRawEv+0x60>
			p = b;
 800120a:	89bb      	ldrh	r3, [r7, #12]
 800120c:	82bb      	strh	r3, [r7, #20]
 800120e:	e00a      	b.n	8001226 <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOC){
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <_ZN10absEncoder11positionRawEv+0xd4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <_ZN10absEncoder11positionRawEv+0x76>
			p = c;
 8001222:	897b      	ldrh	r3, [r7, #10]
 8001224:	82bb      	strh	r3, [r7, #20]
		}
		bit = (p&pins[i])>0;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	881a      	ldrh	r2, [r3, #0]
 8001232:	8abb      	ldrh	r3, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	b29b      	uxth	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	727b      	strb	r3, [r7, #9]
		grey += bit<<i;
 8001244:	7a7a      	ldrb	r2, [r7, #9]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	b29a      	uxth	r2, r3
 800124e:	8afb      	ldrh	r3, [r7, #22]
 8001250:	4413      	add	r3, r2
 8001252:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<10; i++){
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	3301      	adds	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	e7be      	b.n	80011da <_ZN10absEncoder11positionRawEv+0x2a>
	}
	grey = (0xffff^grey)&0x02ff; //bitwise invert because the encoder is active low
 800125c:	8afb      	ldrh	r3, [r7, #22]
 800125e:	43db      	mvns	r3, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	f240 23ff 	movw	r3, #767	; 0x2ff
 8001266:	4013      	ands	r3, r2
 8001268:	82fb      	strh	r3, [r7, #22]
	return grayToBinary(grey);
 800126a:	8afb      	ldrh	r3, [r7, #22]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f88d 	bl	800138c <_Z12grayToBinaryt>
 8001272:	4603      	mov	r3, r0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800

08001288 <_ZN10absEncoder8positionEv>:

//return the position of the encoder in degrees -180.0 to 180.0 range
float absEncoder::position(){
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	float deg = positionRaw()*360.0/1024.0;
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff8d 	bl	80011b0 <_ZN10absEncoder11positionRawEv>
 8001296:	4603      	mov	r3, r0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f95b 	bl	8000554 <__aeabi_i2d>
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <_ZN10absEncoder8positionEv+0xf0>)
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	4618      	mov	r0, r3
 80012ae:	4621      	mov	r1, r4
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <_ZN10absEncoder8positionEv+0xf4>)
 80012b6:	f7ff fae1 	bl	800087c <__aeabi_ddiv>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	4618      	mov	r0, r3
 80012c0:	4621      	mov	r1, r4
 80012c2:	f7ff fca9 	bl	8000c18 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	60fb      	str	r3, [r7, #12]
	if(reverse) deg = -deg;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7b1b      	ldrb	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <_ZN10absEncoder8positionEv+0x56>
 80012d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d6:	eef1 7a67 	vneg.f32	s15, s15
 80012da:	edc7 7a03 	vstr	s15, [r7, #12]
	deg += degreeOffset;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80012e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	edc7 7a03 	vstr	s15, [r7, #12]
	if(deg != 0) deg = fmod(deg,360.0);
 80012f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d00d      	beq.n	800131a <_ZN10absEncoder8positionEv+0x92>
 80012fe:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001370 <_ZN10absEncoder8positionEv+0xe8>
 8001302:	ed97 0a03 	vldr	s0, [r7, #12]
 8001306:	f000 f85a 	bl	80013be <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800130a:	ec54 3b10 	vmov	r3, r4, d0
 800130e:	4618      	mov	r0, r3
 8001310:	4621      	mov	r1, r4
 8001312:	f7ff fc81 	bl	8000c18 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	60fb      	str	r3, [r7, #12]
	if(deg < -180.0)deg+=360;
 800131a:	edd7 7a03 	vldr	s15, [r7, #12]
 800131e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001380 <_ZN10absEncoder8positionEv+0xf8>
 8001322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d508      	bpl.n	800133e <_ZN10absEncoder8positionEv+0xb6>
 800132c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001330:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001384 <_ZN10absEncoder8positionEv+0xfc>
 8001334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001338:	edc7 7a03 	vstr	s15, [r7, #12]
 800133c:	e010      	b.n	8001360 <_ZN10absEncoder8positionEv+0xd8>
	else if(deg > 180.0)deg-=360;
 800133e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001342:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001388 <_ZN10absEncoder8positionEv+0x100>
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	dd07      	ble.n	8001360 <_ZN10absEncoder8positionEv+0xd8>
 8001350:	edd7 7a03 	vldr	s15, [r7, #12]
 8001354:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001384 <_ZN10absEncoder8positionEv+0xfc>
 8001358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800135c:	edc7 7a03 	vstr	s15, [r7, #12]
	return deg;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	ee07 3a90 	vmov	s15, r3
}
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	00000000 	.word	0x00000000
 8001374:	40768000 	.word	0x40768000
 8001378:	40768000 	.word	0x40768000
 800137c:	40900000 	.word	0x40900000
 8001380:	c3340000 	.word	0xc3340000
 8001384:	43b40000 	.word	0x43b40000
 8001388:	43340000 	.word	0x43340000

0800138c <_Z12grayToBinaryt>:

uint16_t grayToBinary(uint16_t num){
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	uint16_t mask = num;
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	81fb      	strh	r3, [r7, #14]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <_Z12grayToBinaryt+0x24>
		mask >>= 1;
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	105b      	asrs	r3, r3, #1
 80013a4:	81fb      	strh	r3, [r7, #14]
		num   ^= mask;
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	4053      	eors	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 80013ae:	e7f4      	b.n	800139a <_Z12grayToBinaryt+0xe>
	}
	return num;
 80013b0:	88fb      	ldrh	r3, [r7, #6]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 80013be:	b590      	push	{r4, r7, lr}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	ed87 0a03 	vstr	s0, [r7, #12]
 80013c8:	ed87 1b00 	vstr	d1, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff f8d3 	bl	8000578 <__aeabi_f2d>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	ed97 1b00 	vldr	d1, [r7]
 80013da:	ec44 3b10 	vmov	d0, r3, r4
 80013de:	f003 ff0b 	bl	80051f8 <fmod>
 80013e2:	eeb0 7a40 	vmov.f32	s14, s0
 80013e6:	eef0 7a60 	vmov.f32	s15, s1
    }
 80013ea:	eeb0 0a47 	vmov.f32	s0, s14
 80013ee:	eef0 0a67 	vmov.f32	s1, s15
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}

080013f8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	eef0 7ae7 	vabs.f32	s15, s15
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_TIM_PeriodElapsedCallback>:
//clock
//RTC_DS3231 rtc;

// callback function for stepper motor timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d102      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  elStepper.update();
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800142a:	f7ff fe31 	bl	8001090 <_ZN7Stepper6updateEv>
  }
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000264 	.word	0x20000264
 800143c:	200002d8 	.word	0x200002d8

08001440 <mainsetup>:
time_t timeSeconds;
tm tms;

AzEl Target;

void mainsetup(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	elStepper.setFreq(100);
 8001444:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001478 <mainsetup+0x38>
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <mainsetup+0x3c>)
 800144a:	f7ff fe2d 	bl	80010a8 <_ZN7Stepper7setFreqEf>
	currentpos = 0;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <mainsetup+0x40>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	oldpos = 0;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <mainsetup+0x44>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
	pos=0;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <mainsetup+0x48>)
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	targetAngle = elEncoder.position();
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <mainsetup+0x4c>)
 8001466:	f7ff ff0f 	bl	8001288 <_ZN10absEncoder8positionEv>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <mainsetup+0x50>)
 8001470:	edc3 7a00 	vstr	s15, [r3]
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	42c80000 	.word	0x42c80000
 800147c:	200002d8 	.word	0x200002d8
 8001480:	200002f0 	.word	0x200002f0
 8001484:	200002f8 	.word	0x200002f8
 8001488:	200002f4 	.word	0x200002f4
 800148c:	200002c4 	.word	0x200002c4
 8001490:	200002fc 	.word	0x200002fc

08001494 <mainloop>:

void mainloop(){
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b08d      	sub	sp, #52	; 0x34
 8001498:	af06      	add	r7, sp, #24
	pos = elEncoder.position(); //get encoder angle position
 800149a:	486e      	ldr	r0, [pc, #440]	; (8001654 <mainloop+0x1c0>)
 800149c:	f7ff fef4 	bl	8001288 <_ZN10absEncoder8positionEv>
 80014a0:	eef0 7a40 	vmov.f32	s15, s0
 80014a4:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <mainloop+0x1c4>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]
	float err = targetAngle-pos; //feedback
 80014aa:	4b6c      	ldr	r3, [pc, #432]	; (800165c <mainloop+0x1c8>)
 80014ac:	ed93 7a00 	vldr	s14, [r3]
 80014b0:	4b69      	ldr	r3, [pc, #420]	; (8001658 <mainloop+0x1c4>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ba:	edc7 7a04 	vstr	s15, [r7, #16]

	float p = 200;
 80014be:	4b68      	ldr	r3, [pc, #416]	; (8001660 <mainloop+0x1cc>)
 80014c0:	617b      	str	r3, [r7, #20]
	if (abs(err) < 1.0) p = 20;
 80014c2:	ed97 0a04 	vldr	s0, [r7, #16]
 80014c6:	f7ff ff97 	bl	80013f8 <_ZSt3absf>
 80014ca:	eeb0 7a40 	vmov.f32	s14, s0
 80014ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80014d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	bf4c      	ite	mi
 80014dc:	2301      	movmi	r3, #1
 80014de:	2300      	movpl	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <mainloop+0x56>
 80014e6:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <mainloop+0x1d0>)
 80014e8:	617b      	str	r3, [r7, #20]
	float vel = p*err; //proportional term
 80014ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	edc7 7a03 	vstr	s15, [r7, #12]

	//set velocity
	elStepper.setDir(vel > 0);
 80014fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	bfcc      	ite	gt
 8001508:	2301      	movgt	r3, #1
 800150a:	2300      	movle	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4619      	mov	r1, r3
 8001510:	4855      	ldr	r0, [pc, #340]	; (8001668 <mainloop+0x1d4>)
 8001512:	f7ff fd8d 	bl	8001030 <_ZN7Stepper6setDirEb>
	elStepper.setFreq(abs(vel));
 8001516:	ed97 0a03 	vldr	s0, [r7, #12]
 800151a:	f7ff ff6d 	bl	80013f8 <_ZSt3absf>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	4850      	ldr	r0, [pc, #320]	; (8001668 <mainloop+0x1d4>)
 8001528:	f7ff fdbe 	bl	80010a8 <_ZN7Stepper7setFreqEf>

	//date = rtc.now();
	HAL_RTC_GetTime(&hrtc,&timeS,RTC_FORMAT_BIN);
 800152c:	2200      	movs	r2, #0
 800152e:	494f      	ldr	r1, [pc, #316]	; (800166c <mainloop+0x1d8>)
 8001530:	484f      	ldr	r0, [pc, #316]	; (8001670 <mainloop+0x1dc>)
 8001532:	f002 ff7a 	bl	800442a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&dateS,RTC_FORMAT_BIN);
 8001536:	2200      	movs	r2, #0
 8001538:	494e      	ldr	r1, [pc, #312]	; (8001674 <mainloop+0x1e0>)
 800153a:	484d      	ldr	r0, [pc, #308]	; (8001670 <mainloop+0x1dc>)
 800153c:	f002 ffd3 	bl	80044e6 <HAL_RTC_GetDate>
	//timeSeconds = date.secondstime();
	const int century = 1; //centuries since 1900
 8001540:	2301      	movs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
	tms = {timeS.Seconds,timeS.Minutes,timeS.Hours,dateS.Date,dateS.Month-1,dateS.Year+century*100,0,0,(int)timeS.DayLightSaving};
 8001544:	4b49      	ldr	r3, [pc, #292]	; (800166c <mainloop+0x1d8>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	461a      	mov	r2, r3
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <mainloop+0x1d8>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	461e      	mov	r6, r3
 8001550:	4b46      	ldr	r3, [pc, #280]	; (800166c <mainloop+0x1d8>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461d      	mov	r5, r3
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <mainloop+0x1e0>)
 8001558:	789b      	ldrb	r3, [r3, #2]
 800155a:	461c      	mov	r4, r3
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <mainloop+0x1e0>)
 800155e:	785b      	ldrb	r3, [r3, #1]
 8001560:	3b01      	subs	r3, #1
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	4b43      	ldr	r3, [pc, #268]	; (8001674 <mainloop+0x1e0>)
 8001566:	78db      	ldrb	r3, [r3, #3]
 8001568:	3364      	adds	r3, #100	; 0x64
 800156a:	4940      	ldr	r1, [pc, #256]	; (800166c <mainloop+0x1d8>)
 800156c:	68c9      	ldr	r1, [r1, #12]
 800156e:	4608      	mov	r0, r1
 8001570:	4941      	ldr	r1, [pc, #260]	; (8001678 <mainloop+0x1e4>)
 8001572:	600a      	str	r2, [r1, #0]
 8001574:	4940      	ldr	r1, [pc, #256]	; (8001678 <mainloop+0x1e4>)
 8001576:	604e      	str	r6, [r1, #4]
 8001578:	493f      	ldr	r1, [pc, #252]	; (8001678 <mainloop+0x1e4>)
 800157a:	608d      	str	r5, [r1, #8]
 800157c:	493e      	ldr	r1, [pc, #248]	; (8001678 <mainloop+0x1e4>)
 800157e:	60cc      	str	r4, [r1, #12]
 8001580:	493d      	ldr	r1, [pc, #244]	; (8001678 <mainloop+0x1e4>)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	610a      	str	r2, [r1, #16]
 8001586:	4a3c      	ldr	r2, [pc, #240]	; (8001678 <mainloop+0x1e4>)
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <mainloop+0x1e4>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
 8001590:	4b39      	ldr	r3, [pc, #228]	; (8001678 <mainloop+0x1e4>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <mainloop+0x1e4>)
 8001598:	6218      	str	r0, [r3, #32]

	timeSeconds = mktime(&tms); //update mday and yday
 800159a:	4837      	ldr	r0, [pc, #220]	; (8001678 <mainloop+0x1e4>)
 800159c:	f005 fef2 	bl	8007384 <mktime>
 80015a0:	4603      	mov	r3, r0
 80015a2:	460c      	mov	r4, r1
 80015a4:	4a35      	ldr	r2, [pc, #212]	; (800167c <mainloop+0x1e8>)
 80015a6:	e9c2 3400 	strd	r3, r4, [r2]
	Target = calculateSolar(tms,geo);
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <mainloop+0x1ec>)
 80015ac:	ed93 5b00 	vldr	d5, [r3]
 80015b0:	ed93 6b02 	vldr	d6, [r3, #8]
 80015b4:	ed93 7b04 	vldr	d7, [r3, #16]
 80015b8:	4e2f      	ldr	r6, [pc, #188]	; (8001678 <mainloop+0x1e4>)
 80015ba:	466d      	mov	r5, sp
 80015bc:	f106 0410 	add.w	r4, r6, #16
 80015c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015cc:	eeb0 0a45 	vmov.f32	s0, s10
 80015d0:	eef0 0a65 	vmov.f32	s1, s11
 80015d4:	eeb0 1a46 	vmov.f32	s2, s12
 80015d8:	eef0 1a66 	vmov.f32	s3, s13
 80015dc:	eeb0 2a47 	vmov.f32	s4, s14
 80015e0:	eef0 2a67 	vmov.f32	s5, s15
 80015e4:	f001 fa82 	bl	8002aec <_Z14calculateSolar2tm3Geo>
 80015e8:	eeb0 6a40 	vmov.f32	s12, s0
 80015ec:	eef0 6a60 	vmov.f32	s13, s1
 80015f0:	eeb0 7a41 	vmov.f32	s14, s2
 80015f4:	eef0 7a61 	vmov.f32	s15, s3
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <mainloop+0x1f0>)
 80015fa:	ed83 6b00 	vstr	d6, [r3]
 80015fe:	ed83 7b02 	vstr	d7, [r3, #8]

	targetAngle = Target.Elevation;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <mainloop+0x1f0>)
 8001604:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	4621      	mov	r1, r4
 800160c:	f7ff fb04 	bl	8000c18 <__aeabi_d2f>
 8001610:	4602      	mov	r2, r0
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <mainloop+0x1c8>)
 8001614:	601a      	str	r2, [r3, #0]
	if(targetAngle < 5) targetAngle = 5;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <mainloop+0x1c8>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	d502      	bpl.n	8001630 <mainloop+0x19c>
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <mainloop+0x1c8>)
 800162c:	4a16      	ldr	r2, [pc, #88]	; (8001688 <mainloop+0x1f4>)
 800162e:	601a      	str	r2, [r3, #0]
	if(targetAngle > 90) targetAngle = 90;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <mainloop+0x1c8>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800168c <mainloop+0x1f8>
 800163a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	dc00      	bgt.n	8001646 <mainloop+0x1b2>
}
 8001644:	e002      	b.n	800164c <mainloop+0x1b8>
	if(targetAngle > 90) targetAngle = 90;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <mainloop+0x1c8>)
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <mainloop+0x1fc>)
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	200002c4 	.word	0x200002c4
 8001658:	200002f4 	.word	0x200002f4
 800165c:	200002fc 	.word	0x200002fc
 8001660:	43480000 	.word	0x43480000
 8001664:	41a00000 	.word	0x41a00000
 8001668:	200002d8 	.word	0x200002d8
 800166c:	20000304 	.word	0x20000304
 8001670:	200002a4 	.word	0x200002a4
 8001674:	20000300 	.word	0x20000300
 8001678:	20000320 	.word	0x20000320
 800167c:	20000318 	.word	0x20000318
 8001680:	080088b8 	.word	0x080088b8
 8001684:	20000348 	.word	0x20000348
 8001688:	40a00000 	.word	0x40a00000
 800168c:	42b40000 	.word	0x42b40000
 8001690:	42b40000 	.word	0x42b40000

08001694 <_Z41__static_initialization_and_destruction_0ii>:
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d112      	bne.n	80016ca <_Z41__static_initialization_and_destruction_0ii+0x36>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10d      	bne.n	80016ca <_Z41__static_initialization_and_destruction_0ii+0x36>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, true, -5);
 80016ae:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 80016b2:	2301      	movs	r3, #1
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80016b6:	490f      	ldr	r1, [pc, #60]	; (80016f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80016ba:	f7ff fd37 	bl	800112c <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtbf>
Stepper elStepper(ElStepperPorts,ElStepperPins, true);
 80016be:	2301      	movs	r3, #1
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80016c2:	490f      	ldr	r1, [pc, #60]	; (8001700 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80016c6:	f7ff fc77 	bl	8000fb8 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKtb>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d105      	bne.n	80016e6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80016da:	480a      	ldr	r0, [pc, #40]	; (8001704 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80016dc:	f7ff fc88 	bl	8000ff0 <_ZN7StepperD1Ev>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, true, -5);
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80016e2:	f7ff fd45 	bl	8001170 <_ZN10absEncoderD1Ev>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0800888c 	.word	0x0800888c
 80016f4:	08008864 	.word	0x08008864
 80016f8:	200002c4 	.word	0x200002c4
 80016fc:	080088ac 	.word	0x080088ac
 8001700:	080088a0 	.word	0x080088a0
 8001704:	200002d8 	.word	0x200002d8

08001708 <_GLOBAL__sub_I_htim1>:
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
 800170c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff ffbf 	bl	8001694 <_Z41__static_initialization_and_destruction_0ii>
 8001716:	bd80      	pop	{r7, pc}

08001718 <_GLOBAL__sub_D_htim1>:
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
 800171c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ffb7 	bl	8001694 <_Z41__static_initialization_and_destruction_0ii>
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 8001728:	b490      	push	{r4, r7}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0b00 	vstr	d0, [r7]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 800173a:	ec44 3b17 	vmov	d7, r3, r4
 800173e:	eeb0 0a47 	vmov.f32	s0, s14
 8001742:	eef0 0a67 	vmov.f32	s1, s15
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bc90      	pop	{r4, r7}
 800174c:	4770      	bx	lr
	...

08001750 <_Z18calcTimeJulianCentd>:

/*************************************************************/
/* Solar position calculation functions */
/*************************************************************/

double calcTimeJulianCent(double jd) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0b00 	vstr	d0, [r7]
	double T = (jd - 2451545.0)/36525.0;
 800175a:	a30f      	add	r3, pc, #60	; (adr r3, 8001798 <_Z18calcTimeJulianCentd+0x48>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001764:	f7fe fda8 	bl	80002b8 <__aeabi_dsub>
 8001768:	4603      	mov	r3, r0
 800176a:	460c      	mov	r4, r1
 800176c:	4618      	mov	r0, r3
 800176e:	4621      	mov	r1, r4
 8001770:	a30b      	add	r3, pc, #44	; (adr r3, 80017a0 <_Z18calcTimeJulianCentd+0x50>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f881 	bl	800087c <__aeabi_ddiv>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return T;
 8001782:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001786:	ec44 3b17 	vmov	d7, r3, r4
}
 800178a:	eeb0 0a47 	vmov.f32	s0, s14
 800178e:	eef0 0a67 	vmov.f32	s1, s15
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	80000000 	.word	0x80000000
 800179c:	4142b42c 	.word	0x4142b42c
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40e1d5a0 	.word	0x40e1d5a0

080017a8 <_Z8radToDegd>:

	return doy;
}


double radToDeg(double angleRad) {
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	ed87 0b00 	vstr	d0, [r7]
	return (180.0 * angleRad / M_PI);
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <_Z8radToDegd+0x48>)
 80017b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017bc:	f7fe ff34 	bl	8000628 <__aeabi_dmul>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	4618      	mov	r0, r3
 80017c6:	4621      	mov	r1, r4
 80017c8:	a307      	add	r3, pc, #28	; (adr r3, 80017e8 <_Z8radToDegd+0x40>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7ff f855 	bl	800087c <__aeabi_ddiv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	ec44 3b17 	vmov	d7, r3, r4
}
 80017da:	eeb0 0a47 	vmov.f32	s0, s14
 80017de:	eef0 0a67 	vmov.f32	s1, s15
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	54442d18 	.word	0x54442d18
 80017ec:	400921fb 	.word	0x400921fb
 80017f0:	40668000 	.word	0x40668000
 80017f4:	00000000 	.word	0x00000000

080017f8 <_Z8degToRadd>:

double degToRad(double angleDeg) {
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	ed87 0b00 	vstr	d0, [r7]
	return (M_PI * angleDeg / 180.0);
 8001802:	a30e      	add	r3, pc, #56	; (adr r3, 800183c <_Z8degToRadd+0x44>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800180c:	f7fe ff0c 	bl	8000628 <__aeabi_dmul>
 8001810:	4603      	mov	r3, r0
 8001812:	460c      	mov	r4, r1
 8001814:	4618      	mov	r0, r3
 8001816:	4621      	mov	r1, r4
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <_Z8degToRadd+0x40>)
 800181e:	f7ff f82d 	bl	800087c <__aeabi_ddiv>
 8001822:	4603      	mov	r3, r0
 8001824:	460c      	mov	r4, r1
 8001826:	ec44 3b17 	vmov	d7, r3, r4
}
 800182a:	eeb0 0a47 	vmov.f32	s0, s14
 800182e:	eef0 0a67 	vmov.f32	s1, s15
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	40668000 	.word	0x40668000
 800183c:	54442d18 	.word	0x54442d18
 8001840:	400921fb 	.word	0x400921fb
 8001844:	00000000 	.word	0x00000000

08001848 <_Z19calcGeomMeanLongSund>:

double calcGeomMeanLongSun(double t) {
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	ed87 0b00 	vstr	d0, [r7]
	double L0 = 280.46646 + t * (36000.76983 + t*(0.0003032));
 8001852:	a330      	add	r3, pc, #192	; (adr r3, 8001914 <_Z19calcGeomMeanLongSund+0xcc>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185c:	f7fe fee4 	bl	8000628 <__aeabi_dmul>
 8001860:	4603      	mov	r3, r0
 8001862:	460c      	mov	r4, r1
 8001864:	4618      	mov	r0, r3
 8001866:	4621      	mov	r1, r4
 8001868:	a32c      	add	r3, pc, #176	; (adr r3, 800191c <_Z19calcGeomMeanLongSund+0xd4>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fd25 	bl	80002bc <__adddf3>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	4618      	mov	r0, r3
 8001878:	4621      	mov	r1, r4
 800187a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187e:	f7fe fed3 	bl	8000628 <__aeabi_dmul>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	4618      	mov	r0, r3
 8001888:	4621      	mov	r1, r4
 800188a:	a326      	add	r3, pc, #152	; (adr r3, 8001924 <_Z19calcGeomMeanLongSund+0xdc>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fd14 	bl	80002bc <__adddf3>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(L0 > 360.0) {
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <_Z19calcGeomMeanLongSund+0xc8>)
 80018a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018a6:	f7ff f94f 	bl	8000b48 <__aeabi_dcmpgt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d100      	bne.n	80018b2 <_Z19calcGeomMeanLongSund+0x6a>
 80018b0:	e00b      	b.n	80018ca <_Z19calcGeomMeanLongSund+0x82>
		L0 -= 360.0;
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <_Z19calcGeomMeanLongSund+0xc8>)
 80018b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018bc:	f7fe fcfc 	bl	80002b8 <__aeabi_dsub>
 80018c0:	4603      	mov	r3, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(L0 > 360.0) {
 80018c8:	e7e8      	b.n	800189c <_Z19calcGeomMeanLongSund+0x54>
	}
	while(L0 < 0.0) {
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018d6:	f7ff f919 	bl	8000b0c <__aeabi_dcmplt>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00b      	beq.n	80018f8 <_Z19calcGeomMeanLongSund+0xb0>
		L0 += 360.0;
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <_Z19calcGeomMeanLongSund+0xc8>)
 80018e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018ea:	f7fe fce7 	bl	80002bc <__adddf3>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(L0 < 0.0) {
 80018f6:	e7e8      	b.n	80018ca <_Z19calcGeomMeanLongSund+0x82>
	}
	return L0;		// in degrees
 80018f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80018fc:	ec44 3b17 	vmov	d7, r3, r4
}
 8001900:	eeb0 0a47 	vmov.f32	s0, s14
 8001904:	eef0 0a67 	vmov.f32	s1, s15
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	bf00      	nop
 8001910:	40768000 	.word	0x40768000
 8001914:	158aabc0 	.word	0x158aabc0
 8001918:	3f33deda 	.word	0x3f33deda
 800191c:	a272862f 	.word	0xa272862f
 8001920:	40e19418 	.word	0x40e19418
 8001924:	9ec2ce46 	.word	0x9ec2ce46
 8001928:	40718776 	.word	0x40718776
 800192c:	00000000 	.word	0x00000000

08001930 <_Z22calcGeomMeanAnomalySund>:

double calcGeomMeanAnomalySun(double t) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	ed87 0b00 	vstr	d0, [r7]
	double M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
 800193a:	a319      	add	r3, pc, #100	; (adr r3, 80019a0 <_Z22calcGeomMeanAnomalySund+0x70>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001944:	f7fe fe70 	bl	8000628 <__aeabi_dmul>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	461a      	mov	r2, r3
 800194e:	4623      	mov	r3, r4
 8001950:	a115      	add	r1, pc, #84	; (adr r1, 80019a8 <_Z22calcGeomMeanAnomalySund+0x78>)
 8001952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001956:	f7fe fcaf 	bl	80002b8 <__aeabi_dsub>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	4618      	mov	r0, r3
 8001960:	4621      	mov	r1, r4
 8001962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001966:	f7fe fe5f 	bl	8000628 <__aeabi_dmul>
 800196a:	4603      	mov	r3, r0
 800196c:	460c      	mov	r4, r1
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	a30f      	add	r3, pc, #60	; (adr r3, 80019b0 <_Z22calcGeomMeanAnomalySund+0x80>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fca0 	bl	80002bc <__adddf3>
 800197c:	4603      	mov	r3, r0
 800197e:	460c      	mov	r4, r1
 8001980:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return M;		// in degrees
 8001984:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001988:	ec44 3b17 	vmov	d7, r3, r4
}
 800198c:	eeb0 0a47 	vmov.f32	s0, s14
 8001990:	eef0 0a67 	vmov.f32	s1, s15
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
 800199a:	bf00      	nop
 800199c:	f3af 8000 	nop.w
 80019a0:	f260db0c 	.word	0xf260db0c
 80019a4:	3f242550 	.word	0x3f242550
 80019a8:	9bf9c62a 	.word	0x9bf9c62a
 80019ac:	40e193e1 	.word	0x40e193e1
 80019b0:	3c0c1fc9 	.word	0x3c0c1fc9
 80019b4:	40765877 	.word	0x40765877

080019b8 <_Z26calcEccentricityEarthOrbitd>:

double calcEccentricityEarthOrbit(double t) {
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	ed87 0b00 	vstr	d0, [r7]
	double e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
 80019c2:	a319      	add	r3, pc, #100	; (adr r3, 8001a28 <_Z26calcEccentricityEarthOrbitd+0x70>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019cc:	f7fe fe2c 	bl	8000628 <__aeabi_dmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	4618      	mov	r0, r3
 80019d6:	4621      	mov	r1, r4
 80019d8:	a315      	add	r3, pc, #84	; (adr r3, 8001a30 <_Z26calcEccentricityEarthOrbitd+0x78>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fc6d 	bl	80002bc <__adddf3>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	4618      	mov	r0, r3
 80019e8:	4621      	mov	r1, r4
 80019ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ee:	f7fe fe1b 	bl	8000628 <__aeabi_dmul>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	461a      	mov	r2, r3
 80019f8:	4623      	mov	r3, r4
 80019fa:	a10f      	add	r1, pc, #60	; (adr r1, 8001a38 <_Z26calcEccentricityEarthOrbitd+0x80>)
 80019fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a00:	f7fe fc5a 	bl	80002b8 <__aeabi_dsub>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return e;		// unitless
 8001a0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a10:	ec44 3b17 	vmov	d7, r3, r4
}
 8001a14:	eeb0 0a47 	vmov.f32	s0, s14
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	f3af 8000 	nop.w
 8001a28:	fc64d800 	.word	0xfc64d800
 8001a2c:	3e810160 	.word	0x3e810160
 8001a30:	525fe303 	.word	0x525fe303
 8001a34:	3f060a1c 	.word	0x3f060a1c
 8001a38:	725d0380 	.word	0x725d0380
 8001a3c:	3f911c11 	.word	0x3f911c11

08001a40 <_Z17calcSunEqOfCenterd>:

double calcSunEqOfCenter(double t) {
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	ed87 0b00 	vstr	d0, [r7]
	double m = calcGeomMeanAnomalySun(t);
 8001a4a:	ed97 0b00 	vldr	d0, [r7]
 8001a4e:	f7ff ff6f 	bl	8001930 <_Z22calcGeomMeanAnomalySund>
 8001a52:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	double mrad = degToRad(m);
 8001a56:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001a5a:	f7ff fecd 	bl	80017f8 <_Z8degToRadd>
 8001a5e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double sinm = sin(mrad);
 8001a62:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001a66:	f003 fa9f 	bl	8004fa8 <sin>
 8001a6a:	ed87 0b08 	vstr	d0, [r7, #32]
	double sin2m = sin(mrad+mrad);
 8001a6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	f7fe fc21 	bl	80002bc <__adddf3>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	ec44 3b17 	vmov	d7, r3, r4
 8001a82:	eeb0 0a47 	vmov.f32	s0, s14
 8001a86:	eef0 0a67 	vmov.f32	s1, s15
 8001a8a:	f003 fa8d 	bl	8004fa8 <sin>
 8001a8e:	ed87 0b06 	vstr	d0, [r7, #24]
	double sin3m = sin(mrad+mrad+mrad);
 8001a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	f7fe fc0f 	bl	80002bc <__adddf3>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001aaa:	f7fe fc07 	bl	80002bc <__adddf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	ec44 3b17 	vmov	d7, r3, r4
 8001ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aba:	eef0 0a67 	vmov.f32	s1, s15
 8001abe:	f003 fa73 	bl	8004fa8 <sin>
 8001ac2:	ed87 0b04 	vstr	d0, [r7, #16]
	double C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
 8001ac6:	a334      	add	r3, pc, #208	; (adr r3, 8001b98 <_Z17calcSunEqOfCenterd+0x158>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ad0:	f7fe fdaa 	bl	8000628 <__aeabi_dmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	4621      	mov	r1, r4
 8001adc:	a330      	add	r3, pc, #192	; (adr r3, 8001ba0 <_Z17calcSunEqOfCenterd+0x160>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fbeb 	bl	80002bc <__adddf3>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	4618      	mov	r0, r3
 8001aec:	4621      	mov	r1, r4
 8001aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001af2:	f7fe fd99 	bl	8000628 <__aeabi_dmul>
 8001af6:	4603      	mov	r3, r0
 8001af8:	460c      	mov	r4, r1
 8001afa:	461a      	mov	r2, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	a12a      	add	r1, pc, #168	; (adr r1, 8001ba8 <_Z17calcSunEqOfCenterd+0x168>)
 8001b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b04:	f7fe fbd8 	bl	80002b8 <__aeabi_dsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4621      	mov	r1, r4
 8001b10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b14:	f7fe fd88 	bl	8000628 <__aeabi_dmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	460c      	mov	r4, r1
 8001b1c:	4625      	mov	r5, r4
 8001b1e:	461c      	mov	r4, r3
 8001b20:	a323      	add	r3, pc, #140	; (adr r3, 8001bb0 <_Z17calcSunEqOfCenterd+0x170>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b2a:	f7fe fd7d 	bl	8000628 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	a121      	add	r1, pc, #132	; (adr r1, 8001bb8 <_Z17calcSunEqOfCenterd+0x178>)
 8001b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b38:	f7fe fbbe 	bl	80002b8 <__aeabi_dsub>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fd6e 	bl	8000628 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe fbb2 	bl	80002bc <__adddf3>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	4625      	mov	r5, r4
 8001b5e:	461c      	mov	r4, r3
 8001b60:	a317      	add	r3, pc, #92	; (adr r3, 8001bc0 <_Z17calcSunEqOfCenterd+0x180>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6a:	f7fe fd5d 	bl	8000628 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fba1 	bl	80002bc <__adddf3>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460c      	mov	r4, r1
 8001b7e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return C;		// in degrees
 8001b82:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b86:	ec44 3b17 	vmov	d7, r3, r4
}
 8001b8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b8e:	eef0 0a67 	vmov.f32	s1, s15
 8001b92:	3738      	adds	r7, #56	; 0x38
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}
 8001b98:	593e5fb7 	.word	0x593e5fb7
 8001b9c:	3eed5c31 	.word	0x3eed5c31
 8001ba0:	976ff3ae 	.word	0x976ff3ae
 8001ba4:	3f73bafd 	.word	0x3f73bafd
 8001ba8:	b4edb2f6 	.word	0xb4edb2f6
 8001bac:	3ffea235 	.word	0x3ffea235
 8001bb0:	c99f1ae3 	.word	0xc99f1ae3
 8001bb4:	3f1a79fe 	.word	0x3f1a79fe
 8001bb8:	84988095 	.word	0x84988095
 8001bbc:	3f94790b 	.word	0x3f94790b
 8001bc0:	8c6d612c 	.word	0x8c6d612c
 8001bc4:	3f32f09d 	.word	0x3f32f09d

08001bc8 <_Z15calcSunTrueLongd>:

double calcSunTrueLong(double t) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	ed87 0b00 	vstr	d0, [r7]
	double l0 = calcGeomMeanLongSun(t);
 8001bd2:	ed97 0b00 	vldr	d0, [r7]
 8001bd6:	f7ff fe37 	bl	8001848 <_Z19calcGeomMeanLongSund>
 8001bda:	ed87 0b06 	vstr	d0, [r7, #24]
	double c = calcSunEqOfCenter(t);
 8001bde:	ed97 0b00 	vldr	d0, [r7]
 8001be2:	f7ff ff2d 	bl	8001a40 <_Z17calcSunEqOfCenterd>
 8001be6:	ed87 0b04 	vstr	d0, [r7, #16]
	double O = l0 + c;
 8001bea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf2:	f7fe fb63 	bl	80002bc <__adddf3>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return O;		// in degrees
 8001bfe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c02:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c06:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0a:	eef0 0a67 	vmov.f32	s1, s15
 8001c0e:	3724      	adds	r7, #36	; 0x24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	0000      	movs	r0, r0
	...

08001c18 <_Z19calcSunApparentLongd>:
	double e = calcEccentricityEarthOrbit(t);
	double R = (1.000001018 * (1 - e * e)) / (1 + e * cos(degToRad(v)));
	return R;		// in AUs
}

double calcSunApparentLong(double t) {
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	ed87 0b00 	vstr	d0, [r7]
	double o = calcSunTrueLong(t);
 8001c22:	ed97 0b00 	vldr	d0, [r7]
 8001c26:	f7ff ffcf 	bl	8001bc8 <_Z15calcSunTrueLongd>
 8001c2a:	ed87 0b06 	vstr	d0, [r7, #24]
	double omega = 125.04 - 1934.136 * t;
 8001c2e:	a324      	add	r3, pc, #144	; (adr r3, 8001cc0 <_Z19calcSunApparentLongd+0xa8>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c38:	f7fe fcf6 	bl	8000628 <__aeabi_dmul>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	460c      	mov	r4, r1
 8001c40:	461a      	mov	r2, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	a120      	add	r1, pc, #128	; (adr r1, 8001cc8 <_Z19calcSunApparentLongd+0xb0>)
 8001c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_dsub>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double lambda = o - 0.00569 - 0.00478 * sin(degToRad(omega));
 8001c56:	a31e      	add	r3, pc, #120	; (adr r3, 8001cd0 <_Z19calcSunApparentLongd+0xb8>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c60:	f7fe fb2a 	bl	80002b8 <__aeabi_dsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	4625      	mov	r5, r4
 8001c6a:	461c      	mov	r4, r3
 8001c6c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c70:	f7ff fdc2 	bl	80017f8 <_Z8degToRadd>
 8001c74:	eeb0 7a40 	vmov.f32	s14, s0
 8001c78:	eef0 7a60 	vmov.f32	s15, s1
 8001c7c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c80:	eef0 0a67 	vmov.f32	s1, s15
 8001c84:	f003 f990 	bl	8004fa8 <sin>
 8001c88:	ec51 0b10 	vmov	r0, r1, d0
 8001c8c:	a312      	add	r3, pc, #72	; (adr r3, 8001cd8 <_Z19calcSunApparentLongd+0xc0>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	f7fe fcc9 	bl	8000628 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fb0b 	bl	80002b8 <__aeabi_dsub>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return lambda;		// in degrees
 8001caa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001cae:	ec44 3b17 	vmov	d7, r3, r4
}
 8001cb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001cb6:	eef0 0a67 	vmov.f32	s1, s15
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc0:	43958106 	.word	0x43958106
 8001cc4:	409e388b 	.word	0x409e388b
 8001cc8:	5c28f5c3 	.word	0x5c28f5c3
 8001ccc:	405f428f 	.word	0x405f428f
 8001cd0:	bea0ba1f 	.word	0xbea0ba1f
 8001cd4:	3f774e65 	.word	0x3f774e65
 8001cd8:	7acc4ef9 	.word	0x7acc4ef9
 8001cdc:	3f739431 	.word	0x3f739431

08001ce0 <_Z27calcMeanObliquityOfEclipticd>:

double calcMeanObliquityOfEcliptic(double t) {
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	ed87 0b00 	vstr	d0, [r7]
	double seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
 8001cea:	a336      	add	r3, pc, #216	; (adr r3, 8001dc4 <_Z27calcMeanObliquityOfEclipticd+0xe4>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf4:	f7fe fc98 	bl	8000628 <__aeabi_dmul>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	a132      	add	r1, pc, #200	; (adr r1, 8001dcc <_Z27calcMeanObliquityOfEclipticd+0xec>)
 8001d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d06:	f7fe fad7 	bl	80002b8 <__aeabi_dsub>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4621      	mov	r1, r4
 8001d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d16:	f7fe fc87 	bl	8000628 <__aeabi_dmul>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4621      	mov	r1, r4
 8001d22:	a32c      	add	r3, pc, #176	; (adr r3, 8001dd4 <_Z27calcMeanObliquityOfEclipticd+0xf4>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fac8 	bl	80002bc <__adddf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	4618      	mov	r0, r3
 8001d32:	4621      	mov	r1, r4
 8001d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d38:	f7fe fc76 	bl	8000628 <__aeabi_dmul>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	461a      	mov	r2, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	a125      	add	r1, pc, #148	; (adr r1, 8001ddc <_Z27calcMeanObliquityOfEclipticd+0xfc>)
 8001d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d4a:	f7fe fab5 	bl	80002b8 <__aeabi_dsub>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <_Z27calcMeanObliquityOfEclipticd+0xd8>)
 8001d5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d60:	f7fe fd8c 	bl	800087c <__aeabi_ddiv>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <_Z27calcMeanObliquityOfEclipticd+0xdc>)
 8001d72:	f7fe faa3 	bl	80002bc <__adddf3>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <_Z27calcMeanObliquityOfEclipticd+0xd8>)
 8001d84:	f7fe fd7a 	bl	800087c <__aeabi_ddiv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	4621      	mov	r1, r4
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <_Z27calcMeanObliquityOfEclipticd+0xe0>)
 8001d96:	f7fe fa91 	bl	80002bc <__adddf3>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460c      	mov	r4, r1
 8001d9e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return e0;		// in degrees
 8001da2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001da6:	ec44 3b17 	vmov	d7, r3, r4
}
 8001daa:	eeb0 0a47 	vmov.f32	s0, s14
 8001dae:	eef0 0a67 	vmov.f32	s1, s15
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	404e0000 	.word	0x404e0000
 8001dbc:	403a0000 	.word	0x403a0000
 8001dc0:	40370000 	.word	0x40370000
 8001dc4:	ed4a1ad6 	.word	0xed4a1ad6
 8001dc8:	3f5db445 	.word	0x3f5db445
 8001dcc:	5a31a4be 	.word	0x5a31a4be
 8001dd0:	3f435547 	.word	0x3f435547
 8001dd4:	eb851eb8 	.word	0xeb851eb8
 8001dd8:	40476851 	.word	0x40476851
 8001ddc:	20c49ba6 	.word	0x20c49ba6
 8001de0:	403572b0 	.word	0x403572b0
 8001de4:	00000000 	.word	0x00000000

08001de8 <_Z23calcObliquityCorrectiond>:

double calcObliquityCorrection(double t) {
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	ed87 0b00 	vstr	d0, [r7]
	double e0 = calcMeanObliquityOfEcliptic(t);
 8001df2:	ed97 0b00 	vldr	d0, [r7]
 8001df6:	f7ff ff73 	bl	8001ce0 <_Z27calcMeanObliquityOfEclipticd>
 8001dfa:	ed87 0b06 	vstr	d0, [r7, #24]
	double omega = 125.04 - 1934.136 * t;
 8001dfe:	a320      	add	r3, pc, #128	; (adr r3, 8001e80 <_Z23calcObliquityCorrectiond+0x98>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e08:	f7fe fc0e 	bl	8000628 <__aeabi_dmul>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	461a      	mov	r2, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	a11c      	add	r1, pc, #112	; (adr r1, 8001e88 <_Z23calcObliquityCorrectiond+0xa0>)
 8001e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e1a:	f7fe fa4d 	bl	80002b8 <__aeabi_dsub>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460c      	mov	r4, r1
 8001e22:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double e = e0 + 0.00256 * cos(degToRad(omega));
 8001e26:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e2a:	f7ff fce5 	bl	80017f8 <_Z8degToRadd>
 8001e2e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e32:	eef0 7a60 	vmov.f32	s15, s1
 8001e36:	eeb0 0a47 	vmov.f32	s0, s14
 8001e3a:	eef0 0a67 	vmov.f32	s1, s15
 8001e3e:	f002 ffeb 	bl	8004e18 <cos>
 8001e42:	ec51 0b10 	vmov	r0, r1, d0
 8001e46:	a312      	add	r3, pc, #72	; (adr r3, 8001e90 <_Z23calcObliquityCorrectiond+0xa8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbec 	bl	8000628 <__aeabi_dmul>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	461a      	mov	r2, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e5c:	f7fe fa2e 	bl	80002bc <__adddf3>
 8001e60:	4603      	mov	r3, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return e;		// in degrees
 8001e68:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e6c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001e70:	eeb0 0a47 	vmov.f32	s0, s14
 8001e74:	eef0 0a67 	vmov.f32	s1, s15
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	43958106 	.word	0x43958106
 8001e84:	409e388b 	.word	0x409e388b
 8001e88:	5c28f5c3 	.word	0x5c28f5c3
 8001e8c:	405f428f 	.word	0x405f428f
 8001e90:	88e368f1 	.word	0x88e368f1
 8001e94:	3f64f8b5 	.word	0x3f64f8b5

08001e98 <_Z18calcSunDeclinationd>:
	double tanadenom = (cos(degToRad(lambda)));
	double alpha = radToDeg(atan2(tananum, tanadenom));
	return alpha;		// in degrees
}

double calcSunDeclination(double t) {
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	ed87 0b00 	vstr	d0, [r7]
	double e = calcObliquityCorrection(t);
 8001ea2:	ed97 0b00 	vldr	d0, [r7]
 8001ea6:	f7ff ff9f 	bl	8001de8 <_Z23calcObliquityCorrectiond>
 8001eaa:	ed87 0b08 	vstr	d0, [r7, #32]
	double lambda = calcSunApparentLong(t);
 8001eae:	ed97 0b00 	vldr	d0, [r7]
 8001eb2:	f7ff feb1 	bl	8001c18 <_Z19calcSunApparentLongd>
 8001eb6:	ed87 0b06 	vstr	d0, [r7, #24]
	double sint = sin(degToRad(e)) * sin(degToRad(lambda));
 8001eba:	ed97 0b08 	vldr	d0, [r7, #32]
 8001ebe:	f7ff fc9b 	bl	80017f8 <_Z8degToRadd>
 8001ec2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec6:	eef0 7a60 	vmov.f32	s15, s1
 8001eca:	eeb0 0a47 	vmov.f32	s0, s14
 8001ece:	eef0 0a67 	vmov.f32	s1, s15
 8001ed2:	f003 f869 	bl	8004fa8 <sin>
 8001ed6:	ec55 4b10 	vmov	r4, r5, d0
 8001eda:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ede:	f7ff fc8b 	bl	80017f8 <_Z8degToRadd>
 8001ee2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ee6:	eef0 7a60 	vmov.f32	s15, s1
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	eef0 0a67 	vmov.f32	s1, s15
 8001ef2:	f003 f859 	bl	8004fa8 <sin>
 8001ef6:	ec53 2b10 	vmov	r2, r3, d0
 8001efa:	4620      	mov	r0, r4
 8001efc:	4629      	mov	r1, r5
 8001efe:	f7fe fb93 	bl	8000628 <__aeabi_dmul>
 8001f02:	4603      	mov	r3, r0
 8001f04:	460c      	mov	r4, r1
 8001f06:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double theta = radToDeg(asin(sint));
 8001f0a:	ed97 0b04 	vldr	d0, [r7, #16]
 8001f0e:	f003 f91b 	bl	8005148 <asin>
 8001f12:	eeb0 7a40 	vmov.f32	s14, s0
 8001f16:	eef0 7a60 	vmov.f32	s15, s1
 8001f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1e:	eef0 0a67 	vmov.f32	s1, s15
 8001f22:	f7ff fc41 	bl	80017a8 <_Z8radToDegd>
 8001f26:	ed87 0b02 	vstr	d0, [r7, #8]
	return theta;		// in degrees
 8001f2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f2e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001f32:	eeb0 0a47 	vmov.f32	s0, s14
 8001f36:	eef0 0a67 	vmov.f32	s1, s15
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bdb0      	pop	{r4, r5, r7, pc}

08001f40 <_Z18calcEquationOfTimed>:

double calcEquationOfTime(double t) {
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b098      	sub	sp, #96	; 0x60
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	ed87 0b00 	vstr	d0, [r7]
	double epsilon = calcObliquityCorrection(t);
 8001f4a:	ed97 0b00 	vldr	d0, [r7]
 8001f4e:	f7ff ff4b 	bl	8001de8 <_Z23calcObliquityCorrectiond>
 8001f52:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
	double l0 = calcGeomMeanLongSun(t);
 8001f56:	ed97 0b00 	vldr	d0, [r7]
 8001f5a:	f7ff fc75 	bl	8001848 <_Z19calcGeomMeanLongSund>
 8001f5e:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
	double e = calcEccentricityEarthOrbit(t);
 8001f62:	ed97 0b00 	vldr	d0, [r7]
 8001f66:	f7ff fd27 	bl	80019b8 <_Z26calcEccentricityEarthOrbitd>
 8001f6a:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	double m = calcGeomMeanAnomalySun(t);
 8001f6e:	ed97 0b00 	vldr	d0, [r7]
 8001f72:	f7ff fcdd 	bl	8001930 <_Z22calcGeomMeanAnomalySund>
 8001f76:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	double y = tan(degToRad(epsilon)/2.0);
 8001f7a:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001f7e:	f7ff fc3b 	bl	80017f8 <_Z8degToRadd>
 8001f82:	ec51 0b10 	vmov	r0, r1, d0
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f8e:	f7fe fc75 	bl	800087c <__aeabi_ddiv>
 8001f92:	4603      	mov	r3, r0
 8001f94:	460c      	mov	r4, r1
 8001f96:	ec44 3b17 	vmov	d7, r3, r4
 8001f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9e:	eef0 0a67 	vmov.f32	s1, s15
 8001fa2:	f003 f849 	bl	8005038 <tan>
 8001fa6:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	y *= y;
 8001faa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fb2:	f7fe fb39 	bl	8000628 <__aeabi_dmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	double sin2l0 = sin(2.0 * degToRad(l0));
 8001fbe:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001fc2:	f7ff fc19 	bl	80017f8 <_Z8degToRadd>
 8001fc6:	ec51 0b10 	vmov	r0, r1, d0
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	f7fe f975 	bl	80002bc <__adddf3>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	ec44 3b17 	vmov	d7, r3, r4
 8001fda:	eeb0 0a47 	vmov.f32	s0, s14
 8001fde:	eef0 0a67 	vmov.f32	s1, s15
 8001fe2:	f002 ffe1 	bl	8004fa8 <sin>
 8001fe6:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	double sinm   = sin(degToRad(m));
 8001fea:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001fee:	f7ff fc03 	bl	80017f8 <_Z8degToRadd>
 8001ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ff6:	eef0 7a60 	vmov.f32	s15, s1
 8001ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffe:	eef0 0a67 	vmov.f32	s1, s15
 8002002:	f002 ffd1 	bl	8004fa8 <sin>
 8002006:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double cos2l0 = cos(2.0 * degToRad(l0));
 800200a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800200e:	f7ff fbf3 	bl	80017f8 <_Z8degToRadd>
 8002012:	ec51 0b10 	vmov	r0, r1, d0
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	f7fe f94f 	bl	80002bc <__adddf3>
 800201e:	4603      	mov	r3, r0
 8002020:	460c      	mov	r4, r1
 8002022:	ec44 3b17 	vmov	d7, r3, r4
 8002026:	eeb0 0a47 	vmov.f32	s0, s14
 800202a:	eef0 0a67 	vmov.f32	s1, s15
 800202e:	f002 fef3 	bl	8004e18 <cos>
 8002032:	ed87 0b08 	vstr	d0, [r7, #32]
	double sin4l0 = sin(4.0 * degToRad(l0));
 8002036:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800203a:	f7ff fbdd 	bl	80017f8 <_Z8degToRadd>
 800203e:	ec51 0b10 	vmov	r0, r1, d0
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <_Z18calcEquationOfTimed+0x298>)
 8002048:	f7fe faee 	bl	8000628 <__aeabi_dmul>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	ec44 3b17 	vmov	d7, r3, r4
 8002054:	eeb0 0a47 	vmov.f32	s0, s14
 8002058:	eef0 0a67 	vmov.f32	s1, s15
 800205c:	f002 ffa4 	bl	8004fa8 <sin>
 8002060:	ed87 0b06 	vstr	d0, [r7, #24]
	double sin2m  = sin(2.0 * degToRad(m));
 8002064:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002068:	f7ff fbc6 	bl	80017f8 <_Z8degToRadd>
 800206c:	ec51 0b10 	vmov	r0, r1, d0
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	f7fe f922 	bl	80002bc <__adddf3>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	ec44 3b17 	vmov	d7, r3, r4
 8002080:	eeb0 0a47 	vmov.f32	s0, s14
 8002084:	eef0 0a67 	vmov.f32	s1, s15
 8002088:	f002 ff8e 	bl	8004fa8 <sin>
 800208c:	ed87 0b04 	vstr	d0, [r7, #16]

	double Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;
 8002090:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002094:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002098:	f7fe fac6 	bl	8000628 <__aeabi_dmul>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	4625      	mov	r5, r4
 80020a2:	461c      	mov	r4, r3
 80020a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	f7fe f906 	bl	80002bc <__adddf3>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020bc:	f7fe fab4 	bl	8000628 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4620      	mov	r0, r4
 80020c6:	4629      	mov	r1, r5
 80020c8:	f7fe f8f6 	bl	80002b8 <__aeabi_dsub>
 80020cc:	4603      	mov	r3, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	4625      	mov	r5, r4
 80020d2:	461c      	mov	r4, r3
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <_Z18calcEquationOfTimed+0x298>)
 80020da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020de:	f7fe faa3 	bl	8000628 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020ee:	f7fe fa9b 	bl	8000628 <__aeabi_dmul>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800210e:	f7fe fa8b 	bl	8000628 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4620      	mov	r0, r4
 8002118:	4629      	mov	r1, r5
 800211a:	f7fe f8cf 	bl	80002bc <__adddf3>
 800211e:	4603      	mov	r3, r0
 8002120:	460c      	mov	r4, r1
 8002122:	4625      	mov	r5, r4
 8002124:	461c      	mov	r4, r3
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <_Z18calcEquationOfTimed+0x29c>)
 800212c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002130:	f7fe fa7a 	bl	8000628 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002140:	f7fe fa72 	bl	8000628 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002150:	f7fe fa6a 	bl	8000628 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4620      	mov	r0, r4
 800215a:	4629      	mov	r1, r5
 800215c:	f7fe f8ac 	bl	80002b8 <__aeabi_dsub>
 8002160:	4603      	mov	r3, r0
 8002162:	460c      	mov	r4, r1
 8002164:	4625      	mov	r5, r4
 8002166:	461c      	mov	r4, r3
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <_Z18calcEquationOfTimed+0x2a0>)
 800216e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002172:	f7fe fa59 	bl	8000628 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002182:	f7fe fa51 	bl	8000628 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002192:	f7fe fa49 	bl	8000628 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4620      	mov	r0, r4
 800219c:	4629      	mov	r1, r5
 800219e:	f7fe f88b 	bl	80002b8 <__aeabi_dsub>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return radToDeg(Etime)*4.0;	// in minutes of time
 80021aa:	ed97 0b02 	vldr	d0, [r7, #8]
 80021ae:	f7ff fafb 	bl	80017a8 <_Z8radToDegd>
 80021b2:	ec51 0b10 	vmov	r0, r1, d0
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_Z18calcEquationOfTimed+0x298>)
 80021bc:	f7fe fa34 	bl	8000628 <__aeabi_dmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	460c      	mov	r4, r1
 80021c4:	ec44 3b17 	vmov	d7, r3, r4
}
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	eef0 0a67 	vmov.f32	s1, s15
 80021d0:	3760      	adds	r7, #96	; 0x60
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40100000 	.word	0x40100000
 80021dc:	3fe00000 	.word	0x3fe00000
 80021e0:	3ff40000 	.word	0x3ff40000

080021e4 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7fe f9b1 	bl	8000554 <__aeabi_i2d>
 80021f2:	4603      	mov	r3, r0
 80021f4:	460c      	mov	r4, r1
 80021f6:	ec44 3b17 	vmov	d7, r3, r4
 80021fa:	eeb0 0a47 	vmov.f32	s0, s14
 80021fe:	eef0 0a67 	vmov.f32	s1, s15
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}

08002208 <_Z5getJDiid>:
	double HAarg = (cos(degToRad(90.833))/(cos(latRad)*cos(sdRad))-tan(latRad) * tan(sdRad));
	if(HAarg > 1 || HAarg < -1) return -1;
	else return acos(HAarg); // in radians (for sunset, use -HA)
}

double getJD(int year, int month, double day) {
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	ed87 0b00 	vstr	d0, [r7]
	if (month <= 2) {
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b02      	cmp	r3, #2
 800221a:	dc05      	bgt.n	8002228 <_Z5getJDiid+0x20>
		year -= 1;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3b01      	subs	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
		month += 12;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	330c      	adds	r3, #12
 8002226:	60bb      	str	r3, [r7, #8]
	}
	int A = floor(year/100);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a4f      	ldr	r2, [pc, #316]	; (8002368 <_Z5getJDiid+0x160>)
 800222c:	fb82 1203 	smull	r1, r2, r2, r3
 8002230:	1152      	asrs	r2, r2, #5
 8002232:	17db      	asrs	r3, r3, #31
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffd4 	bl	80021e4 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800223c:	ec54 3b10 	vmov	r3, r4, d0
 8002240:	4618      	mov	r0, r3
 8002242:	4621      	mov	r1, r4
 8002244:	f7fe fca0 	bl	8000b88 <__aeabi_d2iz>
 8002248:	4603      	mov	r3, r0
 800224a:	61fb      	str	r3, [r7, #28]
	int B = 2 - A + floor(A/4);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0302 	rsb	r3, r3, #2
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f97e 	bl	8000554 <__aeabi_i2d>
 8002258:	4604      	mov	r4, r0
 800225a:	460d      	mov	r5, r1
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da00      	bge.n	8002264 <_Z5getJDiid+0x5c>
 8002262:	3303      	adds	r3, #3
 8002264:	109b      	asrs	r3, r3, #2
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ffbc 	bl	80021e4 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800226c:	ec53 2b10 	vmov	r2, r3, d0
 8002270:	4620      	mov	r0, r4
 8002272:	4629      	mov	r1, r5
 8002274:	f7fe f822 	bl	80002bc <__adddf3>
 8002278:	4603      	mov	r3, r0
 800227a:	460c      	mov	r4, r1
 800227c:	4618      	mov	r0, r3
 800227e:	4621      	mov	r1, r4
 8002280:	f7fe fc82 	bl	8000b88 <__aeabi_d2iz>
 8002284:	4603      	mov	r3, r0
 8002286:	61bb      	str	r3, [r7, #24]
	double JD = floor(365.25*(year + 4716)) + floor(30.6001*(month+1)) + day + B - 1524.5;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800228e:	330c      	adds	r3, #12
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f95f 	bl	8000554 <__aeabi_i2d>
 8002296:	a32e      	add	r3, pc, #184	; (adr r3, 8002350 <_Z5getJDiid+0x148>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe f9c4 	bl	8000628 <__aeabi_dmul>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	ec44 3b17 	vmov	d7, r3, r4
 80022a8:	eeb0 0a47 	vmov.f32	s0, s14
 80022ac:	eef0 0a67 	vmov.f32	s1, s15
 80022b0:	f002 fdf6 	bl	8004ea0 <floor>
 80022b4:	ec56 5b10 	vmov	r5, r6, d0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f949 	bl	8000554 <__aeabi_i2d>
 80022c2:	a325      	add	r3, pc, #148	; (adr r3, 8002358 <_Z5getJDiid+0x150>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe f9ae 	bl	8000628 <__aeabi_dmul>
 80022cc:	4603      	mov	r3, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	ec44 3b17 	vmov	d7, r3, r4
 80022d4:	eeb0 0a47 	vmov.f32	s0, s14
 80022d8:	eef0 0a67 	vmov.f32	s1, s15
 80022dc:	f002 fde0 	bl	8004ea0 <floor>
 80022e0:	ec54 3b10 	vmov	r3, r4, d0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	4628      	mov	r0, r5
 80022ea:	4631      	mov	r1, r6
 80022ec:	f7fd ffe6 	bl	80002bc <__adddf3>
 80022f0:	4603      	mov	r3, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	4618      	mov	r0, r3
 80022f6:	4621      	mov	r1, r4
 80022f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fc:	f7fd ffde 	bl	80002bc <__adddf3>
 8002300:	4603      	mov	r3, r0
 8002302:	460c      	mov	r4, r1
 8002304:	4625      	mov	r5, r4
 8002306:	461c      	mov	r4, r3
 8002308:	69b8      	ldr	r0, [r7, #24]
 800230a:	f7fe f923 	bl	8000554 <__aeabi_i2d>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f7fd ffd1 	bl	80002bc <__adddf3>
 800231a:	4603      	mov	r3, r0
 800231c:	460c      	mov	r4, r1
 800231e:	4618      	mov	r0, r3
 8002320:	4621      	mov	r1, r4
 8002322:	a30f      	add	r3, pc, #60	; (adr r3, 8002360 <_Z5getJDiid+0x158>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fd ffc6 	bl	80002b8 <__aeabi_dsub>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
 8002330:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return JD;
 8002334:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002338:	ec44 3b17 	vmov	d7, r3, r4
}
 800233c:	eeb0 0a47 	vmov.f32	s0, s14
 8002340:	eef0 0a67 	vmov.f32	s1, s15
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234a:	bf00      	nop
 800234c:	f3af 8000 	nop.w
 8002350:	00000000 	.word	0x00000000
 8002354:	4076d400 	.word	0x4076d400
 8002358:	27525461 	.word	0x27525461
 800235c:	403e99a0 	.word	0x403e99a0
 8002360:	00000000 	.word	0x00000000
 8002364:	4097d200 	.word	0x4097d200
 8002368:	51eb851f 	.word	0x51eb851f
 800236c:	00000000 	.word	0x00000000

08002370 <_Z14calcRefractiond>:

double calcRefraction(double elev) {
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	ed87 0b00 	vstr	d0, [r7]
	double correction;
	if (elev > 85.0) {
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <_Z14calcRefractiond+0x258>)
 8002380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002384:	f7fe fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <_Z14calcRefractiond+0x2c>
		correction = 0.0;
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800239a:	e0db      	b.n	8002554 <_Z14calcRefractiond+0x1e4>
	} else {
		double te = tan(degToRad(elev));
 800239c:	ed97 0b00 	vldr	d0, [r7]
 80023a0:	f7ff fa2a 	bl	80017f8 <_Z8degToRadd>
 80023a4:	eeb0 7a40 	vmov.f32	s14, s0
 80023a8:	eef0 7a60 	vmov.f32	s15, s1
 80023ac:	eeb0 0a47 	vmov.f32	s0, s14
 80023b0:	eef0 0a67 	vmov.f32	s1, s15
 80023b4:	f002 fe40 	bl	8005038 <tan>
 80023b8:	ed87 0b02 	vstr	d0, [r7, #8]
		if (elev > 5.0) {
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b82      	ldr	r3, [pc, #520]	; (80025cc <_Z14calcRefractiond+0x25c>)
 80023c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023c6:	f7fe fbbf 	bl	8000b48 <__aeabi_dcmpgt>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d059      	beq.n	8002484 <_Z14calcRefractiond+0x114>
			correction = 58.1 / te - 0.07 / (te*te*te) + 0.000086 / (te*te*te*te*te);
 80023d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d4:	a166      	add	r1, pc, #408	; (adr r1, 8002570 <_Z14calcRefractiond+0x200>)
 80023d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023da:	f7fe fa4f 	bl	800087c <__aeabi_ddiv>
 80023de:	4603      	mov	r3, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	4625      	mov	r5, r4
 80023e4:	461c      	mov	r4, r3
 80023e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ee:	f7fe f91b 	bl	8000628 <__aeabi_dmul>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023fe:	f7fe f913 	bl	8000628 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	a15c      	add	r1, pc, #368	; (adr r1, 8002578 <_Z14calcRefractiond+0x208>)
 8002408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800240c:	f7fe fa36 	bl	800087c <__aeabi_ddiv>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4620      	mov	r0, r4
 8002416:	4629      	mov	r1, r5
 8002418:	f7fd ff4e 	bl	80002b8 <__aeabi_dsub>
 800241c:	4603      	mov	r3, r0
 800241e:	460c      	mov	r4, r1
 8002420:	4625      	mov	r5, r4
 8002422:	461c      	mov	r4, r3
 8002424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002428:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800242c:	f7fe f8fc 	bl	8000628 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800243c:	f7fe f8f4 	bl	8000628 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800244c:	f7fe f8ec 	bl	8000628 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800245c:	f7fe f8e4 	bl	8000628 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	a146      	add	r1, pc, #280	; (adr r1, 8002580 <_Z14calcRefractiond+0x210>)
 8002466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800246a:	f7fe fa07 	bl	800087c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fd ff21 	bl	80002bc <__adddf3>
 800247a:	4603      	mov	r3, r0
 800247c:	460c      	mov	r4, r1
 800247e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002482:	e05c      	b.n	800253e <_Z14calcRefractiond+0x1ce>
		} else if (elev > -0.575) {
 8002484:	a340      	add	r3, pc, #256	; (adr r3, 8002588 <_Z14calcRefractiond+0x218>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800248e:	f7fe fb5b 	bl	8000b48 <__aeabi_dcmpgt>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d047      	beq.n	8002528 <_Z14calcRefractiond+0x1b8>
			correction = 1735.0 + elev * (-518.2 + elev * (103.4 + elev * (-12.79 + elev * 0.711) ) );
 8002498:	a33d      	add	r3, pc, #244	; (adr r3, 8002590 <_Z14calcRefractiond+0x220>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a2:	f7fe f8c1 	bl	8000628 <__aeabi_dmul>
 80024a6:	4603      	mov	r3, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	4618      	mov	r0, r3
 80024ac:	4621      	mov	r1, r4
 80024ae:	a33a      	add	r3, pc, #232	; (adr r3, 8002598 <_Z14calcRefractiond+0x228>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fd ff00 	bl	80002b8 <__aeabi_dsub>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	4618      	mov	r0, r3
 80024be:	4621      	mov	r1, r4
 80024c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c4:	f7fe f8b0 	bl	8000628 <__aeabi_dmul>
 80024c8:	4603      	mov	r3, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	4618      	mov	r0, r3
 80024ce:	4621      	mov	r1, r4
 80024d0:	a333      	add	r3, pc, #204	; (adr r3, 80025a0 <_Z14calcRefractiond+0x230>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fd fef1 	bl	80002bc <__adddf3>
 80024da:	4603      	mov	r3, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	4618      	mov	r0, r3
 80024e0:	4621      	mov	r1, r4
 80024e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024e6:	f7fe f89f 	bl	8000628 <__aeabi_dmul>
 80024ea:	4603      	mov	r3, r0
 80024ec:	460c      	mov	r4, r1
 80024ee:	4618      	mov	r0, r3
 80024f0:	4621      	mov	r1, r4
 80024f2:	a32d      	add	r3, pc, #180	; (adr r3, 80025a8 <_Z14calcRefractiond+0x238>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fd fede 	bl	80002b8 <__aeabi_dsub>
 80024fc:	4603      	mov	r3, r0
 80024fe:	460c      	mov	r4, r1
 8002500:	4618      	mov	r0, r3
 8002502:	4621      	mov	r1, r4
 8002504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002508:	f7fe f88e 	bl	8000628 <__aeabi_dmul>
 800250c:	4603      	mov	r3, r0
 800250e:	460c      	mov	r4, r1
 8002510:	4618      	mov	r0, r3
 8002512:	4621      	mov	r1, r4
 8002514:	a326      	add	r3, pc, #152	; (adr r3, 80025b0 <_Z14calcRefractiond+0x240>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f7fd fecf 	bl	80002bc <__adddf3>
 800251e:	4603      	mov	r3, r0
 8002520:	460c      	mov	r4, r1
 8002522:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002526:	e00a      	b.n	800253e <_Z14calcRefractiond+0x1ce>
		} else {
			correction = -20.774 / te;
 8002528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800252c:	a122      	add	r1, pc, #136	; (adr r1, 80025b8 <_Z14calcRefractiond+0x248>)
 800252e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002532:	f7fe f9a3 	bl	800087c <__aeabi_ddiv>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	e9c7 3404 	strd	r3, r4, [r7, #16]
		}
		correction = correction / 3600.0;
 800253e:	a320      	add	r3, pc, #128	; (adr r3, 80025c0 <_Z14calcRefractiond+0x250>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002548:	f7fe f998 	bl	800087c <__aeabi_ddiv>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	return correction;
 8002554:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002558:	ec44 3b17 	vmov	d7, r3, r4
}
 800255c:	eeb0 0a47 	vmov.f32	s0, s14
 8002560:	eef0 0a67 	vmov.f32	s1, s15
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	bf00      	nop
 800256c:	f3af 8000 	nop.w
 8002570:	cccccccd 	.word	0xcccccccd
 8002574:	404d0ccc 	.word	0x404d0ccc
 8002578:	1eb851ec 	.word	0x1eb851ec
 800257c:	3fb1eb85 	.word	0x3fb1eb85
 8002580:	bff47736 	.word	0xbff47736
 8002584:	3f168b5c 	.word	0x3f168b5c
 8002588:	66666666 	.word	0x66666666
 800258c:	bfe26666 	.word	0xbfe26666
 8002590:	126e978d 	.word	0x126e978d
 8002594:	3fe6c083 	.word	0x3fe6c083
 8002598:	e147ae14 	.word	0xe147ae14
 800259c:	4029947a 	.word	0x4029947a
 80025a0:	9999999a 	.word	0x9999999a
 80025a4:	4059d999 	.word	0x4059d999
 80025a8:	9999999a 	.word	0x9999999a
 80025ac:	40803199 	.word	0x40803199
 80025b0:	00000000 	.word	0x00000000
 80025b4:	409b1c00 	.word	0x409b1c00
 80025b8:	dd2f1aa0 	.word	0xdd2f1aa0
 80025bc:	c034c624 	.word	0xc034c624
 80025c0:	00000000 	.word	0x00000000
 80025c4:	40ac2000 	.word	0x40ac2000
 80025c8:	40554000 	.word	0x40554000
 80025cc:	40140000 	.word	0x40140000

080025d0 <_Z8calcAzElddddd>:

AzEl calcAzEl(double T, double localtime, double latitude, double longitude, double zone) {
 80025d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025d4:	b0b0      	sub	sp, #192	; 0xc0
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 80025dc:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 80025e0:	ed87 2b08 	vstr	d2, [r7, #32]
 80025e4:	ed87 3b06 	vstr	d3, [r7, #24]
 80025e8:	ed87 4b04 	vstr	d4, [r7, #16]

	double eqTime = calcEquationOfTime(T);
 80025ec:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80025f0:	f7ff fca6 	bl	8001f40 <_Z18calcEquationOfTimed>
 80025f4:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
	double theta  = calcSunDeclination(T);
 80025f8:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80025fc:	f7ff fc4c 	bl	8001e98 <_Z18calcSunDeclinationd>
 8002600:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88

	double solarTimeFix = eqTime + 4.0 * longitude - 60.0 * zone;
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <_Z8calcAzElddddd+0x204>)
 800260a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800260e:	f7fe f80b 	bl	8000628 <__aeabi_dmul>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	4618      	mov	r0, r3
 8002618:	4621      	mov	r1, r4
 800261a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800261e:	f7fd fe4d 	bl	80002bc <__adddf3>
 8002622:	4603      	mov	r3, r0
 8002624:	460c      	mov	r4, r1
 8002626:	4625      	mov	r5, r4
 8002628:	461c      	mov	r4, r3
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <_Z8calcAzElddddd+0x208>)
 8002630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002634:	f7fd fff8 	bl	8000628 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4620      	mov	r0, r4
 800263e:	4629      	mov	r1, r5
 8002640:	f7fd fe3a 	bl	80002b8 <__aeabi_dsub>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	//double earthRadVec = calcSunRadVector(T);
	double trueSolarTime = localtime + solarTimeFix;
 800264c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002650:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002654:	f7fd fe32 	bl	80002bc <__adddf3>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	while (trueSolarTime > 1440) {
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b5d      	ldr	r3, [pc, #372]	; (80027dc <_Z8calcAzElddddd+0x20c>)
 8002666:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800266a:	f7fe fa6d 	bl	8000b48 <__aeabi_dcmpgt>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <_Z8calcAzElddddd+0xbc>
		trueSolarTime -= 1440;
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	4b58      	ldr	r3, [pc, #352]	; (80027dc <_Z8calcAzElddddd+0x20c>)
 800267a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800267e:	f7fd fe1b 	bl	80002b8 <__aeabi_dsub>
 8002682:	4603      	mov	r3, r0
 8002684:	460c      	mov	r4, r1
 8002686:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	while (trueSolarTime > 1440) {
 800268a:	e7e9      	b.n	8002660 <_Z8calcAzElddddd+0x90>
	}
	double hourAngle = trueSolarTime / 4.0 - 180.0;
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <_Z8calcAzElddddd+0x204>)
 8002692:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002696:	f7fe f8f1 	bl	800087c <__aeabi_ddiv>
 800269a:	4603      	mov	r3, r0
 800269c:	460c      	mov	r4, r1
 800269e:	4618      	mov	r0, r3
 80026a0:	4621      	mov	r1, r4
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	4b4e      	ldr	r3, [pc, #312]	; (80027e0 <_Z8calcAzElddddd+0x210>)
 80026a8:	f7fd fe06 	bl	80002b8 <__aeabi_dsub>
 80026ac:	4603      	mov	r3, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	if (hourAngle < -180) {
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <_Z8calcAzElddddd+0x214>)
 80026ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026be:	f7fe fa25 	bl	8000b0c <__aeabi_dcmplt>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <_Z8calcAzElddddd+0x10e>
		hourAngle += 360.0;
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <_Z8calcAzElddddd+0x218>)
 80026ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026d2:	f7fd fdf3 	bl	80002bc <__adddf3>
 80026d6:	4603      	mov	r3, r0
 80026d8:	460c      	mov	r4, r1
 80026da:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	}
	double haRad = degToRad(hourAngle);
 80026de:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 80026e2:	f7ff f889 	bl	80017f8 <_Z8degToRadd>
 80026e6:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
	double csz = sin(degToRad(latitude)) * sin(degToRad(theta)) + cos(degToRad(latitude)) * cos(degToRad(theta)) * cos(haRad);
 80026ea:	ed97 0b08 	vldr	d0, [r7, #32]
 80026ee:	f7ff f883 	bl	80017f8 <_Z8degToRadd>
 80026f2:	eeb0 7a40 	vmov.f32	s14, s0
 80026f6:	eef0 7a60 	vmov.f32	s15, s1
 80026fa:	eeb0 0a47 	vmov.f32	s0, s14
 80026fe:	eef0 0a67 	vmov.f32	s1, s15
 8002702:	f002 fc51 	bl	8004fa8 <sin>
 8002706:	ec55 4b10 	vmov	r4, r5, d0
 800270a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800270e:	f7ff f873 	bl	80017f8 <_Z8degToRadd>
 8002712:	eeb0 7a40 	vmov.f32	s14, s0
 8002716:	eef0 7a60 	vmov.f32	s15, s1
 800271a:	eeb0 0a47 	vmov.f32	s0, s14
 800271e:	eef0 0a67 	vmov.f32	s1, s15
 8002722:	f002 fc41 	bl	8004fa8 <sin>
 8002726:	ec53 2b10 	vmov	r2, r3, d0
 800272a:	4620      	mov	r0, r4
 800272c:	4629      	mov	r1, r5
 800272e:	f7fd ff7b 	bl	8000628 <__aeabi_dmul>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	4625      	mov	r5, r4
 8002738:	461c      	mov	r4, r3
 800273a:	ed97 0b08 	vldr	d0, [r7, #32]
 800273e:	f7ff f85b 	bl	80017f8 <_Z8degToRadd>
 8002742:	eeb0 7a40 	vmov.f32	s14, s0
 8002746:	eef0 7a60 	vmov.f32	s15, s1
 800274a:	eeb0 0a47 	vmov.f32	s0, s14
 800274e:	eef0 0a67 	vmov.f32	s1, s15
 8002752:	f002 fb61 	bl	8004e18 <cos>
 8002756:	ec59 8b10 	vmov	r8, r9, d0
 800275a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800275e:	f7ff f84b 	bl	80017f8 <_Z8degToRadd>
 8002762:	eeb0 7a40 	vmov.f32	s14, s0
 8002766:	eef0 7a60 	vmov.f32	s15, s1
 800276a:	eeb0 0a47 	vmov.f32	s0, s14
 800276e:	eef0 0a67 	vmov.f32	s1, s15
 8002772:	f002 fb51 	bl	8004e18 <cos>
 8002776:	ec53 2b10 	vmov	r2, r3, d0
 800277a:	4640      	mov	r0, r8
 800277c:	4649      	mov	r1, r9
 800277e:	f7fd ff53 	bl	8000628 <__aeabi_dmul>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4690      	mov	r8, r2
 8002788:	4699      	mov	r9, r3
 800278a:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 800278e:	f002 fb43 	bl	8004e18 <cos>
 8002792:	ec53 2b10 	vmov	r2, r3, d0
 8002796:	4640      	mov	r0, r8
 8002798:	4649      	mov	r1, r9
 800279a:	f7fd ff45 	bl	8000628 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4620      	mov	r0, r4
 80027a4:	4629      	mov	r1, r5
 80027a6:	f7fd fd89 	bl	80002bc <__adddf3>
 80027aa:	4603      	mov	r3, r0
 80027ac:	460c      	mov	r4, r1
 80027ae:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	if (csz > 1.0) {
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <_Z8calcAzElddddd+0x21c>)
 80027b8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80027bc:	f7fe f9c4 	bl	8000b48 <__aeabi_dcmpgt>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d014      	beq.n	80027f0 <_Z8calcAzElddddd+0x220>
		csz = 1.0;
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	4c08      	ldr	r4, [pc, #32]	; (80027ec <_Z8calcAzElddddd+0x21c>)
 80027cc:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80027d0:	e01d      	b.n	800280e <_Z8calcAzElddddd+0x23e>
 80027d2:	bf00      	nop
 80027d4:	40100000 	.word	0x40100000
 80027d8:	404e0000 	.word	0x404e0000
 80027dc:	40968000 	.word	0x40968000
 80027e0:	40668000 	.word	0x40668000
 80027e4:	c0668000 	.word	0xc0668000
 80027e8:	40768000 	.word	0x40768000
 80027ec:	3ff00000 	.word	0x3ff00000
	} else if (csz < -1.0) {
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4bb8      	ldr	r3, [pc, #736]	; (8002ad8 <_Z8calcAzElddddd+0x508>)
 80027f6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80027fa:	f7fe f987 	bl	8000b0c <__aeabi_dcmplt>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <_Z8calcAzElddddd+0x23e>
		csz = -1.0;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	4cb3      	ldr	r4, [pc, #716]	; (8002ad8 <_Z8calcAzElddddd+0x508>)
 800280a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	}
	double zenith = radToDeg(acos(csz));
 800280e:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8002812:	f002 fc41 	bl	8005098 <acos>
 8002816:	eeb0 7a40 	vmov.f32	s14, s0
 800281a:	eef0 7a60 	vmov.f32	s15, s1
 800281e:	eeb0 0a47 	vmov.f32	s0, s14
 8002822:	eef0 0a67 	vmov.f32	s1, s15
 8002826:	f7fe ffbf 	bl	80017a8 <_Z8radToDegd>
 800282a:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
	double azDenom = ( cos(degToRad(latitude)) * sin(degToRad(zenith)) );
 800282e:	ed97 0b08 	vldr	d0, [r7, #32]
 8002832:	f7fe ffe1 	bl	80017f8 <_Z8degToRadd>
 8002836:	eeb0 7a40 	vmov.f32	s14, s0
 800283a:	eef0 7a60 	vmov.f32	s15, s1
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
 8002842:	eef0 0a67 	vmov.f32	s1, s15
 8002846:	f002 fae7 	bl	8004e18 <cos>
 800284a:	ec55 4b10 	vmov	r4, r5, d0
 800284e:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8002852:	f7fe ffd1 	bl	80017f8 <_Z8degToRadd>
 8002856:	eeb0 7a40 	vmov.f32	s14, s0
 800285a:	eef0 7a60 	vmov.f32	s15, s1
 800285e:	eeb0 0a47 	vmov.f32	s0, s14
 8002862:	eef0 0a67 	vmov.f32	s1, s15
 8002866:	f002 fb9f 	bl	8004fa8 <sin>
 800286a:	ec53 2b10 	vmov	r2, r3, d0
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fed9 	bl	8000628 <__aeabi_dmul>
 8002876:	4603      	mov	r3, r0
 8002878:	460c      	mov	r4, r1
 800287a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	double azimuth;
	if ( abs(azDenom) > 0.001) {
 800287e:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8002882:	f7fe ff51 	bl	8001728 <_ZSt3absd>
 8002886:	ec51 0b10 	vmov	r0, r1, d0
 800288a:	2301      	movs	r3, #1
 800288c:	461c      	mov	r4, r3
 800288e:	a390      	add	r3, pc, #576	; (adr r3, 8002ad0 <_Z8calcAzElddddd+0x500>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fe f958 	bl	8000b48 <__aeabi_dcmpgt>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <_Z8calcAzElddddd+0x2d2>
 800289e:	2300      	movs	r3, #0
 80028a0:	461c      	mov	r4, r3
 80028a2:	b2e3      	uxtb	r3, r4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a4 	beq.w	80029f2 <_Z8calcAzElddddd+0x422>
		double azRad = (( sin(degToRad(latitude)) * cos(degToRad(zenith)) ) - sin(degToRad(theta))) / azDenom;
 80028aa:	ed97 0b08 	vldr	d0, [r7, #32]
 80028ae:	f7fe ffa3 	bl	80017f8 <_Z8degToRadd>
 80028b2:	eeb0 7a40 	vmov.f32	s14, s0
 80028b6:	eef0 7a60 	vmov.f32	s15, s1
 80028ba:	eeb0 0a47 	vmov.f32	s0, s14
 80028be:	eef0 0a67 	vmov.f32	s1, s15
 80028c2:	f002 fb71 	bl	8004fa8 <sin>
 80028c6:	ec55 4b10 	vmov	r4, r5, d0
 80028ca:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 80028ce:	f7fe ff93 	bl	80017f8 <_Z8degToRadd>
 80028d2:	eeb0 7a40 	vmov.f32	s14, s0
 80028d6:	eef0 7a60 	vmov.f32	s15, s1
 80028da:	eeb0 0a47 	vmov.f32	s0, s14
 80028de:	eef0 0a67 	vmov.f32	s1, s15
 80028e2:	f002 fa99 	bl	8004e18 <cos>
 80028e6:	ec53 2b10 	vmov	r2, r3, d0
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fe9b 	bl	8000628 <__aeabi_dmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	4625      	mov	r5, r4
 80028f8:	461c      	mov	r4, r3
 80028fa:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 80028fe:	f7fe ff7b 	bl	80017f8 <_Z8degToRadd>
 8002902:	eeb0 7a40 	vmov.f32	s14, s0
 8002906:	eef0 7a60 	vmov.f32	s15, s1
 800290a:	eeb0 0a47 	vmov.f32	s0, s14
 800290e:	eef0 0a67 	vmov.f32	s1, s15
 8002912:	f002 fb49 	bl	8004fa8 <sin>
 8002916:	ec53 2b10 	vmov	r2, r3, d0
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fccb 	bl	80002b8 <__aeabi_dsub>
 8002922:	4603      	mov	r3, r0
 8002924:	460c      	mov	r4, r1
 8002926:	4618      	mov	r0, r3
 8002928:	4621      	mov	r1, r4
 800292a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800292e:	f7fd ffa5 	bl	800087c <__aeabi_ddiv>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		if (abs(azRad) > 1.0) {
 800293a:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 800293e:	f7fe fef3 	bl	8001728 <_ZSt3absd>
 8002942:	ec51 0b10 	vmov	r0, r1, d0
 8002946:	2301      	movs	r3, #1
 8002948:	461c      	mov	r4, r3
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <_Z8calcAzElddddd+0x50c>)
 8002950:	f7fe f8fa 	bl	8000b48 <__aeabi_dcmpgt>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <_Z8calcAzElddddd+0x38e>
 800295a:	2300      	movs	r3, #0
 800295c:	461c      	mov	r4, r3
 800295e:	b2e3      	uxtb	r3, r4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <_Z8calcAzElddddd+0x3c0>
			if (azRad < 0) {
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002970:	f7fe f8cc 	bl	8000b0c <__aeabi_dcmplt>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <_Z8calcAzElddddd+0x3b6>
				azRad = -1.0;
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	4c56      	ldr	r4, [pc, #344]	; (8002ad8 <_Z8calcAzElddddd+0x508>)
 8002980:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8002984:	e004      	b.n	8002990 <_Z8calcAzElddddd+0x3c0>
			} else {
				azRad = 1.0;
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	4c54      	ldr	r4, [pc, #336]	; (8002adc <_Z8calcAzElddddd+0x50c>)
 800298c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			}
		}
		azimuth = 180.0 - radToDeg(acos(azRad));
 8002990:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 8002994:	f002 fb80 	bl	8005098 <acos>
 8002998:	eeb0 7a40 	vmov.f32	s14, s0
 800299c:	eef0 7a60 	vmov.f32	s15, s1
 80029a0:	eeb0 0a47 	vmov.f32	s0, s14
 80029a4:	eef0 0a67 	vmov.f32	s1, s15
 80029a8:	f7fe fefe 	bl	80017a8 <_Z8radToDegd>
 80029ac:	ec54 3b10 	vmov	r3, r4, d0
 80029b0:	461a      	mov	r2, r3
 80029b2:	4623      	mov	r3, r4
 80029b4:	f04f 0000 	mov.w	r0, #0
 80029b8:	4949      	ldr	r1, [pc, #292]	; (8002ae0 <_Z8calcAzElddddd+0x510>)
 80029ba:	f7fd fc7d 	bl	80002b8 <__aeabi_dsub>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		if (hourAngle > 0.0) {
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029d2:	f7fe f8b9 	bl	8000b48 <__aeabi_dcmpgt>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d021      	beq.n	8002a20 <_Z8calcAzElddddd+0x450>
			azimuth = -azimuth;
 80029dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80029f0:	e016      	b.n	8002a20 <_Z8calcAzElddddd+0x450>
		}
	} else {
		if (latitude > 0.0) {
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029fe:	f7fe f8a3 	bl	8000b48 <__aeabi_dcmpgt>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <_Z8calcAzElddddd+0x444>
			azimuth = 180.0;
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	4c34      	ldr	r4, [pc, #208]	; (8002ae0 <_Z8calcAzElddddd+0x510>)
 8002a0e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8002a12:	e005      	b.n	8002a20 <_Z8calcAzElddddd+0x450>
		} else {
			azimuth = 0.0;
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	f04f 0400 	mov.w	r4, #0
 8002a1c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		}
	}
	if (azimuth < 0.0) {
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002a2c:	f7fe f86e 	bl	8000b0c <__aeabi_dcmplt>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <_Z8calcAzElddddd+0x47c>
		azimuth += 360.0;
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <_Z8calcAzElddddd+0x514>)
 8002a3c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002a40:	f7fd fc3c 	bl	80002bc <__adddf3>
 8002a44:	4603      	mov	r3, r0
 8002a46:	460c      	mov	r4, r1
 8002a48:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	}
	double exoatmElevation = 90.0 - zenith;
 8002a4c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a50:	f04f 0000 	mov.w	r0, #0
 8002a54:	4924      	ldr	r1, [pc, #144]	; (8002ae8 <_Z8calcAzElddddd+0x518>)
 8002a56:	f7fd fc2f 	bl	80002b8 <__aeabi_dsub>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	460c      	mov	r4, r1
 8002a5e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	// Atmospheric Refraction correction
	double refractionCorrection = calcRefraction(exoatmElevation);
 8002a62:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8002a66:	f7ff fc83 	bl	8002370 <_Z14calcRefractiond>
 8002a6a:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58

	double solarZen = zenith - refractionCorrection;
 8002a6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a72:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002a76:	f7fd fc1f 	bl	80002b8 <__aeabi_dsub>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double elevation = 90.0 - solarZen;
 8002a82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a86:	f04f 0000 	mov.w	r0, #0
 8002a8a:	4917      	ldr	r1, [pc, #92]	; (8002ae8 <_Z8calcAzElddddd+0x518>)
 8002a8c:	f7fd fc14 	bl	80002b8 <__aeabi_dsub>
 8002a90:	4603      	mov	r3, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	return AzEl{azimuth, elevation};
 8002a98:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002a9c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8002aa0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002aa4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8002aa8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002aac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ab0:	ec42 1b16 	vmov	d6, r1, r2
 8002ab4:	ec44 3b17 	vmov	d7, r3, r4
}
 8002ab8:	eeb0 0a46 	vmov.f32	s0, s12
 8002abc:	eef0 0a66 	vmov.f32	s1, s13
 8002ac0:	eeb0 1a47 	vmov.f32	s2, s14
 8002ac4:	eef0 1a67 	vmov.f32	s3, s15
 8002ac8:	37c0      	adds	r7, #192	; 0xc0
 8002aca:	46bd      	mov	sp, r7
 8002acc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ad0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ad4:	3f50624d 	.word	0x3f50624d
 8002ad8:	bff00000 	.word	0xbff00000
 8002adc:	3ff00000 	.word	0x3ff00000
 8002ae0:	40668000 	.word	0x40668000
 8002ae4:	40768000 	.word	0x40768000
 8002ae8:	40568000 	.word	0x40568000

08002aec <_Z14calculateSolar2tm3Geo>:

//--------------------------------------------------------------
// Do the calculations and update the result text boxes


AzEl calculateSolar(tm tms, Geo geo) {
 8002aec:	b084      	sub	sp, #16
 8002aee:	b5b0      	push	{r4, r5, r7, lr}
 8002af0:	b096      	sub	sp, #88	; 0x58
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002afc:	eeb0 5a40 	vmov.f32	s10, s0
 8002b00:	eef0 5a60 	vmov.f32	s11, s1
 8002b04:	eeb0 6a41 	vmov.f32	s12, s2
 8002b08:	eef0 6a61 	vmov.f32	s13, s3
 8002b0c:	eeb0 7a42 	vmov.f32	s14, s4
 8002b10:	eef0 7a62 	vmov.f32	s15, s5
 8002b14:	ed87 5b04 	vstr	d5, [r7, #16]
 8002b18:	ed87 6b06 	vstr	d6, [r7, #24]
 8002b1c:	ed87 7b08 	vstr	d7, [r7, #32]

	double time_local =  tms.tm_hour*60 + tms.tm_min + tms.tm_sec/60.0; //local time in minutes
 8002b20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2e:	4413      	add	r3, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fd0f 	bl	8000554 <__aeabi_i2d>
 8002b36:	4604      	mov	r4, r0
 8002b38:	460d      	mov	r5, r1
 8002b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fd09 	bl	8000554 <__aeabi_i2d>
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <_Z14calculateSolar2tm3Geo+0x164>)
 8002b48:	f7fd fe98 	bl	800087c <__aeabi_ddiv>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fbb2 	bl	80002bc <__adddf3>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	double jday = getJD(tms.tm_year+1900, tms.tm_mon+1, tms.tm_mday);
 8002b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b62:	f203 746c 	addw	r4, r3, #1900	; 0x76c
 8002b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b68:	1c5d      	adds	r5, r3, #1
 8002b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fcf1 	bl	8000554 <__aeabi_i2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	ec43 2b10 	vmov	d0, r2, r3
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7ff fb43 	bl	8002208 <_Z5getJDiid>
 8002b82:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	double total = jday + time_local/1440.0 - geo.tz/24.0;
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <_Z14calculateSolar2tm3Geo+0x168>)
 8002b8c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b90:	f7fd fe74 	bl	800087c <__aeabi_ddiv>
 8002b94:	4603      	mov	r3, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba0:	f7fd fb8c 	bl	80002bc <__adddf3>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	4625      	mov	r5, r4
 8002baa:	461c      	mov	r4, r3
 8002bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <_Z14calculateSolar2tm3Geo+0x16c>)
 8002bb6:	f7fd fe61 	bl	800087c <__aeabi_ddiv>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f7fd fb79 	bl	80002b8 <__aeabi_dsub>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460c      	mov	r4, r1
 8002bca:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	double T = calcTimeJulianCent(total);
 8002bce:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002bd2:	f7fe fdbd 	bl	8001750 <_Z18calcTimeJulianCentd>
 8002bd6:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	return calcAzEl(T, time_local, geo.lat, geo.lon, geo.tz);
 8002bda:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bde:	ed97 6b08 	vldr	d6, [r7, #32]
 8002be2:	ed97 5b04 	vldr	d5, [r7, #16]
 8002be6:	eeb0 4a45 	vmov.f32	s8, s10
 8002bea:	eef0 4a65 	vmov.f32	s9, s11
 8002bee:	eeb0 3a46 	vmov.f32	s6, s12
 8002bf2:	eef0 3a66 	vmov.f32	s7, s13
 8002bf6:	eeb0 2a47 	vmov.f32	s4, s14
 8002bfa:	eef0 2a67 	vmov.f32	s5, s15
 8002bfe:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002c02:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002c06:	f7ff fce3 	bl	80025d0 <_Z8calcAzElddddd>
 8002c0a:	eeb0 6a40 	vmov.f32	s12, s0
 8002c0e:	eef0 6a60 	vmov.f32	s13, s1
 8002c12:	eeb0 7a41 	vmov.f32	s14, s2
 8002c16:	eef0 7a61 	vmov.f32	s15, s3
 8002c1a:	ed87 6b0a 	vstr	d6, [r7, #40]	; 0x28
 8002c1e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 8002c22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002c26:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002c2a:	ec42 1b16 	vmov	d6, r1, r2
 8002c2e:	ec44 3b17 	vmov	d7, r3, r4
	//SunRiseSet rise = calcSunriseSet(1, jday, geo.lat, geo.lon, geo.tz);
	//SunRiseSet set  = calcSunriseSet(0, jday, geo.lat, geo.lon, geo.tz);

	//double eqTime = calcEquationOfTime(T);
	//double theta  = calcSunDeclination(T);
}
 8002c32:	eeb0 0a46 	vmov.f32	s0, s12
 8002c36:	eef0 0a66 	vmov.f32	s1, s13
 8002c3a:	eeb0 1a47 	vmov.f32	s2, s14
 8002c3e:	eef0 1a67 	vmov.f32	s3, s15
 8002c42:	3758      	adds	r7, #88	; 0x58
 8002c44:	46bd      	mov	sp, r7
 8002c46:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002c4a:	b004      	add	sp, #16
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	404e0000 	.word	0x404e0000
 8002c54:	40968000 	.word	0x40968000
 8002c58:	40380000 	.word	0x40380000

08002c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c60:	f000 fafc 	bl	800325c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c64:	f000 f810 	bl	8002c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c68:	f000 f928 	bl	8002ebc <MX_GPIO_Init>
  MX_TIM1_Init();
 8002c6c:	f000 f8d4 	bl	8002e18 <MX_TIM1_Init>
  MX_RTC_Init();
 8002c70:	f000 f88e 	bl	8002d90 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1); //enable steppers
 8002c74:	4803      	ldr	r0, [pc, #12]	; (8002c84 <main+0x28>)
 8002c76:	f001 fd22 	bl	80046be <HAL_TIM_Base_Start_IT>
  mainsetup();
 8002c7a:	f7fe fbe1 	bl	8001440 <mainsetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainloop();
 8002c7e:	f7fe fc09 	bl	8001494 <mainloop>
  {
 8002c82:	e7fc      	b.n	8002c7e <main+0x22>
 8002c84:	20000264 	.word	0x20000264

08002c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b098      	sub	sp, #96	; 0x60
 8002c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c92:	2230      	movs	r2, #48	; 0x30
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fa92 	bl	80071c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <SystemClock_Config+0x100>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a30      	ldr	r2, [pc, #192]	; (8002d88 <SystemClock_Config+0x100>)
 8002cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <SystemClock_Config+0x100>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <SystemClock_Config+0x104>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ce4:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <SystemClock_Config+0x104>)
 8002ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <SystemClock_Config+0x104>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002cf8:	2306      	movs	r3, #6
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d00:	2301      	movs	r3, #1
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d04:	2310      	movs	r3, #16
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d10:	2308      	movs	r3, #8
 8002d12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002d14:	2354      	movs	r3, #84	; 0x54
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d1c:	2307      	movs	r3, #7
 8002d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fdd3 	bl	80038d0 <HAL_RCC_OscConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002d30:	f000 f980 	bl	8003034 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d34:	230f      	movs	r3, #15
 8002d36:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d4a:	f107 031c 	add.w	r3, r7, #28
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 f82d 	bl	8003db0 <HAL_RCC_ClockConfig>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002d5c:	f000 f96a 	bl	8003034 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d60:	2302      	movs	r3, #2
 8002d62:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d68:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f9dc 	bl	800412c <HAL_RCCEx_PeriphCLKConfig>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002d7a:	f000 f95b 	bl	8003034 <Error_Handler>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3760      	adds	r7, #96	; 0x60
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40007000 	.word	0x40007000

08002d90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002da4:	2300      	movs	r3, #0
 8002da6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <MX_RTC_Init+0x80>)
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <MX_RTC_Init+0x84>)
 8002dac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <MX_RTC_Init+0x80>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <MX_RTC_Init+0x80>)
 8002db6:	227f      	movs	r2, #127	; 0x7f
 8002db8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <MX_RTC_Init+0x80>)
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <MX_RTC_Init+0x80>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <MX_RTC_Init+0x80>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <MX_RTC_Init+0x80>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dd2:	480f      	ldr	r0, [pc, #60]	; (8002e10 <MX_RTC_Init+0x80>)
 8002dd4:	f001 fa98 	bl	8004308 <HAL_RTC_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002dde:	f000 f929 	bl	8003034 <Error_Handler>
  	  //set to gmt time
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 8002de2:	2313      	movs	r3, #19
 8002de4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 2;
 8002de6:	2302      	movs	r3, #2
 8002de8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 8002dea:	231e      	movs	r3, #30
 8002dec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002df6:	2306      	movs	r3, #6
 8002df8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 30;
 8002dfe:	231e      	movs	r3, #30
 8002e00:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8002e02:	2315      	movs	r3, #21
 8002e04:	70fb      	strb	r3, [r7, #3]
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200002a4 	.word	0x200002a4
 8002e14:	40002800 	.word	0x40002800

08002e18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e36:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <MX_TIM1_Init+0xa0>)
 8002e38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1282;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e3c:	f240 5202 	movw	r2, #1282	; 0x502
 8002e40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002e42:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e44:	2210      	movs	r2, #16
 8002e46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e62:	4814      	ldr	r0, [pc, #80]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e64:	f001 fc00 	bl	8004668 <HAL_TIM_Base_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002e6e:	f000 f8e1 	bl	8003034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e78:	f107 0308 	add.w	r3, r7, #8
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e80:	f001 fd49 	bl	8004916 <HAL_TIM_ConfigClockSource>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002e8a:	f000 f8d3 	bl	8003034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e96:	463b      	mov	r3, r7
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <MX_TIM1_Init+0x9c>)
 8002e9c:	f001 ff34 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002ea6:	f000 f8c5 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000264 	.word	0x20000264
 8002eb8:	40010000 	.word	0x40010000

08002ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
 8002ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	4b52      	ldr	r3, [pc, #328]	; (8003020 <MX_GPIO_Init+0x164>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a51      	ldr	r2, [pc, #324]	; (8003020 <MX_GPIO_Init+0x164>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <MX_GPIO_Init+0x164>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <MX_GPIO_Init+0x164>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a4a      	ldr	r2, [pc, #296]	; (8003020 <MX_GPIO_Init+0x164>)
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b48      	ldr	r3, [pc, #288]	; (8003020 <MX_GPIO_Init+0x164>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <MX_GPIO_Init+0x164>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a43      	ldr	r2, [pc, #268]	; (8003020 <MX_GPIO_Init+0x164>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <MX_GPIO_Init+0x164>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <MX_GPIO_Init+0x164>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <MX_GPIO_Init+0x164>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <MX_GPIO_Init+0x164>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 8002f42:	2200      	movs	r2, #0
 8002f44:	f240 411f 	movw	r1, #1055	; 0x41f
 8002f48:	4836      	ldr	r0, [pc, #216]	; (8003024 <MX_GPIO_Init+0x168>)
 8002f4a:	f000 fc8d 	bl	8003868 <HAL_GPIO_WritePin>
                          |ElEna_Pin|AzEna_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f54:	4b34      	ldr	r3, [pc, #208]	; (8003028 <MX_GPIO_Init+0x16c>)
 8002f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4619      	mov	r1, r3
 8002f62:	4832      	ldr	r0, [pc, #200]	; (800302c <MX_GPIO_Init+0x170>)
 8002f64:	f000 fafe 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ElPul_Pin ElDir_Pin AzDir_Pin AzPul_Pin
                           ElEna_Pin AzEna_Pin */
  GPIO_InitStruct.Pin = ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 8002f68:	f240 431f 	movw	r3, #1055	; 0x41f
 8002f6c:	617b      	str	r3, [r7, #20]
                          |ElEna_Pin|AzEna_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4828      	ldr	r0, [pc, #160]	; (8003024 <MX_GPIO_Init+0x168>)
 8002f82:	f000 faef 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : ElYellow_Pin ElGreen_Pin ElPurple_Pin ElWhite_Pin
                           ElGrey_Pin AzGreen_Pin AzYellow_Pin */
  GPIO_InitStruct.Pin = ElYellow_Pin|ElGreen_Pin|ElPurple_Pin|ElWhite_Pin
 8002f86:	f44f 53df 	mov.w	r3, #7136	; 0x1be0
 8002f8a:	617b      	str	r3, [r7, #20]
                          |ElGrey_Pin|AzGreen_Pin|AzYellow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4822      	ldr	r0, [pc, #136]	; (8003024 <MX_GPIO_Init+0x168>)
 8002f9c:	f000 fae2 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : AzOrange_Pin AzRed_Pin AzBlack_Pin ElBlack_Pin */
  GPIO_InitStruct.Pin = AzOrange_Pin|AzRed_Pin|AzBlack_Pin|ElBlack_Pin;
 8002fa0:	f44f 7358 	mov.w	r3, #864	; 0x360
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	481d      	ldr	r0, [pc, #116]	; (800302c <MX_GPIO_Init+0x170>)
 8002fb6:	f000 fad5 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : AzWhite_Pin AzGrey_Pin AzPurple_Pin AzRedWhite_Pin
                           AzBlackWhite_Pin ElBlackWhite_Pin ElRedWhite_Pin ElRed_Pin
                           ElOrange_Pin */
  GPIO_InitStruct.Pin = AzWhite_Pin|AzGrey_Pin|AzPurple_Pin|AzRedWhite_Pin
 8002fba:	f247 3336 	movw	r3, #29494	; 0x7336
 8002fbe:	617b      	str	r3, [r7, #20]
                          |AzBlackWhite_Pin|ElBlackWhite_Pin|ElRedWhite_Pin|ElRed_Pin
                          |ElOrange_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4818      	ldr	r0, [pc, #96]	; (8003030 <MX_GPIO_Init+0x174>)
 8002fd0:	f000 fac8 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SCL_D6_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_D6_Pin;
 8002fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fda:	2312      	movs	r3, #18
 8002fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2C2_SCL_D6_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	4619      	mov	r1, r3
 8002ff0:	480f      	ldr	r0, [pc, #60]	; (8003030 <MX_GPIO_Init+0x174>)
 8002ff2:	f000 fab7 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SDA_D3_Pin */
  GPIO_InitStruct.Pin = I2C2_SDA_D3_Pin;
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ffa:	2312      	movs	r3, #18
 8002ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003006:	2309      	movs	r3, #9
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2C2_SDA_D3_GPIO_Port, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	4807      	ldr	r0, [pc, #28]	; (8003030 <MX_GPIO_Init+0x174>)
 8003012:	f000 faa7 	bl	8003564 <HAL_GPIO_Init>

}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40020000 	.word	0x40020000
 8003028:	10210000 	.word	0x10210000
 800302c:	40020800 	.word	0x40020800
 8003030:	40020400 	.word	0x40020400

08003034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800303a:	e7fe      	b.n	800303a <Error_Handler+0x6>

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_MspInit+0x4c>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_MspInit+0x4c>)
 800304c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003050:	6453      	str	r3, [r2, #68]	; 0x44
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_MspInit+0x4c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_MspInit+0x4c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <HAL_MspInit+0x4c>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_MspInit+0x4c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800307a:	2007      	movs	r0, #7
 800307c:	f000 fa30 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800

0800308c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <HAL_RTC_MspInit+0x24>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d102      	bne.n	80030a4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RTC_MspInit+0x28>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40002800 	.word	0x40002800
 80030b4:	42470e3c 	.word	0x42470e3c

080030b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_TIM_Base_MspInit+0x48>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d115      	bne.n	80030f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_TIM_Base_MspInit+0x4c>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <HAL_TIM_Base_MspInit+0x4c>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_TIM_Base_MspInit+0x4c>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2019      	movs	r0, #25
 80030ec:	f000 fa03 	bl	80034f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80030f0:	2019      	movs	r0, #25
 80030f2:	f000 fa1c 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	40023800 	.word	0x40023800

08003108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800310c:	e7fe      	b.n	800310c <NMI_Handler+0x4>

0800310e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <HardFault_Handler+0x4>

08003114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <MemManage_Handler+0x4>

0800311a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311e:	e7fe      	b.n	800311e <BusFault_Handler+0x4>

08003120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003124:	e7fe      	b.n	8003124 <UsageFault_Handler+0x4>

08003126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003154:	f000 f8d4 	bl	8003300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}

0800315c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003162:	f001 fad0 	bl	8004706 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000264 	.word	0x20000264

08003170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <_sbrk+0x5c>)
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <_sbrk+0x60>)
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <_sbrk+0x64>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <_sbrk+0x64>)
 800318e:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <_sbrk+0x68>)
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <_sbrk+0x64>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	429a      	cmp	r2, r3
 800319e:	d207      	bcs.n	80031b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a0:	f003 ffdc 	bl	800715c <__errno>
 80031a4:	4602      	mov	r2, r0
 80031a6:	230c      	movs	r3, #12
 80031a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e009      	b.n	80031c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <_sbrk+0x64>)
 80031c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20018000 	.word	0x20018000
 80031d0:	00000400 	.word	0x00000400
 80031d4:	2000035c 	.word	0x2000035c
 80031d8:	20000398 	.word	0x20000398

080031dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <SystemInit+0x28>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	4a07      	ldr	r2, [pc, #28]	; (8003204 <SystemInit+0x28>)
 80031e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <SystemInit+0x28>)
 80031f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031f6:	609a      	str	r2, [r3, #8]
#endif
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800320c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800320e:	e003      	b.n	8003218 <LoopCopyDataInit>

08003210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003216:	3104      	adds	r1, #4

08003218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003218:	480b      	ldr	r0, [pc, #44]	; (8003248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800321c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800321e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003220:	d3f6      	bcc.n	8003210 <CopyDataInit>
  ldr  r2, =_sbss
 8003222:	4a0b      	ldr	r2, [pc, #44]	; (8003250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003224:	e002      	b.n	800322c <LoopFillZerobss>

08003226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003228:	f842 3b04 	str.w	r3, [r2], #4

0800322c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800322e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003230:	d3f9      	bcc.n	8003226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003232:	f7ff ffd3 	bl	80031dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003236:	f003 ff97 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323a:	f7ff fd0f 	bl	8002c5c <main>
  bx  lr    
 800323e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003240:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003244:	08008d78 	.word	0x08008d78
  ldr  r0, =_sdata
 8003248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800324c:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8003250:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8003254:	20000394 	.word	0x20000394

08003258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003258:	e7fe      	b.n	8003258 <ADC_IRQHandler>
	...

0800325c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_Init+0x40>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_Init+0x40>)
 8003266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_Init+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <HAL_Init+0x40>)
 8003272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_Init+0x40>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003284:	2003      	movs	r0, #3
 8003286:	f000 f92b 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800328a:	2000      	movs	r0, #0
 800328c:	f000 f808 	bl	80032a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003290:	f7ff fed4 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023c00 	.word	0x40023c00

080032a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_InitTick+0x54>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_InitTick+0x58>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f943 	bl	800354a <HAL_SYSTICK_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00e      	b.n	80032ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d80a      	bhi.n	80032ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	f000 f90b 	bl	80034f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e0:	4a06      	ldr	r2, [pc, #24]	; (80032fc <HAL_InitTick+0x5c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000004 	.word	0x20000004
 80032f8:	2000000c 	.word	0x2000000c
 80032fc:	20000008 	.word	0x20000008

08003300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_IncTick+0x20>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_IncTick+0x24>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_IncTick+0x24>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	2000000c 	.word	0x2000000c
 8003324:	2000038c 	.word	0x2000038c

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_GetTick+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	2000038c 	.word	0x2000038c

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4907      	ldr	r1, [pc, #28]	; (80033dc <__NVIC_EnableIRQ+0x38>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ac:	d301      	bcc.n	80034b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <SysTick_Config+0x40>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ba:	210f      	movs	r1, #15
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f7ff ff8e 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <SysTick_Config+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <SysTick_Config+0x40>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff29 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff3e 	bl	8003388 <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff8e 	bl	8003434 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5d 	bl	80033e0 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff31 	bl	80033a4 <__NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffa2 	bl	800349c <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	e159      	b.n	8003834 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	f040 8148 	bne.w	800382e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d00b      	beq.n	80035be <HAL_GPIO_Init+0x5a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d007      	beq.n	80035be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035b2:	2b11      	cmp	r3, #17
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d130      	bne.n	8003620 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035f4:	2201      	movs	r2, #1
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 0201 	and.w	r2, r3, #1
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0xfc>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b12      	cmp	r3, #18
 800365e:	d123      	bne.n	80036a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	08da      	lsrs	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3208      	adds	r2, #8
 8003668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0203 	and.w	r2, r3, #3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a2 	beq.w	800382e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b56      	ldr	r3, [pc, #344]	; (8003848 <HAL_GPIO_Init+0x2e4>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a55      	ldr	r2, [pc, #340]	; (8003848 <HAL_GPIO_Init+0x2e4>)
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_GPIO_Init+0x2e4>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003706:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_GPIO_Init+0x2e8>)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	220f      	movs	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a48      	ldr	r2, [pc, #288]	; (8003850 <HAL_GPIO_Init+0x2ec>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d019      	beq.n	8003766 <HAL_GPIO_Init+0x202>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a47      	ldr	r2, [pc, #284]	; (8003854 <HAL_GPIO_Init+0x2f0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_GPIO_Init+0x1fe>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a46      	ldr	r2, [pc, #280]	; (8003858 <HAL_GPIO_Init+0x2f4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00d      	beq.n	800375e <HAL_GPIO_Init+0x1fa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a45      	ldr	r2, [pc, #276]	; (800385c <HAL_GPIO_Init+0x2f8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <HAL_GPIO_Init+0x1f6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <HAL_GPIO_Init+0x2fc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d101      	bne.n	8003756 <HAL_GPIO_Init+0x1f2>
 8003752:	2304      	movs	r3, #4
 8003754:	e008      	b.n	8003768 <HAL_GPIO_Init+0x204>
 8003756:	2307      	movs	r3, #7
 8003758:	e006      	b.n	8003768 <HAL_GPIO_Init+0x204>
 800375a:	2303      	movs	r3, #3
 800375c:	e004      	b.n	8003768 <HAL_GPIO_Init+0x204>
 800375e:	2302      	movs	r3, #2
 8003760:	e002      	b.n	8003768 <HAL_GPIO_Init+0x204>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_GPIO_Init+0x204>
 8003766:	2300      	movs	r3, #0
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	f002 0203 	and.w	r2, r2, #3
 800376e:	0092      	lsls	r2, r2, #2
 8003770:	4093      	lsls	r3, r2
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003778:	4934      	ldr	r1, [pc, #208]	; (800384c <HAL_GPIO_Init+0x2e8>)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	3302      	adds	r3, #2
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003786:	4b37      	ldr	r3, [pc, #220]	; (8003864 <HAL_GPIO_Init+0x300>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037aa:	4a2e      	ldr	r2, [pc, #184]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037b0:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_GPIO_Init+0x300>)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <HAL_GPIO_Init+0x300>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <HAL_GPIO_Init+0x300>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3301      	adds	r3, #1
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	f67f aea2 	bls.w	8003580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800383c:	bf00      	nop
 800383e:	3724      	adds	r7, #36	; 0x24
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40023800 	.word	0x40023800
 800384c:	40013800 	.word	0x40013800
 8003850:	40020000 	.word	0x40020000
 8003854:	40020400 	.word	0x40020400
 8003858:	40020800 	.word	0x40020800
 800385c:	40020c00 	.word	0x40020c00
 8003860:	40021000 	.word	0x40021000
 8003864:	40013c00 	.word	0x40013c00

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003884:	e003      	b.n	800388e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	041a      	lsls	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	619a      	str	r2, [r3, #24]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	887b      	ldrh	r3, [r7, #2]
 80038ac:	401a      	ands	r2, r3
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d104      	bne.n	80038be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	041a      	lsls	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e25b      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d075      	beq.n	80039da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d00c      	beq.n	8003914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4ba0      	ldr	r3, [pc, #640]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d112      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003906:	4b9d      	ldr	r3, [pc, #628]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b99      	ldr	r3, [pc, #612]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <HAL_RCC_OscConfig+0x108>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d157      	bne.n	80039d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e236      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x74>
 8003936:	4b91      	ldr	r3, [pc, #580]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b8b      	ldr	r3, [pc, #556]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a8a      	ldr	r2, [pc, #552]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a87      	ldr	r2, [pc, #540]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003968:	4b84      	ldr	r3, [pc, #528]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a83      	ldr	r2, [pc, #524]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a80      	ldr	r2, [pc, #512]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7ff fcce 	bl	8003328 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7ff fcca 	bl	8003328 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1fb      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xc0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff fcba 	bl	8003328 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7ff fcb6 	bl	8003328 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1e7      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0xe8>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d063      	beq.n	8003aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b62      	ldr	r3, [pc, #392]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d11c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d116      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e1bb      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a22:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4952      	ldr	r1, [pc, #328]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a36:	e03a      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_RCC_OscConfig+0x2b0>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7ff fc6f 	bl	8003328 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7ff fc6b 	bl	8003328 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e19c      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	4b46      	ldr	r3, [pc, #280]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4940      	ldr	r1, [pc, #256]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]
 8003a80:	e015      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCC_OscConfig+0x2b0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7ff fc4e 	bl	8003328 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a90:	f7ff fc4a 	bl	8003328 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e17b      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d030      	beq.n	8003b1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <HAL_RCC_OscConfig+0x2b4>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7ff fc2e 	bl	8003328 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7ff fc2a 	bl	8003328 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e15b      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x200>
 8003aee:	e015      	b.n	8003b1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_OscConfig+0x2b4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7ff fc17 	bl	8003328 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7ff fc13 	bl	8003328 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e144      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a0 	beq.w	8003c6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7ff fbd9 	bl	8003328 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e011      	b.n	8003b9e <HAL_RCC_OscConfig+0x2ce>
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470000 	.word	0x42470000
 8003b84:	42470e80 	.word	0x42470e80
 8003b88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7ff fbcc 	bl	8003328 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0fd      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b81      	ldr	r3, [pc, #516]	; (8003da4 <HAL_RCC_OscConfig+0x4d4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2f0>
 8003bb2:	4b7d      	ldr	r3, [pc, #500]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a7c      	ldr	r2, [pc, #496]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	e01c      	b.n	8003bfa <HAL_RCC_OscConfig+0x32a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x312>
 8003bc8:	4b77      	ldr	r3, [pc, #476]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a76      	ldr	r2, [pc, #472]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	4b74      	ldr	r3, [pc, #464]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a73      	ldr	r2, [pc, #460]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x32a>
 8003be2:	4b71      	ldr	r3, [pc, #452]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a70      	ldr	r2, [pc, #448]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	4b6e      	ldr	r3, [pc, #440]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a6d      	ldr	r2, [pc, #436]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7ff fb91 	bl	8003328 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7ff fb8d 	bl	8003328 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0bc      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RCC_OscConfig+0x33a>
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7ff fb7b 	bl	8003328 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7ff fb77 	bl	8003328 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0a6      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ee      	bne.n	8003c36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b52      	ldr	r3, [pc, #328]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a51      	ldr	r2, [pc, #324]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8092 	beq.w	8003d98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c74:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d05c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d141      	bne.n	8003d0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b48      	ldr	r3, [pc, #288]	; (8003dac <HAL_RCC_OscConfig+0x4dc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7ff fb4b 	bl	8003328 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c96:	f7ff fb47 	bl	8003328 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e078      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca8:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	019b      	lsls	r3, r3, #6
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	4933      	ldr	r1, [pc, #204]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cde:	4b33      	ldr	r3, [pc, #204]	; (8003dac <HAL_RCC_OscConfig+0x4dc>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7ff fb20 	bl	8003328 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7ff fb1c 	bl	8003328 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04d      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x41c>
 8003d0a:	e045      	b.n	8003d98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x4dc>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7ff fb09 	bl	8003328 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7ff fb05 	bl	8003328 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e036      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x44a>
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e029      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <HAL_RCC_OscConfig+0x4d8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d115      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10d      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40007000 	.word	0x40007000
 8003da8:	40023800 	.word	0x40023800
 8003dac:	42470060 	.word	0x42470060

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0cc      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d90c      	bls.n	8003dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0b8      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e04:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4a52      	ldr	r2, [pc, #328]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	494d      	ldr	r1, [pc, #308]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d044      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d119      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e07f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d003      	beq.n	8003e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e06f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e067      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8e:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4934      	ldr	r1, [pc, #208]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea0:	f7ff fa42 	bl	8003328 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea8:	f7ff fa3e 	bl	8003328 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e04f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 020c 	and.w	r2, r3, #12
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1eb      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d20c      	bcs.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e032      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4916      	ldr	r1, [pc, #88]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	490e      	ldr	r1, [pc, #56]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f36:	f000 f821 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 8003f3a:	4601      	mov	r1, r0
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff f9a2 	bl	80032a0 <HAL_InitTick>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023c00 	.word	0x40023c00
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	080088d0 	.word	0x080088d0
 8003f74:	20000004 	.word	0x20000004
 8003f78:	20000008 	.word	0x20000008

08003f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d007      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x32>
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d008      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x38>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 80b4 	bne.w	8004110 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003faa:	60bb      	str	r3, [r7, #8]
       break;
 8003fac:	e0b3      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fae:	4b5e      	ldr	r3, [pc, #376]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fb0:	60bb      	str	r3, [r7, #8]
      break;
 8003fb2:	e0b0      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb4:	4b5a      	ldr	r3, [pc, #360]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fbe:	4b58      	ldr	r3, [pc, #352]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04a      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4b55      	ldr	r3, [pc, #340]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	ea03 0501 	and.w	r5, r3, r1
 8003fe0:	ea04 0602 	and.w	r6, r4, r2
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	f04f 0400 	mov.w	r4, #0
 8003ff0:	0154      	lsls	r4, r2, #5
 8003ff2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ff6:	014b      	lsls	r3, r1, #5
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	1b49      	subs	r1, r1, r5
 8003ffe:	eb62 0206 	sbc.w	r2, r2, r6
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	f04f 0400 	mov.w	r4, #0
 800400a:	0194      	lsls	r4, r2, #6
 800400c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004010:	018b      	lsls	r3, r1, #6
 8004012:	1a5b      	subs	r3, r3, r1
 8004014:	eb64 0402 	sbc.w	r4, r4, r2
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	00e2      	lsls	r2, r4, #3
 8004022:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004026:	00d9      	lsls	r1, r3, #3
 8004028:	460b      	mov	r3, r1
 800402a:	4614      	mov	r4, r2
 800402c:	195b      	adds	r3, r3, r5
 800402e:	eb44 0406 	adc.w	r4, r4, r6
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	0262      	lsls	r2, r4, #9
 800403c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004040:	0259      	lsls	r1, r3, #9
 8004042:	460b      	mov	r3, r1
 8004044:	4614      	mov	r4, r2
 8004046:	4618      	mov	r0, r3
 8004048:	4621      	mov	r1, r4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f04f 0400 	mov.w	r4, #0
 8004050:	461a      	mov	r2, r3
 8004052:	4623      	mov	r3, r4
 8004054:	f7fc fe30 	bl	8000cb8 <__aeabi_uldivmod>
 8004058:	4603      	mov	r3, r0
 800405a:	460c      	mov	r4, r1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	e049      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004060:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	099b      	lsrs	r3, r3, #6
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	ea03 0501 	and.w	r5, r3, r1
 8004076:	ea04 0602 	and.w	r6, r4, r2
 800407a:	4629      	mov	r1, r5
 800407c:	4632      	mov	r2, r6
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	f04f 0400 	mov.w	r4, #0
 8004086:	0154      	lsls	r4, r2, #5
 8004088:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800408c:	014b      	lsls	r3, r1, #5
 800408e:	4619      	mov	r1, r3
 8004090:	4622      	mov	r2, r4
 8004092:	1b49      	subs	r1, r1, r5
 8004094:	eb62 0206 	sbc.w	r2, r2, r6
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	f04f 0400 	mov.w	r4, #0
 80040a0:	0194      	lsls	r4, r2, #6
 80040a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040a6:	018b      	lsls	r3, r1, #6
 80040a8:	1a5b      	subs	r3, r3, r1
 80040aa:	eb64 0402 	sbc.w	r4, r4, r2
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040bc:	00d9      	lsls	r1, r3, #3
 80040be:	460b      	mov	r3, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	195b      	adds	r3, r3, r5
 80040c4:	eb44 0406 	adc.w	r4, r4, r6
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	02a2      	lsls	r2, r4, #10
 80040d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040d6:	0299      	lsls	r1, r3, #10
 80040d8:	460b      	mov	r3, r1
 80040da:	4614      	mov	r4, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	4621      	mov	r1, r4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f04f 0400 	mov.w	r4, #0
 80040e6:	461a      	mov	r2, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	f7fc fde5 	bl	8000cb8 <__aeabi_uldivmod>
 80040ee:	4603      	mov	r3, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	60bb      	str	r3, [r7, #8]
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004112:	60bb      	str	r3, [r7, #8]
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	68bb      	ldr	r3, [r7, #8]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004150:	2b00      	cmp	r3, #0
 8004152:	d035      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004154:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800415a:	f7ff f8e5 	bl	8003328 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004162:	f7ff f8e1 	bl	8003328 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0ba      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004174:	4b60      	ldr	r3, [pc, #384]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	019a      	lsls	r2, r3, #6
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	071b      	lsls	r3, r3, #28
 800418c:	495a      	ldr	r1, [pc, #360]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004194:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800419a:	f7ff f8c5 	bl	8003328 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041a2:	f7ff f8c1 	bl	8003328 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e09a      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b4:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8083 	beq.w	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b49      	ldr	r3, [pc, #292]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a48      	ldr	r2, [pc, #288]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b46      	ldr	r3, [pc, #280]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041ea:	4b44      	ldr	r3, [pc, #272]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a43      	ldr	r2, [pc, #268]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041f6:	f7ff f897 	bl	8003328 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7ff f893 	bl	8003328 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e06c      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004210:	4b3a      	ldr	r3, [pc, #232]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004224:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02f      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	429a      	cmp	r2, r3
 8004238:	d028      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800423a:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004244:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004250:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004256:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d114      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004262:	f7ff f861 	bl	8003328 <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004268:	e00a      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7ff f85d 	bl	8003328 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f241 3288 	movw	r2, #5000	; 0x1388
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e034      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ee      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004298:	d10d      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800429a:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ae:	4912      	ldr	r1, [pc, #72]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]
 80042b4:	e005      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4a0f      	ldr	r2, [pc, #60]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042c0:	6093      	str	r3, [r2, #8]
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ce:	490a      	ldr	r1, [pc, #40]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7c1a      	ldrb	r2, [r3, #16]
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042e6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	42470068 	.word	0x42470068
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40007000 	.word	0x40007000
 8004300:	42470e40 	.word	0x42470e40
 8004304:	424711e0 	.word	0x424711e0

08004308 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e083      	b.n	8004422 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7f5b      	ldrb	r3, [r3, #29]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe feae 	bl	800308c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	22ca      	movs	r2, #202	; 0xca
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2253      	movs	r2, #83	; 0x53
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f944 	bl	80045d4 <RTC_EnterInitMode>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	22ff      	movs	r2, #255	; 0xff
 8004358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2204      	movs	r2, #4
 800435e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e05e      	b.n	8004422 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004376:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68d2      	ldr	r2, [r2, #12]
 800439e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	041a      	lsls	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10e      	bne.n	80043f0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8d6 	bl	8004584 <HAL_RTC_WaitForSynchro>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	22ff      	movs	r2, #255	; 0xff
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e018      	b.n	8004422 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	22ff      	movs	r2, #255	; 0xff
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800445c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004460:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11a      	bne.n	80044dc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f8be 	bl	800462c <RTC_Bcd2ToByte>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f8b5 	bl	800462c <RTC_Bcd2ToByte>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	789b      	ldrb	r3, [r3, #2]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f8ac 	bl	800462c <RTC_Bcd2ToByte>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004500:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004504:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	0b5b      	lsrs	r3, r3, #13
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d11a      	bne.n	800457a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	78db      	ldrb	r3, [r3, #3]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f86f 	bl	800462c <RTC_Bcd2ToByte>
 800454e:	4603      	mov	r3, r0
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f866 	bl	800462c <RTC_Bcd2ToByte>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	789b      	ldrb	r3, [r3, #2]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f85d 	bl	800462c <RTC_Bcd2ToByte>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800459e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045a0:	f7fe fec2 	bl	8003328 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045a6:	e009      	b.n	80045bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80045a8:	f7fe febe 	bl	8003328 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b6:	d901      	bls.n	80045bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e007      	b.n	80045cc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0ee      	beq.n	80045a8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d119      	bne.n	8004622 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f04f 32ff 	mov.w	r2, #4294967295
 80045f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045f8:	f7fe fe96 	bl	8003328 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80045fe:	e009      	b.n	8004614 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004600:	f7fe fe92 	bl	8003328 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800460e:	d901      	bls.n	8004614 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e007      	b.n	8004624 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ee      	beq.n	8004600 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4413      	add	r3, r2
 800465a:	b2db      	uxtb	r3, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e01d      	b.n	80046b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe fd12 	bl	80030b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f000 fa14 	bl	8004ad4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d007      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d122      	bne.n	8004762 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d11b      	bne.n	8004762 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0202 	mvn.w	r2, #2
 8004732:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f9a5 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 800474e:	e005      	b.n	800475c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f997 	bl	8004a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9a8 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d122      	bne.n	80047b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d11b      	bne.n	80047b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f06f 0204 	mvn.w	r2, #4
 8004786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f97b 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 80047a2:	e005      	b.n	80047b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f96d 	bl	8004a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f97e 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d122      	bne.n	800480a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11b      	bne.n	800480a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0208 	mvn.w	r2, #8
 80047da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2204      	movs	r2, #4
 80047e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f951 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 80047f6:	e005      	b.n	8004804 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f943 	bl	8004a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f954 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d122      	bne.n	800485e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b10      	cmp	r3, #16
 8004824:	d11b      	bne.n	800485e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f06f 0210 	mvn.w	r2, #16
 800482e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2208      	movs	r2, #8
 8004834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f927 	bl	8004a98 <HAL_TIM_IC_CaptureCallback>
 800484a:	e005      	b.n	8004858 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f919 	bl	8004a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f92a 	bl	8004aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10e      	bne.n	800488a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d107      	bne.n	800488a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0201 	mvn.w	r2, #1
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc fdc7 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d10e      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 faa1 	bl	8004df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d10e      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d107      	bne.n	80048e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f8ef 	bl	8004ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d10e      	bne.n	800490e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d107      	bne.n	800490e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f06f 0220 	mvn.w	r2, #32
 8004906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa6b 	bl	8004de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_TIM_ConfigClockSource+0x18>
 800492a:	2302      	movs	r3, #2
 800492c:	e0a6      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x166>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800494c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004954:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d067      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x120>
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d80b      	bhi.n	8004982 <HAL_TIM_ConfigClockSource+0x6c>
 800496a:	2b10      	cmp	r3, #16
 800496c:	d073      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x140>
 800496e:	2b10      	cmp	r3, #16
 8004970:	d802      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x62>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d06f      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004976:	e078      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004978:	2b20      	cmp	r3, #32
 800497a:	d06c      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x140>
 800497c:	2b30      	cmp	r3, #48	; 0x30
 800497e:	d06a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004980:	e073      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004982:	2b70      	cmp	r3, #112	; 0x70
 8004984:	d00d      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x8c>
 8004986:	2b70      	cmp	r3, #112	; 0x70
 8004988:	d804      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x7e>
 800498a:	2b50      	cmp	r3, #80	; 0x50
 800498c:	d033      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0xe0>
 800498e:	2b60      	cmp	r3, #96	; 0x60
 8004990:	d041      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004992:	e06a      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d066      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x152>
 800499a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499e:	d017      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049a0:	e063      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6899      	ldr	r1, [r3, #8]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f000 f989 	bl	8004cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e04c      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6899      	ldr	r1, [r3, #8]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f000 f972 	bl	8004cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f2:	609a      	str	r2, [r3, #8]
      break;
 80049f4:	e039      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f000 f8e6 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2150      	movs	r1, #80	; 0x50
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f93f 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a14:	e029      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 f905 	bl	8004c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2160      	movs	r1, #96	; 0x60
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f92f 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a34:	e019      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 f8c6 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f91f 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e009      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f000 f916 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a66:	e000      	b.n	8004a6a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <TIM_Base_SetConfig+0xe4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00f      	beq.n	8004b0c <TIM_Base_SetConfig+0x38>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d00b      	beq.n	8004b0c <TIM_Base_SetConfig+0x38>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <TIM_Base_SetConfig+0xe8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_Base_SetConfig+0x38>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a30      	ldr	r2, [pc, #192]	; (8004bc0 <TIM_Base_SetConfig+0xec>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0x38>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a2f      	ldr	r2, [pc, #188]	; (8004bc4 <TIM_Base_SetConfig+0xf0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d108      	bne.n	8004b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <TIM_Base_SetConfig+0xe4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01b      	beq.n	8004b5e <TIM_Base_SetConfig+0x8a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2c:	d017      	beq.n	8004b5e <TIM_Base_SetConfig+0x8a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <TIM_Base_SetConfig+0xe8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <TIM_Base_SetConfig+0x8a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <TIM_Base_SetConfig+0xec>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00f      	beq.n	8004b5e <TIM_Base_SetConfig+0x8a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <TIM_Base_SetConfig+0xf0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00b      	beq.n	8004b5e <TIM_Base_SetConfig+0x8a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <TIM_Base_SetConfig+0xf4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <TIM_Base_SetConfig+0x8a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <TIM_Base_SetConfig+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_Base_SetConfig+0x8a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <TIM_Base_SetConfig+0xfc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d108      	bne.n	8004b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <TIM_Base_SetConfig+0xe4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d103      	bne.n	8004ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	615a      	str	r2, [r3, #20]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40014400 	.word	0x40014400
 8004bd0:	40014800 	.word	0x40014800

08004bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 030a 	bic.w	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b087      	sub	sp, #28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	031b      	lsls	r3, r3, #12
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f043 0307 	orr.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e050      	b.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d013      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10c      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40014000 	.word	0x40014000

08004de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <_ZdlPvj>:
 8004e0c:	f000 b800 	b.w	8004e10 <_ZdlPv>

08004e10 <_ZdlPv>:
 8004e10:	f002 b9ce 	b.w	80071b0 <free>
 8004e14:	0000      	movs	r0, r0
	...

08004e18 <cos>:
 8004e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e1a:	ec51 0b10 	vmov	r0, r1, d0
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <cos+0x80>)
 8004e20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e24:	4293      	cmp	r3, r2
 8004e26:	dc06      	bgt.n	8004e36 <cos+0x1e>
 8004e28:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004e90 <cos+0x78>
 8004e2c:	f001 fa6c 	bl	8006308 <__kernel_cos>
 8004e30:	ec51 0b10 	vmov	r0, r1, d0
 8004e34:	e007      	b.n	8004e46 <cos+0x2e>
 8004e36:	4a19      	ldr	r2, [pc, #100]	; (8004e9c <cos+0x84>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	dd09      	ble.n	8004e50 <cos+0x38>
 8004e3c:	ee10 2a10 	vmov	r2, s0
 8004e40:	460b      	mov	r3, r1
 8004e42:	f7fb fa39 	bl	80002b8 <__aeabi_dsub>
 8004e46:	ec41 0b10 	vmov	d0, r0, r1
 8004e4a:	b005      	add	sp, #20
 8004e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e50:	4668      	mov	r0, sp
 8004e52:	f000 ffb5 	bl	8005dc0 <__ieee754_rem_pio2>
 8004e56:	f000 0003 	and.w	r0, r0, #3
 8004e5a:	2801      	cmp	r0, #1
 8004e5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e60:	ed9d 0b00 	vldr	d0, [sp]
 8004e64:	d007      	beq.n	8004e76 <cos+0x5e>
 8004e66:	2802      	cmp	r0, #2
 8004e68:	d00e      	beq.n	8004e88 <cos+0x70>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d0de      	beq.n	8004e2c <cos+0x14>
 8004e6e:	2001      	movs	r0, #1
 8004e70:	f001 fe52 	bl	8006b18 <__kernel_sin>
 8004e74:	e7dc      	b.n	8004e30 <cos+0x18>
 8004e76:	f001 fe4f 	bl	8006b18 <__kernel_sin>
 8004e7a:	ec53 2b10 	vmov	r2, r3, d0
 8004e7e:	ee10 0a10 	vmov	r0, s0
 8004e82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004e86:	e7de      	b.n	8004e46 <cos+0x2e>
 8004e88:	f001 fa3e 	bl	8006308 <__kernel_cos>
 8004e8c:	e7f5      	b.n	8004e7a <cos+0x62>
 8004e8e:	bf00      	nop
	...
 8004e98:	3fe921fb 	.word	0x3fe921fb
 8004e9c:	7fefffff 	.word	0x7fefffff

08004ea0 <floor>:
 8004ea0:	ec51 0b10 	vmov	r0, r1, d0
 8004ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004eac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004eb0:	2e13      	cmp	r6, #19
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	ee10 5a10 	vmov	r5, s0
 8004eb8:	4680      	mov	r8, r0
 8004eba:	dc34      	bgt.n	8004f26 <floor+0x86>
 8004ebc:	2e00      	cmp	r6, #0
 8004ebe:	da16      	bge.n	8004eee <floor+0x4e>
 8004ec0:	a335      	add	r3, pc, #212	; (adr r3, 8004f98 <floor+0xf8>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb f9f9 	bl	80002bc <__adddf3>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f7fb fe3b 	bl	8000b48 <__aeabi_dcmpgt>
 8004ed2:	b148      	cbz	r0, 8004ee8 <floor+0x48>
 8004ed4:	2c00      	cmp	r4, #0
 8004ed6:	da59      	bge.n	8004f8c <floor+0xec>
 8004ed8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004edc:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <floor+0x100>)
 8004ede:	432b      	orrs	r3, r5
 8004ee0:	2500      	movs	r5, #0
 8004ee2:	42ab      	cmp	r3, r5
 8004ee4:	bf18      	it	ne
 8004ee6:	4614      	movne	r4, r2
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	e025      	b.n	8004f3a <floor+0x9a>
 8004eee:	4f2d      	ldr	r7, [pc, #180]	; (8004fa4 <floor+0x104>)
 8004ef0:	4137      	asrs	r7, r6
 8004ef2:	ea01 0307 	and.w	r3, r1, r7
 8004ef6:	4303      	orrs	r3, r0
 8004ef8:	d01f      	beq.n	8004f3a <floor+0x9a>
 8004efa:	a327      	add	r3, pc, #156	; (adr r3, 8004f98 <floor+0xf8>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb f9dc 	bl	80002bc <__adddf3>
 8004f04:	2200      	movs	r2, #0
 8004f06:	2300      	movs	r3, #0
 8004f08:	f7fb fe1e 	bl	8000b48 <__aeabi_dcmpgt>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0eb      	beq.n	8004ee8 <floor+0x48>
 8004f10:	2c00      	cmp	r4, #0
 8004f12:	bfbe      	ittt	lt
 8004f14:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004f18:	fa43 f606 	asrlt.w	r6, r3, r6
 8004f1c:	19a4      	addlt	r4, r4, r6
 8004f1e:	ea24 0407 	bic.w	r4, r4, r7
 8004f22:	2500      	movs	r5, #0
 8004f24:	e7e0      	b.n	8004ee8 <floor+0x48>
 8004f26:	2e33      	cmp	r6, #51	; 0x33
 8004f28:	dd0b      	ble.n	8004f42 <floor+0xa2>
 8004f2a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f2e:	d104      	bne.n	8004f3a <floor+0x9a>
 8004f30:	ee10 2a10 	vmov	r2, s0
 8004f34:	460b      	mov	r3, r1
 8004f36:	f7fb f9c1 	bl	80002bc <__adddf3>
 8004f3a:	ec41 0b10 	vmov	d0, r0, r1
 8004f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f42:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4a:	fa23 f707 	lsr.w	r7, r3, r7
 8004f4e:	4207      	tst	r7, r0
 8004f50:	d0f3      	beq.n	8004f3a <floor+0x9a>
 8004f52:	a311      	add	r3, pc, #68	; (adr r3, 8004f98 <floor+0xf8>)
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f7fb f9b0 	bl	80002bc <__adddf3>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f7fb fdf2 	bl	8000b48 <__aeabi_dcmpgt>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d0bf      	beq.n	8004ee8 <floor+0x48>
 8004f68:	2c00      	cmp	r4, #0
 8004f6a:	da02      	bge.n	8004f72 <floor+0xd2>
 8004f6c:	2e14      	cmp	r6, #20
 8004f6e:	d103      	bne.n	8004f78 <floor+0xd8>
 8004f70:	3401      	adds	r4, #1
 8004f72:	ea25 0507 	bic.w	r5, r5, r7
 8004f76:	e7b7      	b.n	8004ee8 <floor+0x48>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004f7e:	fa03 f606 	lsl.w	r6, r3, r6
 8004f82:	4435      	add	r5, r6
 8004f84:	4545      	cmp	r5, r8
 8004f86:	bf38      	it	cc
 8004f88:	18e4      	addcc	r4, r4, r3
 8004f8a:	e7f2      	b.n	8004f72 <floor+0xd2>
 8004f8c:	2500      	movs	r5, #0
 8004f8e:	462c      	mov	r4, r5
 8004f90:	e7aa      	b.n	8004ee8 <floor+0x48>
 8004f92:	bf00      	nop
 8004f94:	f3af 8000 	nop.w
 8004f98:	8800759c 	.word	0x8800759c
 8004f9c:	7e37e43c 	.word	0x7e37e43c
 8004fa0:	bff00000 	.word	0xbff00000
 8004fa4:	000fffff 	.word	0x000fffff

08004fa8 <sin>:
 8004fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004faa:	ec51 0b10 	vmov	r0, r1, d0
 8004fae:	4a20      	ldr	r2, [pc, #128]	; (8005030 <sin+0x88>)
 8004fb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	dc07      	bgt.n	8004fc8 <sin+0x20>
 8004fb8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005028 <sin+0x80>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f001 fdab 	bl	8006b18 <__kernel_sin>
 8004fc2:	ec51 0b10 	vmov	r0, r1, d0
 8004fc6:	e007      	b.n	8004fd8 <sin+0x30>
 8004fc8:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <sin+0x8c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	dd09      	ble.n	8004fe2 <sin+0x3a>
 8004fce:	ee10 2a10 	vmov	r2, s0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	f7fb f970 	bl	80002b8 <__aeabi_dsub>
 8004fd8:	ec41 0b10 	vmov	d0, r0, r1
 8004fdc:	b005      	add	sp, #20
 8004fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fe2:	4668      	mov	r0, sp
 8004fe4:	f000 feec 	bl	8005dc0 <__ieee754_rem_pio2>
 8004fe8:	f000 0003 	and.w	r0, r0, #3
 8004fec:	2801      	cmp	r0, #1
 8004fee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ff2:	ed9d 0b00 	vldr	d0, [sp]
 8004ff6:	d004      	beq.n	8005002 <sin+0x5a>
 8004ff8:	2802      	cmp	r0, #2
 8004ffa:	d005      	beq.n	8005008 <sin+0x60>
 8004ffc:	b970      	cbnz	r0, 800501c <sin+0x74>
 8004ffe:	2001      	movs	r0, #1
 8005000:	e7dd      	b.n	8004fbe <sin+0x16>
 8005002:	f001 f981 	bl	8006308 <__kernel_cos>
 8005006:	e7dc      	b.n	8004fc2 <sin+0x1a>
 8005008:	2001      	movs	r0, #1
 800500a:	f001 fd85 	bl	8006b18 <__kernel_sin>
 800500e:	ec53 2b10 	vmov	r2, r3, d0
 8005012:	ee10 0a10 	vmov	r0, s0
 8005016:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800501a:	e7dd      	b.n	8004fd8 <sin+0x30>
 800501c:	f001 f974 	bl	8006308 <__kernel_cos>
 8005020:	e7f5      	b.n	800500e <sin+0x66>
 8005022:	bf00      	nop
 8005024:	f3af 8000 	nop.w
	...
 8005030:	3fe921fb 	.word	0x3fe921fb
 8005034:	7fefffff 	.word	0x7fefffff

08005038 <tan>:
 8005038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800503a:	ec51 0b10 	vmov	r0, r1, d0
 800503e:	4a14      	ldr	r2, [pc, #80]	; (8005090 <tan+0x58>)
 8005040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005044:	4293      	cmp	r3, r2
 8005046:	dc05      	bgt.n	8005054 <tan+0x1c>
 8005048:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8005088 <tan+0x50>
 800504c:	2001      	movs	r0, #1
 800504e:	f001 fe1f 	bl	8006c90 <__kernel_tan>
 8005052:	e009      	b.n	8005068 <tan+0x30>
 8005054:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <tan+0x5c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	dd09      	ble.n	800506e <tan+0x36>
 800505a:	ee10 2a10 	vmov	r2, s0
 800505e:	460b      	mov	r3, r1
 8005060:	f7fb f92a 	bl	80002b8 <__aeabi_dsub>
 8005064:	ec41 0b10 	vmov	d0, r0, r1
 8005068:	b005      	add	sp, #20
 800506a:	f85d fb04 	ldr.w	pc, [sp], #4
 800506e:	4668      	mov	r0, sp
 8005070:	f000 fea6 	bl	8005dc0 <__ieee754_rem_pio2>
 8005074:	0040      	lsls	r0, r0, #1
 8005076:	f000 0002 	and.w	r0, r0, #2
 800507a:	f1c0 0001 	rsb	r0, r0, #1
 800507e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005082:	ed9d 0b00 	vldr	d0, [sp]
 8005086:	e7e2      	b.n	800504e <tan+0x16>
	...
 8005090:	3fe921fb 	.word	0x3fe921fb
 8005094:	7fefffff 	.word	0x7fefffff

08005098 <acos>:
 8005098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800509a:	ed2d 8b02 	vpush	{d8}
 800509e:	4e26      	ldr	r6, [pc, #152]	; (8005138 <acos+0xa0>)
 80050a0:	b08b      	sub	sp, #44	; 0x2c
 80050a2:	ec55 4b10 	vmov	r4, r5, d0
 80050a6:	f000 f90b 	bl	80052c0 <__ieee754_acos>
 80050aa:	f996 3000 	ldrsb.w	r3, [r6]
 80050ae:	eeb0 8a40 	vmov.f32	s16, s0
 80050b2:	eef0 8a60 	vmov.f32	s17, s1
 80050b6:	3301      	adds	r3, #1
 80050b8:	d036      	beq.n	8005128 <acos+0x90>
 80050ba:	4622      	mov	r2, r4
 80050bc:	462b      	mov	r3, r5
 80050be:	4620      	mov	r0, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7fb fd4b 	bl	8000b5c <__aeabi_dcmpun>
 80050c6:	4607      	mov	r7, r0
 80050c8:	bb70      	cbnz	r0, 8005128 <acos+0x90>
 80050ca:	ec45 4b10 	vmov	d0, r4, r5
 80050ce:	f001 ffab 	bl	8007028 <fabs>
 80050d2:	2200      	movs	r2, #0
 80050d4:	4b19      	ldr	r3, [pc, #100]	; (800513c <acos+0xa4>)
 80050d6:	ec51 0b10 	vmov	r0, r1, d0
 80050da:	f7fb fd35 	bl	8000b48 <__aeabi_dcmpgt>
 80050de:	b318      	cbz	r0, 8005128 <acos+0x90>
 80050e0:	2301      	movs	r3, #1
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	4816      	ldr	r0, [pc, #88]	; (8005140 <acos+0xa8>)
 80050e6:	4b17      	ldr	r3, [pc, #92]	; (8005144 <acos+0xac>)
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	9708      	str	r7, [sp, #32]
 80050ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80050f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80050f4:	f001 ffa4 	bl	8007040 <nan>
 80050f8:	f996 3000 	ldrsb.w	r3, [r6]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005102:	d104      	bne.n	800510e <acos+0x76>
 8005104:	f002 f82a 	bl	800715c <__errno>
 8005108:	2321      	movs	r3, #33	; 0x21
 800510a:	6003      	str	r3, [r0, #0]
 800510c:	e004      	b.n	8005118 <acos+0x80>
 800510e:	4668      	mov	r0, sp
 8005110:	f001 ff93 	bl	800703a <matherr>
 8005114:	2800      	cmp	r0, #0
 8005116:	d0f5      	beq.n	8005104 <acos+0x6c>
 8005118:	9b08      	ldr	r3, [sp, #32]
 800511a:	b11b      	cbz	r3, 8005124 <acos+0x8c>
 800511c:	f002 f81e 	bl	800715c <__errno>
 8005120:	9b08      	ldr	r3, [sp, #32]
 8005122:	6003      	str	r3, [r0, #0]
 8005124:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005128:	eeb0 0a48 	vmov.f32	s0, s16
 800512c:	eef0 0a68 	vmov.f32	s1, s17
 8005130:	b00b      	add	sp, #44	; 0x2c
 8005132:	ecbd 8b02 	vpop	{d8}
 8005136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005138:	2000000d 	.word	0x2000000d
 800513c:	3ff00000 	.word	0x3ff00000
 8005140:	08008bf6 	.word	0x08008bf6
 8005144:	080088e0 	.word	0x080088e0

08005148 <asin>:
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514a:	ed2d 8b02 	vpush	{d8}
 800514e:	4e26      	ldr	r6, [pc, #152]	; (80051e8 <asin+0xa0>)
 8005150:	b08b      	sub	sp, #44	; 0x2c
 8005152:	ec55 4b10 	vmov	r4, r5, d0
 8005156:	f000 fb0f 	bl	8005778 <__ieee754_asin>
 800515a:	f996 3000 	ldrsb.w	r3, [r6]
 800515e:	eeb0 8a40 	vmov.f32	s16, s0
 8005162:	eef0 8a60 	vmov.f32	s17, s1
 8005166:	3301      	adds	r3, #1
 8005168:	d036      	beq.n	80051d8 <asin+0x90>
 800516a:	4622      	mov	r2, r4
 800516c:	462b      	mov	r3, r5
 800516e:	4620      	mov	r0, r4
 8005170:	4629      	mov	r1, r5
 8005172:	f7fb fcf3 	bl	8000b5c <__aeabi_dcmpun>
 8005176:	4607      	mov	r7, r0
 8005178:	bb70      	cbnz	r0, 80051d8 <asin+0x90>
 800517a:	ec45 4b10 	vmov	d0, r4, r5
 800517e:	f001 ff53 	bl	8007028 <fabs>
 8005182:	2200      	movs	r2, #0
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <asin+0xa4>)
 8005186:	ec51 0b10 	vmov	r0, r1, d0
 800518a:	f7fb fcdd 	bl	8000b48 <__aeabi_dcmpgt>
 800518e:	b318      	cbz	r0, 80051d8 <asin+0x90>
 8005190:	2301      	movs	r3, #1
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	4816      	ldr	r0, [pc, #88]	; (80051f0 <asin+0xa8>)
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <asin+0xac>)
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	9708      	str	r7, [sp, #32]
 800519c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80051a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80051a4:	f001 ff4c 	bl	8007040 <nan>
 80051a8:	f996 3000 	ldrsb.w	r3, [r6]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	ed8d 0b06 	vstr	d0, [sp, #24]
 80051b2:	d104      	bne.n	80051be <asin+0x76>
 80051b4:	f001 ffd2 	bl	800715c <__errno>
 80051b8:	2321      	movs	r3, #33	; 0x21
 80051ba:	6003      	str	r3, [r0, #0]
 80051bc:	e004      	b.n	80051c8 <asin+0x80>
 80051be:	4668      	mov	r0, sp
 80051c0:	f001 ff3b 	bl	800703a <matherr>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d0f5      	beq.n	80051b4 <asin+0x6c>
 80051c8:	9b08      	ldr	r3, [sp, #32]
 80051ca:	b11b      	cbz	r3, 80051d4 <asin+0x8c>
 80051cc:	f001 ffc6 	bl	800715c <__errno>
 80051d0:	9b08      	ldr	r3, [sp, #32]
 80051d2:	6003      	str	r3, [r0, #0]
 80051d4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80051d8:	eeb0 0a48 	vmov.f32	s0, s16
 80051dc:	eef0 0a68 	vmov.f32	s1, s17
 80051e0:	b00b      	add	sp, #44	; 0x2c
 80051e2:	ecbd 8b02 	vpop	{d8}
 80051e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e8:	2000000d 	.word	0x2000000d
 80051ec:	3ff00000 	.word	0x3ff00000
 80051f0:	08008bf6 	.word	0x08008bf6
 80051f4:	080088e5 	.word	0x080088e5

080051f8 <fmod>:
 80051f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051fc:	ed2d 8b02 	vpush	{d8}
 8005200:	b08b      	sub	sp, #44	; 0x2c
 8005202:	ec55 4b10 	vmov	r4, r5, d0
 8005206:	ec57 6b11 	vmov	r6, r7, d1
 800520a:	f000 fcc5 	bl	8005b98 <__ieee754_fmod>
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <fmod+0xc0>)
 8005210:	eeb0 8a40 	vmov.f32	s16, s0
 8005214:	eef0 8a60 	vmov.f32	s17, s1
 8005218:	f993 8000 	ldrsb.w	r8, [r3]
 800521c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005220:	d030      	beq.n	8005284 <fmod+0x8c>
 8005222:	4632      	mov	r2, r6
 8005224:	463b      	mov	r3, r7
 8005226:	4630      	mov	r0, r6
 8005228:	4639      	mov	r1, r7
 800522a:	f7fb fc97 	bl	8000b5c <__aeabi_dcmpun>
 800522e:	bb48      	cbnz	r0, 8005284 <fmod+0x8c>
 8005230:	4622      	mov	r2, r4
 8005232:	462b      	mov	r3, r5
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fb fc90 	bl	8000b5c <__aeabi_dcmpun>
 800523c:	4681      	mov	r9, r0
 800523e:	bb08      	cbnz	r0, 8005284 <fmod+0x8c>
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	4630      	mov	r0, r6
 8005246:	4639      	mov	r1, r7
 8005248:	f7fb fc56 	bl	8000af8 <__aeabi_dcmpeq>
 800524c:	b1d0      	cbz	r0, 8005284 <fmod+0x8c>
 800524e:	2301      	movs	r3, #1
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <fmod+0xc4>)
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800525a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800525e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005262:	f1b8 0f00 	cmp.w	r8, #0
 8005266:	d116      	bne.n	8005296 <fmod+0x9e>
 8005268:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800526c:	4668      	mov	r0, sp
 800526e:	f001 fee4 	bl	800703a <matherr>
 8005272:	b1d8      	cbz	r0, 80052ac <fmod+0xb4>
 8005274:	9b08      	ldr	r3, [sp, #32]
 8005276:	b11b      	cbz	r3, 8005280 <fmod+0x88>
 8005278:	f001 ff70 	bl	800715c <__errno>
 800527c:	9b08      	ldr	r3, [sp, #32]
 800527e:	6003      	str	r3, [r0, #0]
 8005280:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005284:	eeb0 0a48 	vmov.f32	s0, s16
 8005288:	eef0 0a68 	vmov.f32	s1, s17
 800528c:	b00b      	add	sp, #44	; 0x2c
 800528e:	ecbd 8b02 	vpop	{d8}
 8005292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005296:	2200      	movs	r2, #0
 8005298:	2300      	movs	r3, #0
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	f7fb faed 	bl	800087c <__aeabi_ddiv>
 80052a2:	f1b8 0f02 	cmp.w	r8, #2
 80052a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052aa:	d1df      	bne.n	800526c <fmod+0x74>
 80052ac:	f001 ff56 	bl	800715c <__errno>
 80052b0:	2321      	movs	r3, #33	; 0x21
 80052b2:	6003      	str	r3, [r0, #0]
 80052b4:	e7de      	b.n	8005274 <fmod+0x7c>
 80052b6:	bf00      	nop
 80052b8:	2000000d 	.word	0x2000000d
 80052bc:	080088ea 	.word	0x080088ea

080052c0 <__ieee754_acos>:
 80052c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	ec55 4b10 	vmov	r4, r5, d0
 80052c8:	49b7      	ldr	r1, [pc, #732]	; (80055a8 <__ieee754_acos+0x2e8>)
 80052ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052ce:	428b      	cmp	r3, r1
 80052d0:	dd1b      	ble.n	800530a <__ieee754_acos+0x4a>
 80052d2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80052d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80052da:	4323      	orrs	r3, r4
 80052dc:	d109      	bne.n	80052f2 <__ieee754_acos+0x32>
 80052de:	2d00      	cmp	r5, #0
 80052e0:	f300 8211 	bgt.w	8005706 <__ieee754_acos+0x446>
 80052e4:	a196      	add	r1, pc, #600	; (adr r1, 8005540 <__ieee754_acos+0x280>)
 80052e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052ea:	ec41 0b10 	vmov	d0, r0, r1
 80052ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f2:	ee10 2a10 	vmov	r2, s0
 80052f6:	462b      	mov	r3, r5
 80052f8:	4620      	mov	r0, r4
 80052fa:	4629      	mov	r1, r5
 80052fc:	f7fa ffdc 	bl	80002b8 <__aeabi_dsub>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	f7fb faba 	bl	800087c <__aeabi_ddiv>
 8005308:	e7ef      	b.n	80052ea <__ieee754_acos+0x2a>
 800530a:	49a8      	ldr	r1, [pc, #672]	; (80055ac <__ieee754_acos+0x2ec>)
 800530c:	428b      	cmp	r3, r1
 800530e:	f300 8087 	bgt.w	8005420 <__ieee754_acos+0x160>
 8005312:	4aa7      	ldr	r2, [pc, #668]	; (80055b0 <__ieee754_acos+0x2f0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	f340 81f9 	ble.w	800570c <__ieee754_acos+0x44c>
 800531a:	ee10 2a10 	vmov	r2, s0
 800531e:	ee10 0a10 	vmov	r0, s0
 8005322:	462b      	mov	r3, r5
 8005324:	4629      	mov	r1, r5
 8005326:	f7fb f97f 	bl	8000628 <__aeabi_dmul>
 800532a:	a387      	add	r3, pc, #540	; (adr r3, 8005548 <__ieee754_acos+0x288>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	4606      	mov	r6, r0
 8005332:	460f      	mov	r7, r1
 8005334:	f7fb f978 	bl	8000628 <__aeabi_dmul>
 8005338:	a385      	add	r3, pc, #532	; (adr r3, 8005550 <__ieee754_acos+0x290>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fa ffbd 	bl	80002bc <__adddf3>
 8005342:	4632      	mov	r2, r6
 8005344:	463b      	mov	r3, r7
 8005346:	f7fb f96f 	bl	8000628 <__aeabi_dmul>
 800534a:	a383      	add	r3, pc, #524	; (adr r3, 8005558 <__ieee754_acos+0x298>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ffb2 	bl	80002b8 <__aeabi_dsub>
 8005354:	4632      	mov	r2, r6
 8005356:	463b      	mov	r3, r7
 8005358:	f7fb f966 	bl	8000628 <__aeabi_dmul>
 800535c:	a380      	add	r3, pc, #512	; (adr r3, 8005560 <__ieee754_acos+0x2a0>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f7fa ffab 	bl	80002bc <__adddf3>
 8005366:	4632      	mov	r2, r6
 8005368:	463b      	mov	r3, r7
 800536a:	f7fb f95d 	bl	8000628 <__aeabi_dmul>
 800536e:	a37e      	add	r3, pc, #504	; (adr r3, 8005568 <__ieee754_acos+0x2a8>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fa ffa0 	bl	80002b8 <__aeabi_dsub>
 8005378:	4632      	mov	r2, r6
 800537a:	463b      	mov	r3, r7
 800537c:	f7fb f954 	bl	8000628 <__aeabi_dmul>
 8005380:	a37b      	add	r3, pc, #492	; (adr r3, 8005570 <__ieee754_acos+0x2b0>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fa ff99 	bl	80002bc <__adddf3>
 800538a:	4632      	mov	r2, r6
 800538c:	463b      	mov	r3, r7
 800538e:	f7fb f94b 	bl	8000628 <__aeabi_dmul>
 8005392:	a379      	add	r3, pc, #484	; (adr r3, 8005578 <__ieee754_acos+0x2b8>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	4680      	mov	r8, r0
 800539a:	4689      	mov	r9, r1
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	f7fb f942 	bl	8000628 <__aeabi_dmul>
 80053a4:	a376      	add	r3, pc, #472	; (adr r3, 8005580 <__ieee754_acos+0x2c0>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa ff85 	bl	80002b8 <__aeabi_dsub>
 80053ae:	4632      	mov	r2, r6
 80053b0:	463b      	mov	r3, r7
 80053b2:	f7fb f939 	bl	8000628 <__aeabi_dmul>
 80053b6:	a374      	add	r3, pc, #464	; (adr r3, 8005588 <__ieee754_acos+0x2c8>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f7fa ff7e 	bl	80002bc <__adddf3>
 80053c0:	4632      	mov	r2, r6
 80053c2:	463b      	mov	r3, r7
 80053c4:	f7fb f930 	bl	8000628 <__aeabi_dmul>
 80053c8:	a371      	add	r3, pc, #452	; (adr r3, 8005590 <__ieee754_acos+0x2d0>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fa ff73 	bl	80002b8 <__aeabi_dsub>
 80053d2:	4632      	mov	r2, r6
 80053d4:	463b      	mov	r3, r7
 80053d6:	f7fb f927 	bl	8000628 <__aeabi_dmul>
 80053da:	2200      	movs	r2, #0
 80053dc:	4b75      	ldr	r3, [pc, #468]	; (80055b4 <__ieee754_acos+0x2f4>)
 80053de:	f7fa ff6d 	bl	80002bc <__adddf3>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4640      	mov	r0, r8
 80053e8:	4649      	mov	r1, r9
 80053ea:	f7fb fa47 	bl	800087c <__aeabi_ddiv>
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	f7fb f919 	bl	8000628 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	a167      	add	r1, pc, #412	; (adr r1, 8005598 <__ieee754_acos+0x2d8>)
 80053fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005400:	f7fa ff5a 	bl	80002b8 <__aeabi_dsub>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4620      	mov	r0, r4
 800540a:	4629      	mov	r1, r5
 800540c:	f7fa ff54 	bl	80002b8 <__aeabi_dsub>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	a162      	add	r1, pc, #392	; (adr r1, 80055a0 <__ieee754_acos+0x2e0>)
 8005416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800541a:	f7fa ff4d 	bl	80002b8 <__aeabi_dsub>
 800541e:	e764      	b.n	80052ea <__ieee754_acos+0x2a>
 8005420:	2d00      	cmp	r5, #0
 8005422:	f280 80cb 	bge.w	80055bc <__ieee754_acos+0x2fc>
 8005426:	ee10 0a10 	vmov	r0, s0
 800542a:	2200      	movs	r2, #0
 800542c:	4b61      	ldr	r3, [pc, #388]	; (80055b4 <__ieee754_acos+0x2f4>)
 800542e:	4629      	mov	r1, r5
 8005430:	f7fa ff44 	bl	80002bc <__adddf3>
 8005434:	2200      	movs	r2, #0
 8005436:	4b60      	ldr	r3, [pc, #384]	; (80055b8 <__ieee754_acos+0x2f8>)
 8005438:	f7fb f8f6 	bl	8000628 <__aeabi_dmul>
 800543c:	a342      	add	r3, pc, #264	; (adr r3, 8005548 <__ieee754_acos+0x288>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	4604      	mov	r4, r0
 8005444:	460d      	mov	r5, r1
 8005446:	f7fb f8ef 	bl	8000628 <__aeabi_dmul>
 800544a:	a341      	add	r3, pc, #260	; (adr r3, 8005550 <__ieee754_acos+0x290>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f7fa ff34 	bl	80002bc <__adddf3>
 8005454:	4622      	mov	r2, r4
 8005456:	462b      	mov	r3, r5
 8005458:	f7fb f8e6 	bl	8000628 <__aeabi_dmul>
 800545c:	a33e      	add	r3, pc, #248	; (adr r3, 8005558 <__ieee754_acos+0x298>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fa ff29 	bl	80002b8 <__aeabi_dsub>
 8005466:	4622      	mov	r2, r4
 8005468:	462b      	mov	r3, r5
 800546a:	f7fb f8dd 	bl	8000628 <__aeabi_dmul>
 800546e:	a33c      	add	r3, pc, #240	; (adr r3, 8005560 <__ieee754_acos+0x2a0>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f7fa ff22 	bl	80002bc <__adddf3>
 8005478:	4622      	mov	r2, r4
 800547a:	462b      	mov	r3, r5
 800547c:	f7fb f8d4 	bl	8000628 <__aeabi_dmul>
 8005480:	a339      	add	r3, pc, #228	; (adr r3, 8005568 <__ieee754_acos+0x2a8>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fa ff17 	bl	80002b8 <__aeabi_dsub>
 800548a:	4622      	mov	r2, r4
 800548c:	462b      	mov	r3, r5
 800548e:	f7fb f8cb 	bl	8000628 <__aeabi_dmul>
 8005492:	a337      	add	r3, pc, #220	; (adr r3, 8005570 <__ieee754_acos+0x2b0>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fa ff10 	bl	80002bc <__adddf3>
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	f7fb f8c2 	bl	8000628 <__aeabi_dmul>
 80054a4:	ec45 4b10 	vmov	d0, r4, r5
 80054a8:	4680      	mov	r8, r0
 80054aa:	4689      	mov	r9, r1
 80054ac:	f000 fe7a 	bl	80061a4 <__ieee754_sqrt>
 80054b0:	a331      	add	r3, pc, #196	; (adr r3, 8005578 <__ieee754_acos+0x2b8>)
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	ec57 6b10 	vmov	r6, r7, d0
 80054be:	f7fb f8b3 	bl	8000628 <__aeabi_dmul>
 80054c2:	a32f      	add	r3, pc, #188	; (adr r3, 8005580 <__ieee754_acos+0x2c0>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fa fef6 	bl	80002b8 <__aeabi_dsub>
 80054cc:	4622      	mov	r2, r4
 80054ce:	462b      	mov	r3, r5
 80054d0:	f7fb f8aa 	bl	8000628 <__aeabi_dmul>
 80054d4:	a32c      	add	r3, pc, #176	; (adr r3, 8005588 <__ieee754_acos+0x2c8>)
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f7fa feef 	bl	80002bc <__adddf3>
 80054de:	4622      	mov	r2, r4
 80054e0:	462b      	mov	r3, r5
 80054e2:	f7fb f8a1 	bl	8000628 <__aeabi_dmul>
 80054e6:	a32a      	add	r3, pc, #168	; (adr r3, 8005590 <__ieee754_acos+0x2d0>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f7fa fee4 	bl	80002b8 <__aeabi_dsub>
 80054f0:	4622      	mov	r2, r4
 80054f2:	462b      	mov	r3, r5
 80054f4:	f7fb f898 	bl	8000628 <__aeabi_dmul>
 80054f8:	2200      	movs	r2, #0
 80054fa:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <__ieee754_acos+0x2f4>)
 80054fc:	f7fa fede 	bl	80002bc <__adddf3>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4640      	mov	r0, r8
 8005506:	4649      	mov	r1, r9
 8005508:	f7fb f9b8 	bl	800087c <__aeabi_ddiv>
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	f7fb f88a 	bl	8000628 <__aeabi_dmul>
 8005514:	a320      	add	r3, pc, #128	; (adr r3, 8005598 <__ieee754_acos+0x2d8>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa fecd 	bl	80002b8 <__aeabi_dsub>
 800551e:	4632      	mov	r2, r6
 8005520:	463b      	mov	r3, r7
 8005522:	f7fa fecb 	bl	80002bc <__adddf3>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	f7fa fec7 	bl	80002bc <__adddf3>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	a103      	add	r1, pc, #12	; (adr r1, 8005540 <__ieee754_acos+0x280>)
 8005534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005538:	e76f      	b.n	800541a <__ieee754_acos+0x15a>
 800553a:	bf00      	nop
 800553c:	f3af 8000 	nop.w
 8005540:	54442d18 	.word	0x54442d18
 8005544:	400921fb 	.word	0x400921fb
 8005548:	0dfdf709 	.word	0x0dfdf709
 800554c:	3f023de1 	.word	0x3f023de1
 8005550:	7501b288 	.word	0x7501b288
 8005554:	3f49efe0 	.word	0x3f49efe0
 8005558:	b5688f3b 	.word	0xb5688f3b
 800555c:	3fa48228 	.word	0x3fa48228
 8005560:	0e884455 	.word	0x0e884455
 8005564:	3fc9c155 	.word	0x3fc9c155
 8005568:	03eb6f7d 	.word	0x03eb6f7d
 800556c:	3fd4d612 	.word	0x3fd4d612
 8005570:	55555555 	.word	0x55555555
 8005574:	3fc55555 	.word	0x3fc55555
 8005578:	b12e9282 	.word	0xb12e9282
 800557c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005580:	1b8d0159 	.word	0x1b8d0159
 8005584:	3fe6066c 	.word	0x3fe6066c
 8005588:	9c598ac8 	.word	0x9c598ac8
 800558c:	40002ae5 	.word	0x40002ae5
 8005590:	1c8a2d4b 	.word	0x1c8a2d4b
 8005594:	40033a27 	.word	0x40033a27
 8005598:	33145c07 	.word	0x33145c07
 800559c:	3c91a626 	.word	0x3c91a626
 80055a0:	54442d18 	.word	0x54442d18
 80055a4:	3ff921fb 	.word	0x3ff921fb
 80055a8:	3fefffff 	.word	0x3fefffff
 80055ac:	3fdfffff 	.word	0x3fdfffff
 80055b0:	3c600000 	.word	0x3c600000
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	3fe00000 	.word	0x3fe00000
 80055bc:	ee10 2a10 	vmov	r2, s0
 80055c0:	462b      	mov	r3, r5
 80055c2:	2000      	movs	r0, #0
 80055c4:	496a      	ldr	r1, [pc, #424]	; (8005770 <__ieee754_acos+0x4b0>)
 80055c6:	f7fa fe77 	bl	80002b8 <__aeabi_dsub>
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b69      	ldr	r3, [pc, #420]	; (8005774 <__ieee754_acos+0x4b4>)
 80055ce:	f7fb f82b 	bl	8000628 <__aeabi_dmul>
 80055d2:	4604      	mov	r4, r0
 80055d4:	460d      	mov	r5, r1
 80055d6:	ec45 4b10 	vmov	d0, r4, r5
 80055da:	f000 fde3 	bl	80061a4 <__ieee754_sqrt>
 80055de:	a34e      	add	r3, pc, #312	; (adr r3, 8005718 <__ieee754_acos+0x458>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	4620      	mov	r0, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	ec59 8b10 	vmov	r8, r9, d0
 80055ec:	f7fb f81c 	bl	8000628 <__aeabi_dmul>
 80055f0:	a34b      	add	r3, pc, #300	; (adr r3, 8005720 <__ieee754_acos+0x460>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe61 	bl	80002bc <__adddf3>
 80055fa:	4622      	mov	r2, r4
 80055fc:	462b      	mov	r3, r5
 80055fe:	f7fb f813 	bl	8000628 <__aeabi_dmul>
 8005602:	a349      	add	r3, pc, #292	; (adr r3, 8005728 <__ieee754_acos+0x468>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fa fe56 	bl	80002b8 <__aeabi_dsub>
 800560c:	4622      	mov	r2, r4
 800560e:	462b      	mov	r3, r5
 8005610:	f7fb f80a 	bl	8000628 <__aeabi_dmul>
 8005614:	a346      	add	r3, pc, #280	; (adr r3, 8005730 <__ieee754_acos+0x470>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa fe4f 	bl	80002bc <__adddf3>
 800561e:	4622      	mov	r2, r4
 8005620:	462b      	mov	r3, r5
 8005622:	f7fb f801 	bl	8000628 <__aeabi_dmul>
 8005626:	a344      	add	r3, pc, #272	; (adr r3, 8005738 <__ieee754_acos+0x478>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f7fa fe44 	bl	80002b8 <__aeabi_dsub>
 8005630:	4622      	mov	r2, r4
 8005632:	462b      	mov	r3, r5
 8005634:	f7fa fff8 	bl	8000628 <__aeabi_dmul>
 8005638:	a341      	add	r3, pc, #260	; (adr r3, 8005740 <__ieee754_acos+0x480>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fe3d 	bl	80002bc <__adddf3>
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	f7fa ffef 	bl	8000628 <__aeabi_dmul>
 800564a:	a33f      	add	r3, pc, #252	; (adr r3, 8005748 <__ieee754_acos+0x488>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	4682      	mov	sl, r0
 8005652:	468b      	mov	fp, r1
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa ffe6 	bl	8000628 <__aeabi_dmul>
 800565c:	a33c      	add	r3, pc, #240	; (adr r3, 8005750 <__ieee754_acos+0x490>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fa fe29 	bl	80002b8 <__aeabi_dsub>
 8005666:	4622      	mov	r2, r4
 8005668:	462b      	mov	r3, r5
 800566a:	f7fa ffdd 	bl	8000628 <__aeabi_dmul>
 800566e:	a33a      	add	r3, pc, #232	; (adr r3, 8005758 <__ieee754_acos+0x498>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa fe22 	bl	80002bc <__adddf3>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ffd4 	bl	8000628 <__aeabi_dmul>
 8005680:	a337      	add	r3, pc, #220	; (adr r3, 8005760 <__ieee754_acos+0x4a0>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa fe17 	bl	80002b8 <__aeabi_dsub>
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	f7fa ffcb 	bl	8000628 <__aeabi_dmul>
 8005692:	2200      	movs	r2, #0
 8005694:	4b36      	ldr	r3, [pc, #216]	; (8005770 <__ieee754_acos+0x4b0>)
 8005696:	f7fa fe11 	bl	80002bc <__adddf3>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4650      	mov	r0, sl
 80056a0:	4659      	mov	r1, fp
 80056a2:	f7fb f8eb 	bl	800087c <__aeabi_ddiv>
 80056a6:	4642      	mov	r2, r8
 80056a8:	464b      	mov	r3, r9
 80056aa:	f7fa ffbd 	bl	8000628 <__aeabi_dmul>
 80056ae:	2600      	movs	r6, #0
 80056b0:	4682      	mov	sl, r0
 80056b2:	468b      	mov	fp, r1
 80056b4:	4632      	mov	r2, r6
 80056b6:	464b      	mov	r3, r9
 80056b8:	4630      	mov	r0, r6
 80056ba:	4649      	mov	r1, r9
 80056bc:	f7fa ffb4 	bl	8000628 <__aeabi_dmul>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4620      	mov	r0, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7fa fdf6 	bl	80002b8 <__aeabi_dsub>
 80056cc:	4632      	mov	r2, r6
 80056ce:	4604      	mov	r4, r0
 80056d0:	460d      	mov	r5, r1
 80056d2:	464b      	mov	r3, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	4649      	mov	r1, r9
 80056d8:	f7fa fdf0 	bl	80002bc <__adddf3>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4620      	mov	r0, r4
 80056e2:	4629      	mov	r1, r5
 80056e4:	f7fb f8ca 	bl	800087c <__aeabi_ddiv>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4650      	mov	r0, sl
 80056ee:	4659      	mov	r1, fp
 80056f0:	f7fa fde4 	bl	80002bc <__adddf3>
 80056f4:	4632      	mov	r2, r6
 80056f6:	464b      	mov	r3, r9
 80056f8:	f7fa fde0 	bl	80002bc <__adddf3>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	f7fa fddc 	bl	80002bc <__adddf3>
 8005704:	e5f1      	b.n	80052ea <__ieee754_acos+0x2a>
 8005706:	2000      	movs	r0, #0
 8005708:	2100      	movs	r1, #0
 800570a:	e5ee      	b.n	80052ea <__ieee754_acos+0x2a>
 800570c:	a116      	add	r1, pc, #88	; (adr r1, 8005768 <__ieee754_acos+0x4a8>)
 800570e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005712:	e5ea      	b.n	80052ea <__ieee754_acos+0x2a>
 8005714:	f3af 8000 	nop.w
 8005718:	0dfdf709 	.word	0x0dfdf709
 800571c:	3f023de1 	.word	0x3f023de1
 8005720:	7501b288 	.word	0x7501b288
 8005724:	3f49efe0 	.word	0x3f49efe0
 8005728:	b5688f3b 	.word	0xb5688f3b
 800572c:	3fa48228 	.word	0x3fa48228
 8005730:	0e884455 	.word	0x0e884455
 8005734:	3fc9c155 	.word	0x3fc9c155
 8005738:	03eb6f7d 	.word	0x03eb6f7d
 800573c:	3fd4d612 	.word	0x3fd4d612
 8005740:	55555555 	.word	0x55555555
 8005744:	3fc55555 	.word	0x3fc55555
 8005748:	b12e9282 	.word	0xb12e9282
 800574c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005750:	1b8d0159 	.word	0x1b8d0159
 8005754:	3fe6066c 	.word	0x3fe6066c
 8005758:	9c598ac8 	.word	0x9c598ac8
 800575c:	40002ae5 	.word	0x40002ae5
 8005760:	1c8a2d4b 	.word	0x1c8a2d4b
 8005764:	40033a27 	.word	0x40033a27
 8005768:	54442d18 	.word	0x54442d18
 800576c:	3ff921fb 	.word	0x3ff921fb
 8005770:	3ff00000 	.word	0x3ff00000
 8005774:	3fe00000 	.word	0x3fe00000

08005778 <__ieee754_asin>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	ec55 4b10 	vmov	r4, r5, d0
 8005780:	4bcb      	ldr	r3, [pc, #812]	; (8005ab0 <__ieee754_asin+0x338>)
 8005782:	b087      	sub	sp, #28
 8005784:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8005788:	429f      	cmp	r7, r3
 800578a:	9501      	str	r5, [sp, #4]
 800578c:	dd31      	ble.n	80057f2 <__ieee754_asin+0x7a>
 800578e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8005792:	ee10 3a10 	vmov	r3, s0
 8005796:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800579a:	433b      	orrs	r3, r7
 800579c:	d117      	bne.n	80057ce <__ieee754_asin+0x56>
 800579e:	a3aa      	add	r3, pc, #680	; (adr r3, 8005a48 <__ieee754_asin+0x2d0>)
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	ee10 0a10 	vmov	r0, s0
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7fa ff3d 	bl	8000628 <__aeabi_dmul>
 80057ae:	a3a8      	add	r3, pc, #672	; (adr r3, 8005a50 <__ieee754_asin+0x2d8>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	4606      	mov	r6, r0
 80057b6:	460f      	mov	r7, r1
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa ff34 	bl	8000628 <__aeabi_dmul>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4630      	mov	r0, r6
 80057c6:	4639      	mov	r1, r7
 80057c8:	f7fa fd78 	bl	80002bc <__adddf3>
 80057cc:	e00a      	b.n	80057e4 <__ieee754_asin+0x6c>
 80057ce:	ee10 2a10 	vmov	r2, s0
 80057d2:	462b      	mov	r3, r5
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fa fd6e 	bl	80002b8 <__aeabi_dsub>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	f7fb f84c 	bl	800087c <__aeabi_ddiv>
 80057e4:	4604      	mov	r4, r0
 80057e6:	460d      	mov	r5, r1
 80057e8:	ec45 4b10 	vmov	d0, r4, r5
 80057ec:	b007      	add	sp, #28
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f2:	4bb0      	ldr	r3, [pc, #704]	; (8005ab4 <__ieee754_asin+0x33c>)
 80057f4:	429f      	cmp	r7, r3
 80057f6:	dc11      	bgt.n	800581c <__ieee754_asin+0xa4>
 80057f8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80057fc:	f280 80ae 	bge.w	800595c <__ieee754_asin+0x1e4>
 8005800:	a395      	add	r3, pc, #596	; (adr r3, 8005a58 <__ieee754_asin+0x2e0>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	ee10 0a10 	vmov	r0, s0
 800580a:	4629      	mov	r1, r5
 800580c:	f7fa fd56 	bl	80002bc <__adddf3>
 8005810:	2200      	movs	r2, #0
 8005812:	4ba9      	ldr	r3, [pc, #676]	; (8005ab8 <__ieee754_asin+0x340>)
 8005814:	f7fb f998 	bl	8000b48 <__aeabi_dcmpgt>
 8005818:	2800      	cmp	r0, #0
 800581a:	d1e5      	bne.n	80057e8 <__ieee754_asin+0x70>
 800581c:	ec45 4b10 	vmov	d0, r4, r5
 8005820:	f001 fc02 	bl	8007028 <fabs>
 8005824:	2000      	movs	r0, #0
 8005826:	ec53 2b10 	vmov	r2, r3, d0
 800582a:	49a3      	ldr	r1, [pc, #652]	; (8005ab8 <__ieee754_asin+0x340>)
 800582c:	f7fa fd44 	bl	80002b8 <__aeabi_dsub>
 8005830:	2200      	movs	r2, #0
 8005832:	4ba2      	ldr	r3, [pc, #648]	; (8005abc <__ieee754_asin+0x344>)
 8005834:	f7fa fef8 	bl	8000628 <__aeabi_dmul>
 8005838:	a389      	add	r3, pc, #548	; (adr r3, 8005a60 <__ieee754_asin+0x2e8>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	4604      	mov	r4, r0
 8005840:	460d      	mov	r5, r1
 8005842:	f7fa fef1 	bl	8000628 <__aeabi_dmul>
 8005846:	a388      	add	r3, pc, #544	; (adr r3, 8005a68 <__ieee754_asin+0x2f0>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fa fd36 	bl	80002bc <__adddf3>
 8005850:	4622      	mov	r2, r4
 8005852:	462b      	mov	r3, r5
 8005854:	f7fa fee8 	bl	8000628 <__aeabi_dmul>
 8005858:	a385      	add	r3, pc, #532	; (adr r3, 8005a70 <__ieee754_asin+0x2f8>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa fd2b 	bl	80002b8 <__aeabi_dsub>
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	f7fa fedf 	bl	8000628 <__aeabi_dmul>
 800586a:	a383      	add	r3, pc, #524	; (adr r3, 8005a78 <__ieee754_asin+0x300>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fd24 	bl	80002bc <__adddf3>
 8005874:	4622      	mov	r2, r4
 8005876:	462b      	mov	r3, r5
 8005878:	f7fa fed6 	bl	8000628 <__aeabi_dmul>
 800587c:	a380      	add	r3, pc, #512	; (adr r3, 8005a80 <__ieee754_asin+0x308>)
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f7fa fd19 	bl	80002b8 <__aeabi_dsub>
 8005886:	4622      	mov	r2, r4
 8005888:	462b      	mov	r3, r5
 800588a:	f7fa fecd 	bl	8000628 <__aeabi_dmul>
 800588e:	a37e      	add	r3, pc, #504	; (adr r3, 8005a88 <__ieee754_asin+0x310>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f7fa fd12 	bl	80002bc <__adddf3>
 8005898:	4622      	mov	r2, r4
 800589a:	462b      	mov	r3, r5
 800589c:	f7fa fec4 	bl	8000628 <__aeabi_dmul>
 80058a0:	a37b      	add	r3, pc, #492	; (adr r3, 8005a90 <__ieee754_asin+0x318>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	4680      	mov	r8, r0
 80058a8:	4689      	mov	r9, r1
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	f7fa febb 	bl	8000628 <__aeabi_dmul>
 80058b2:	a379      	add	r3, pc, #484	; (adr r3, 8005a98 <__ieee754_asin+0x320>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa fcfe 	bl	80002b8 <__aeabi_dsub>
 80058bc:	4622      	mov	r2, r4
 80058be:	462b      	mov	r3, r5
 80058c0:	f7fa feb2 	bl	8000628 <__aeabi_dmul>
 80058c4:	a376      	add	r3, pc, #472	; (adr r3, 8005aa0 <__ieee754_asin+0x328>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fcf7 	bl	80002bc <__adddf3>
 80058ce:	4622      	mov	r2, r4
 80058d0:	462b      	mov	r3, r5
 80058d2:	f7fa fea9 	bl	8000628 <__aeabi_dmul>
 80058d6:	a374      	add	r3, pc, #464	; (adr r3, 8005aa8 <__ieee754_asin+0x330>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa fcec 	bl	80002b8 <__aeabi_dsub>
 80058e0:	4622      	mov	r2, r4
 80058e2:	462b      	mov	r3, r5
 80058e4:	f7fa fea0 	bl	8000628 <__aeabi_dmul>
 80058e8:	4b73      	ldr	r3, [pc, #460]	; (8005ab8 <__ieee754_asin+0x340>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	f7fa fce6 	bl	80002bc <__adddf3>
 80058f0:	ec45 4b10 	vmov	d0, r4, r5
 80058f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058f8:	f000 fc54 	bl	80061a4 <__ieee754_sqrt>
 80058fc:	4b70      	ldr	r3, [pc, #448]	; (8005ac0 <__ieee754_asin+0x348>)
 80058fe:	429f      	cmp	r7, r3
 8005900:	ec5b ab10 	vmov	sl, fp, d0
 8005904:	f340 80de 	ble.w	8005ac4 <__ieee754_asin+0x34c>
 8005908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800590c:	4640      	mov	r0, r8
 800590e:	4649      	mov	r1, r9
 8005910:	f7fa ffb4 	bl	800087c <__aeabi_ddiv>
 8005914:	4652      	mov	r2, sl
 8005916:	465b      	mov	r3, fp
 8005918:	f7fa fe86 	bl	8000628 <__aeabi_dmul>
 800591c:	4652      	mov	r2, sl
 800591e:	465b      	mov	r3, fp
 8005920:	f7fa fccc 	bl	80002bc <__adddf3>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	f7fa fcc8 	bl	80002bc <__adddf3>
 800592c:	a348      	add	r3, pc, #288	; (adr r3, 8005a50 <__ieee754_asin+0x2d8>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fa fcc1 	bl	80002b8 <__aeabi_dsub>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	a143      	add	r1, pc, #268	; (adr r1, 8005a48 <__ieee754_asin+0x2d0>)
 800593c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005940:	f7fa fcba 	bl	80002b8 <__aeabi_dsub>
 8005944:	9b01      	ldr	r3, [sp, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	bfdc      	itt	le
 800594a:	4602      	movle	r2, r0
 800594c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005950:	4604      	mov	r4, r0
 8005952:	460d      	mov	r5, r1
 8005954:	bfdc      	itt	le
 8005956:	4614      	movle	r4, r2
 8005958:	461d      	movle	r5, r3
 800595a:	e745      	b.n	80057e8 <__ieee754_asin+0x70>
 800595c:	ee10 2a10 	vmov	r2, s0
 8005960:	ee10 0a10 	vmov	r0, s0
 8005964:	462b      	mov	r3, r5
 8005966:	4629      	mov	r1, r5
 8005968:	f7fa fe5e 	bl	8000628 <__aeabi_dmul>
 800596c:	a33c      	add	r3, pc, #240	; (adr r3, 8005a60 <__ieee754_asin+0x2e8>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	4606      	mov	r6, r0
 8005974:	460f      	mov	r7, r1
 8005976:	f7fa fe57 	bl	8000628 <__aeabi_dmul>
 800597a:	a33b      	add	r3, pc, #236	; (adr r3, 8005a68 <__ieee754_asin+0x2f0>)
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f7fa fc9c 	bl	80002bc <__adddf3>
 8005984:	4632      	mov	r2, r6
 8005986:	463b      	mov	r3, r7
 8005988:	f7fa fe4e 	bl	8000628 <__aeabi_dmul>
 800598c:	a338      	add	r3, pc, #224	; (adr r3, 8005a70 <__ieee754_asin+0x2f8>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f7fa fc91 	bl	80002b8 <__aeabi_dsub>
 8005996:	4632      	mov	r2, r6
 8005998:	463b      	mov	r3, r7
 800599a:	f7fa fe45 	bl	8000628 <__aeabi_dmul>
 800599e:	a336      	add	r3, pc, #216	; (adr r3, 8005a78 <__ieee754_asin+0x300>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fc8a 	bl	80002bc <__adddf3>
 80059a8:	4632      	mov	r2, r6
 80059aa:	463b      	mov	r3, r7
 80059ac:	f7fa fe3c 	bl	8000628 <__aeabi_dmul>
 80059b0:	a333      	add	r3, pc, #204	; (adr r3, 8005a80 <__ieee754_asin+0x308>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fa fc7f 	bl	80002b8 <__aeabi_dsub>
 80059ba:	4632      	mov	r2, r6
 80059bc:	463b      	mov	r3, r7
 80059be:	f7fa fe33 	bl	8000628 <__aeabi_dmul>
 80059c2:	a331      	add	r3, pc, #196	; (adr r3, 8005a88 <__ieee754_asin+0x310>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fc78 	bl	80002bc <__adddf3>
 80059cc:	4632      	mov	r2, r6
 80059ce:	463b      	mov	r3, r7
 80059d0:	f7fa fe2a 	bl	8000628 <__aeabi_dmul>
 80059d4:	a32e      	add	r3, pc, #184	; (adr r3, 8005a90 <__ieee754_asin+0x318>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	4680      	mov	r8, r0
 80059dc:	4689      	mov	r9, r1
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fa fe21 	bl	8000628 <__aeabi_dmul>
 80059e6:	a32c      	add	r3, pc, #176	; (adr r3, 8005a98 <__ieee754_asin+0x320>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f7fa fc64 	bl	80002b8 <__aeabi_dsub>
 80059f0:	4632      	mov	r2, r6
 80059f2:	463b      	mov	r3, r7
 80059f4:	f7fa fe18 	bl	8000628 <__aeabi_dmul>
 80059f8:	a329      	add	r3, pc, #164	; (adr r3, 8005aa0 <__ieee754_asin+0x328>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fc5d 	bl	80002bc <__adddf3>
 8005a02:	4632      	mov	r2, r6
 8005a04:	463b      	mov	r3, r7
 8005a06:	f7fa fe0f 	bl	8000628 <__aeabi_dmul>
 8005a0a:	a327      	add	r3, pc, #156	; (adr r3, 8005aa8 <__ieee754_asin+0x330>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fc52 	bl	80002b8 <__aeabi_dsub>
 8005a14:	4632      	mov	r2, r6
 8005a16:	463b      	mov	r3, r7
 8005a18:	f7fa fe06 	bl	8000628 <__aeabi_dmul>
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <__ieee754_asin+0x340>)
 8005a20:	f7fa fc4c 	bl	80002bc <__adddf3>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	f7fa ff26 	bl	800087c <__aeabi_ddiv>
 8005a30:	4622      	mov	r2, r4
 8005a32:	462b      	mov	r3, r5
 8005a34:	f7fa fdf8 	bl	8000628 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	e6c2      	b.n	80057c8 <__ieee754_asin+0x50>
 8005a42:	bf00      	nop
 8005a44:	f3af 8000 	nop.w
 8005a48:	54442d18 	.word	0x54442d18
 8005a4c:	3ff921fb 	.word	0x3ff921fb
 8005a50:	33145c07 	.word	0x33145c07
 8005a54:	3c91a626 	.word	0x3c91a626
 8005a58:	8800759c 	.word	0x8800759c
 8005a5c:	7e37e43c 	.word	0x7e37e43c
 8005a60:	0dfdf709 	.word	0x0dfdf709
 8005a64:	3f023de1 	.word	0x3f023de1
 8005a68:	7501b288 	.word	0x7501b288
 8005a6c:	3f49efe0 	.word	0x3f49efe0
 8005a70:	b5688f3b 	.word	0xb5688f3b
 8005a74:	3fa48228 	.word	0x3fa48228
 8005a78:	0e884455 	.word	0x0e884455
 8005a7c:	3fc9c155 	.word	0x3fc9c155
 8005a80:	03eb6f7d 	.word	0x03eb6f7d
 8005a84:	3fd4d612 	.word	0x3fd4d612
 8005a88:	55555555 	.word	0x55555555
 8005a8c:	3fc55555 	.word	0x3fc55555
 8005a90:	b12e9282 	.word	0xb12e9282
 8005a94:	3fb3b8c5 	.word	0x3fb3b8c5
 8005a98:	1b8d0159 	.word	0x1b8d0159
 8005a9c:	3fe6066c 	.word	0x3fe6066c
 8005aa0:	9c598ac8 	.word	0x9c598ac8
 8005aa4:	40002ae5 	.word	0x40002ae5
 8005aa8:	1c8a2d4b 	.word	0x1c8a2d4b
 8005aac:	40033a27 	.word	0x40033a27
 8005ab0:	3fefffff 	.word	0x3fefffff
 8005ab4:	3fdfffff 	.word	0x3fdfffff
 8005ab8:	3ff00000 	.word	0x3ff00000
 8005abc:	3fe00000 	.word	0x3fe00000
 8005ac0:	3fef3332 	.word	0x3fef3332
 8005ac4:	ee10 2a10 	vmov	r2, s0
 8005ac8:	ee10 0a10 	vmov	r0, s0
 8005acc:	465b      	mov	r3, fp
 8005ace:	4659      	mov	r1, fp
 8005ad0:	f7fa fbf4 	bl	80002bc <__adddf3>
 8005ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005adc:	4640      	mov	r0, r8
 8005ade:	4649      	mov	r1, r9
 8005ae0:	f7fa fecc 	bl	800087c <__aeabi_ddiv>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aec:	f7fa fd9c 	bl	8000628 <__aeabi_dmul>
 8005af0:	2600      	movs	r6, #0
 8005af2:	4680      	mov	r8, r0
 8005af4:	4689      	mov	r9, r1
 8005af6:	4632      	mov	r2, r6
 8005af8:	465b      	mov	r3, fp
 8005afa:	4630      	mov	r0, r6
 8005afc:	4659      	mov	r1, fp
 8005afe:	f7fa fd93 	bl	8000628 <__aeabi_dmul>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa fbd5 	bl	80002b8 <__aeabi_dsub>
 8005b0e:	4632      	mov	r2, r6
 8005b10:	4604      	mov	r4, r0
 8005b12:	460d      	mov	r5, r1
 8005b14:	465b      	mov	r3, fp
 8005b16:	4650      	mov	r0, sl
 8005b18:	4659      	mov	r1, fp
 8005b1a:	f7fa fbcf 	bl	80002bc <__adddf3>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f7fa fea9 	bl	800087c <__aeabi_ddiv>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	f7fa fbc5 	bl	80002bc <__adddf3>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	a114      	add	r1, pc, #80	; (adr r1, 8005b88 <__ieee754_asin+0x410>)
 8005b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b3c:	f7fa fbbc 	bl	80002b8 <__aeabi_dsub>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4640      	mov	r0, r8
 8005b46:	4649      	mov	r1, r9
 8005b48:	f7fa fbb6 	bl	80002b8 <__aeabi_dsub>
 8005b4c:	465f      	mov	r7, fp
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
 8005b52:	4632      	mov	r2, r6
 8005b54:	465b      	mov	r3, fp
 8005b56:	4630      	mov	r0, r6
 8005b58:	4639      	mov	r1, r7
 8005b5a:	f7fa fbaf 	bl	80002bc <__adddf3>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	a10b      	add	r1, pc, #44	; (adr r1, 8005b90 <__ieee754_asin+0x418>)
 8005b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b68:	f7fa fba6 	bl	80002b8 <__aeabi_dsub>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4620      	mov	r0, r4
 8005b72:	4629      	mov	r1, r5
 8005b74:	f7fa fba0 	bl	80002b8 <__aeabi_dsub>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	a104      	add	r1, pc, #16	; (adr r1, 8005b90 <__ieee754_asin+0x418>)
 8005b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b82:	e6dd      	b.n	8005940 <__ieee754_asin+0x1c8>
 8005b84:	f3af 8000 	nop.w
 8005b88:	33145c07 	.word	0x33145c07
 8005b8c:	3c91a626 	.word	0x3c91a626
 8005b90:	54442d18 	.word	0x54442d18
 8005b94:	3fe921fb 	.word	0x3fe921fb

08005b98 <__ieee754_fmod>:
 8005b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b9c:	ec53 2b11 	vmov	r2, r3, d1
 8005ba0:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8005ba4:	ea5e 0402 	orrs.w	r4, lr, r2
 8005ba8:	ec51 0b10 	vmov	r0, r1, d0
 8005bac:	461e      	mov	r6, r3
 8005bae:	ee11 5a10 	vmov	r5, s2
 8005bb2:	4694      	mov	ip, r2
 8005bb4:	d00c      	beq.n	8005bd0 <__ieee754_fmod+0x38>
 8005bb6:	4c7a      	ldr	r4, [pc, #488]	; (8005da0 <__ieee754_fmod+0x208>)
 8005bb8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8005bbc:	45a0      	cmp	r8, r4
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	dc06      	bgt.n	8005bd0 <__ieee754_fmod+0x38>
 8005bc2:	4254      	negs	r4, r2
 8005bc4:	4314      	orrs	r4, r2
 8005bc6:	4f77      	ldr	r7, [pc, #476]	; (8005da4 <__ieee754_fmod+0x20c>)
 8005bc8:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8005bcc:	42bc      	cmp	r4, r7
 8005bce:	d909      	bls.n	8005be4 <__ieee754_fmod+0x4c>
 8005bd0:	f7fa fd2a 	bl	8000628 <__aeabi_dmul>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	f7fa fe50 	bl	800087c <__aeabi_ddiv>
 8005bdc:	ec41 0b10 	vmov	d0, r0, r1
 8005be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be4:	45f0      	cmp	r8, lr
 8005be6:	ee10 2a10 	vmov	r2, s0
 8005bea:	4607      	mov	r7, r0
 8005bec:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8005bf0:	dc0a      	bgt.n	8005c08 <__ieee754_fmod+0x70>
 8005bf2:	dbf3      	blt.n	8005bdc <__ieee754_fmod+0x44>
 8005bf4:	42a8      	cmp	r0, r5
 8005bf6:	d3f1      	bcc.n	8005bdc <__ieee754_fmod+0x44>
 8005bf8:	d106      	bne.n	8005c08 <__ieee754_fmod+0x70>
 8005bfa:	496b      	ldr	r1, [pc, #428]	; (8005da8 <__ieee754_fmod+0x210>)
 8005bfc:	0fe4      	lsrs	r4, r4, #31
 8005bfe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005c02:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005c06:	e7e9      	b.n	8005bdc <__ieee754_fmod+0x44>
 8005c08:	4b68      	ldr	r3, [pc, #416]	; (8005dac <__ieee754_fmod+0x214>)
 8005c0a:	4598      	cmp	r8, r3
 8005c0c:	dc49      	bgt.n	8005ca2 <__ieee754_fmod+0x10a>
 8005c0e:	f1b8 0f00 	cmp.w	r8, #0
 8005c12:	d13d      	bne.n	8005c90 <__ieee754_fmod+0xf8>
 8005c14:	4866      	ldr	r0, [pc, #408]	; (8005db0 <__ieee754_fmod+0x218>)
 8005c16:	4611      	mov	r1, r2
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	dc36      	bgt.n	8005c8a <__ieee754_fmod+0xf2>
 8005c1c:	459e      	cmp	lr, r3
 8005c1e:	dc51      	bgt.n	8005cc4 <__ieee754_fmod+0x12c>
 8005c20:	f1be 0f00 	cmp.w	lr, #0
 8005c24:	d145      	bne.n	8005cb2 <__ieee754_fmod+0x11a>
 8005c26:	4b62      	ldr	r3, [pc, #392]	; (8005db0 <__ieee754_fmod+0x218>)
 8005c28:	4629      	mov	r1, r5
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	dc3e      	bgt.n	8005cac <__ieee754_fmod+0x114>
 8005c2e:	4961      	ldr	r1, [pc, #388]	; (8005db4 <__ieee754_fmod+0x21c>)
 8005c30:	4288      	cmp	r0, r1
 8005c32:	db4c      	blt.n	8005cce <__ieee754_fmod+0x136>
 8005c34:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8005c38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005c3c:	4a5d      	ldr	r2, [pc, #372]	; (8005db4 <__ieee754_fmod+0x21c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	db59      	blt.n	8005cf6 <__ieee754_fmod+0x15e>
 8005c42:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8005c46:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8005c4a:	1ac0      	subs	r0, r0, r3
 8005c4c:	1b8a      	subs	r2, r1, r6
 8005c4e:	eba7 050c 	sub.w	r5, r7, ip
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d166      	bne.n	8005d24 <__ieee754_fmod+0x18c>
 8005c56:	4567      	cmp	r7, ip
 8005c58:	bf38      	it	cc
 8005c5a:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	bfbc      	itt	lt
 8005c62:	463d      	movlt	r5, r7
 8005c64:	460a      	movlt	r2, r1
 8005c66:	ea52 0105 	orrs.w	r1, r2, r5
 8005c6a:	d0c6      	beq.n	8005bfa <__ieee754_fmod+0x62>
 8005c6c:	494f      	ldr	r1, [pc, #316]	; (8005dac <__ieee754_fmod+0x214>)
 8005c6e:	428a      	cmp	r2, r1
 8005c70:	dd6d      	ble.n	8005d4e <__ieee754_fmod+0x1b6>
 8005c72:	4950      	ldr	r1, [pc, #320]	; (8005db4 <__ieee754_fmod+0x21c>)
 8005c74:	428b      	cmp	r3, r1
 8005c76:	db70      	blt.n	8005d5a <__ieee754_fmod+0x1c2>
 8005c78:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8005c7c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005c80:	4314      	orrs	r4, r2
 8005c82:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8005c86:	4628      	mov	r0, r5
 8005c88:	e7a8      	b.n	8005bdc <__ieee754_fmod+0x44>
 8005c8a:	3801      	subs	r0, #1
 8005c8c:	0049      	lsls	r1, r1, #1
 8005c8e:	e7c3      	b.n	8005c18 <__ieee754_fmod+0x80>
 8005c90:	4848      	ldr	r0, [pc, #288]	; (8005db4 <__ieee754_fmod+0x21c>)
 8005c92:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8005c96:	0049      	lsls	r1, r1, #1
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	f100 30ff 	add.w	r0, r0, #4294967295
 8005c9e:	dcfa      	bgt.n	8005c96 <__ieee754_fmod+0xfe>
 8005ca0:	e7bc      	b.n	8005c1c <__ieee754_fmod+0x84>
 8005ca2:	ea4f 5028 	mov.w	r0, r8, asr #20
 8005ca6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005caa:	e7b7      	b.n	8005c1c <__ieee754_fmod+0x84>
 8005cac:	3b01      	subs	r3, #1
 8005cae:	0049      	lsls	r1, r1, #1
 8005cb0:	e7bb      	b.n	8005c2a <__ieee754_fmod+0x92>
 8005cb2:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <__ieee754_fmod+0x21c>)
 8005cb4:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8005cb8:	0049      	lsls	r1, r1, #1
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cc0:	dcfa      	bgt.n	8005cb8 <__ieee754_fmod+0x120>
 8005cc2:	e7b4      	b.n	8005c2e <__ieee754_fmod+0x96>
 8005cc4:	ea4f 532e 	mov.w	r3, lr, asr #20
 8005cc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ccc:	e7af      	b.n	8005c2e <__ieee754_fmod+0x96>
 8005cce:	1a0f      	subs	r7, r1, r0
 8005cd0:	2f1f      	cmp	r7, #31
 8005cd2:	dc0a      	bgt.n	8005cea <__ieee754_fmod+0x152>
 8005cd4:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8005cd8:	fa08 f807 	lsl.w	r8, r8, r7
 8005cdc:	fa22 f101 	lsr.w	r1, r2, r1
 8005ce0:	ea41 0108 	orr.w	r1, r1, r8
 8005ce4:	fa02 f707 	lsl.w	r7, r2, r7
 8005ce8:	e7a8      	b.n	8005c3c <__ieee754_fmod+0xa4>
 8005cea:	4933      	ldr	r1, [pc, #204]	; (8005db8 <__ieee754_fmod+0x220>)
 8005cec:	1a09      	subs	r1, r1, r0
 8005cee:	fa02 f101 	lsl.w	r1, r2, r1
 8005cf2:	2700      	movs	r7, #0
 8005cf4:	e7a2      	b.n	8005c3c <__ieee754_fmod+0xa4>
 8005cf6:	eba2 0c03 	sub.w	ip, r2, r3
 8005cfa:	f1bc 0f1f 	cmp.w	ip, #31
 8005cfe:	dc0a      	bgt.n	8005d16 <__ieee754_fmod+0x17e>
 8005d00:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8005d04:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005d08:	fa25 f606 	lsr.w	r6, r5, r6
 8005d0c:	ea46 060e 	orr.w	r6, r6, lr
 8005d10:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005d14:	e799      	b.n	8005c4a <__ieee754_fmod+0xb2>
 8005d16:	4e28      	ldr	r6, [pc, #160]	; (8005db8 <__ieee754_fmod+0x220>)
 8005d18:	1af6      	subs	r6, r6, r3
 8005d1a:	fa05 f606 	lsl.w	r6, r5, r6
 8005d1e:	f04f 0c00 	mov.w	ip, #0
 8005d22:	e792      	b.n	8005c4a <__ieee754_fmod+0xb2>
 8005d24:	4567      	cmp	r7, ip
 8005d26:	bf38      	it	cc
 8005d28:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	da05      	bge.n	8005d3c <__ieee754_fmod+0x1a4>
 8005d30:	0ffa      	lsrs	r2, r7, #31
 8005d32:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005d36:	007f      	lsls	r7, r7, #1
 8005d38:	3801      	subs	r0, #1
 8005d3a:	e787      	b.n	8005c4c <__ieee754_fmod+0xb4>
 8005d3c:	ea52 0105 	orrs.w	r1, r2, r5
 8005d40:	f43f af5b 	beq.w	8005bfa <__ieee754_fmod+0x62>
 8005d44:	0fe9      	lsrs	r1, r5, #31
 8005d46:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005d4a:	006f      	lsls	r7, r5, #1
 8005d4c:	e7f4      	b.n	8005d38 <__ieee754_fmod+0x1a0>
 8005d4e:	0fe8      	lsrs	r0, r5, #31
 8005d50:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005d54:	006d      	lsls	r5, r5, #1
 8005d56:	3b01      	subs	r3, #1
 8005d58:	e789      	b.n	8005c6e <__ieee754_fmod+0xd6>
 8005d5a:	1ac9      	subs	r1, r1, r3
 8005d5c:	2914      	cmp	r1, #20
 8005d5e:	dc0a      	bgt.n	8005d76 <__ieee754_fmod+0x1de>
 8005d60:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	40cd      	lsrs	r5, r1
 8005d6a:	432b      	orrs	r3, r5
 8005d6c:	410a      	asrs	r2, r1
 8005d6e:	ea42 0104 	orr.w	r1, r2, r4
 8005d72:	4618      	mov	r0, r3
 8005d74:	e732      	b.n	8005bdc <__ieee754_fmod+0x44>
 8005d76:	291f      	cmp	r1, #31
 8005d78:	dc07      	bgt.n	8005d8a <__ieee754_fmod+0x1f2>
 8005d7a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d7e:	40cd      	lsrs	r5, r1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	432b      	orrs	r3, r5
 8005d86:	4622      	mov	r2, r4
 8005d88:	e7f1      	b.n	8005d6e <__ieee754_fmod+0x1d6>
 8005d8a:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005d8e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005d92:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8005d96:	33e2      	adds	r3, #226	; 0xe2
 8005d98:	fa42 f303 	asr.w	r3, r2, r3
 8005d9c:	e7f3      	b.n	8005d86 <__ieee754_fmod+0x1ee>
 8005d9e:	bf00      	nop
 8005da0:	7fefffff 	.word	0x7fefffff
 8005da4:	7ff00000 	.word	0x7ff00000
 8005da8:	080088f0 	.word	0x080088f0
 8005dac:	000fffff 	.word	0x000fffff
 8005db0:	fffffbed 	.word	0xfffffbed
 8005db4:	fffffc02 	.word	0xfffffc02
 8005db8:	fffffbe2 	.word	0xfffffbe2
 8005dbc:	00000000 	.word	0x00000000

08005dc0 <__ieee754_rem_pio2>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	ec57 6b10 	vmov	r6, r7, d0
 8005dc8:	4bc3      	ldr	r3, [pc, #780]	; (80060d8 <__ieee754_rem_pio2+0x318>)
 8005dca:	b08d      	sub	sp, #52	; 0x34
 8005dcc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005dd0:	4598      	cmp	r8, r3
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	9704      	str	r7, [sp, #16]
 8005dd6:	dc07      	bgt.n	8005de8 <__ieee754_rem_pio2+0x28>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	ed84 0b00 	vstr	d0, [r4]
 8005de0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005de4:	2500      	movs	r5, #0
 8005de6:	e027      	b.n	8005e38 <__ieee754_rem_pio2+0x78>
 8005de8:	4bbc      	ldr	r3, [pc, #752]	; (80060dc <__ieee754_rem_pio2+0x31c>)
 8005dea:	4598      	cmp	r8, r3
 8005dec:	dc75      	bgt.n	8005eda <__ieee754_rem_pio2+0x11a>
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	4dbb      	ldr	r5, [pc, #748]	; (80060e0 <__ieee754_rem_pio2+0x320>)
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	ee10 0a10 	vmov	r0, s0
 8005df8:	a3a9      	add	r3, pc, #676	; (adr r3, 80060a0 <__ieee754_rem_pio2+0x2e0>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	4639      	mov	r1, r7
 8005e00:	dd36      	ble.n	8005e70 <__ieee754_rem_pio2+0xb0>
 8005e02:	f7fa fa59 	bl	80002b8 <__aeabi_dsub>
 8005e06:	45a8      	cmp	r8, r5
 8005e08:	4606      	mov	r6, r0
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	d018      	beq.n	8005e40 <__ieee754_rem_pio2+0x80>
 8005e0e:	a3a6      	add	r3, pc, #664	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e8>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fa50 	bl	80002b8 <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	e9c4 2300 	strd	r2, r3, [r4]
 8005e20:	4630      	mov	r0, r6
 8005e22:	4639      	mov	r1, r7
 8005e24:	f7fa fa48 	bl	80002b8 <__aeabi_dsub>
 8005e28:	a39f      	add	r3, pc, #636	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e8>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fa43 	bl	80002b8 <__aeabi_dsub>
 8005e32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e36:	2501      	movs	r5, #1
 8005e38:	4628      	mov	r0, r5
 8005e3a:	b00d      	add	sp, #52	; 0x34
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	a39b      	add	r3, pc, #620	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x2f0>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fa37 	bl	80002b8 <__aeabi_dsub>
 8005e4a:	a39b      	add	r3, pc, #620	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f8>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	4606      	mov	r6, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	f7fa fa30 	bl	80002b8 <__aeabi_dsub>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	e9c4 2300 	strd	r2, r3, [r4]
 8005e60:	4630      	mov	r0, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	f7fa fa28 	bl	80002b8 <__aeabi_dsub>
 8005e68:	a393      	add	r3, pc, #588	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f8>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	e7de      	b.n	8005e2e <__ieee754_rem_pio2+0x6e>
 8005e70:	f7fa fa24 	bl	80002bc <__adddf3>
 8005e74:	45a8      	cmp	r8, r5
 8005e76:	4606      	mov	r6, r0
 8005e78:	460f      	mov	r7, r1
 8005e7a:	d016      	beq.n	8005eaa <__ieee754_rem_pio2+0xea>
 8005e7c:	a38a      	add	r3, pc, #552	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e8>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa fa1b 	bl	80002bc <__adddf3>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	e9c4 2300 	strd	r2, r3, [r4]
 8005e8e:	4630      	mov	r0, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	f7fa fa11 	bl	80002b8 <__aeabi_dsub>
 8005e96:	a384      	add	r3, pc, #528	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e8>)
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f7fa fa0e 	bl	80002bc <__adddf3>
 8005ea0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ea8:	e7c6      	b.n	8005e38 <__ieee754_rem_pio2+0x78>
 8005eaa:	a381      	add	r3, pc, #516	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x2f0>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa fa04 	bl	80002bc <__adddf3>
 8005eb4:	a380      	add	r3, pc, #512	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f8>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	4606      	mov	r6, r0
 8005ebc:	460f      	mov	r7, r1
 8005ebe:	f7fa f9fd 	bl	80002bc <__adddf3>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	e9c4 2300 	strd	r2, r3, [r4]
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4639      	mov	r1, r7
 8005ece:	f7fa f9f3 	bl	80002b8 <__aeabi_dsub>
 8005ed2:	a379      	add	r3, pc, #484	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f8>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	e7e0      	b.n	8005e9c <__ieee754_rem_pio2+0xdc>
 8005eda:	4b82      	ldr	r3, [pc, #520]	; (80060e4 <__ieee754_rem_pio2+0x324>)
 8005edc:	4598      	cmp	r8, r3
 8005ede:	f300 80d0 	bgt.w	8006082 <__ieee754_rem_pio2+0x2c2>
 8005ee2:	f001 f8a1 	bl	8007028 <fabs>
 8005ee6:	ec57 6b10 	vmov	r6, r7, d0
 8005eea:	ee10 0a10 	vmov	r0, s0
 8005eee:	a374      	add	r3, pc, #464	; (adr r3, 80060c0 <__ieee754_rem_pio2+0x300>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	4639      	mov	r1, r7
 8005ef6:	f7fa fb97 	bl	8000628 <__aeabi_dmul>
 8005efa:	2200      	movs	r2, #0
 8005efc:	4b7a      	ldr	r3, [pc, #488]	; (80060e8 <__ieee754_rem_pio2+0x328>)
 8005efe:	f7fa f9dd 	bl	80002bc <__adddf3>
 8005f02:	f7fa fe41 	bl	8000b88 <__aeabi_d2iz>
 8005f06:	4605      	mov	r5, r0
 8005f08:	f7fa fb24 	bl	8000554 <__aeabi_i2d>
 8005f0c:	a364      	add	r3, pc, #400	; (adr r3, 80060a0 <__ieee754_rem_pio2+0x2e0>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f16:	f7fa fb87 	bl	8000628 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa f9c9 	bl	80002b8 <__aeabi_dsub>
 8005f26:	a360      	add	r3, pc, #384	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e8>)
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	468b      	mov	fp, r1
 8005f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f34:	f7fa fb78 	bl	8000628 <__aeabi_dmul>
 8005f38:	2d1f      	cmp	r5, #31
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	460f      	mov	r7, r1
 8005f3e:	dc0c      	bgt.n	8005f5a <__ieee754_rem_pio2+0x19a>
 8005f40:	1e6a      	subs	r2, r5, #1
 8005f42:	4b6a      	ldr	r3, [pc, #424]	; (80060ec <__ieee754_rem_pio2+0x32c>)
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	4543      	cmp	r3, r8
 8005f4a:	d006      	beq.n	8005f5a <__ieee754_rem_pio2+0x19a>
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	4650      	mov	r0, sl
 8005f52:	4659      	mov	r1, fp
 8005f54:	f7fa f9b0 	bl	80002b8 <__aeabi_dsub>
 8005f58:	e00e      	b.n	8005f78 <__ieee754_rem_pio2+0x1b8>
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	4650      	mov	r0, sl
 8005f60:	4659      	mov	r1, fp
 8005f62:	f7fa f9a9 	bl	80002b8 <__aeabi_dsub>
 8005f66:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	9a05      	ldr	r2, [sp, #20]
 8005f6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	dc02      	bgt.n	8005f7e <__ieee754_rem_pio2+0x1be>
 8005f78:	e9c4 0100 	strd	r0, r1, [r4]
 8005f7c:	e039      	b.n	8005ff2 <__ieee754_rem_pio2+0x232>
 8005f7e:	a34c      	add	r3, pc, #304	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x2f0>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f88:	f7fa fb4e 	bl	8000628 <__aeabi_dmul>
 8005f8c:	4606      	mov	r6, r0
 8005f8e:	460f      	mov	r7, r1
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4650      	mov	r0, sl
 8005f96:	4659      	mov	r1, fp
 8005f98:	f7fa f98e 	bl	80002b8 <__aeabi_dsub>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4680      	mov	r8, r0
 8005fa2:	4689      	mov	r9, r1
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	f7fa f986 	bl	80002b8 <__aeabi_dsub>
 8005fac:	4632      	mov	r2, r6
 8005fae:	463b      	mov	r3, r7
 8005fb0:	f7fa f982 	bl	80002b8 <__aeabi_dsub>
 8005fb4:	a340      	add	r3, pc, #256	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f8>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	4606      	mov	r6, r0
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc2:	f7fa fb31 	bl	8000628 <__aeabi_dmul>
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	463b      	mov	r3, r7
 8005fca:	f7fa f975 	bl	80002b8 <__aeabi_dsub>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460f      	mov	r7, r1
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa f96d 	bl	80002b8 <__aeabi_dsub>
 8005fde:	9a05      	ldr	r2, [sp, #20]
 8005fe0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b31      	cmp	r3, #49	; 0x31
 8005fe8:	dc20      	bgt.n	800602c <__ieee754_rem_pio2+0x26c>
 8005fea:	e9c4 0100 	strd	r0, r1, [r4]
 8005fee:	46c2      	mov	sl, r8
 8005ff0:	46cb      	mov	fp, r9
 8005ff2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005ff6:	4650      	mov	r0, sl
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	f7fa f95b 	bl	80002b8 <__aeabi_dsub>
 8006002:	463b      	mov	r3, r7
 8006004:	4632      	mov	r2, r6
 8006006:	f7fa f957 	bl	80002b8 <__aeabi_dsub>
 800600a:	9b04      	ldr	r3, [sp, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006012:	f6bf af11 	bge.w	8005e38 <__ieee754_rem_pio2+0x78>
 8006016:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	f8c4 8000 	str.w	r8, [r4]
 8006020:	60a0      	str	r0, [r4, #8]
 8006022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006026:	60e3      	str	r3, [r4, #12]
 8006028:	426d      	negs	r5, r5
 800602a:	e705      	b.n	8005e38 <__ieee754_rem_pio2+0x78>
 800602c:	a326      	add	r3, pc, #152	; (adr r3, 80060c8 <__ieee754_rem_pio2+0x308>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006036:	f7fa faf7 	bl	8000628 <__aeabi_dmul>
 800603a:	4606      	mov	r6, r0
 800603c:	460f      	mov	r7, r1
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4640      	mov	r0, r8
 8006044:	4649      	mov	r1, r9
 8006046:	f7fa f937 	bl	80002b8 <__aeabi_dsub>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4682      	mov	sl, r0
 8006050:	468b      	mov	fp, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa f92f 	bl	80002b8 <__aeabi_dsub>
 800605a:	4632      	mov	r2, r6
 800605c:	463b      	mov	r3, r7
 800605e:	f7fa f92b 	bl	80002b8 <__aeabi_dsub>
 8006062:	a31b      	add	r3, pc, #108	; (adr r3, 80060d0 <__ieee754_rem_pio2+0x310>)
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	4606      	mov	r6, r0
 800606a:	460f      	mov	r7, r1
 800606c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006070:	f7fa fada 	bl	8000628 <__aeabi_dmul>
 8006074:	4632      	mov	r2, r6
 8006076:	463b      	mov	r3, r7
 8006078:	f7fa f91e 	bl	80002b8 <__aeabi_dsub>
 800607c:	4606      	mov	r6, r0
 800607e:	460f      	mov	r7, r1
 8006080:	e764      	b.n	8005f4c <__ieee754_rem_pio2+0x18c>
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <__ieee754_rem_pio2+0x330>)
 8006084:	4598      	cmp	r8, r3
 8006086:	dd35      	ble.n	80060f4 <__ieee754_rem_pio2+0x334>
 8006088:	ee10 2a10 	vmov	r2, s0
 800608c:	463b      	mov	r3, r7
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	f7fa f911 	bl	80002b8 <__aeabi_dsub>
 8006096:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800609a:	e9c4 0100 	strd	r0, r1, [r4]
 800609e:	e6a1      	b.n	8005de4 <__ieee754_rem_pio2+0x24>
 80060a0:	54400000 	.word	0x54400000
 80060a4:	3ff921fb 	.word	0x3ff921fb
 80060a8:	1a626331 	.word	0x1a626331
 80060ac:	3dd0b461 	.word	0x3dd0b461
 80060b0:	1a600000 	.word	0x1a600000
 80060b4:	3dd0b461 	.word	0x3dd0b461
 80060b8:	2e037073 	.word	0x2e037073
 80060bc:	3ba3198a 	.word	0x3ba3198a
 80060c0:	6dc9c883 	.word	0x6dc9c883
 80060c4:	3fe45f30 	.word	0x3fe45f30
 80060c8:	2e000000 	.word	0x2e000000
 80060cc:	3ba3198a 	.word	0x3ba3198a
 80060d0:	252049c1 	.word	0x252049c1
 80060d4:	397b839a 	.word	0x397b839a
 80060d8:	3fe921fb 	.word	0x3fe921fb
 80060dc:	4002d97b 	.word	0x4002d97b
 80060e0:	3ff921fb 	.word	0x3ff921fb
 80060e4:	413921fb 	.word	0x413921fb
 80060e8:	3fe00000 	.word	0x3fe00000
 80060ec:	08008900 	.word	0x08008900
 80060f0:	7fefffff 	.word	0x7fefffff
 80060f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80060f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80060fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006100:	4630      	mov	r0, r6
 8006102:	460f      	mov	r7, r1
 8006104:	f7fa fd40 	bl	8000b88 <__aeabi_d2iz>
 8006108:	f7fa fa24 	bl	8000554 <__aeabi_i2d>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006118:	f7fa f8ce 	bl	80002b8 <__aeabi_dsub>
 800611c:	2200      	movs	r2, #0
 800611e:	4b1f      	ldr	r3, [pc, #124]	; (800619c <__ieee754_rem_pio2+0x3dc>)
 8006120:	f7fa fa82 	bl	8000628 <__aeabi_dmul>
 8006124:	460f      	mov	r7, r1
 8006126:	4606      	mov	r6, r0
 8006128:	f7fa fd2e 	bl	8000b88 <__aeabi_d2iz>
 800612c:	f7fa fa12 	bl	8000554 <__aeabi_i2d>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800613c:	f7fa f8bc 	bl	80002b8 <__aeabi_dsub>
 8006140:	2200      	movs	r2, #0
 8006142:	4b16      	ldr	r3, [pc, #88]	; (800619c <__ieee754_rem_pio2+0x3dc>)
 8006144:	f7fa fa70 	bl	8000628 <__aeabi_dmul>
 8006148:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800614c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006150:	f04f 0803 	mov.w	r8, #3
 8006154:	2600      	movs	r6, #0
 8006156:	2700      	movs	r7, #0
 8006158:	4632      	mov	r2, r6
 800615a:	463b      	mov	r3, r7
 800615c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006160:	f108 3aff 	add.w	sl, r8, #4294967295
 8006164:	f7fa fcc8 	bl	8000af8 <__aeabi_dcmpeq>
 8006168:	b9b0      	cbnz	r0, 8006198 <__ieee754_rem_pio2+0x3d8>
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <__ieee754_rem_pio2+0x3e0>)
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	2302      	movs	r3, #2
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	462a      	mov	r2, r5
 8006174:	4643      	mov	r3, r8
 8006176:	4621      	mov	r1, r4
 8006178:	a806      	add	r0, sp, #24
 800617a:	f000 f98d 	bl	8006498 <__kernel_rem_pio2>
 800617e:	9b04      	ldr	r3, [sp, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	4605      	mov	r5, r0
 8006184:	f6bf ae58 	bge.w	8005e38 <__ieee754_rem_pio2+0x78>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800618e:	6063      	str	r3, [r4, #4]
 8006190:	68e3      	ldr	r3, [r4, #12]
 8006192:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006196:	e746      	b.n	8006026 <__ieee754_rem_pio2+0x266>
 8006198:	46d0      	mov	r8, sl
 800619a:	e7dd      	b.n	8006158 <__ieee754_rem_pio2+0x398>
 800619c:	41700000 	.word	0x41700000
 80061a0:	08008980 	.word	0x08008980

080061a4 <__ieee754_sqrt>:
 80061a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a8:	4955      	ldr	r1, [pc, #340]	; (8006300 <__ieee754_sqrt+0x15c>)
 80061aa:	ec55 4b10 	vmov	r4, r5, d0
 80061ae:	43a9      	bics	r1, r5
 80061b0:	462b      	mov	r3, r5
 80061b2:	462a      	mov	r2, r5
 80061b4:	d112      	bne.n	80061dc <__ieee754_sqrt+0x38>
 80061b6:	ee10 2a10 	vmov	r2, s0
 80061ba:	ee10 0a10 	vmov	r0, s0
 80061be:	4629      	mov	r1, r5
 80061c0:	f7fa fa32 	bl	8000628 <__aeabi_dmul>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4620      	mov	r0, r4
 80061ca:	4629      	mov	r1, r5
 80061cc:	f7fa f876 	bl	80002bc <__adddf3>
 80061d0:	4604      	mov	r4, r0
 80061d2:	460d      	mov	r5, r1
 80061d4:	ec45 4b10 	vmov	d0, r4, r5
 80061d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061dc:	2d00      	cmp	r5, #0
 80061de:	ee10 0a10 	vmov	r0, s0
 80061e2:	4621      	mov	r1, r4
 80061e4:	dc0f      	bgt.n	8006206 <__ieee754_sqrt+0x62>
 80061e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80061ea:	4330      	orrs	r0, r6
 80061ec:	d0f2      	beq.n	80061d4 <__ieee754_sqrt+0x30>
 80061ee:	b155      	cbz	r5, 8006206 <__ieee754_sqrt+0x62>
 80061f0:	ee10 2a10 	vmov	r2, s0
 80061f4:	4620      	mov	r0, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	f7fa f85e 	bl	80002b8 <__aeabi_dsub>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	f7fa fb3c 	bl	800087c <__aeabi_ddiv>
 8006204:	e7e4      	b.n	80061d0 <__ieee754_sqrt+0x2c>
 8006206:	151b      	asrs	r3, r3, #20
 8006208:	d073      	beq.n	80062f2 <__ieee754_sqrt+0x14e>
 800620a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800620e:	07dd      	lsls	r5, r3, #31
 8006210:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006214:	bf48      	it	mi
 8006216:	0fc8      	lsrmi	r0, r1, #31
 8006218:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800621c:	bf44      	itt	mi
 800621e:	0049      	lslmi	r1, r1, #1
 8006220:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006224:	2500      	movs	r5, #0
 8006226:	1058      	asrs	r0, r3, #1
 8006228:	0fcb      	lsrs	r3, r1, #31
 800622a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800622e:	0049      	lsls	r1, r1, #1
 8006230:	2316      	movs	r3, #22
 8006232:	462c      	mov	r4, r5
 8006234:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006238:	19a7      	adds	r7, r4, r6
 800623a:	4297      	cmp	r7, r2
 800623c:	bfde      	ittt	le
 800623e:	19bc      	addle	r4, r7, r6
 8006240:	1bd2      	suble	r2, r2, r7
 8006242:	19ad      	addle	r5, r5, r6
 8006244:	0fcf      	lsrs	r7, r1, #31
 8006246:	3b01      	subs	r3, #1
 8006248:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800624c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006250:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006254:	d1f0      	bne.n	8006238 <__ieee754_sqrt+0x94>
 8006256:	f04f 0c20 	mov.w	ip, #32
 800625a:	469e      	mov	lr, r3
 800625c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006260:	42a2      	cmp	r2, r4
 8006262:	eb06 070e 	add.w	r7, r6, lr
 8006266:	dc02      	bgt.n	800626e <__ieee754_sqrt+0xca>
 8006268:	d112      	bne.n	8006290 <__ieee754_sqrt+0xec>
 800626a:	428f      	cmp	r7, r1
 800626c:	d810      	bhi.n	8006290 <__ieee754_sqrt+0xec>
 800626e:	2f00      	cmp	r7, #0
 8006270:	eb07 0e06 	add.w	lr, r7, r6
 8006274:	da42      	bge.n	80062fc <__ieee754_sqrt+0x158>
 8006276:	f1be 0f00 	cmp.w	lr, #0
 800627a:	db3f      	blt.n	80062fc <__ieee754_sqrt+0x158>
 800627c:	f104 0801 	add.w	r8, r4, #1
 8006280:	1b12      	subs	r2, r2, r4
 8006282:	428f      	cmp	r7, r1
 8006284:	bf88      	it	hi
 8006286:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800628a:	1bc9      	subs	r1, r1, r7
 800628c:	4433      	add	r3, r6
 800628e:	4644      	mov	r4, r8
 8006290:	0052      	lsls	r2, r2, #1
 8006292:	f1bc 0c01 	subs.w	ip, ip, #1
 8006296:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800629a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800629e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80062a2:	d1dd      	bne.n	8006260 <__ieee754_sqrt+0xbc>
 80062a4:	430a      	orrs	r2, r1
 80062a6:	d006      	beq.n	80062b6 <__ieee754_sqrt+0x112>
 80062a8:	1c5c      	adds	r4, r3, #1
 80062aa:	bf13      	iteet	ne
 80062ac:	3301      	addne	r3, #1
 80062ae:	3501      	addeq	r5, #1
 80062b0:	4663      	moveq	r3, ip
 80062b2:	f023 0301 	bicne.w	r3, r3, #1
 80062b6:	106a      	asrs	r2, r5, #1
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	07e9      	lsls	r1, r5, #31
 80062bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80062c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80062c4:	bf48      	it	mi
 80062c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80062ce:	461c      	mov	r4, r3
 80062d0:	e780      	b.n	80061d4 <__ieee754_sqrt+0x30>
 80062d2:	0aca      	lsrs	r2, r1, #11
 80062d4:	3815      	subs	r0, #21
 80062d6:	0549      	lsls	r1, r1, #21
 80062d8:	2a00      	cmp	r2, #0
 80062da:	d0fa      	beq.n	80062d2 <__ieee754_sqrt+0x12e>
 80062dc:	02d6      	lsls	r6, r2, #11
 80062de:	d50a      	bpl.n	80062f6 <__ieee754_sqrt+0x152>
 80062e0:	f1c3 0420 	rsb	r4, r3, #32
 80062e4:	fa21 f404 	lsr.w	r4, r1, r4
 80062e8:	1e5d      	subs	r5, r3, #1
 80062ea:	4099      	lsls	r1, r3
 80062ec:	4322      	orrs	r2, r4
 80062ee:	1b43      	subs	r3, r0, r5
 80062f0:	e78b      	b.n	800620a <__ieee754_sqrt+0x66>
 80062f2:	4618      	mov	r0, r3
 80062f4:	e7f0      	b.n	80062d8 <__ieee754_sqrt+0x134>
 80062f6:	0052      	lsls	r2, r2, #1
 80062f8:	3301      	adds	r3, #1
 80062fa:	e7ef      	b.n	80062dc <__ieee754_sqrt+0x138>
 80062fc:	46a0      	mov	r8, r4
 80062fe:	e7bf      	b.n	8006280 <__ieee754_sqrt+0xdc>
 8006300:	7ff00000 	.word	0x7ff00000
 8006304:	00000000 	.word	0x00000000

08006308 <__kernel_cos>:
 8006308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	ec59 8b10 	vmov	r8, r9, d0
 8006310:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006314:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006318:	ed2d 8b02 	vpush	{d8}
 800631c:	eeb0 8a41 	vmov.f32	s16, s2
 8006320:	eef0 8a61 	vmov.f32	s17, s3
 8006324:	da07      	bge.n	8006336 <__kernel_cos+0x2e>
 8006326:	ee10 0a10 	vmov	r0, s0
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa fc2c 	bl	8000b88 <__aeabi_d2iz>
 8006330:	2800      	cmp	r0, #0
 8006332:	f000 8089 	beq.w	8006448 <__kernel_cos+0x140>
 8006336:	4642      	mov	r2, r8
 8006338:	464b      	mov	r3, r9
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa f973 	bl	8000628 <__aeabi_dmul>
 8006342:	2200      	movs	r2, #0
 8006344:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <__kernel_cos+0x178>)
 8006346:	4604      	mov	r4, r0
 8006348:	460d      	mov	r5, r1
 800634a:	f7fa f96d 	bl	8000628 <__aeabi_dmul>
 800634e:	a340      	add	r3, pc, #256	; (adr r3, 8006450 <__kernel_cos+0x148>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	4682      	mov	sl, r0
 8006356:	468b      	mov	fp, r1
 8006358:	4620      	mov	r0, r4
 800635a:	4629      	mov	r1, r5
 800635c:	f7fa f964 	bl	8000628 <__aeabi_dmul>
 8006360:	a33d      	add	r3, pc, #244	; (adr r3, 8006458 <__kernel_cos+0x150>)
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	f7f9 ffa9 	bl	80002bc <__adddf3>
 800636a:	4622      	mov	r2, r4
 800636c:	462b      	mov	r3, r5
 800636e:	f7fa f95b 	bl	8000628 <__aeabi_dmul>
 8006372:	a33b      	add	r3, pc, #236	; (adr r3, 8006460 <__kernel_cos+0x158>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f7f9 ff9e 	bl	80002b8 <__aeabi_dsub>
 800637c:	4622      	mov	r2, r4
 800637e:	462b      	mov	r3, r5
 8006380:	f7fa f952 	bl	8000628 <__aeabi_dmul>
 8006384:	a338      	add	r3, pc, #224	; (adr r3, 8006468 <__kernel_cos+0x160>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f7f9 ff97 	bl	80002bc <__adddf3>
 800638e:	4622      	mov	r2, r4
 8006390:	462b      	mov	r3, r5
 8006392:	f7fa f949 	bl	8000628 <__aeabi_dmul>
 8006396:	a336      	add	r3, pc, #216	; (adr r3, 8006470 <__kernel_cos+0x168>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7f9 ff8c 	bl	80002b8 <__aeabi_dsub>
 80063a0:	4622      	mov	r2, r4
 80063a2:	462b      	mov	r3, r5
 80063a4:	f7fa f940 	bl	8000628 <__aeabi_dmul>
 80063a8:	a333      	add	r3, pc, #204	; (adr r3, 8006478 <__kernel_cos+0x170>)
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	f7f9 ff85 	bl	80002bc <__adddf3>
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	f7fa f937 	bl	8000628 <__aeabi_dmul>
 80063ba:	4622      	mov	r2, r4
 80063bc:	462b      	mov	r3, r5
 80063be:	f7fa f933 	bl	8000628 <__aeabi_dmul>
 80063c2:	ec53 2b18 	vmov	r2, r3, d8
 80063c6:	4604      	mov	r4, r0
 80063c8:	460d      	mov	r5, r1
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	f7fa f92b 	bl	8000628 <__aeabi_dmul>
 80063d2:	460b      	mov	r3, r1
 80063d4:	4602      	mov	r2, r0
 80063d6:	4629      	mov	r1, r5
 80063d8:	4620      	mov	r0, r4
 80063da:	f7f9 ff6d 	bl	80002b8 <__aeabi_dsub>
 80063de:	4b29      	ldr	r3, [pc, #164]	; (8006484 <__kernel_cos+0x17c>)
 80063e0:	429e      	cmp	r6, r3
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	dc11      	bgt.n	800640c <__kernel_cos+0x104>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4650      	mov	r0, sl
 80063ee:	4659      	mov	r1, fp
 80063f0:	f7f9 ff62 	bl	80002b8 <__aeabi_dsub>
 80063f4:	460b      	mov	r3, r1
 80063f6:	4924      	ldr	r1, [pc, #144]	; (8006488 <__kernel_cos+0x180>)
 80063f8:	4602      	mov	r2, r0
 80063fa:	2000      	movs	r0, #0
 80063fc:	f7f9 ff5c 	bl	80002b8 <__aeabi_dsub>
 8006400:	ecbd 8b02 	vpop	{d8}
 8006404:	ec41 0b10 	vmov	d0, r0, r1
 8006408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	4b1f      	ldr	r3, [pc, #124]	; (800648c <__kernel_cos+0x184>)
 800640e:	491e      	ldr	r1, [pc, #120]	; (8006488 <__kernel_cos+0x180>)
 8006410:	429e      	cmp	r6, r3
 8006412:	bfcc      	ite	gt
 8006414:	4d1e      	ldrgt	r5, [pc, #120]	; (8006490 <__kernel_cos+0x188>)
 8006416:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800641a:	2400      	movs	r4, #0
 800641c:	4622      	mov	r2, r4
 800641e:	462b      	mov	r3, r5
 8006420:	2000      	movs	r0, #0
 8006422:	f7f9 ff49 	bl	80002b8 <__aeabi_dsub>
 8006426:	4622      	mov	r2, r4
 8006428:	4606      	mov	r6, r0
 800642a:	460f      	mov	r7, r1
 800642c:	462b      	mov	r3, r5
 800642e:	4650      	mov	r0, sl
 8006430:	4659      	mov	r1, fp
 8006432:	f7f9 ff41 	bl	80002b8 <__aeabi_dsub>
 8006436:	4642      	mov	r2, r8
 8006438:	464b      	mov	r3, r9
 800643a:	f7f9 ff3d 	bl	80002b8 <__aeabi_dsub>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	e7d9      	b.n	80063fc <__kernel_cos+0xf4>
 8006448:	2000      	movs	r0, #0
 800644a:	490f      	ldr	r1, [pc, #60]	; (8006488 <__kernel_cos+0x180>)
 800644c:	e7d8      	b.n	8006400 <__kernel_cos+0xf8>
 800644e:	bf00      	nop
 8006450:	be8838d4 	.word	0xbe8838d4
 8006454:	bda8fae9 	.word	0xbda8fae9
 8006458:	bdb4b1c4 	.word	0xbdb4b1c4
 800645c:	3e21ee9e 	.word	0x3e21ee9e
 8006460:	809c52ad 	.word	0x809c52ad
 8006464:	3e927e4f 	.word	0x3e927e4f
 8006468:	19cb1590 	.word	0x19cb1590
 800646c:	3efa01a0 	.word	0x3efa01a0
 8006470:	16c15177 	.word	0x16c15177
 8006474:	3f56c16c 	.word	0x3f56c16c
 8006478:	5555554c 	.word	0x5555554c
 800647c:	3fa55555 	.word	0x3fa55555
 8006480:	3fe00000 	.word	0x3fe00000
 8006484:	3fd33332 	.word	0x3fd33332
 8006488:	3ff00000 	.word	0x3ff00000
 800648c:	3fe90000 	.word	0x3fe90000
 8006490:	3fd20000 	.word	0x3fd20000
 8006494:	00000000 	.word	0x00000000

08006498 <__kernel_rem_pio2>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	ed2d 8b02 	vpush	{d8}
 80064a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80064a4:	1ed4      	subs	r4, r2, #3
 80064a6:	9308      	str	r3, [sp, #32]
 80064a8:	9101      	str	r1, [sp, #4]
 80064aa:	4bc5      	ldr	r3, [pc, #788]	; (80067c0 <__kernel_rem_pio2+0x328>)
 80064ac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80064ae:	9009      	str	r0, [sp, #36]	; 0x24
 80064b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9b08      	ldr	r3, [sp, #32]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	9307      	str	r3, [sp, #28]
 80064bc:	2318      	movs	r3, #24
 80064be:	fb94 f4f3 	sdiv	r4, r4, r3
 80064c2:	f06f 0317 	mvn.w	r3, #23
 80064c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80064ca:	fb04 3303 	mla	r3, r4, r3, r3
 80064ce:	eb03 0a02 	add.w	sl, r3, r2
 80064d2:	9b04      	ldr	r3, [sp, #16]
 80064d4:	9a07      	ldr	r2, [sp, #28]
 80064d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80067b0 <__kernel_rem_pio2+0x318>
 80064da:	eb03 0802 	add.w	r8, r3, r2
 80064de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80064e0:	1aa7      	subs	r7, r4, r2
 80064e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80064e6:	ae22      	add	r6, sp, #136	; 0x88
 80064e8:	2500      	movs	r5, #0
 80064ea:	4545      	cmp	r5, r8
 80064ec:	dd13      	ble.n	8006516 <__kernel_rem_pio2+0x7e>
 80064ee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80067b0 <__kernel_rem_pio2+0x318>
 80064f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80064f6:	2600      	movs	r6, #0
 80064f8:	9b04      	ldr	r3, [sp, #16]
 80064fa:	429e      	cmp	r6, r3
 80064fc:	dc32      	bgt.n	8006564 <__kernel_rem_pio2+0xcc>
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	199d      	adds	r5, r3, r6
 8006506:	ab22      	add	r3, sp, #136	; 0x88
 8006508:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800650c:	9306      	str	r3, [sp, #24]
 800650e:	ec59 8b18 	vmov	r8, r9, d8
 8006512:	2700      	movs	r7, #0
 8006514:	e01f      	b.n	8006556 <__kernel_rem_pio2+0xbe>
 8006516:	42ef      	cmn	r7, r5
 8006518:	d407      	bmi.n	800652a <__kernel_rem_pio2+0x92>
 800651a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800651e:	f7fa f819 	bl	8000554 <__aeabi_i2d>
 8006522:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006526:	3501      	adds	r5, #1
 8006528:	e7df      	b.n	80064ea <__kernel_rem_pio2+0x52>
 800652a:	ec51 0b18 	vmov	r0, r1, d8
 800652e:	e7f8      	b.n	8006522 <__kernel_rem_pio2+0x8a>
 8006530:	9906      	ldr	r1, [sp, #24]
 8006532:	9d02      	ldr	r5, [sp, #8]
 8006534:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8006538:	9106      	str	r1, [sp, #24]
 800653a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800653e:	9502      	str	r5, [sp, #8]
 8006540:	f7fa f872 	bl	8000628 <__aeabi_dmul>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4640      	mov	r0, r8
 800654a:	4649      	mov	r1, r9
 800654c:	f7f9 feb6 	bl	80002bc <__adddf3>
 8006550:	3701      	adds	r7, #1
 8006552:	4680      	mov	r8, r0
 8006554:	4689      	mov	r9, r1
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	429f      	cmp	r7, r3
 800655a:	dde9      	ble.n	8006530 <__kernel_rem_pio2+0x98>
 800655c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006560:	3601      	adds	r6, #1
 8006562:	e7c9      	b.n	80064f8 <__kernel_rem_pio2+0x60>
 8006564:	9b04      	ldr	r3, [sp, #16]
 8006566:	aa0e      	add	r2, sp, #56	; 0x38
 8006568:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800656c:	930c      	str	r3, [sp, #48]	; 0x30
 800656e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006570:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006574:	9c04      	ldr	r4, [sp, #16]
 8006576:	930b      	str	r3, [sp, #44]	; 0x2c
 8006578:	ab9a      	add	r3, sp, #616	; 0x268
 800657a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800657e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006586:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800658a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800658e:	ab9a      	add	r3, sp, #616	; 0x268
 8006590:	445b      	add	r3, fp
 8006592:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006596:	2500      	movs	r5, #0
 8006598:	1b63      	subs	r3, r4, r5
 800659a:	2b00      	cmp	r3, #0
 800659c:	dc78      	bgt.n	8006690 <__kernel_rem_pio2+0x1f8>
 800659e:	4650      	mov	r0, sl
 80065a0:	ec49 8b10 	vmov	d0, r8, r9
 80065a4:	f000 fd54 	bl	8007050 <scalbn>
 80065a8:	ec57 6b10 	vmov	r6, r7, d0
 80065ac:	2200      	movs	r2, #0
 80065ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80065b2:	ee10 0a10 	vmov	r0, s0
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa f836 	bl	8000628 <__aeabi_dmul>
 80065bc:	ec41 0b10 	vmov	d0, r0, r1
 80065c0:	f7fe fc6e 	bl	8004ea0 <floor>
 80065c4:	2200      	movs	r2, #0
 80065c6:	ec51 0b10 	vmov	r0, r1, d0
 80065ca:	4b7e      	ldr	r3, [pc, #504]	; (80067c4 <__kernel_rem_pio2+0x32c>)
 80065cc:	f7fa f82c 	bl	8000628 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7f9 fe6e 	bl	80002b8 <__aeabi_dsub>
 80065dc:	460f      	mov	r7, r1
 80065de:	4606      	mov	r6, r0
 80065e0:	f7fa fad2 	bl	8000b88 <__aeabi_d2iz>
 80065e4:	9006      	str	r0, [sp, #24]
 80065e6:	f7f9 ffb5 	bl	8000554 <__aeabi_i2d>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7f9 fe61 	bl	80002b8 <__aeabi_dsub>
 80065f6:	f1ba 0f00 	cmp.w	sl, #0
 80065fa:	4606      	mov	r6, r0
 80065fc:	460f      	mov	r7, r1
 80065fe:	dd6c      	ble.n	80066da <__kernel_rem_pio2+0x242>
 8006600:	1e62      	subs	r2, r4, #1
 8006602:	ab0e      	add	r3, sp, #56	; 0x38
 8006604:	f1ca 0118 	rsb	r1, sl, #24
 8006608:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800660c:	9d06      	ldr	r5, [sp, #24]
 800660e:	fa40 f301 	asr.w	r3, r0, r1
 8006612:	441d      	add	r5, r3
 8006614:	408b      	lsls	r3, r1
 8006616:	1ac0      	subs	r0, r0, r3
 8006618:	ab0e      	add	r3, sp, #56	; 0x38
 800661a:	9506      	str	r5, [sp, #24]
 800661c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006620:	f1ca 0317 	rsb	r3, sl, #23
 8006624:	fa40 f303 	asr.w	r3, r0, r3
 8006628:	9302      	str	r3, [sp, #8]
 800662a:	9b02      	ldr	r3, [sp, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	dd62      	ble.n	80066f6 <__kernel_rem_pio2+0x25e>
 8006630:	9b06      	ldr	r3, [sp, #24]
 8006632:	2200      	movs	r2, #0
 8006634:	3301      	adds	r3, #1
 8006636:	9306      	str	r3, [sp, #24]
 8006638:	4615      	mov	r5, r2
 800663a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800663e:	4294      	cmp	r4, r2
 8006640:	f300 8095 	bgt.w	800676e <__kernel_rem_pio2+0x2d6>
 8006644:	f1ba 0f00 	cmp.w	sl, #0
 8006648:	dd07      	ble.n	800665a <__kernel_rem_pio2+0x1c2>
 800664a:	f1ba 0f01 	cmp.w	sl, #1
 800664e:	f000 80a2 	beq.w	8006796 <__kernel_rem_pio2+0x2fe>
 8006652:	f1ba 0f02 	cmp.w	sl, #2
 8006656:	f000 80c1 	beq.w	80067dc <__kernel_rem_pio2+0x344>
 800665a:	9b02      	ldr	r3, [sp, #8]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d14a      	bne.n	80066f6 <__kernel_rem_pio2+0x25e>
 8006660:	4632      	mov	r2, r6
 8006662:	463b      	mov	r3, r7
 8006664:	2000      	movs	r0, #0
 8006666:	4958      	ldr	r1, [pc, #352]	; (80067c8 <__kernel_rem_pio2+0x330>)
 8006668:	f7f9 fe26 	bl	80002b8 <__aeabi_dsub>
 800666c:	4606      	mov	r6, r0
 800666e:	460f      	mov	r7, r1
 8006670:	2d00      	cmp	r5, #0
 8006672:	d040      	beq.n	80066f6 <__kernel_rem_pio2+0x25e>
 8006674:	4650      	mov	r0, sl
 8006676:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80067b8 <__kernel_rem_pio2+0x320>
 800667a:	f000 fce9 	bl	8007050 <scalbn>
 800667e:	4630      	mov	r0, r6
 8006680:	4639      	mov	r1, r7
 8006682:	ec53 2b10 	vmov	r2, r3, d0
 8006686:	f7f9 fe17 	bl	80002b8 <__aeabi_dsub>
 800668a:	4606      	mov	r6, r0
 800668c:	460f      	mov	r7, r1
 800668e:	e032      	b.n	80066f6 <__kernel_rem_pio2+0x25e>
 8006690:	2200      	movs	r2, #0
 8006692:	4b4e      	ldr	r3, [pc, #312]	; (80067cc <__kernel_rem_pio2+0x334>)
 8006694:	4640      	mov	r0, r8
 8006696:	4649      	mov	r1, r9
 8006698:	f7f9 ffc6 	bl	8000628 <__aeabi_dmul>
 800669c:	f7fa fa74 	bl	8000b88 <__aeabi_d2iz>
 80066a0:	f7f9 ff58 	bl	8000554 <__aeabi_i2d>
 80066a4:	2200      	movs	r2, #0
 80066a6:	4b4a      	ldr	r3, [pc, #296]	; (80067d0 <__kernel_rem_pio2+0x338>)
 80066a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ac:	f7f9 ffbc 	bl	8000628 <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	f7f9 fdfe 	bl	80002b8 <__aeabi_dsub>
 80066bc:	f7fa fa64 	bl	8000b88 <__aeabi_d2iz>
 80066c0:	ab0e      	add	r3, sp, #56	; 0x38
 80066c2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80066c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80066ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ce:	f7f9 fdf5 	bl	80002bc <__adddf3>
 80066d2:	3501      	adds	r5, #1
 80066d4:	4680      	mov	r8, r0
 80066d6:	4689      	mov	r9, r1
 80066d8:	e75e      	b.n	8006598 <__kernel_rem_pio2+0x100>
 80066da:	d105      	bne.n	80066e8 <__kernel_rem_pio2+0x250>
 80066dc:	1e63      	subs	r3, r4, #1
 80066de:	aa0e      	add	r2, sp, #56	; 0x38
 80066e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80066e4:	15c3      	asrs	r3, r0, #23
 80066e6:	e79f      	b.n	8006628 <__kernel_rem_pio2+0x190>
 80066e8:	2200      	movs	r2, #0
 80066ea:	4b3a      	ldr	r3, [pc, #232]	; (80067d4 <__kernel_rem_pio2+0x33c>)
 80066ec:	f7fa fa22 	bl	8000b34 <__aeabi_dcmpge>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d139      	bne.n	8006768 <__kernel_rem_pio2+0x2d0>
 80066f4:	9002      	str	r0, [sp, #8]
 80066f6:	2200      	movs	r2, #0
 80066f8:	2300      	movs	r3, #0
 80066fa:	4630      	mov	r0, r6
 80066fc:	4639      	mov	r1, r7
 80066fe:	f7fa f9fb 	bl	8000af8 <__aeabi_dcmpeq>
 8006702:	2800      	cmp	r0, #0
 8006704:	f000 80c7 	beq.w	8006896 <__kernel_rem_pio2+0x3fe>
 8006708:	1e65      	subs	r5, r4, #1
 800670a:	462b      	mov	r3, r5
 800670c:	2200      	movs	r2, #0
 800670e:	9904      	ldr	r1, [sp, #16]
 8006710:	428b      	cmp	r3, r1
 8006712:	da6a      	bge.n	80067ea <__kernel_rem_pio2+0x352>
 8006714:	2a00      	cmp	r2, #0
 8006716:	f000 8088 	beq.w	800682a <__kernel_rem_pio2+0x392>
 800671a:	ab0e      	add	r3, sp, #56	; 0x38
 800671c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006720:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80b4 	beq.w	8006892 <__kernel_rem_pio2+0x3fa>
 800672a:	4650      	mov	r0, sl
 800672c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80067b8 <__kernel_rem_pio2+0x320>
 8006730:	f000 fc8e 	bl	8007050 <scalbn>
 8006734:	00ec      	lsls	r4, r5, #3
 8006736:	ab72      	add	r3, sp, #456	; 0x1c8
 8006738:	191e      	adds	r6, r3, r4
 800673a:	ec59 8b10 	vmov	r8, r9, d0
 800673e:	f106 0a08 	add.w	sl, r6, #8
 8006742:	462f      	mov	r7, r5
 8006744:	2f00      	cmp	r7, #0
 8006746:	f280 80df 	bge.w	8006908 <__kernel_rem_pio2+0x470>
 800674a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80067b0 <__kernel_rem_pio2+0x318>
 800674e:	f04f 0a00 	mov.w	sl, #0
 8006752:	eba5 030a 	sub.w	r3, r5, sl
 8006756:	2b00      	cmp	r3, #0
 8006758:	f2c0 810a 	blt.w	8006970 <__kernel_rem_pio2+0x4d8>
 800675c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80067d8 <__kernel_rem_pio2+0x340>
 8006760:	ec59 8b18 	vmov	r8, r9, d8
 8006764:	2700      	movs	r7, #0
 8006766:	e0f5      	b.n	8006954 <__kernel_rem_pio2+0x4bc>
 8006768:	2302      	movs	r3, #2
 800676a:	9302      	str	r3, [sp, #8]
 800676c:	e760      	b.n	8006630 <__kernel_rem_pio2+0x198>
 800676e:	ab0e      	add	r3, sp, #56	; 0x38
 8006770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006774:	b94d      	cbnz	r5, 800678a <__kernel_rem_pio2+0x2f2>
 8006776:	b12b      	cbz	r3, 8006784 <__kernel_rem_pio2+0x2ec>
 8006778:	a80e      	add	r0, sp, #56	; 0x38
 800677a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800677e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006782:	2301      	movs	r3, #1
 8006784:	3201      	adds	r2, #1
 8006786:	461d      	mov	r5, r3
 8006788:	e759      	b.n	800663e <__kernel_rem_pio2+0x1a6>
 800678a:	a80e      	add	r0, sp, #56	; 0x38
 800678c:	1acb      	subs	r3, r1, r3
 800678e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006792:	462b      	mov	r3, r5
 8006794:	e7f6      	b.n	8006784 <__kernel_rem_pio2+0x2ec>
 8006796:	1e62      	subs	r2, r4, #1
 8006798:	ab0e      	add	r3, sp, #56	; 0x38
 800679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80067a2:	a90e      	add	r1, sp, #56	; 0x38
 80067a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80067a8:	e757      	b.n	800665a <__kernel_rem_pio2+0x1c2>
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
	...
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	08008ac8 	.word	0x08008ac8
 80067c4:	40200000 	.word	0x40200000
 80067c8:	3ff00000 	.word	0x3ff00000
 80067cc:	3e700000 	.word	0x3e700000
 80067d0:	41700000 	.word	0x41700000
 80067d4:	3fe00000 	.word	0x3fe00000
 80067d8:	08008a88 	.word	0x08008a88
 80067dc:	1e62      	subs	r2, r4, #1
 80067de:	ab0e      	add	r3, sp, #56	; 0x38
 80067e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80067e8:	e7db      	b.n	80067a2 <__kernel_rem_pio2+0x30a>
 80067ea:	a90e      	add	r1, sp, #56	; 0x38
 80067ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	430a      	orrs	r2, r1
 80067f4:	e78b      	b.n	800670e <__kernel_rem_pio2+0x276>
 80067f6:	3301      	adds	r3, #1
 80067f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d0fa      	beq.n	80067f6 <__kernel_rem_pio2+0x35e>
 8006800:	9a08      	ldr	r2, [sp, #32]
 8006802:	4422      	add	r2, r4
 8006804:	00d2      	lsls	r2, r2, #3
 8006806:	a922      	add	r1, sp, #136	; 0x88
 8006808:	18e3      	adds	r3, r4, r3
 800680a:	9206      	str	r2, [sp, #24]
 800680c:	440a      	add	r2, r1
 800680e:	9302      	str	r3, [sp, #8]
 8006810:	f10b 0108 	add.w	r1, fp, #8
 8006814:	f102 0308 	add.w	r3, r2, #8
 8006818:	1c66      	adds	r6, r4, #1
 800681a:	910a      	str	r1, [sp, #40]	; 0x28
 800681c:	2500      	movs	r5, #0
 800681e:	930d      	str	r3, [sp, #52]	; 0x34
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	42b3      	cmp	r3, r6
 8006824:	da04      	bge.n	8006830 <__kernel_rem_pio2+0x398>
 8006826:	461c      	mov	r4, r3
 8006828:	e6a6      	b.n	8006578 <__kernel_rem_pio2+0xe0>
 800682a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800682c:	2301      	movs	r3, #1
 800682e:	e7e3      	b.n	80067f8 <__kernel_rem_pio2+0x360>
 8006830:	9b06      	ldr	r3, [sp, #24]
 8006832:	18ef      	adds	r7, r5, r3
 8006834:	ab22      	add	r3, sp, #136	; 0x88
 8006836:	441f      	add	r7, r3
 8006838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800683a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800683e:	f7f9 fe89 	bl	8000554 <__aeabi_i2d>
 8006842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006844:	461c      	mov	r4, r3
 8006846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006848:	e9c7 0100 	strd	r0, r1, [r7]
 800684c:	eb03 0b05 	add.w	fp, r3, r5
 8006850:	2700      	movs	r7, #0
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	f04f 0900 	mov.w	r9, #0
 800685a:	9b07      	ldr	r3, [sp, #28]
 800685c:	429f      	cmp	r7, r3
 800685e:	dd08      	ble.n	8006872 <__kernel_rem_pio2+0x3da>
 8006860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006862:	aa72      	add	r2, sp, #456	; 0x1c8
 8006864:	18eb      	adds	r3, r5, r3
 8006866:	4413      	add	r3, r2
 8006868:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800686c:	3601      	adds	r6, #1
 800686e:	3508      	adds	r5, #8
 8006870:	e7d6      	b.n	8006820 <__kernel_rem_pio2+0x388>
 8006872:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006876:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800687a:	f7f9 fed5 	bl	8000628 <__aeabi_dmul>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4640      	mov	r0, r8
 8006884:	4649      	mov	r1, r9
 8006886:	f7f9 fd19 	bl	80002bc <__adddf3>
 800688a:	3701      	adds	r7, #1
 800688c:	4680      	mov	r8, r0
 800688e:	4689      	mov	r9, r1
 8006890:	e7e3      	b.n	800685a <__kernel_rem_pio2+0x3c2>
 8006892:	3d01      	subs	r5, #1
 8006894:	e741      	b.n	800671a <__kernel_rem_pio2+0x282>
 8006896:	f1ca 0000 	rsb	r0, sl, #0
 800689a:	ec47 6b10 	vmov	d0, r6, r7
 800689e:	f000 fbd7 	bl	8007050 <scalbn>
 80068a2:	ec57 6b10 	vmov	r6, r7, d0
 80068a6:	2200      	movs	r2, #0
 80068a8:	4b99      	ldr	r3, [pc, #612]	; (8006b10 <__kernel_rem_pio2+0x678>)
 80068aa:	ee10 0a10 	vmov	r0, s0
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7fa f940 	bl	8000b34 <__aeabi_dcmpge>
 80068b4:	b1f8      	cbz	r0, 80068f6 <__kernel_rem_pio2+0x45e>
 80068b6:	2200      	movs	r2, #0
 80068b8:	4b96      	ldr	r3, [pc, #600]	; (8006b14 <__kernel_rem_pio2+0x67c>)
 80068ba:	4630      	mov	r0, r6
 80068bc:	4639      	mov	r1, r7
 80068be:	f7f9 feb3 	bl	8000628 <__aeabi_dmul>
 80068c2:	f7fa f961 	bl	8000b88 <__aeabi_d2iz>
 80068c6:	4680      	mov	r8, r0
 80068c8:	f7f9 fe44 	bl	8000554 <__aeabi_i2d>
 80068cc:	2200      	movs	r2, #0
 80068ce:	4b90      	ldr	r3, [pc, #576]	; (8006b10 <__kernel_rem_pio2+0x678>)
 80068d0:	f7f9 feaa 	bl	8000628 <__aeabi_dmul>
 80068d4:	460b      	mov	r3, r1
 80068d6:	4602      	mov	r2, r0
 80068d8:	4639      	mov	r1, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	f7f9 fcec 	bl	80002b8 <__aeabi_dsub>
 80068e0:	f7fa f952 	bl	8000b88 <__aeabi_d2iz>
 80068e4:	1c65      	adds	r5, r4, #1
 80068e6:	ab0e      	add	r3, sp, #56	; 0x38
 80068e8:	f10a 0a18 	add.w	sl, sl, #24
 80068ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80068f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80068f4:	e719      	b.n	800672a <__kernel_rem_pio2+0x292>
 80068f6:	4630      	mov	r0, r6
 80068f8:	4639      	mov	r1, r7
 80068fa:	f7fa f945 	bl	8000b88 <__aeabi_d2iz>
 80068fe:	ab0e      	add	r3, sp, #56	; 0x38
 8006900:	4625      	mov	r5, r4
 8006902:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006906:	e710      	b.n	800672a <__kernel_rem_pio2+0x292>
 8006908:	ab0e      	add	r3, sp, #56	; 0x38
 800690a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800690e:	f7f9 fe21 	bl	8000554 <__aeabi_i2d>
 8006912:	4642      	mov	r2, r8
 8006914:	464b      	mov	r3, r9
 8006916:	f7f9 fe87 	bl	8000628 <__aeabi_dmul>
 800691a:	2200      	movs	r2, #0
 800691c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006920:	4b7c      	ldr	r3, [pc, #496]	; (8006b14 <__kernel_rem_pio2+0x67c>)
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f7f9 fe7f 	bl	8000628 <__aeabi_dmul>
 800692a:	3f01      	subs	r7, #1
 800692c:	4680      	mov	r8, r0
 800692e:	4689      	mov	r9, r1
 8006930:	e708      	b.n	8006744 <__kernel_rem_pio2+0x2ac>
 8006932:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800693e:	f7f9 fe73 	bl	8000628 <__aeabi_dmul>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f7f9 fcb7 	bl	80002bc <__adddf3>
 800694e:	3701      	adds	r7, #1
 8006950:	4680      	mov	r8, r0
 8006952:	4689      	mov	r9, r1
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	429f      	cmp	r7, r3
 8006958:	dc01      	bgt.n	800695e <__kernel_rem_pio2+0x4c6>
 800695a:	45ba      	cmp	sl, r7
 800695c:	dae9      	bge.n	8006932 <__kernel_rem_pio2+0x49a>
 800695e:	ab4a      	add	r3, sp, #296	; 0x128
 8006960:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006964:	e9c3 8900 	strd	r8, r9, [r3]
 8006968:	f10a 0a01 	add.w	sl, sl, #1
 800696c:	3e08      	subs	r6, #8
 800696e:	e6f0      	b.n	8006752 <__kernel_rem_pio2+0x2ba>
 8006970:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006972:	2b03      	cmp	r3, #3
 8006974:	d85b      	bhi.n	8006a2e <__kernel_rem_pio2+0x596>
 8006976:	e8df f003 	tbb	[pc, r3]
 800697a:	264a      	.short	0x264a
 800697c:	0226      	.short	0x0226
 800697e:	ab9a      	add	r3, sp, #616	; 0x268
 8006980:	441c      	add	r4, r3
 8006982:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006986:	46a2      	mov	sl, r4
 8006988:	46ab      	mov	fp, r5
 800698a:	f1bb 0f00 	cmp.w	fp, #0
 800698e:	dc6c      	bgt.n	8006a6a <__kernel_rem_pio2+0x5d2>
 8006990:	46a2      	mov	sl, r4
 8006992:	46ab      	mov	fp, r5
 8006994:	f1bb 0f01 	cmp.w	fp, #1
 8006998:	f300 8086 	bgt.w	8006aa8 <__kernel_rem_pio2+0x610>
 800699c:	2000      	movs	r0, #0
 800699e:	2100      	movs	r1, #0
 80069a0:	2d01      	cmp	r5, #1
 80069a2:	f300 80a0 	bgt.w	8006ae6 <__kernel_rem_pio2+0x64e>
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80069ac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 809e 	bne.w	8006af2 <__kernel_rem_pio2+0x65a>
 80069b6:	9b01      	ldr	r3, [sp, #4]
 80069b8:	e9c3 7800 	strd	r7, r8, [r3]
 80069bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80069c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80069c4:	e033      	b.n	8006a2e <__kernel_rem_pio2+0x596>
 80069c6:	3408      	adds	r4, #8
 80069c8:	ab4a      	add	r3, sp, #296	; 0x128
 80069ca:	441c      	add	r4, r3
 80069cc:	462e      	mov	r6, r5
 80069ce:	2000      	movs	r0, #0
 80069d0:	2100      	movs	r1, #0
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	da3a      	bge.n	8006a4c <__kernel_rem_pio2+0x5b4>
 80069d6:	9b02      	ldr	r3, [sp, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d03d      	beq.n	8006a58 <__kernel_rem_pio2+0x5c0>
 80069dc:	4602      	mov	r2, r0
 80069de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069e2:	9c01      	ldr	r4, [sp, #4]
 80069e4:	e9c4 2300 	strd	r2, r3, [r4]
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80069f0:	f7f9 fc62 	bl	80002b8 <__aeabi_dsub>
 80069f4:	ae4c      	add	r6, sp, #304	; 0x130
 80069f6:	2401      	movs	r4, #1
 80069f8:	42a5      	cmp	r5, r4
 80069fa:	da30      	bge.n	8006a5e <__kernel_rem_pio2+0x5c6>
 80069fc:	9b02      	ldr	r3, [sp, #8]
 80069fe:	b113      	cbz	r3, 8006a06 <__kernel_rem_pio2+0x56e>
 8006a00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a04:	4619      	mov	r1, r3
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006a0c:	e00f      	b.n	8006a2e <__kernel_rem_pio2+0x596>
 8006a0e:	ab9a      	add	r3, sp, #616	; 0x268
 8006a10:	441c      	add	r4, r3
 8006a12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006a16:	2000      	movs	r0, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	da10      	bge.n	8006a40 <__kernel_rem_pio2+0x5a8>
 8006a1e:	9b02      	ldr	r3, [sp, #8]
 8006a20:	b113      	cbz	r3, 8006a28 <__kernel_rem_pio2+0x590>
 8006a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a26:	4619      	mov	r1, r3
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	e9c3 0100 	strd	r0, r1, [r3]
 8006a2e:	9b06      	ldr	r3, [sp, #24]
 8006a30:	f003 0007 	and.w	r0, r3, #7
 8006a34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006a38:	ecbd 8b02 	vpop	{d8}
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a44:	f7f9 fc3a 	bl	80002bc <__adddf3>
 8006a48:	3d01      	subs	r5, #1
 8006a4a:	e7e6      	b.n	8006a1a <__kernel_rem_pio2+0x582>
 8006a4c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a50:	f7f9 fc34 	bl	80002bc <__adddf3>
 8006a54:	3e01      	subs	r6, #1
 8006a56:	e7bc      	b.n	80069d2 <__kernel_rem_pio2+0x53a>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	e7c1      	b.n	80069e2 <__kernel_rem_pio2+0x54a>
 8006a5e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006a62:	f7f9 fc2b 	bl	80002bc <__adddf3>
 8006a66:	3401      	adds	r4, #1
 8006a68:	e7c6      	b.n	80069f8 <__kernel_rem_pio2+0x560>
 8006a6a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006a6e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006a72:	4640      	mov	r0, r8
 8006a74:	ec53 2b17 	vmov	r2, r3, d7
 8006a78:	4649      	mov	r1, r9
 8006a7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a7e:	f7f9 fc1d 	bl	80002bc <__adddf3>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4606      	mov	r6, r0
 8006a88:	460f      	mov	r7, r1
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fc13 	bl	80002b8 <__aeabi_dsub>
 8006a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a96:	f7f9 fc11 	bl	80002bc <__adddf3>
 8006a9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a9e:	e9ca 0100 	strd	r0, r1, [sl]
 8006aa2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006aa6:	e770      	b.n	800698a <__kernel_rem_pio2+0x4f2>
 8006aa8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006aac:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	ec53 2b17 	vmov	r2, r3, d7
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006abc:	f7f9 fbfe 	bl	80002bc <__adddf3>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7f9 fbf4 	bl	80002b8 <__aeabi_dsub>
 8006ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ad4:	f7f9 fbf2 	bl	80002bc <__adddf3>
 8006ad8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006adc:	e9ca 0100 	strd	r0, r1, [sl]
 8006ae0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006ae4:	e756      	b.n	8006994 <__kernel_rem_pio2+0x4fc>
 8006ae6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006aea:	f7f9 fbe7 	bl	80002bc <__adddf3>
 8006aee:	3d01      	subs	r5, #1
 8006af0:	e756      	b.n	80069a0 <__kernel_rem_pio2+0x508>
 8006af2:	9b01      	ldr	r3, [sp, #4]
 8006af4:	9a01      	ldr	r2, [sp, #4]
 8006af6:	601f      	str	r7, [r3, #0]
 8006af8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006afc:	605c      	str	r4, [r3, #4]
 8006afe:	609d      	str	r5, [r3, #8]
 8006b00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b04:	60d3      	str	r3, [r2, #12]
 8006b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b0a:	6110      	str	r0, [r2, #16]
 8006b0c:	6153      	str	r3, [r2, #20]
 8006b0e:	e78e      	b.n	8006a2e <__kernel_rem_pio2+0x596>
 8006b10:	41700000 	.word	0x41700000
 8006b14:	3e700000 	.word	0x3e700000

08006b18 <__kernel_sin>:
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	ec55 4b10 	vmov	r4, r5, d0
 8006b20:	b085      	sub	sp, #20
 8006b22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b26:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006b2a:	ed8d 1b00 	vstr	d1, [sp]
 8006b2e:	9002      	str	r0, [sp, #8]
 8006b30:	da06      	bge.n	8006b40 <__kernel_sin+0x28>
 8006b32:	ee10 0a10 	vmov	r0, s0
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7fa f826 	bl	8000b88 <__aeabi_d2iz>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d051      	beq.n	8006be4 <__kernel_sin+0xcc>
 8006b40:	4622      	mov	r2, r4
 8006b42:	462b      	mov	r3, r5
 8006b44:	4620      	mov	r0, r4
 8006b46:	4629      	mov	r1, r5
 8006b48:	f7f9 fd6e 	bl	8000628 <__aeabi_dmul>
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	468b      	mov	fp, r1
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 fd66 	bl	8000628 <__aeabi_dmul>
 8006b5c:	a341      	add	r3, pc, #260	; (adr r3, 8006c64 <__kernel_sin+0x14c>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	4680      	mov	r8, r0
 8006b64:	4689      	mov	r9, r1
 8006b66:	4650      	mov	r0, sl
 8006b68:	4659      	mov	r1, fp
 8006b6a:	f7f9 fd5d 	bl	8000628 <__aeabi_dmul>
 8006b6e:	a33f      	add	r3, pc, #252	; (adr r3, 8006c6c <__kernel_sin+0x154>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f7f9 fba0 	bl	80002b8 <__aeabi_dsub>
 8006b78:	4652      	mov	r2, sl
 8006b7a:	465b      	mov	r3, fp
 8006b7c:	f7f9 fd54 	bl	8000628 <__aeabi_dmul>
 8006b80:	a33c      	add	r3, pc, #240	; (adr r3, 8006c74 <__kernel_sin+0x15c>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fb99 	bl	80002bc <__adddf3>
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	465b      	mov	r3, fp
 8006b8e:	f7f9 fd4b 	bl	8000628 <__aeabi_dmul>
 8006b92:	a33a      	add	r3, pc, #232	; (adr r3, 8006c7c <__kernel_sin+0x164>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fb8e 	bl	80002b8 <__aeabi_dsub>
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	f7f9 fd42 	bl	8000628 <__aeabi_dmul>
 8006ba4:	a337      	add	r3, pc, #220	; (adr r3, 8006c84 <__kernel_sin+0x16c>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f7f9 fb87 	bl	80002bc <__adddf3>
 8006bae:	9b02      	ldr	r3, [sp, #8]
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	460f      	mov	r7, r1
 8006bb4:	b9db      	cbnz	r3, 8006bee <__kernel_sin+0xd6>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4650      	mov	r0, sl
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	f7f9 fd33 	bl	8000628 <__aeabi_dmul>
 8006bc2:	a325      	add	r3, pc, #148	; (adr r3, 8006c58 <__kernel_sin+0x140>)
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f7f9 fb76 	bl	80002b8 <__aeabi_dsub>
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	f7f9 fd2a 	bl	8000628 <__aeabi_dmul>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	f7f9 fb6e 	bl	80002bc <__adddf3>
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	ec45 4b10 	vmov	d0, r4, r5
 8006be8:	b005      	add	sp, #20
 8006bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <__kernel_sin+0x148>)
 8006bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bf6:	f7f9 fd17 	bl	8000628 <__aeabi_dmul>
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c00:	463b      	mov	r3, r7
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 fd0f 	bl	8000628 <__aeabi_dmul>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c12:	f7f9 fb51 	bl	80002b8 <__aeabi_dsub>
 8006c16:	4652      	mov	r2, sl
 8006c18:	465b      	mov	r3, fp
 8006c1a:	f7f9 fd05 	bl	8000628 <__aeabi_dmul>
 8006c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c22:	f7f9 fb49 	bl	80002b8 <__aeabi_dsub>
 8006c26:	a30c      	add	r3, pc, #48	; (adr r3, 8006c58 <__kernel_sin+0x140>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	460f      	mov	r7, r1
 8006c30:	4640      	mov	r0, r8
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 fcf8 	bl	8000628 <__aeabi_dmul>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f7f9 fb3c 	bl	80002bc <__adddf3>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4620      	mov	r0, r4
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	f7f9 fb34 	bl	80002b8 <__aeabi_dsub>
 8006c50:	e7c6      	b.n	8006be0 <__kernel_sin+0xc8>
 8006c52:	bf00      	nop
 8006c54:	f3af 8000 	nop.w
 8006c58:	55555549 	.word	0x55555549
 8006c5c:	3fc55555 	.word	0x3fc55555
 8006c60:	3fe00000 	.word	0x3fe00000
 8006c64:	5acfd57c 	.word	0x5acfd57c
 8006c68:	3de5d93a 	.word	0x3de5d93a
 8006c6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006c70:	3e5ae5e6 	.word	0x3e5ae5e6
 8006c74:	57b1fe7d 	.word	0x57b1fe7d
 8006c78:	3ec71de3 	.word	0x3ec71de3
 8006c7c:	19c161d5 	.word	0x19c161d5
 8006c80:	3f2a01a0 	.word	0x3f2a01a0
 8006c84:	1110f8a6 	.word	0x1110f8a6
 8006c88:	3f811111 	.word	0x3f811111
 8006c8c:	00000000 	.word	0x00000000

08006c90 <__kernel_tan>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	ec5b ab10 	vmov	sl, fp, d0
 8006c98:	4bbf      	ldr	r3, [pc, #764]	; (8006f98 <__kernel_tan+0x308>)
 8006c9a:	b089      	sub	sp, #36	; 0x24
 8006c9c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006ca0:	429f      	cmp	r7, r3
 8006ca2:	ec59 8b11 	vmov	r8, r9, d1
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	f8cd b008 	str.w	fp, [sp, #8]
 8006cac:	dc22      	bgt.n	8006cf4 <__kernel_tan+0x64>
 8006cae:	ee10 0a10 	vmov	r0, s0
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	f7f9 ff68 	bl	8000b88 <__aeabi_d2iz>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d145      	bne.n	8006d48 <__kernel_tan+0xb8>
 8006cbc:	1c73      	adds	r3, r6, #1
 8006cbe:	4652      	mov	r2, sl
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	433b      	orrs	r3, r7
 8006cc4:	d110      	bne.n	8006ce8 <__kernel_tan+0x58>
 8006cc6:	ec4b ab10 	vmov	d0, sl, fp
 8006cca:	f000 f9ad 	bl	8007028 <fabs>
 8006cce:	49b3      	ldr	r1, [pc, #716]	; (8006f9c <__kernel_tan+0x30c>)
 8006cd0:	ec53 2b10 	vmov	r2, r3, d0
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	f7f9 fdd1 	bl	800087c <__aeabi_ddiv>
 8006cda:	4682      	mov	sl, r0
 8006cdc:	468b      	mov	fp, r1
 8006cde:	ec4b ab10 	vmov	d0, sl, fp
 8006ce2:	b009      	add	sp, #36	; 0x24
 8006ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce8:	2e01      	cmp	r6, #1
 8006cea:	d0f8      	beq.n	8006cde <__kernel_tan+0x4e>
 8006cec:	465b      	mov	r3, fp
 8006cee:	2000      	movs	r0, #0
 8006cf0:	49ab      	ldr	r1, [pc, #684]	; (8006fa0 <__kernel_tan+0x310>)
 8006cf2:	e7f0      	b.n	8006cd6 <__kernel_tan+0x46>
 8006cf4:	4bab      	ldr	r3, [pc, #684]	; (8006fa4 <__kernel_tan+0x314>)
 8006cf6:	429f      	cmp	r7, r3
 8006cf8:	dd26      	ble.n	8006d48 <__kernel_tan+0xb8>
 8006cfa:	9b02      	ldr	r3, [sp, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	da09      	bge.n	8006d14 <__kernel_tan+0x84>
 8006d00:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d04:	469b      	mov	fp, r3
 8006d06:	ee10 aa10 	vmov	sl, s0
 8006d0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d0e:	ee11 8a10 	vmov	r8, s2
 8006d12:	4699      	mov	r9, r3
 8006d14:	4652      	mov	r2, sl
 8006d16:	465b      	mov	r3, fp
 8006d18:	a181      	add	r1, pc, #516	; (adr r1, 8006f20 <__kernel_tan+0x290>)
 8006d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d1e:	f7f9 facb 	bl	80002b8 <__aeabi_dsub>
 8006d22:	4642      	mov	r2, r8
 8006d24:	464b      	mov	r3, r9
 8006d26:	4604      	mov	r4, r0
 8006d28:	460d      	mov	r5, r1
 8006d2a:	a17f      	add	r1, pc, #508	; (adr r1, 8006f28 <__kernel_tan+0x298>)
 8006d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d30:	f7f9 fac2 	bl	80002b8 <__aeabi_dsub>
 8006d34:	4622      	mov	r2, r4
 8006d36:	462b      	mov	r3, r5
 8006d38:	f7f9 fac0 	bl	80002bc <__adddf3>
 8006d3c:	f04f 0800 	mov.w	r8, #0
 8006d40:	4682      	mov	sl, r0
 8006d42:	468b      	mov	fp, r1
 8006d44:	f04f 0900 	mov.w	r9, #0
 8006d48:	4652      	mov	r2, sl
 8006d4a:	465b      	mov	r3, fp
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	4659      	mov	r1, fp
 8006d50:	f7f9 fc6a 	bl	8000628 <__aeabi_dmul>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	e9cd 0100 	strd	r0, r1, [sp]
 8006d5c:	f7f9 fc64 	bl	8000628 <__aeabi_dmul>
 8006d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	4650      	mov	r0, sl
 8006d6a:	4659      	mov	r1, fp
 8006d6c:	f7f9 fc5c 	bl	8000628 <__aeabi_dmul>
 8006d70:	a36f      	add	r3, pc, #444	; (adr r3, 8006f30 <__kernel_tan+0x2a0>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	f7f9 fc53 	bl	8000628 <__aeabi_dmul>
 8006d82:	a36d      	add	r3, pc, #436	; (adr r3, 8006f38 <__kernel_tan+0x2a8>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f7f9 fa98 	bl	80002bc <__adddf3>
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	462b      	mov	r3, r5
 8006d90:	f7f9 fc4a 	bl	8000628 <__aeabi_dmul>
 8006d94:	a36a      	add	r3, pc, #424	; (adr r3, 8006f40 <__kernel_tan+0x2b0>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7f9 fa8f 	bl	80002bc <__adddf3>
 8006d9e:	4622      	mov	r2, r4
 8006da0:	462b      	mov	r3, r5
 8006da2:	f7f9 fc41 	bl	8000628 <__aeabi_dmul>
 8006da6:	a368      	add	r3, pc, #416	; (adr r3, 8006f48 <__kernel_tan+0x2b8>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fa86 	bl	80002bc <__adddf3>
 8006db0:	4622      	mov	r2, r4
 8006db2:	462b      	mov	r3, r5
 8006db4:	f7f9 fc38 	bl	8000628 <__aeabi_dmul>
 8006db8:	a365      	add	r3, pc, #404	; (adr r3, 8006f50 <__kernel_tan+0x2c0>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fa7d 	bl	80002bc <__adddf3>
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	462b      	mov	r3, r5
 8006dc6:	f7f9 fc2f 	bl	8000628 <__aeabi_dmul>
 8006dca:	a363      	add	r3, pc, #396	; (adr r3, 8006f58 <__kernel_tan+0x2c8>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f7f9 fa74 	bl	80002bc <__adddf3>
 8006dd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd8:	f7f9 fc26 	bl	8000628 <__aeabi_dmul>
 8006ddc:	a360      	add	r3, pc, #384	; (adr r3, 8006f60 <__kernel_tan+0x2d0>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7f9 fc1d 	bl	8000628 <__aeabi_dmul>
 8006dee:	a35e      	add	r3, pc, #376	; (adr r3, 8006f68 <__kernel_tan+0x2d8>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f7f9 fa62 	bl	80002bc <__adddf3>
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	f7f9 fc14 	bl	8000628 <__aeabi_dmul>
 8006e00:	a35b      	add	r3, pc, #364	; (adr r3, 8006f70 <__kernel_tan+0x2e0>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 fa59 	bl	80002bc <__adddf3>
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	462b      	mov	r3, r5
 8006e0e:	f7f9 fc0b 	bl	8000628 <__aeabi_dmul>
 8006e12:	a359      	add	r3, pc, #356	; (adr r3, 8006f78 <__kernel_tan+0x2e8>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 fa50 	bl	80002bc <__adddf3>
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	462b      	mov	r3, r5
 8006e20:	f7f9 fc02 	bl	8000628 <__aeabi_dmul>
 8006e24:	a356      	add	r3, pc, #344	; (adr r3, 8006f80 <__kernel_tan+0x2f0>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fa47 	bl	80002bc <__adddf3>
 8006e2e:	4622      	mov	r2, r4
 8006e30:	462b      	mov	r3, r5
 8006e32:	f7f9 fbf9 	bl	8000628 <__aeabi_dmul>
 8006e36:	a354      	add	r3, pc, #336	; (adr r3, 8006f88 <__kernel_tan+0x2f8>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f7f9 fa3e 	bl	80002bc <__adddf3>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e48:	f7f9 fa38 	bl	80002bc <__adddf3>
 8006e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e50:	f7f9 fbea 	bl	8000628 <__aeabi_dmul>
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	f7f9 fa30 	bl	80002bc <__adddf3>
 8006e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e60:	f7f9 fbe2 	bl	8000628 <__aeabi_dmul>
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	f7f9 fa28 	bl	80002bc <__adddf3>
 8006e6c:	a348      	add	r3, pc, #288	; (adr r3, 8006f90 <__kernel_tan+0x300>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	4604      	mov	r4, r0
 8006e74:	460d      	mov	r5, r1
 8006e76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e7a:	f7f9 fbd5 	bl	8000628 <__aeabi_dmul>
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	f7f9 fa1b 	bl	80002bc <__adddf3>
 8006e86:	e9cd 0100 	strd	r0, r1, [sp]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4659      	mov	r1, fp
 8006e90:	4650      	mov	r0, sl
 8006e92:	f7f9 fa13 	bl	80002bc <__adddf3>
 8006e96:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <__kernel_tan+0x314>)
 8006e98:	429f      	cmp	r7, r3
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	f340 8083 	ble.w	8006fa8 <__kernel_tan+0x318>
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7f9 fb56 	bl	8000554 <__aeabi_i2d>
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4680      	mov	r8, r0
 8006eac:	4689      	mov	r9, r1
 8006eae:	462b      	mov	r3, r5
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f7f9 fbb8 	bl	8000628 <__aeabi_dmul>
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460f      	mov	r7, r1
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	f7f9 f9fa 	bl	80002bc <__adddf3>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4630      	mov	r0, r6
 8006ece:	4639      	mov	r1, r7
 8006ed0:	f7f9 fcd4 	bl	800087c <__aeabi_ddiv>
 8006ed4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed8:	f7f9 f9ee 	bl	80002b8 <__aeabi_dsub>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4650      	mov	r0, sl
 8006ee2:	4659      	mov	r1, fp
 8006ee4:	f7f9 f9e8 	bl	80002b8 <__aeabi_dsub>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	f7f9 f9e6 	bl	80002bc <__adddf3>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 f9de 	bl	80002b8 <__aeabi_dsub>
 8006efc:	9b02      	ldr	r3, [sp, #8]
 8006efe:	4604      	mov	r4, r0
 8006f00:	1798      	asrs	r0, r3, #30
 8006f02:	f000 0002 	and.w	r0, r0, #2
 8006f06:	f1c0 0001 	rsb	r0, r0, #1
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	f7f9 fb22 	bl	8000554 <__aeabi_i2d>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f7f9 fb86 	bl	8000628 <__aeabi_dmul>
 8006f1c:	e6dd      	b.n	8006cda <__kernel_tan+0x4a>
 8006f1e:	bf00      	nop
 8006f20:	54442d18 	.word	0x54442d18
 8006f24:	3fe921fb 	.word	0x3fe921fb
 8006f28:	33145c07 	.word	0x33145c07
 8006f2c:	3c81a626 	.word	0x3c81a626
 8006f30:	74bf7ad4 	.word	0x74bf7ad4
 8006f34:	3efb2a70 	.word	0x3efb2a70
 8006f38:	32f0a7e9 	.word	0x32f0a7e9
 8006f3c:	3f12b80f 	.word	0x3f12b80f
 8006f40:	1a8d1068 	.word	0x1a8d1068
 8006f44:	3f3026f7 	.word	0x3f3026f7
 8006f48:	fee08315 	.word	0xfee08315
 8006f4c:	3f57dbc8 	.word	0x3f57dbc8
 8006f50:	e96e8493 	.word	0xe96e8493
 8006f54:	3f8226e3 	.word	0x3f8226e3
 8006f58:	1bb341fe 	.word	0x1bb341fe
 8006f5c:	3faba1ba 	.word	0x3faba1ba
 8006f60:	db605373 	.word	0xdb605373
 8006f64:	bef375cb 	.word	0xbef375cb
 8006f68:	a03792a6 	.word	0xa03792a6
 8006f6c:	3f147e88 	.word	0x3f147e88
 8006f70:	f2f26501 	.word	0xf2f26501
 8006f74:	3f4344d8 	.word	0x3f4344d8
 8006f78:	c9560328 	.word	0xc9560328
 8006f7c:	3f6d6d22 	.word	0x3f6d6d22
 8006f80:	8406d637 	.word	0x8406d637
 8006f84:	3f9664f4 	.word	0x3f9664f4
 8006f88:	1110fe7a 	.word	0x1110fe7a
 8006f8c:	3fc11111 	.word	0x3fc11111
 8006f90:	55555563 	.word	0x55555563
 8006f94:	3fd55555 	.word	0x3fd55555
 8006f98:	3e2fffff 	.word	0x3e2fffff
 8006f9c:	3ff00000 	.word	0x3ff00000
 8006fa0:	bff00000 	.word	0xbff00000
 8006fa4:	3fe59427 	.word	0x3fe59427
 8006fa8:	2e01      	cmp	r6, #1
 8006faa:	d036      	beq.n	800701a <__kernel_tan+0x38a>
 8006fac:	460f      	mov	r7, r1
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	491a      	ldr	r1, [pc, #104]	; (8007020 <__kernel_tan+0x390>)
 8006fb6:	f7f9 fc61 	bl	800087c <__aeabi_ddiv>
 8006fba:	2600      	movs	r6, #0
 8006fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc0:	4652      	mov	r2, sl
 8006fc2:	465b      	mov	r3, fp
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 f976 	bl	80002b8 <__aeabi_dsub>
 8006fcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd8:	f7f9 f96e 	bl	80002b8 <__aeabi_dsub>
 8006fdc:	4632      	mov	r2, r6
 8006fde:	462b      	mov	r3, r5
 8006fe0:	f7f9 fb22 	bl	8000628 <__aeabi_dmul>
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	4682      	mov	sl, r0
 8006fe8:	468b      	mov	fp, r1
 8006fea:	462b      	mov	r3, r5
 8006fec:	4630      	mov	r0, r6
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 fb1a 	bl	8000628 <__aeabi_dmul>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <__kernel_tan+0x394>)
 8006ff8:	f7f9 f960 	bl	80002bc <__adddf3>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4650      	mov	r0, sl
 8007002:	4659      	mov	r1, fp
 8007004:	f7f9 f95a 	bl	80002bc <__adddf3>
 8007008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800700c:	f7f9 fb0c 	bl	8000628 <__aeabi_dmul>
 8007010:	4632      	mov	r2, r6
 8007012:	462b      	mov	r3, r5
 8007014:	f7f9 f952 	bl	80002bc <__adddf3>
 8007018:	e65f      	b.n	8006cda <__kernel_tan+0x4a>
 800701a:	4682      	mov	sl, r0
 800701c:	468b      	mov	fp, r1
 800701e:	e65e      	b.n	8006cde <__kernel_tan+0x4e>
 8007020:	bff00000 	.word	0xbff00000
 8007024:	3ff00000 	.word	0x3ff00000

08007028 <fabs>:
 8007028:	ec51 0b10 	vmov	r0, r1, d0
 800702c:	ee10 2a10 	vmov	r2, s0
 8007030:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007034:	ec43 2b10 	vmov	d0, r2, r3
 8007038:	4770      	bx	lr

0800703a <matherr>:
 800703a:	2000      	movs	r0, #0
 800703c:	4770      	bx	lr
	...

08007040 <nan>:
 8007040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007048 <nan+0x8>
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	00000000 	.word	0x00000000
 800704c:	7ff80000 	.word	0x7ff80000

08007050 <scalbn>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	ec55 4b10 	vmov	r4, r5, d0
 8007056:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800705a:	4606      	mov	r6, r0
 800705c:	462b      	mov	r3, r5
 800705e:	b9aa      	cbnz	r2, 800708c <scalbn+0x3c>
 8007060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007064:	4323      	orrs	r3, r4
 8007066:	d03b      	beq.n	80070e0 <scalbn+0x90>
 8007068:	4b31      	ldr	r3, [pc, #196]	; (8007130 <scalbn+0xe0>)
 800706a:	4629      	mov	r1, r5
 800706c:	2200      	movs	r2, #0
 800706e:	ee10 0a10 	vmov	r0, s0
 8007072:	f7f9 fad9 	bl	8000628 <__aeabi_dmul>
 8007076:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <scalbn+0xe4>)
 8007078:	429e      	cmp	r6, r3
 800707a:	4604      	mov	r4, r0
 800707c:	460d      	mov	r5, r1
 800707e:	da12      	bge.n	80070a6 <scalbn+0x56>
 8007080:	a327      	add	r3, pc, #156	; (adr r3, 8007120 <scalbn+0xd0>)
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f7f9 facf 	bl	8000628 <__aeabi_dmul>
 800708a:	e009      	b.n	80070a0 <scalbn+0x50>
 800708c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007090:	428a      	cmp	r2, r1
 8007092:	d10c      	bne.n	80070ae <scalbn+0x5e>
 8007094:	ee10 2a10 	vmov	r2, s0
 8007098:	4620      	mov	r0, r4
 800709a:	4629      	mov	r1, r5
 800709c:	f7f9 f90e 	bl	80002bc <__adddf3>
 80070a0:	4604      	mov	r4, r0
 80070a2:	460d      	mov	r5, r1
 80070a4:	e01c      	b.n	80070e0 <scalbn+0x90>
 80070a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80070aa:	460b      	mov	r3, r1
 80070ac:	3a36      	subs	r2, #54	; 0x36
 80070ae:	4432      	add	r2, r6
 80070b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80070b4:	428a      	cmp	r2, r1
 80070b6:	dd0b      	ble.n	80070d0 <scalbn+0x80>
 80070b8:	ec45 4b11 	vmov	d1, r4, r5
 80070bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007128 <scalbn+0xd8>
 80070c0:	f000 f83c 	bl	800713c <copysign>
 80070c4:	a318      	add	r3, pc, #96	; (adr r3, 8007128 <scalbn+0xd8>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	ec51 0b10 	vmov	r0, r1, d0
 80070ce:	e7da      	b.n	8007086 <scalbn+0x36>
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	dd08      	ble.n	80070e6 <scalbn+0x96>
 80070d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80070e0:	ec45 4b10 	vmov	d0, r4, r5
 80070e4:	bd70      	pop	{r4, r5, r6, pc}
 80070e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80070ea:	da0d      	bge.n	8007108 <scalbn+0xb8>
 80070ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80070f0:	429e      	cmp	r6, r3
 80070f2:	ec45 4b11 	vmov	d1, r4, r5
 80070f6:	dce1      	bgt.n	80070bc <scalbn+0x6c>
 80070f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007120 <scalbn+0xd0>
 80070fc:	f000 f81e 	bl	800713c <copysign>
 8007100:	a307      	add	r3, pc, #28	; (adr r3, 8007120 <scalbn+0xd0>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	e7e0      	b.n	80070ca <scalbn+0x7a>
 8007108:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800710c:	3236      	adds	r2, #54	; 0x36
 800710e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007112:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	2200      	movs	r2, #0
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <scalbn+0xe8>)
 800711e:	e7b2      	b.n	8007086 <scalbn+0x36>
 8007120:	c2f8f359 	.word	0xc2f8f359
 8007124:	01a56e1f 	.word	0x01a56e1f
 8007128:	8800759c 	.word	0x8800759c
 800712c:	7e37e43c 	.word	0x7e37e43c
 8007130:	43500000 	.word	0x43500000
 8007134:	ffff3cb0 	.word	0xffff3cb0
 8007138:	3c900000 	.word	0x3c900000

0800713c <copysign>:
 800713c:	ec51 0b10 	vmov	r0, r1, d0
 8007140:	ee11 0a90 	vmov	r0, s3
 8007144:	ee10 2a10 	vmov	r2, s0
 8007148:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800714c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007150:	ea41 0300 	orr.w	r3, r1, r0
 8007154:	ec43 2b10 	vmov	d0, r2, r3
 8007158:	4770      	bx	lr
	...

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000010 	.word	0x20000010

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4e0d      	ldr	r6, [pc, #52]	; (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	; (80071a4 <__libc_init_array+0x3c>)
 800716e:	1ba4      	subs	r4, r4, r6
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2500      	movs	r5, #0
 8007174:	42a5      	cmp	r5, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4e0b      	ldr	r6, [pc, #44]	; (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	; (80071ac <__libc_init_array+0x44>)
 800717c:	f001 fb50 	bl	8008820 <_init>
 8007180:	1ba4      	subs	r4, r4, r6
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2500      	movs	r5, #0
 8007186:	42a5      	cmp	r5, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007190:	4798      	blx	r3
 8007192:	3501      	adds	r5, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800719a:	4798      	blx	r3
 800719c:	3501      	adds	r5, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	08008d68 	.word	0x08008d68
 80071a4:	08008d68 	.word	0x08008d68
 80071a8:	08008d68 	.word	0x08008d68
 80071ac:	08008d70 	.word	0x08008d70

080071b0 <free>:
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <free+0xc>)
 80071b2:	4601      	mov	r1, r0
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	f000 ba9f 	b.w	80076f8 <_free_r>
 80071ba:	bf00      	nop
 80071bc:	20000010 	.word	0x20000010

080071c0 <memset>:
 80071c0:	4402      	add	r2, r0
 80071c2:	4603      	mov	r3, r0
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d100      	bne.n	80071ca <memset+0xa>
 80071c8:	4770      	bx	lr
 80071ca:	f803 1b01 	strb.w	r1, [r3], #1
 80071ce:	e7f9      	b.n	80071c4 <memset+0x4>

080071d0 <validate_structure>:
 80071d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071d2:	6801      	ldr	r1, [r0, #0]
 80071d4:	293b      	cmp	r1, #59	; 0x3b
 80071d6:	4604      	mov	r4, r0
 80071d8:	d911      	bls.n	80071fe <validate_structure+0x2e>
 80071da:	223c      	movs	r2, #60	; 0x3c
 80071dc:	4668      	mov	r0, sp
 80071de:	f000 fd71 	bl	8007cc4 <div>
 80071e2:	9a01      	ldr	r2, [sp, #4]
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	9900      	ldr	r1, [sp, #0]
 80071e8:	2a00      	cmp	r2, #0
 80071ea:	440b      	add	r3, r1
 80071ec:	6063      	str	r3, [r4, #4]
 80071ee:	bfbb      	ittet	lt
 80071f0:	323c      	addlt	r2, #60	; 0x3c
 80071f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80071f6:	6022      	strge	r2, [r4, #0]
 80071f8:	6022      	strlt	r2, [r4, #0]
 80071fa:	bfb8      	it	lt
 80071fc:	6063      	strlt	r3, [r4, #4]
 80071fe:	6861      	ldr	r1, [r4, #4]
 8007200:	293b      	cmp	r1, #59	; 0x3b
 8007202:	d911      	bls.n	8007228 <validate_structure+0x58>
 8007204:	223c      	movs	r2, #60	; 0x3c
 8007206:	4668      	mov	r0, sp
 8007208:	f000 fd5c 	bl	8007cc4 <div>
 800720c:	9a01      	ldr	r2, [sp, #4]
 800720e:	68a3      	ldr	r3, [r4, #8]
 8007210:	9900      	ldr	r1, [sp, #0]
 8007212:	2a00      	cmp	r2, #0
 8007214:	440b      	add	r3, r1
 8007216:	60a3      	str	r3, [r4, #8]
 8007218:	bfbb      	ittet	lt
 800721a:	323c      	addlt	r2, #60	; 0x3c
 800721c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007220:	6062      	strge	r2, [r4, #4]
 8007222:	6062      	strlt	r2, [r4, #4]
 8007224:	bfb8      	it	lt
 8007226:	60a3      	strlt	r3, [r4, #8]
 8007228:	68a1      	ldr	r1, [r4, #8]
 800722a:	2917      	cmp	r1, #23
 800722c:	d911      	bls.n	8007252 <validate_structure+0x82>
 800722e:	2218      	movs	r2, #24
 8007230:	4668      	mov	r0, sp
 8007232:	f000 fd47 	bl	8007cc4 <div>
 8007236:	9a01      	ldr	r2, [sp, #4]
 8007238:	68e3      	ldr	r3, [r4, #12]
 800723a:	9900      	ldr	r1, [sp, #0]
 800723c:	2a00      	cmp	r2, #0
 800723e:	440b      	add	r3, r1
 8007240:	60e3      	str	r3, [r4, #12]
 8007242:	bfbb      	ittet	lt
 8007244:	3218      	addlt	r2, #24
 8007246:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800724a:	60a2      	strge	r2, [r4, #8]
 800724c:	60a2      	strlt	r2, [r4, #8]
 800724e:	bfb8      	it	lt
 8007250:	60e3      	strlt	r3, [r4, #12]
 8007252:	6921      	ldr	r1, [r4, #16]
 8007254:	290b      	cmp	r1, #11
 8007256:	d911      	bls.n	800727c <validate_structure+0xac>
 8007258:	220c      	movs	r2, #12
 800725a:	4668      	mov	r0, sp
 800725c:	f000 fd32 	bl	8007cc4 <div>
 8007260:	9a01      	ldr	r2, [sp, #4]
 8007262:	6963      	ldr	r3, [r4, #20]
 8007264:	9900      	ldr	r1, [sp, #0]
 8007266:	2a00      	cmp	r2, #0
 8007268:	440b      	add	r3, r1
 800726a:	6163      	str	r3, [r4, #20]
 800726c:	bfbb      	ittet	lt
 800726e:	320c      	addlt	r2, #12
 8007270:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007274:	6122      	strge	r2, [r4, #16]
 8007276:	6122      	strlt	r2, [r4, #16]
 8007278:	bfb8      	it	lt
 800727a:	6163      	strlt	r3, [r4, #20]
 800727c:	6963      	ldr	r3, [r4, #20]
 800727e:	0799      	lsls	r1, r3, #30
 8007280:	d120      	bne.n	80072c4 <validate_structure+0xf4>
 8007282:	2164      	movs	r1, #100	; 0x64
 8007284:	fb93 f2f1 	sdiv	r2, r3, r1
 8007288:	fb01 3212 	mls	r2, r1, r2, r3
 800728c:	b9e2      	cbnz	r2, 80072c8 <validate_structure+0xf8>
 800728e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007292:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007296:	fb93 f2f1 	sdiv	r2, r3, r1
 800729a:	fb01 3312 	mls	r3, r1, r2, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bf14      	ite	ne
 80072a2:	231c      	movne	r3, #28
 80072a4:	231d      	moveq	r3, #29
 80072a6:	68e2      	ldr	r2, [r4, #12]
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	dc0f      	bgt.n	80072cc <validate_structure+0xfc>
 80072ac:	4f34      	ldr	r7, [pc, #208]	; (8007380 <validate_structure+0x1b0>)
 80072ae:	260b      	movs	r6, #11
 80072b0:	2064      	movs	r0, #100	; 0x64
 80072b2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80072b6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80072ba:	f1bc 0f00 	cmp.w	ip, #0
 80072be:	dd14      	ble.n	80072ea <validate_structure+0x11a>
 80072c0:	b003      	add	sp, #12
 80072c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c4:	231c      	movs	r3, #28
 80072c6:	e7ee      	b.n	80072a6 <validate_structure+0xd6>
 80072c8:	231d      	movs	r3, #29
 80072ca:	e7ec      	b.n	80072a6 <validate_structure+0xd6>
 80072cc:	4f2c      	ldr	r7, [pc, #176]	; (8007380 <validate_structure+0x1b0>)
 80072ce:	f04f 0c00 	mov.w	ip, #0
 80072d2:	2564      	movs	r5, #100	; 0x64
 80072d4:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80072d8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80072dc:	2a01      	cmp	r2, #1
 80072de:	d02f      	beq.n	8007340 <validate_structure+0x170>
 80072e0:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 80072e4:	4281      	cmp	r1, r0
 80072e6:	dc2e      	bgt.n	8007346 <validate_structure+0x176>
 80072e8:	e7ea      	b.n	80072c0 <validate_structure+0xf0>
 80072ea:	6921      	ldr	r1, [r4, #16]
 80072ec:	3901      	subs	r1, #1
 80072ee:	6121      	str	r1, [r4, #16]
 80072f0:	3101      	adds	r1, #1
 80072f2:	d114      	bne.n	800731e <validate_structure+0x14e>
 80072f4:	6963      	ldr	r3, [r4, #20]
 80072f6:	1e59      	subs	r1, r3, #1
 80072f8:	078a      	lsls	r2, r1, #30
 80072fa:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80072fe:	d117      	bne.n	8007330 <validate_structure+0x160>
 8007300:	fb91 f2f0 	sdiv	r2, r1, r0
 8007304:	fb00 1112 	mls	r1, r0, r2, r1
 8007308:	b9a1      	cbnz	r1, 8007334 <validate_structure+0x164>
 800730a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800730e:	fb93 f2f5 	sdiv	r2, r3, r5
 8007312:	fb05 3312 	mls	r3, r5, r2, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	bf14      	ite	ne
 800731a:	231c      	movne	r3, #28
 800731c:	231d      	moveq	r3, #29
 800731e:	6922      	ldr	r2, [r4, #16]
 8007320:	2a01      	cmp	r2, #1
 8007322:	bf14      	ite	ne
 8007324:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8007328:	461a      	moveq	r2, r3
 800732a:	4462      	add	r2, ip
 800732c:	60e2      	str	r2, [r4, #12]
 800732e:	e7c2      	b.n	80072b6 <validate_structure+0xe6>
 8007330:	231c      	movs	r3, #28
 8007332:	e7f4      	b.n	800731e <validate_structure+0x14e>
 8007334:	231d      	movs	r3, #29
 8007336:	e7f2      	b.n	800731e <validate_structure+0x14e>
 8007338:	231c      	movs	r3, #28
 800733a:	e7cd      	b.n	80072d8 <validate_structure+0x108>
 800733c:	231d      	movs	r3, #29
 800733e:	e7cb      	b.n	80072d8 <validate_structure+0x108>
 8007340:	428b      	cmp	r3, r1
 8007342:	dabd      	bge.n	80072c0 <validate_structure+0xf0>
 8007344:	4618      	mov	r0, r3
 8007346:	3201      	adds	r2, #1
 8007348:	1a09      	subs	r1, r1, r0
 800734a:	2a0c      	cmp	r2, #12
 800734c:	60e1      	str	r1, [r4, #12]
 800734e:	6122      	str	r2, [r4, #16]
 8007350:	d1c2      	bne.n	80072d8 <validate_structure+0x108>
 8007352:	6963      	ldr	r3, [r4, #20]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	0791      	lsls	r1, r2, #30
 8007358:	e9c4 c204 	strd	ip, r2, [r4, #16]
 800735c:	d1ec      	bne.n	8007338 <validate_structure+0x168>
 800735e:	fb92 f1f5 	sdiv	r1, r2, r5
 8007362:	fb05 2211 	mls	r2, r5, r1, r2
 8007366:	2a00      	cmp	r2, #0
 8007368:	d1e8      	bne.n	800733c <validate_structure+0x16c>
 800736a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800736e:	fb93 f2f6 	sdiv	r2, r3, r6
 8007372:	fb06 3312 	mls	r3, r6, r2, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	bf14      	ite	ne
 800737a:	231c      	movne	r3, #28
 800737c:	231d      	moveq	r3, #29
 800737e:	e7ab      	b.n	80072d8 <validate_structure+0x108>
 8007380:	08008ad8 	.word	0x08008ad8

08007384 <mktime>:
 8007384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	b089      	sub	sp, #36	; 0x24
 800738a:	4606      	mov	r6, r0
 800738c:	f000 fcf2 	bl	8007d74 <__gettzinfo>
 8007390:	4680      	mov	r8, r0
 8007392:	4630      	mov	r0, r6
 8007394:	f7ff ff1c 	bl	80071d0 <validate_structure>
 8007398:	e9d6 3000 	ldrd	r3, r0, [r6]
 800739c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80073a0:	fb0a 3a00 	mla	sl, sl, r0, r3
 80073a4:	68b0      	ldr	r0, [r6, #8]
 80073a6:	4abe      	ldr	r2, [pc, #760]	; (80076a0 <mktime+0x31c>)
 80073a8:	6975      	ldr	r5, [r6, #20]
 80073aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80073ae:	fb03 aa00 	mla	sl, r3, r0, sl
 80073b2:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 80073b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073ba:	3c01      	subs	r4, #1
 80073bc:	2b01      	cmp	r3, #1
 80073be:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80073c2:	4414      	add	r4, r2
 80073c4:	dd11      	ble.n	80073ea <mktime+0x66>
 80073c6:	07a9      	lsls	r1, r5, #30
 80073c8:	d10f      	bne.n	80073ea <mktime+0x66>
 80073ca:	2264      	movs	r2, #100	; 0x64
 80073cc:	fb95 f3f2 	sdiv	r3, r5, r2
 80073d0:	fb02 5313 	mls	r3, r2, r3, r5
 80073d4:	b943      	cbnz	r3, 80073e8 <mktime+0x64>
 80073d6:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 80073da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80073de:	fb91 f3f2 	sdiv	r3, r1, r2
 80073e2:	fb02 1313 	mls	r3, r2, r3, r1
 80073e6:	b903      	cbnz	r3, 80073ea <mktime+0x66>
 80073e8:	3401      	adds	r4, #1
 80073ea:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 80073ee:	3310      	adds	r3, #16
 80073f0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80073f4:	4293      	cmp	r3, r2
 80073f6:	61f4      	str	r4, [r6, #28]
 80073f8:	f200 8179 	bhi.w	80076ee <mktime+0x36a>
 80073fc:	2d46      	cmp	r5, #70	; 0x46
 80073fe:	f340 8084 	ble.w	800750a <mktime+0x186>
 8007402:	2346      	movs	r3, #70	; 0x46
 8007404:	f240 176d 	movw	r7, #365	; 0x16d
 8007408:	2164      	movs	r1, #100	; 0x64
 800740a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800740e:	079a      	lsls	r2, r3, #30
 8007410:	d175      	bne.n	80074fe <mktime+0x17a>
 8007412:	fb93 f2f1 	sdiv	r2, r3, r1
 8007416:	fb01 3212 	mls	r2, r1, r2, r3
 800741a:	2a00      	cmp	r2, #0
 800741c:	d172      	bne.n	8007504 <mktime+0x180>
 800741e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8007422:	fb9c f2f0 	sdiv	r2, ip, r0
 8007426:	fb00 c212 	mls	r2, r0, r2, ip
 800742a:	2a00      	cmp	r2, #0
 800742c:	bf14      	ite	ne
 800742e:	463a      	movne	r2, r7
 8007430:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007434:	3301      	adds	r3, #1
 8007436:	429d      	cmp	r5, r3
 8007438:	4414      	add	r4, r2
 800743a:	d1e8      	bne.n	800740e <mktime+0x8a>
 800743c:	4b99      	ldr	r3, [pc, #612]	; (80076a4 <mktime+0x320>)
 800743e:	4363      	muls	r3, r4
 8007440:	eb1a 0103 	adds.w	r1, sl, r3
 8007444:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 8007448:	e9cd 1200 	strd	r1, r2, [sp]
 800744c:	f000 fab4 	bl	80079b8 <__tz_lock>
 8007450:	f000 fab4 	bl	80079bc <_tzset_unlocked>
 8007454:	4b94      	ldr	r3, [pc, #592]	; (80076a8 <mktime+0x324>)
 8007456:	f8d3 9000 	ldr.w	r9, [r3]
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	d045      	beq.n	80074ec <mktime+0x168>
 8007460:	f8d6 9020 	ldr.w	r9, [r6, #32]
 8007464:	6970      	ldr	r0, [r6, #20]
 8007466:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800746a:	464f      	mov	r7, r9
 800746c:	2f01      	cmp	r7, #1
 800746e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8007472:	bfa8      	it	ge
 8007474:	2701      	movge	r7, #1
 8007476:	4283      	cmp	r3, r0
 8007478:	f040 8089 	bne.w	800758e <mktime+0x20a>
 800747c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8007480:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8007484:	460a      	mov	r2, r1
 8007486:	17cb      	asrs	r3, r1, #31
 8007488:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800748c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8007490:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007494:	1a12      	subs	r2, r2, r0
 8007496:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 800749a:	4692      	mov	sl, r2
 800749c:	469b      	mov	fp, r3
 800749e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a2:	4552      	cmp	r2, sl
 80074a4:	eb73 0c0b 	sbcs.w	ip, r3, fp
 80074a8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80074ac:	da76      	bge.n	800759c <mktime+0x218>
 80074ae:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80074b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80074b6:	ebb2 0a0a 	subs.w	sl, r2, sl
 80074ba:	eb63 0b0b 	sbc.w	fp, r3, fp
 80074be:	f8d8 3000 	ldr.w	r3, [r8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d079      	beq.n	80075ba <mktime+0x236>
 80074c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ca:	4552      	cmp	r2, sl
 80074cc:	eb73 030b 	sbcs.w	r3, r3, fp
 80074d0:	db07      	blt.n	80074e2 <mktime+0x15e>
 80074d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074d6:	e9dd ab00 	ldrd	sl, fp, [sp]
 80074da:	4592      	cmp	sl, r2
 80074dc:	eb7b 0303 	sbcs.w	r3, fp, r3
 80074e0:	db71      	blt.n	80075c6 <mktime+0x242>
 80074e2:	f1b9 0f00 	cmp.w	r9, #0
 80074e6:	f04f 0900 	mov.w	r9, #0
 80074ea:	da71      	bge.n	80075d0 <mktime+0x24c>
 80074ec:	e9dd ab00 	ldrd	sl, fp, [sp]
 80074f0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80074f4:	eb1a 0a03 	adds.w	sl, sl, r3
 80074f8:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80074fc:	e0b4      	b.n	8007668 <mktime+0x2e4>
 80074fe:	f240 126d 	movw	r2, #365	; 0x16d
 8007502:	e797      	b.n	8007434 <mktime+0xb0>
 8007504:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007508:	e794      	b.n	8007434 <mktime+0xb0>
 800750a:	d097      	beq.n	800743c <mktime+0xb8>
 800750c:	2345      	movs	r3, #69	; 0x45
 800750e:	f240 176d 	movw	r7, #365	; 0x16d
 8007512:	2164      	movs	r1, #100	; 0x64
 8007514:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007518:	e012      	b.n	8007540 <mktime+0x1bc>
 800751a:	bb62      	cbnz	r2, 8007576 <mktime+0x1f2>
 800751c:	fb93 f2f1 	sdiv	r2, r3, r1
 8007520:	fb01 3212 	mls	r2, r1, r2, r3
 8007524:	bb52      	cbnz	r2, 800757c <mktime+0x1f8>
 8007526:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800752a:	fb9c f2f0 	sdiv	r2, ip, r0
 800752e:	fb00 c212 	mls	r2, r0, r2, ip
 8007532:	2a00      	cmp	r2, #0
 8007534:	bf14      	ite	ne
 8007536:	463a      	movne	r2, r7
 8007538:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800753c:	1aa4      	subs	r4, r4, r2
 800753e:	3b01      	subs	r3, #1
 8007540:	429d      	cmp	r5, r3
 8007542:	f003 0203 	and.w	r2, r3, #3
 8007546:	dbe8      	blt.n	800751a <mktime+0x196>
 8007548:	b9da      	cbnz	r2, 8007582 <mktime+0x1fe>
 800754a:	2264      	movs	r2, #100	; 0x64
 800754c:	fb95 f3f2 	sdiv	r3, r5, r2
 8007550:	fb02 5313 	mls	r3, r2, r3, r5
 8007554:	b9c3      	cbnz	r3, 8007588 <mktime+0x204>
 8007556:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800755a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800755e:	fb91 f3f2 	sdiv	r3, r1, r2
 8007562:	fb02 1313 	mls	r3, r2, r3, r1
 8007566:	2b00      	cmp	r3, #0
 8007568:	f240 136d 	movw	r3, #365	; 0x16d
 800756c:	bf08      	it	eq
 800756e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007572:	1ae4      	subs	r4, r4, r3
 8007574:	e762      	b.n	800743c <mktime+0xb8>
 8007576:	f240 126d 	movw	r2, #365	; 0x16d
 800757a:	e7df      	b.n	800753c <mktime+0x1b8>
 800757c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007580:	e7dc      	b.n	800753c <mktime+0x1b8>
 8007582:	f240 136d 	movw	r3, #365	; 0x16d
 8007586:	e7f4      	b.n	8007572 <mktime+0x1ee>
 8007588:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800758c:	e7f1      	b.n	8007572 <mktime+0x1ee>
 800758e:	f000 f96b 	bl	8007868 <__tzcalc_limits>
 8007592:	2800      	cmp	r0, #0
 8007594:	f47f af72 	bne.w	800747c <mktime+0xf8>
 8007598:	46b9      	mov	r9, r7
 800759a:	e057      	b.n	800764c <mktime+0x2c8>
 800759c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80075a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075a4:	ebb2 020a 	subs.w	r2, r2, sl
 80075a8:	eb63 030b 	sbc.w	r3, r3, fp
 80075ac:	e9dd ab00 	ldrd	sl, fp, [sp]
 80075b0:	4592      	cmp	sl, r2
 80075b2:	eb7b 0303 	sbcs.w	r3, fp, r3
 80075b6:	dbef      	blt.n	8007598 <mktime+0x214>
 80075b8:	e779      	b.n	80074ae <mktime+0x12a>
 80075ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075be:	4552      	cmp	r2, sl
 80075c0:	eb73 030b 	sbcs.w	r3, r3, fp
 80075c4:	db85      	blt.n	80074d2 <mktime+0x14e>
 80075c6:	f1b9 0f00 	cmp.w	r9, #0
 80075ca:	db43      	blt.n	8007654 <mktime+0x2d0>
 80075cc:	f04f 0901 	mov.w	r9, #1
 80075d0:	ea87 0709 	eor.w	r7, r7, r9
 80075d4:	2f01      	cmp	r7, #1
 80075d6:	d139      	bne.n	800764c <mktime+0x2c8>
 80075d8:	1a40      	subs	r0, r0, r1
 80075da:	f1b9 0f00 	cmp.w	r9, #0
 80075de:	d100      	bne.n	80075e2 <mktime+0x25e>
 80075e0:	4240      	negs	r0, r0
 80075e2:	6833      	ldr	r3, [r6, #0]
 80075e4:	4403      	add	r3, r0
 80075e6:	6033      	str	r3, [r6, #0]
 80075e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ec:	1812      	adds	r2, r2, r0
 80075ee:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 80075f2:	e9cd 2300 	strd	r2, r3, [sp]
 80075f6:	4630      	mov	r0, r6
 80075f8:	68f2      	ldr	r2, [r6, #12]
 80075fa:	9202      	str	r2, [sp, #8]
 80075fc:	f7ff fde8 	bl	80071d0 <validate_structure>
 8007600:	68f3      	ldr	r3, [r6, #12]
 8007602:	9a02      	ldr	r2, [sp, #8]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	d021      	beq.n	800764c <mktime+0x2c8>
 8007608:	2b01      	cmp	r3, #1
 800760a:	dc40      	bgt.n	800768e <mktime+0x30a>
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	bfa8      	it	ge
 8007612:	461f      	movge	r7, r3
 8007614:	69f3      	ldr	r3, [r6, #28]
 8007616:	443c      	add	r4, r7
 8007618:	18ff      	adds	r7, r7, r3
 800761a:	d547      	bpl.n	80076ac <mktime+0x328>
 800761c:	1e6a      	subs	r2, r5, #1
 800761e:	0791      	lsls	r1, r2, #30
 8007620:	d138      	bne.n	8007694 <mktime+0x310>
 8007622:	2164      	movs	r1, #100	; 0x64
 8007624:	fb92 f3f1 	sdiv	r3, r2, r1
 8007628:	fb01 2313 	mls	r3, r1, r3, r2
 800762c:	bbab      	cbnz	r3, 800769a <mktime+0x316>
 800762e:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8007632:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007636:	fb95 f3f2 	sdiv	r3, r5, r2
 800763a:	fb02 5513 	mls	r5, r2, r3, r5
 800763e:	2d00      	cmp	r5, #0
 8007640:	f240 136d 	movw	r3, #365	; 0x16d
 8007644:	bf18      	it	ne
 8007646:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800764a:	61f3      	str	r3, [r6, #28]
 800764c:	f1b9 0f01 	cmp.w	r9, #1
 8007650:	f47f af4c 	bne.w	80074ec <mktime+0x168>
 8007654:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007658:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 800765c:	eb1a 0a03 	adds.w	sl, sl, r3
 8007660:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8007664:	f04f 0901 	mov.w	r9, #1
 8007668:	f000 f9a7 	bl	80079ba <__tz_unlock>
 800766c:	3404      	adds	r4, #4
 800766e:	2307      	movs	r3, #7
 8007670:	fb94 f3f3 	sdiv	r3, r4, r3
 8007674:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007678:	1ae4      	subs	r4, r4, r3
 800767a:	bf48      	it	mi
 800767c:	3407      	addmi	r4, #7
 800767e:	f8c6 9020 	str.w	r9, [r6, #32]
 8007682:	61b4      	str	r4, [r6, #24]
 8007684:	4650      	mov	r0, sl
 8007686:	4659      	mov	r1, fp
 8007688:	b009      	add	sp, #36	; 0x24
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	f04f 37ff 	mov.w	r7, #4294967295
 8007692:	e7bf      	b.n	8007614 <mktime+0x290>
 8007694:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8007698:	e7d7      	b.n	800764a <mktime+0x2c6>
 800769a:	f240 136d 	movw	r3, #365	; 0x16d
 800769e:	e7d4      	b.n	800764a <mktime+0x2c6>
 80076a0:	08008b08 	.word	0x08008b08
 80076a4:	00015180 	.word	0x00015180
 80076a8:	20000384 	.word	0x20000384
 80076ac:	07ab      	lsls	r3, r5, #30
 80076ae:	d118      	bne.n	80076e2 <mktime+0x35e>
 80076b0:	2264      	movs	r2, #100	; 0x64
 80076b2:	fb95 f3f2 	sdiv	r3, r5, r2
 80076b6:	fb02 5313 	mls	r3, r2, r3, r5
 80076ba:	b9ab      	cbnz	r3, 80076e8 <mktime+0x364>
 80076bc:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 80076c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80076c4:	fb95 f3f2 	sdiv	r3, r5, r2
 80076c8:	fb02 5513 	mls	r5, r2, r3, r5
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	f240 136d 	movw	r3, #365	; 0x16d
 80076d2:	bf08      	it	eq
 80076d4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80076d8:	429f      	cmp	r7, r3
 80076da:	bfa8      	it	ge
 80076dc:	1aff      	subge	r7, r7, r3
 80076de:	61f7      	str	r7, [r6, #28]
 80076e0:	e7b4      	b.n	800764c <mktime+0x2c8>
 80076e2:	f240 136d 	movw	r3, #365	; 0x16d
 80076e6:	e7f7      	b.n	80076d8 <mktime+0x354>
 80076e8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80076ec:	e7f4      	b.n	80076d8 <mktime+0x354>
 80076ee:	f04f 3aff 	mov.w	sl, #4294967295
 80076f2:	f04f 3bff 	mov.w	fp, #4294967295
 80076f6:	e7c5      	b.n	8007684 <mktime+0x300>

080076f8 <_free_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4605      	mov	r5, r0
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d045      	beq.n	800778c <_free_r+0x94>
 8007700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007704:	1f0c      	subs	r4, r1, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfb8      	it	lt
 800770a:	18e4      	addlt	r4, r4, r3
 800770c:	f000 fb36 	bl	8007d7c <__malloc_lock>
 8007710:	4a1f      	ldr	r2, [pc, #124]	; (8007790 <_free_r+0x98>)
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	4610      	mov	r0, r2
 8007716:	b933      	cbnz	r3, 8007726 <_free_r+0x2e>
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	6014      	str	r4, [r2, #0]
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f000 bb2c 	b.w	8007d7e <__malloc_unlock>
 8007726:	42a3      	cmp	r3, r4
 8007728:	d90c      	bls.n	8007744 <_free_r+0x4c>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	1862      	adds	r2, r4, r1
 800772e:	4293      	cmp	r3, r2
 8007730:	bf04      	itt	eq
 8007732:	681a      	ldreq	r2, [r3, #0]
 8007734:	685b      	ldreq	r3, [r3, #4]
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	bf04      	itt	eq
 800773a:	1852      	addeq	r2, r2, r1
 800773c:	6022      	streq	r2, [r4, #0]
 800773e:	6004      	str	r4, [r0, #0]
 8007740:	e7ec      	b.n	800771c <_free_r+0x24>
 8007742:	4613      	mov	r3, r2
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	b10a      	cbz	r2, 800774c <_free_r+0x54>
 8007748:	42a2      	cmp	r2, r4
 800774a:	d9fa      	bls.n	8007742 <_free_r+0x4a>
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	1858      	adds	r0, r3, r1
 8007750:	42a0      	cmp	r0, r4
 8007752:	d10b      	bne.n	800776c <_free_r+0x74>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	4401      	add	r1, r0
 8007758:	1858      	adds	r0, r3, r1
 800775a:	4282      	cmp	r2, r0
 800775c:	6019      	str	r1, [r3, #0]
 800775e:	d1dd      	bne.n	800771c <_free_r+0x24>
 8007760:	6810      	ldr	r0, [r2, #0]
 8007762:	6852      	ldr	r2, [r2, #4]
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	4401      	add	r1, r0
 8007768:	6019      	str	r1, [r3, #0]
 800776a:	e7d7      	b.n	800771c <_free_r+0x24>
 800776c:	d902      	bls.n	8007774 <_free_r+0x7c>
 800776e:	230c      	movs	r3, #12
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	e7d3      	b.n	800771c <_free_r+0x24>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	1821      	adds	r1, r4, r0
 8007778:	428a      	cmp	r2, r1
 800777a:	bf04      	itt	eq
 800777c:	6811      	ldreq	r1, [r2, #0]
 800777e:	6852      	ldreq	r2, [r2, #4]
 8007780:	6062      	str	r2, [r4, #4]
 8007782:	bf04      	itt	eq
 8007784:	1809      	addeq	r1, r1, r0
 8007786:	6021      	streq	r1, [r4, #0]
 8007788:	605c      	str	r4, [r3, #4]
 800778a:	e7c7      	b.n	800771c <_free_r+0x24>
 800778c:	bd38      	pop	{r3, r4, r5, pc}
 800778e:	bf00      	nop
 8007790:	20000360 	.word	0x20000360

08007794 <_malloc_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	1ccd      	adds	r5, r1, #3
 8007798:	f025 0503 	bic.w	r5, r5, #3
 800779c:	3508      	adds	r5, #8
 800779e:	2d0c      	cmp	r5, #12
 80077a0:	bf38      	it	cc
 80077a2:	250c      	movcc	r5, #12
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	4606      	mov	r6, r0
 80077a8:	db01      	blt.n	80077ae <_malloc_r+0x1a>
 80077aa:	42a9      	cmp	r1, r5
 80077ac:	d903      	bls.n	80077b6 <_malloc_r+0x22>
 80077ae:	230c      	movs	r3, #12
 80077b0:	6033      	str	r3, [r6, #0]
 80077b2:	2000      	movs	r0, #0
 80077b4:	bd70      	pop	{r4, r5, r6, pc}
 80077b6:	f000 fae1 	bl	8007d7c <__malloc_lock>
 80077ba:	4a21      	ldr	r2, [pc, #132]	; (8007840 <_malloc_r+0xac>)
 80077bc:	6814      	ldr	r4, [r2, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	b991      	cbnz	r1, 80077e8 <_malloc_r+0x54>
 80077c2:	4c20      	ldr	r4, [pc, #128]	; (8007844 <_malloc_r+0xb0>)
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	b91b      	cbnz	r3, 80077d0 <_malloc_r+0x3c>
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 f83d 	bl	8007848 <_sbrk_r>
 80077ce:	6020      	str	r0, [r4, #0]
 80077d0:	4629      	mov	r1, r5
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f838 	bl	8007848 <_sbrk_r>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d124      	bne.n	8007826 <_malloc_r+0x92>
 80077dc:	230c      	movs	r3, #12
 80077de:	6033      	str	r3, [r6, #0]
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 facc 	bl	8007d7e <__malloc_unlock>
 80077e6:	e7e4      	b.n	80077b2 <_malloc_r+0x1e>
 80077e8:	680b      	ldr	r3, [r1, #0]
 80077ea:	1b5b      	subs	r3, r3, r5
 80077ec:	d418      	bmi.n	8007820 <_malloc_r+0x8c>
 80077ee:	2b0b      	cmp	r3, #11
 80077f0:	d90f      	bls.n	8007812 <_malloc_r+0x7e>
 80077f2:	600b      	str	r3, [r1, #0]
 80077f4:	50cd      	str	r5, [r1, r3]
 80077f6:	18cc      	adds	r4, r1, r3
 80077f8:	4630      	mov	r0, r6
 80077fa:	f000 fac0 	bl	8007d7e <__malloc_unlock>
 80077fe:	f104 000b 	add.w	r0, r4, #11
 8007802:	1d23      	adds	r3, r4, #4
 8007804:	f020 0007 	bic.w	r0, r0, #7
 8007808:	1ac3      	subs	r3, r0, r3
 800780a:	d0d3      	beq.n	80077b4 <_malloc_r+0x20>
 800780c:	425a      	negs	r2, r3
 800780e:	50e2      	str	r2, [r4, r3]
 8007810:	e7d0      	b.n	80077b4 <_malloc_r+0x20>
 8007812:	428c      	cmp	r4, r1
 8007814:	684b      	ldr	r3, [r1, #4]
 8007816:	bf16      	itet	ne
 8007818:	6063      	strne	r3, [r4, #4]
 800781a:	6013      	streq	r3, [r2, #0]
 800781c:	460c      	movne	r4, r1
 800781e:	e7eb      	b.n	80077f8 <_malloc_r+0x64>
 8007820:	460c      	mov	r4, r1
 8007822:	6849      	ldr	r1, [r1, #4]
 8007824:	e7cc      	b.n	80077c0 <_malloc_r+0x2c>
 8007826:	1cc4      	adds	r4, r0, #3
 8007828:	f024 0403 	bic.w	r4, r4, #3
 800782c:	42a0      	cmp	r0, r4
 800782e:	d005      	beq.n	800783c <_malloc_r+0xa8>
 8007830:	1a21      	subs	r1, r4, r0
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f808 	bl	8007848 <_sbrk_r>
 8007838:	3001      	adds	r0, #1
 800783a:	d0cf      	beq.n	80077dc <_malloc_r+0x48>
 800783c:	6025      	str	r5, [r4, #0]
 800783e:	e7db      	b.n	80077f8 <_malloc_r+0x64>
 8007840:	20000360 	.word	0x20000360
 8007844:	20000364 	.word	0x20000364

08007848 <_sbrk_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4c06      	ldr	r4, [pc, #24]	; (8007864 <_sbrk_r+0x1c>)
 800784c:	2300      	movs	r3, #0
 800784e:	4605      	mov	r5, r0
 8007850:	4608      	mov	r0, r1
 8007852:	6023      	str	r3, [r4, #0]
 8007854:	f7fb fc8c 	bl	8003170 <_sbrk>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_sbrk_r+0x1a>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	b103      	cbz	r3, 8007862 <_sbrk_r+0x1a>
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	20000390 	.word	0x20000390

08007868 <__tzcalc_limits>:
 8007868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	4680      	mov	r8, r0
 800786e:	f000 fa81 	bl	8007d74 <__gettzinfo>
 8007872:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007876:	4598      	cmp	r8, r3
 8007878:	f340 8098 	ble.w	80079ac <__tzcalc_limits+0x144>
 800787c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8007880:	4443      	add	r3, r8
 8007882:	109b      	asrs	r3, r3, #2
 8007884:	f240 126d 	movw	r2, #365	; 0x16d
 8007888:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800788c:	fb02 3505 	mla	r5, r2, r5, r3
 8007890:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007894:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8007898:	fb93 f3f2 	sdiv	r3, r3, r2
 800789c:	441d      	add	r5, r3
 800789e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80078a2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80078a6:	fb98 f7f3 	sdiv	r7, r8, r3
 80078aa:	fb03 8717 	mls	r7, r3, r7, r8
 80078ae:	4442      	add	r2, r8
 80078b0:	fab7 fc87 	clz	ip, r7
 80078b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80078b8:	f008 0303 	and.w	r3, r8, #3
 80078bc:	4415      	add	r5, r2
 80078be:	2264      	movs	r2, #100	; 0x64
 80078c0:	f8c0 8004 	str.w	r8, [r0, #4]
 80078c4:	fb98 f6f2 	sdiv	r6, r8, r2
 80078c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80078cc:	fb02 8616 	mls	r6, r2, r6, r8
 80078d0:	4604      	mov	r4, r0
 80078d2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	f04f 0e07 	mov.w	lr, #7
 80078dc:	7a22      	ldrb	r2, [r4, #8]
 80078de:	6963      	ldr	r3, [r4, #20]
 80078e0:	2a4a      	cmp	r2, #74	; 0x4a
 80078e2:	d128      	bne.n	8007936 <__tzcalc_limits+0xce>
 80078e4:	9900      	ldr	r1, [sp, #0]
 80078e6:	18ea      	adds	r2, r5, r3
 80078e8:	b901      	cbnz	r1, 80078ec <__tzcalc_limits+0x84>
 80078ea:	b906      	cbnz	r6, 80078ee <__tzcalc_limits+0x86>
 80078ec:	bb0f      	cbnz	r7, 8007932 <__tzcalc_limits+0xca>
 80078ee:	2b3b      	cmp	r3, #59	; 0x3b
 80078f0:	bfd4      	ite	le
 80078f2:	2300      	movle	r3, #0
 80078f4:	2301      	movgt	r3, #1
 80078f6:	4413      	add	r3, r2
 80078f8:	1e5a      	subs	r2, r3, #1
 80078fa:	69a3      	ldr	r3, [r4, #24]
 80078fc:	492c      	ldr	r1, [pc, #176]	; (80079b0 <__tzcalc_limits+0x148>)
 80078fe:	fb01 3202 	mla	r2, r1, r2, r3
 8007902:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007904:	4413      	add	r3, r2
 8007906:	461a      	mov	r2, r3
 8007908:	17db      	asrs	r3, r3, #31
 800790a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800790e:	3428      	adds	r4, #40	; 0x28
 8007910:	45a3      	cmp	fp, r4
 8007912:	d1e3      	bne.n	80078dc <__tzcalc_limits+0x74>
 8007914:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8007918:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800791c:	4294      	cmp	r4, r2
 800791e:	eb75 0303 	sbcs.w	r3, r5, r3
 8007922:	bfb4      	ite	lt
 8007924:	2301      	movlt	r3, #1
 8007926:	2300      	movge	r3, #0
 8007928:	6003      	str	r3, [r0, #0]
 800792a:	2001      	movs	r0, #1
 800792c:	b003      	add	sp, #12
 800792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007932:	2300      	movs	r3, #0
 8007934:	e7df      	b.n	80078f6 <__tzcalc_limits+0x8e>
 8007936:	2a44      	cmp	r2, #68	; 0x44
 8007938:	d101      	bne.n	800793e <__tzcalc_limits+0xd6>
 800793a:	18ea      	adds	r2, r5, r3
 800793c:	e7dd      	b.n	80078fa <__tzcalc_limits+0x92>
 800793e:	9a00      	ldr	r2, [sp, #0]
 8007940:	bb72      	cbnz	r2, 80079a0 <__tzcalc_limits+0x138>
 8007942:	2e00      	cmp	r6, #0
 8007944:	bf0c      	ite	eq
 8007946:	46e1      	moveq	r9, ip
 8007948:	f04f 0901 	movne.w	r9, #1
 800794c:	2230      	movs	r2, #48	; 0x30
 800794e:	fb02 f909 	mul.w	r9, r2, r9
 8007952:	68e2      	ldr	r2, [r4, #12]
 8007954:	9201      	str	r2, [sp, #4]
 8007956:	f04f 0800 	mov.w	r8, #0
 800795a:	462a      	mov	r2, r5
 800795c:	f108 0801 	add.w	r8, r8, #1
 8007960:	4914      	ldr	r1, [pc, #80]	; (80079b4 <__tzcalc_limits+0x14c>)
 8007962:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8007966:	448a      	add	sl, r1
 8007968:	9901      	ldr	r1, [sp, #4]
 800796a:	f85a ac04 	ldr.w	sl, [sl, #-4]
 800796e:	4541      	cmp	r1, r8
 8007970:	dc18      	bgt.n	80079a4 <__tzcalc_limits+0x13c>
 8007972:	f102 0804 	add.w	r8, r2, #4
 8007976:	fb98 f9fe 	sdiv	r9, r8, lr
 800797a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800797e:	eba8 0909 	sub.w	r9, r8, r9
 8007982:	ebb3 0909 	subs.w	r9, r3, r9
 8007986:	6923      	ldr	r3, [r4, #16]
 8007988:	f103 33ff 	add.w	r3, r3, #4294967295
 800798c:	bf48      	it	mi
 800798e:	f109 0907 	addmi.w	r9, r9, #7
 8007992:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007996:	444b      	add	r3, r9
 8007998:	4553      	cmp	r3, sl
 800799a:	da05      	bge.n	80079a8 <__tzcalc_limits+0x140>
 800799c:	441a      	add	r2, r3
 800799e:	e7ac      	b.n	80078fa <__tzcalc_limits+0x92>
 80079a0:	46e1      	mov	r9, ip
 80079a2:	e7d3      	b.n	800794c <__tzcalc_limits+0xe4>
 80079a4:	4452      	add	r2, sl
 80079a6:	e7d9      	b.n	800795c <__tzcalc_limits+0xf4>
 80079a8:	3b07      	subs	r3, #7
 80079aa:	e7f5      	b.n	8007998 <__tzcalc_limits+0x130>
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7bd      	b.n	800792c <__tzcalc_limits+0xc4>
 80079b0:	00015180 	.word	0x00015180
 80079b4:	08008b74 	.word	0x08008b74

080079b8 <__tz_lock>:
 80079b8:	4770      	bx	lr

080079ba <__tz_unlock>:
 80079ba:	4770      	bx	lr

080079bc <_tzset_unlocked>:
 80079bc:	4b01      	ldr	r3, [pc, #4]	; (80079c4 <_tzset_unlocked+0x8>)
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	f000 b802 	b.w	80079c8 <_tzset_unlocked_r>
 80079c4:	20000010 	.word	0x20000010

080079c8 <_tzset_unlocked_r>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	b08d      	sub	sp, #52	; 0x34
 80079ce:	4607      	mov	r7, r0
 80079d0:	f000 f9d0 	bl	8007d74 <__gettzinfo>
 80079d4:	49af      	ldr	r1, [pc, #700]	; (8007c94 <_tzset_unlocked_r+0x2cc>)
 80079d6:	4eb0      	ldr	r6, [pc, #704]	; (8007c98 <_tzset_unlocked_r+0x2d0>)
 80079d8:	4605      	mov	r5, r0
 80079da:	4638      	mov	r0, r7
 80079dc:	f000 f9c2 	bl	8007d64 <_getenv_r>
 80079e0:	4604      	mov	r4, r0
 80079e2:	b970      	cbnz	r0, 8007a02 <_tzset_unlocked_r+0x3a>
 80079e4:	4bad      	ldr	r3, [pc, #692]	; (8007c9c <_tzset_unlocked_r+0x2d4>)
 80079e6:	4aae      	ldr	r2, [pc, #696]	; (8007ca0 <_tzset_unlocked_r+0x2d8>)
 80079e8:	6018      	str	r0, [r3, #0]
 80079ea:	4bae      	ldr	r3, [pc, #696]	; (8007ca4 <_tzset_unlocked_r+0x2dc>)
 80079ec:	6018      	str	r0, [r3, #0]
 80079ee:	4bae      	ldr	r3, [pc, #696]	; (8007ca8 <_tzset_unlocked_r+0x2e0>)
 80079f0:	6830      	ldr	r0, [r6, #0]
 80079f2:	e9c3 2200 	strd	r2, r2, [r3]
 80079f6:	f7ff fbdb 	bl	80071b0 <free>
 80079fa:	6034      	str	r4, [r6, #0]
 80079fc:	b00d      	add	sp, #52	; 0x34
 80079fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a02:	6831      	ldr	r1, [r6, #0]
 8007a04:	2900      	cmp	r1, #0
 8007a06:	d15f      	bne.n	8007ac8 <_tzset_unlocked_r+0x100>
 8007a08:	6830      	ldr	r0, [r6, #0]
 8007a0a:	f7ff fbd1 	bl	80071b0 <free>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f7f8 fbf0 	bl	80001f4 <strlen>
 8007a14:	1c41      	adds	r1, r0, #1
 8007a16:	4638      	mov	r0, r7
 8007a18:	f7ff febc 	bl	8007794 <_malloc_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d157      	bne.n	8007ad2 <_tzset_unlocked_r+0x10a>
 8007a22:	7823      	ldrb	r3, [r4, #0]
 8007a24:	4aa1      	ldr	r2, [pc, #644]	; (8007cac <_tzset_unlocked_r+0x2e4>)
 8007a26:	49a2      	ldr	r1, [pc, #648]	; (8007cb0 <_tzset_unlocked_r+0x2e8>)
 8007a28:	2b3a      	cmp	r3, #58	; 0x3a
 8007a2a:	bf08      	it	eq
 8007a2c:	3401      	addeq	r4, #1
 8007a2e:	ae0a      	add	r6, sp, #40	; 0x28
 8007a30:	4633      	mov	r3, r6
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 f9a4 	bl	8007d80 <siscanf>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	dddf      	ble.n	80079fc <_tzset_unlocked_r+0x34>
 8007a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3e:	18e7      	adds	r7, r4, r3
 8007a40:	5ce3      	ldrb	r3, [r4, r3]
 8007a42:	2b2d      	cmp	r3, #45	; 0x2d
 8007a44:	d149      	bne.n	8007ada <_tzset_unlocked_r+0x112>
 8007a46:	3701      	adds	r7, #1
 8007a48:	f04f 34ff 	mov.w	r4, #4294967295
 8007a4c:	f10d 0a20 	add.w	sl, sp, #32
 8007a50:	f10d 0b1e 	add.w	fp, sp, #30
 8007a54:	f04f 0800 	mov.w	r8, #0
 8007a58:	9603      	str	r6, [sp, #12]
 8007a5a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8007a5e:	f8cd b000 	str.w	fp, [sp]
 8007a62:	4633      	mov	r3, r6
 8007a64:	aa07      	add	r2, sp, #28
 8007a66:	4993      	ldr	r1, [pc, #588]	; (8007cb4 <_tzset_unlocked_r+0x2ec>)
 8007a68:	f8ad 801e 	strh.w	r8, [sp, #30]
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8007a72:	f000 f985 	bl	8007d80 <siscanf>
 8007a76:	4540      	cmp	r0, r8
 8007a78:	ddc0      	ble.n	80079fc <_tzset_unlocked_r+0x34>
 8007a7a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007a7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007a82:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8007cc0 <_tzset_unlocked_r+0x2f8>
 8007a86:	213c      	movs	r1, #60	; 0x3c
 8007a88:	fb01 2203 	mla	r2, r1, r3, r2
 8007a8c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007a90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007a94:	fb01 2303 	mla	r3, r1, r3, r2
 8007a98:	435c      	muls	r4, r3
 8007a9a:	62ac      	str	r4, [r5, #40]	; 0x28
 8007a9c:	4c82      	ldr	r4, [pc, #520]	; (8007ca8 <_tzset_unlocked_r+0x2e0>)
 8007a9e:	4b83      	ldr	r3, [pc, #524]	; (8007cac <_tzset_unlocked_r+0x2e4>)
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa4:	4982      	ldr	r1, [pc, #520]	; (8007cb0 <_tzset_unlocked_r+0x2e8>)
 8007aa6:	441f      	add	r7, r3
 8007aa8:	464a      	mov	r2, r9
 8007aaa:	4633      	mov	r3, r6
 8007aac:	4638      	mov	r0, r7
 8007aae:	f000 f967 	bl	8007d80 <siscanf>
 8007ab2:	4540      	cmp	r0, r8
 8007ab4:	dc16      	bgt.n	8007ae4 <_tzset_unlocked_r+0x11c>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	6063      	str	r3, [r4, #4]
 8007aba:	4b78      	ldr	r3, [pc, #480]	; (8007c9c <_tzset_unlocked_r+0x2d4>)
 8007abc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	4b78      	ldr	r3, [pc, #480]	; (8007ca4 <_tzset_unlocked_r+0x2dc>)
 8007ac2:	f8c3 8000 	str.w	r8, [r3]
 8007ac6:	e799      	b.n	80079fc <_tzset_unlocked_r+0x34>
 8007ac8:	f7f8 fb8a 	bl	80001e0 <strcmp>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d095      	beq.n	80079fc <_tzset_unlocked_r+0x34>
 8007ad0:	e79a      	b.n	8007a08 <_tzset_unlocked_r+0x40>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	f000 f980 	bl	8007dd8 <strcpy>
 8007ad8:	e7a3      	b.n	8007a22 <_tzset_unlocked_r+0x5a>
 8007ada:	2b2b      	cmp	r3, #43	; 0x2b
 8007adc:	bf08      	it	eq
 8007ade:	3701      	addeq	r7, #1
 8007ae0:	2401      	movs	r4, #1
 8007ae2:	e7b3      	b.n	8007a4c <_tzset_unlocked_r+0x84>
 8007ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae6:	f8c4 9004 	str.w	r9, [r4, #4]
 8007aea:	18fc      	adds	r4, r7, r3
 8007aec:	5cfb      	ldrb	r3, [r7, r3]
 8007aee:	2b2d      	cmp	r3, #45	; 0x2d
 8007af0:	f040 808b 	bne.w	8007c0a <_tzset_unlocked_r+0x242>
 8007af4:	3401      	adds	r4, #1
 8007af6:	f04f 37ff 	mov.w	r7, #4294967295
 8007afa:	2300      	movs	r3, #0
 8007afc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007b00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007b04:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007b08:	930a      	str	r3, [sp, #40]	; 0x28
 8007b0a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007b0e:	e9cd b600 	strd	fp, r6, [sp]
 8007b12:	4633      	mov	r3, r6
 8007b14:	aa07      	add	r2, sp, #28
 8007b16:	4967      	ldr	r1, [pc, #412]	; (8007cb4 <_tzset_unlocked_r+0x2ec>)
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 f931 	bl	8007d80 <siscanf>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	dc78      	bgt.n	8007c14 <_tzset_unlocked_r+0x24c>
 8007b22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007b24:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8007b28:	652b      	str	r3, [r5, #80]	; 0x50
 8007b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2c:	462f      	mov	r7, r5
 8007b2e:	441c      	add	r4, r3
 8007b30:	f04f 0900 	mov.w	r9, #0
 8007b34:	7823      	ldrb	r3, [r4, #0]
 8007b36:	2b2c      	cmp	r3, #44	; 0x2c
 8007b38:	bf08      	it	eq
 8007b3a:	3401      	addeq	r4, #1
 8007b3c:	f894 8000 	ldrb.w	r8, [r4]
 8007b40:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8007b44:	d179      	bne.n	8007c3a <_tzset_unlocked_r+0x272>
 8007b46:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8007b4a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8007b4e:	ab09      	add	r3, sp, #36	; 0x24
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	9603      	str	r6, [sp, #12]
 8007b54:	4633      	mov	r3, r6
 8007b56:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8007b5a:	4957      	ldr	r1, [pc, #348]	; (8007cb8 <_tzset_unlocked_r+0x2f0>)
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 f90f 	bl	8007d80 <siscanf>
 8007b62:	2803      	cmp	r0, #3
 8007b64:	f47f af4a 	bne.w	80079fc <_tzset_unlocked_r+0x34>
 8007b68:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8007b6c:	1e4b      	subs	r3, r1, #1
 8007b6e:	2b0b      	cmp	r3, #11
 8007b70:	f63f af44 	bhi.w	80079fc <_tzset_unlocked_r+0x34>
 8007b74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007b78:	1e53      	subs	r3, r2, #1
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	f63f af3e 	bhi.w	80079fc <_tzset_unlocked_r+0x34>
 8007b80:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007b84:	2b06      	cmp	r3, #6
 8007b86:	f63f af39 	bhi.w	80079fc <_tzset_unlocked_r+0x34>
 8007b8a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007b8e:	f887 8008 	strb.w	r8, [r7, #8]
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b96:	eb04 0803 	add.w	r8, r4, r3
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007ba6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007baa:	930a      	str	r3, [sp, #40]	; 0x28
 8007bac:	f898 3000 	ldrb.w	r3, [r8]
 8007bb0:	2b2f      	cmp	r3, #47	; 0x2f
 8007bb2:	d109      	bne.n	8007bc8 <_tzset_unlocked_r+0x200>
 8007bb4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007bb8:	e9cd b600 	strd	fp, r6, [sp]
 8007bbc:	4633      	mov	r3, r6
 8007bbe:	aa07      	add	r2, sp, #28
 8007bc0:	493e      	ldr	r1, [pc, #248]	; (8007cbc <_tzset_unlocked_r+0x2f4>)
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	f000 f8dc 	bl	8007d80 <siscanf>
 8007bc8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007bcc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007bd0:	213c      	movs	r1, #60	; 0x3c
 8007bd2:	fb01 2203 	mla	r2, r1, r3, r2
 8007bd6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007bda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007bde:	fb01 2303 	mla	r3, r1, r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
 8007be4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007be6:	3728      	adds	r7, #40	; 0x28
 8007be8:	4444      	add	r4, r8
 8007bea:	f1b9 0f00 	cmp.w	r9, #0
 8007bee:	d021      	beq.n	8007c34 <_tzset_unlocked_r+0x26c>
 8007bf0:	6868      	ldr	r0, [r5, #4]
 8007bf2:	f7ff fe39 	bl	8007868 <__tzcalc_limits>
 8007bf6:	4b29      	ldr	r3, [pc, #164]	; (8007c9c <_tzset_unlocked_r+0x2d4>)
 8007bf8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	4a28      	ldr	r2, [pc, #160]	; (8007ca4 <_tzset_unlocked_r+0x2dc>)
 8007c02:	bf18      	it	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e6f8      	b.n	80079fc <_tzset_unlocked_r+0x34>
 8007c0a:	2b2b      	cmp	r3, #43	; 0x2b
 8007c0c:	bf08      	it	eq
 8007c0e:	3401      	addeq	r4, #1
 8007c10:	2701      	movs	r7, #1
 8007c12:	e772      	b.n	8007afa <_tzset_unlocked_r+0x132>
 8007c14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007c18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007c1c:	213c      	movs	r1, #60	; 0x3c
 8007c1e:	fb01 2203 	mla	r2, r1, r3, r2
 8007c22:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007c26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007c2a:	fb01 2303 	mla	r3, r1, r3, r2
 8007c2e:	435f      	muls	r7, r3
 8007c30:	652f      	str	r7, [r5, #80]	; 0x50
 8007c32:	e77a      	b.n	8007b2a <_tzset_unlocked_r+0x162>
 8007c34:	f04f 0901 	mov.w	r9, #1
 8007c38:	e77c      	b.n	8007b34 <_tzset_unlocked_r+0x16c>
 8007c3a:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8007c3e:	bf06      	itte	eq
 8007c40:	3401      	addeq	r4, #1
 8007c42:	4643      	moveq	r3, r8
 8007c44:	2344      	movne	r3, #68	; 0x44
 8007c46:	220a      	movs	r2, #10
 8007c48:	a90b      	add	r1, sp, #44	; 0x2c
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	9305      	str	r3, [sp, #20]
 8007c4e:	f000 f969 	bl	8007f24 <strtoul>
 8007c52:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007c56:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8007c5a:	45a0      	cmp	r8, r4
 8007c5c:	9b05      	ldr	r3, [sp, #20]
 8007c5e:	d114      	bne.n	8007c8a <_tzset_unlocked_r+0x2c2>
 8007c60:	234d      	movs	r3, #77	; 0x4d
 8007c62:	f1b9 0f00 	cmp.w	r9, #0
 8007c66:	d107      	bne.n	8007c78 <_tzset_unlocked_r+0x2b0>
 8007c68:	722b      	strb	r3, [r5, #8]
 8007c6a:	2103      	movs	r1, #3
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8007c72:	f8c5 9014 	str.w	r9, [r5, #20]
 8007c76:	e790      	b.n	8007b9a <_tzset_unlocked_r+0x1d2>
 8007c78:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8007c7c:	220b      	movs	r2, #11
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8007c84:	2300      	movs	r3, #0
 8007c86:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007c88:	e787      	b.n	8007b9a <_tzset_unlocked_r+0x1d2>
 8007c8a:	b280      	uxth	r0, r0
 8007c8c:	723b      	strb	r3, [r7, #8]
 8007c8e:	6178      	str	r0, [r7, #20]
 8007c90:	e783      	b.n	8007b9a <_tzset_unlocked_r+0x1d2>
 8007c92:	bf00      	nop
 8007c94:	08008b38 	.word	0x08008b38
 8007c98:	20000380 	.word	0x20000380
 8007c9c:	20000388 	.word	0x20000388
 8007ca0:	08008b3b 	.word	0x08008b3b
 8007ca4:	20000384 	.word	0x20000384
 8007ca8:	20000074 	.word	0x20000074
 8007cac:	20000373 	.word	0x20000373
 8007cb0:	08008b3f 	.word	0x08008b3f
 8007cb4:	08008b62 	.word	0x08008b62
 8007cb8:	08008b4e 	.word	0x08008b4e
 8007cbc:	08008b61 	.word	0x08008b61
 8007cc0:	20000368 	.word	0x20000368

08007cc4 <div>:
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	fb91 f4f2 	sdiv	r4, r1, r2
 8007ccc:	fb02 1314 	mls	r3, r2, r4, r1
 8007cd0:	db06      	blt.n	8007ce0 <div+0x1c>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da01      	bge.n	8007cda <div+0x16>
 8007cd6:	3401      	adds	r4, #1
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	e9c0 4300 	strd	r4, r3, [r0]
 8007cde:	bd10      	pop	{r4, pc}
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	bfc4      	itt	gt
 8007ce4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8007ce8:	189b      	addgt	r3, r3, r2
 8007cea:	e7f6      	b.n	8007cda <div+0x16>

08007cec <_findenv_r>:
 8007cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	468b      	mov	fp, r1
 8007cf4:	4690      	mov	r8, r2
 8007cf6:	f000 f92b 	bl	8007f50 <__env_lock>
 8007cfa:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <_findenv_r+0x74>)
 8007cfc:	681d      	ldr	r5, [r3, #0]
 8007cfe:	469a      	mov	sl, r3
 8007d00:	b13d      	cbz	r5, 8007d12 <_findenv_r+0x26>
 8007d02:	465c      	mov	r4, fp
 8007d04:	4623      	mov	r3, r4
 8007d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d0a:	b32a      	cbz	r2, 8007d58 <_findenv_r+0x6c>
 8007d0c:	2a3d      	cmp	r2, #61	; 0x3d
 8007d0e:	461c      	mov	r4, r3
 8007d10:	d1f8      	bne.n	8007d04 <_findenv_r+0x18>
 8007d12:	4638      	mov	r0, r7
 8007d14:	f000 f91d 	bl	8007f52 <__env_unlock>
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	464d      	mov	r5, r9
 8007d20:	46a9      	mov	r9, r5
 8007d22:	f859 0b04 	ldr.w	r0, [r9], #4
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d0f3      	beq.n	8007d12 <_findenv_r+0x26>
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	f000 f85b 	bl	8007de8 <strncmp>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d1f3      	bne.n	8007d1e <_findenv_r+0x32>
 8007d36:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007d3a:	191e      	adds	r6, r3, r4
 8007d3c:	5d1b      	ldrb	r3, [r3, r4]
 8007d3e:	2b3d      	cmp	r3, #61	; 0x3d
 8007d40:	d1ed      	bne.n	8007d1e <_findenv_r+0x32>
 8007d42:	f8da 3000 	ldr.w	r3, [sl]
 8007d46:	1aed      	subs	r5, r5, r3
 8007d48:	10ad      	asrs	r5, r5, #2
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f8c8 5000 	str.w	r5, [r8]
 8007d50:	f000 f8ff 	bl	8007f52 <__env_unlock>
 8007d54:	1c70      	adds	r0, r6, #1
 8007d56:	e7e0      	b.n	8007d1a <_findenv_r+0x2e>
 8007d58:	eba4 040b 	sub.w	r4, r4, fp
 8007d5c:	e7e0      	b.n	8007d20 <_findenv_r+0x34>
 8007d5e:	bf00      	nop
 8007d60:	20000000 	.word	0x20000000

08007d64 <_getenv_r>:
 8007d64:	b507      	push	{r0, r1, r2, lr}
 8007d66:	aa01      	add	r2, sp, #4
 8007d68:	f7ff ffc0 	bl	8007cec <_findenv_r>
 8007d6c:	b003      	add	sp, #12
 8007d6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007d74 <__gettzinfo>:
 8007d74:	4800      	ldr	r0, [pc, #0]	; (8007d78 <__gettzinfo+0x4>)
 8007d76:	4770      	bx	lr
 8007d78:	20000080 	.word	0x20000080

08007d7c <__malloc_lock>:
 8007d7c:	4770      	bx	lr

08007d7e <__malloc_unlock>:
 8007d7e:	4770      	bx	lr

08007d80 <siscanf>:
 8007d80:	b40e      	push	{r1, r2, r3}
 8007d82:	b530      	push	{r4, r5, lr}
 8007d84:	b09c      	sub	sp, #112	; 0x70
 8007d86:	ac1f      	add	r4, sp, #124	; 0x7c
 8007d88:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007d8c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007d90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d94:	9002      	str	r0, [sp, #8]
 8007d96:	9006      	str	r0, [sp, #24]
 8007d98:	f7f8 fa2c 	bl	80001f4 <strlen>
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <siscanf+0x4c>)
 8007d9e:	9003      	str	r0, [sp, #12]
 8007da0:	9007      	str	r0, [sp, #28]
 8007da2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007da4:	480a      	ldr	r0, [pc, #40]	; (8007dd0 <siscanf+0x50>)
 8007da6:	9401      	str	r4, [sp, #4]
 8007da8:	2300      	movs	r3, #0
 8007daa:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dac:	9314      	str	r3, [sp, #80]	; 0x50
 8007dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007db2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007db6:	462a      	mov	r2, r5
 8007db8:	4623      	mov	r3, r4
 8007dba:	a902      	add	r1, sp, #8
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f000 f947 	bl	8008050 <__ssvfiscanf_r>
 8007dc2:	b01c      	add	sp, #112	; 0x70
 8007dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc8:	b003      	add	sp, #12
 8007dca:	4770      	bx	lr
 8007dcc:	08007dd5 	.word	0x08007dd5
 8007dd0:	20000010 	.word	0x20000010

08007dd4 <__seofread>:
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	4770      	bx	lr

08007dd8 <strcpy>:
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dde:	f803 2b01 	strb.w	r2, [r3], #1
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	d1f9      	bne.n	8007dda <strcpy+0x2>
 8007de6:	4770      	bx	lr

08007de8 <strncmp>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	b16a      	cbz	r2, 8007e08 <strncmp+0x20>
 8007dec:	3901      	subs	r1, #1
 8007dee:	1884      	adds	r4, r0, r2
 8007df0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007df4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d103      	bne.n	8007e04 <strncmp+0x1c>
 8007dfc:	42a0      	cmp	r0, r4
 8007dfe:	d001      	beq.n	8007e04 <strncmp+0x1c>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f5      	bne.n	8007df0 <strncmp+0x8>
 8007e04:	1a98      	subs	r0, r3, r2
 8007e06:	bd10      	pop	{r4, pc}
 8007e08:	4610      	mov	r0, r2
 8007e0a:	e7fc      	b.n	8007e06 <strncmp+0x1e>

08007e0c <_strtoul_l.isra.0>:
 8007e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e10:	4680      	mov	r8, r0
 8007e12:	4689      	mov	r9, r1
 8007e14:	4692      	mov	sl, r2
 8007e16:	461e      	mov	r6, r3
 8007e18:	460f      	mov	r7, r1
 8007e1a:	463d      	mov	r5, r7
 8007e1c:	9808      	ldr	r0, [sp, #32]
 8007e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e22:	f000 f897 	bl	8007f54 <__locale_ctype_ptr_l>
 8007e26:	4420      	add	r0, r4
 8007e28:	7843      	ldrb	r3, [r0, #1]
 8007e2a:	f013 0308 	ands.w	r3, r3, #8
 8007e2e:	d130      	bne.n	8007e92 <_strtoul_l.isra.0+0x86>
 8007e30:	2c2d      	cmp	r4, #45	; 0x2d
 8007e32:	d130      	bne.n	8007e96 <_strtoul_l.isra.0+0x8a>
 8007e34:	787c      	ldrb	r4, [r7, #1]
 8007e36:	1cbd      	adds	r5, r7, #2
 8007e38:	2101      	movs	r1, #1
 8007e3a:	2e00      	cmp	r6, #0
 8007e3c:	d05c      	beq.n	8007ef8 <_strtoul_l.isra.0+0xec>
 8007e3e:	2e10      	cmp	r6, #16
 8007e40:	d109      	bne.n	8007e56 <_strtoul_l.isra.0+0x4a>
 8007e42:	2c30      	cmp	r4, #48	; 0x30
 8007e44:	d107      	bne.n	8007e56 <_strtoul_l.isra.0+0x4a>
 8007e46:	782b      	ldrb	r3, [r5, #0]
 8007e48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e4c:	2b58      	cmp	r3, #88	; 0x58
 8007e4e:	d14e      	bne.n	8007eee <_strtoul_l.isra.0+0xe2>
 8007e50:	786c      	ldrb	r4, [r5, #1]
 8007e52:	2610      	movs	r6, #16
 8007e54:	3502      	adds	r5, #2
 8007e56:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	fbb2 f2f6 	udiv	r2, r2, r6
 8007e60:	fb06 fc02 	mul.w	ip, r6, r2
 8007e64:	ea6f 0c0c 	mvn.w	ip, ip
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007e6e:	2f09      	cmp	r7, #9
 8007e70:	d817      	bhi.n	8007ea2 <_strtoul_l.isra.0+0x96>
 8007e72:	463c      	mov	r4, r7
 8007e74:	42a6      	cmp	r6, r4
 8007e76:	dd23      	ble.n	8007ec0 <_strtoul_l.isra.0+0xb4>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db1e      	blt.n	8007eba <_strtoul_l.isra.0+0xae>
 8007e7c:	4282      	cmp	r2, r0
 8007e7e:	d31c      	bcc.n	8007eba <_strtoul_l.isra.0+0xae>
 8007e80:	d101      	bne.n	8007e86 <_strtoul_l.isra.0+0x7a>
 8007e82:	45a4      	cmp	ip, r4
 8007e84:	db19      	blt.n	8007eba <_strtoul_l.isra.0+0xae>
 8007e86:	fb00 4006 	mla	r0, r0, r6, r4
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e90:	e7eb      	b.n	8007e6a <_strtoul_l.isra.0+0x5e>
 8007e92:	462f      	mov	r7, r5
 8007e94:	e7c1      	b.n	8007e1a <_strtoul_l.isra.0+0xe>
 8007e96:	2c2b      	cmp	r4, #43	; 0x2b
 8007e98:	bf04      	itt	eq
 8007e9a:	1cbd      	addeq	r5, r7, #2
 8007e9c:	787c      	ldrbeq	r4, [r7, #1]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	e7cb      	b.n	8007e3a <_strtoul_l.isra.0+0x2e>
 8007ea2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007ea6:	2f19      	cmp	r7, #25
 8007ea8:	d801      	bhi.n	8007eae <_strtoul_l.isra.0+0xa2>
 8007eaa:	3c37      	subs	r4, #55	; 0x37
 8007eac:	e7e2      	b.n	8007e74 <_strtoul_l.isra.0+0x68>
 8007eae:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007eb2:	2f19      	cmp	r7, #25
 8007eb4:	d804      	bhi.n	8007ec0 <_strtoul_l.isra.0+0xb4>
 8007eb6:	3c57      	subs	r4, #87	; 0x57
 8007eb8:	e7dc      	b.n	8007e74 <_strtoul_l.isra.0+0x68>
 8007eba:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebe:	e7e5      	b.n	8007e8c <_strtoul_l.isra.0+0x80>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	da09      	bge.n	8007ed8 <_strtoul_l.isra.0+0xcc>
 8007ec4:	2322      	movs	r3, #34	; 0x22
 8007ec6:	f8c8 3000 	str.w	r3, [r8]
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ece:	f1ba 0f00 	cmp.w	sl, #0
 8007ed2:	d107      	bne.n	8007ee4 <_strtoul_l.isra.0+0xd8>
 8007ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed8:	b101      	cbz	r1, 8007edc <_strtoul_l.isra.0+0xd0>
 8007eda:	4240      	negs	r0, r0
 8007edc:	f1ba 0f00 	cmp.w	sl, #0
 8007ee0:	d0f8      	beq.n	8007ed4 <_strtoul_l.isra.0+0xc8>
 8007ee2:	b10b      	cbz	r3, 8007ee8 <_strtoul_l.isra.0+0xdc>
 8007ee4:	f105 39ff 	add.w	r9, r5, #4294967295
 8007ee8:	f8ca 9000 	str.w	r9, [sl]
 8007eec:	e7f2      	b.n	8007ed4 <_strtoul_l.isra.0+0xc8>
 8007eee:	2430      	movs	r4, #48	; 0x30
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	d1b0      	bne.n	8007e56 <_strtoul_l.isra.0+0x4a>
 8007ef4:	2608      	movs	r6, #8
 8007ef6:	e7ae      	b.n	8007e56 <_strtoul_l.isra.0+0x4a>
 8007ef8:	2c30      	cmp	r4, #48	; 0x30
 8007efa:	d0a4      	beq.n	8007e46 <_strtoul_l.isra.0+0x3a>
 8007efc:	260a      	movs	r6, #10
 8007efe:	e7aa      	b.n	8007e56 <_strtoul_l.isra.0+0x4a>

08007f00 <_strtoul_r>:
 8007f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f02:	4c06      	ldr	r4, [pc, #24]	; (8007f1c <_strtoul_r+0x1c>)
 8007f04:	4d06      	ldr	r5, [pc, #24]	; (8007f20 <_strtoul_r+0x20>)
 8007f06:	6824      	ldr	r4, [r4, #0]
 8007f08:	6a24      	ldr	r4, [r4, #32]
 8007f0a:	2c00      	cmp	r4, #0
 8007f0c:	bf08      	it	eq
 8007f0e:	462c      	moveq	r4, r5
 8007f10:	9400      	str	r4, [sp, #0]
 8007f12:	f7ff ff7b 	bl	8007e0c <_strtoul_l.isra.0>
 8007f16:	b003      	add	sp, #12
 8007f18:	bd30      	pop	{r4, r5, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000010 	.word	0x20000010
 8007f20:	200000d8 	.word	0x200000d8

08007f24 <strtoul>:
 8007f24:	4b08      	ldr	r3, [pc, #32]	; (8007f48 <strtoul+0x24>)
 8007f26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f28:	681c      	ldr	r4, [r3, #0]
 8007f2a:	4d08      	ldr	r5, [pc, #32]	; (8007f4c <strtoul+0x28>)
 8007f2c:	6a23      	ldr	r3, [r4, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bf08      	it	eq
 8007f32:	462b      	moveq	r3, r5
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	4613      	mov	r3, r2
 8007f38:	460a      	mov	r2, r1
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f7ff ff65 	bl	8007e0c <_strtoul_l.isra.0>
 8007f42:	b003      	add	sp, #12
 8007f44:	bd30      	pop	{r4, r5, pc}
 8007f46:	bf00      	nop
 8007f48:	20000010 	.word	0x20000010
 8007f4c:	200000d8 	.word	0x200000d8

08007f50 <__env_lock>:
 8007f50:	4770      	bx	lr

08007f52 <__env_unlock>:
 8007f52:	4770      	bx	lr

08007f54 <__locale_ctype_ptr_l>:
 8007f54:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007f58:	4770      	bx	lr
	...

08007f5c <__locale_ctype_ptr>:
 8007f5c:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <__locale_ctype_ptr+0x14>)
 8007f5e:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <__locale_ctype_ptr+0x18>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bf08      	it	eq
 8007f68:	4613      	moveq	r3, r2
 8007f6a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007f6e:	4770      	bx	lr
 8007f70:	20000010 	.word	0x20000010
 8007f74:	200000d8 	.word	0x200000d8

08007f78 <__ascii_mbtowc>:
 8007f78:	b082      	sub	sp, #8
 8007f7a:	b901      	cbnz	r1, 8007f7e <__ascii_mbtowc+0x6>
 8007f7c:	a901      	add	r1, sp, #4
 8007f7e:	b142      	cbz	r2, 8007f92 <__ascii_mbtowc+0x1a>
 8007f80:	b14b      	cbz	r3, 8007f96 <__ascii_mbtowc+0x1e>
 8007f82:	7813      	ldrb	r3, [r2, #0]
 8007f84:	600b      	str	r3, [r1, #0]
 8007f86:	7812      	ldrb	r2, [r2, #0]
 8007f88:	1c10      	adds	r0, r2, #0
 8007f8a:	bf18      	it	ne
 8007f8c:	2001      	movne	r0, #1
 8007f8e:	b002      	add	sp, #8
 8007f90:	4770      	bx	lr
 8007f92:	4610      	mov	r0, r2
 8007f94:	e7fb      	b.n	8007f8e <__ascii_mbtowc+0x16>
 8007f96:	f06f 0001 	mvn.w	r0, #1
 8007f9a:	e7f8      	b.n	8007f8e <__ascii_mbtowc+0x16>

08007f9c <_sungetc_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	1c4b      	adds	r3, r1, #1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	d103      	bne.n	8007fac <_sungetc_r+0x10>
 8007fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8007fa8:	4628      	mov	r0, r5
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	8993      	ldrh	r3, [r2, #12]
 8007fae:	f023 0320 	bic.w	r3, r3, #32
 8007fb2:	8193      	strh	r3, [r2, #12]
 8007fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fb6:	6852      	ldr	r2, [r2, #4]
 8007fb8:	b2cd      	uxtb	r5, r1
 8007fba:	b18b      	cbz	r3, 8007fe0 <_sungetc_r+0x44>
 8007fbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	dd08      	ble.n	8007fd4 <_sungetc_r+0x38>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	1e5a      	subs	r2, r3, #1
 8007fc6:	6022      	str	r2, [r4, #0]
 8007fc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	e7e9      	b.n	8007fa8 <_sungetc_r+0xc>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	f000 fba3 	bl	8008720 <__submore>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d0f1      	beq.n	8007fc2 <_sungetc_r+0x26>
 8007fde:	e7e1      	b.n	8007fa4 <_sungetc_r+0x8>
 8007fe0:	6921      	ldr	r1, [r4, #16]
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	b151      	cbz	r1, 8007ffc <_sungetc_r+0x60>
 8007fe6:	4299      	cmp	r1, r3
 8007fe8:	d208      	bcs.n	8007ffc <_sungetc_r+0x60>
 8007fea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007fee:	42a9      	cmp	r1, r5
 8007ff0:	d104      	bne.n	8007ffc <_sungetc_r+0x60>
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	3201      	adds	r2, #1
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	6062      	str	r2, [r4, #4]
 8007ffa:	e7d5      	b.n	8007fa8 <_sungetc_r+0xc>
 8007ffc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008004:	6363      	str	r3, [r4, #52]	; 0x34
 8008006:	2303      	movs	r3, #3
 8008008:	63a3      	str	r3, [r4, #56]	; 0x38
 800800a:	4623      	mov	r3, r4
 800800c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	2301      	movs	r3, #1
 8008014:	e7dc      	b.n	8007fd0 <_sungetc_r+0x34>

08008016 <__ssrefill_r>:
 8008016:	b510      	push	{r4, lr}
 8008018:	460c      	mov	r4, r1
 800801a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800801c:	b169      	cbz	r1, 800803a <__ssrefill_r+0x24>
 800801e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008022:	4299      	cmp	r1, r3
 8008024:	d001      	beq.n	800802a <__ssrefill_r+0x14>
 8008026:	f7ff fb67 	bl	80076f8 <_free_r>
 800802a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800802c:	6063      	str	r3, [r4, #4]
 800802e:	2000      	movs	r0, #0
 8008030:	6360      	str	r0, [r4, #52]	; 0x34
 8008032:	b113      	cbz	r3, 800803a <__ssrefill_r+0x24>
 8008034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd10      	pop	{r4, pc}
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	2300      	movs	r3, #0
 8008040:	6063      	str	r3, [r4, #4]
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f043 0320 	orr.w	r3, r3, #32
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	f04f 30ff 	mov.w	r0, #4294967295
 800804e:	e7f3      	b.n	8008038 <__ssrefill_r+0x22>

08008050 <__ssvfiscanf_r>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008058:	460c      	mov	r4, r1
 800805a:	2100      	movs	r1, #0
 800805c:	9144      	str	r1, [sp, #272]	; 0x110
 800805e:	9145      	str	r1, [sp, #276]	; 0x114
 8008060:	499f      	ldr	r1, [pc, #636]	; (80082e0 <__ssvfiscanf_r+0x290>)
 8008062:	91a0      	str	r1, [sp, #640]	; 0x280
 8008064:	f10d 0804 	add.w	r8, sp, #4
 8008068:	499e      	ldr	r1, [pc, #632]	; (80082e4 <__ssvfiscanf_r+0x294>)
 800806a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80082e8 <__ssvfiscanf_r+0x298>
 800806e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008072:	4606      	mov	r6, r0
 8008074:	4692      	mov	sl, r2
 8008076:	91a1      	str	r1, [sp, #644]	; 0x284
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	270a      	movs	r7, #10
 800807c:	f89a 3000 	ldrb.w	r3, [sl]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 812a 	beq.w	80082da <__ssvfiscanf_r+0x28a>
 8008086:	4655      	mov	r5, sl
 8008088:	f7ff ff68 	bl	8007f5c <__locale_ctype_ptr>
 800808c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008090:	4458      	add	r0, fp
 8008092:	7843      	ldrb	r3, [r0, #1]
 8008094:	f013 0308 	ands.w	r3, r3, #8
 8008098:	d01c      	beq.n	80080d4 <__ssvfiscanf_r+0x84>
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	dd12      	ble.n	80080c6 <__ssvfiscanf_r+0x76>
 80080a0:	f7ff ff5c 	bl	8007f5c <__locale_ctype_ptr>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	781a      	ldrb	r2, [r3, #0]
 80080a8:	4410      	add	r0, r2
 80080aa:	7842      	ldrb	r2, [r0, #1]
 80080ac:	0712      	lsls	r2, r2, #28
 80080ae:	d401      	bmi.n	80080b4 <__ssvfiscanf_r+0x64>
 80080b0:	46aa      	mov	sl, r5
 80080b2:	e7e3      	b.n	800807c <__ssvfiscanf_r+0x2c>
 80080b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80080b6:	3201      	adds	r2, #1
 80080b8:	9245      	str	r2, [sp, #276]	; 0x114
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	3301      	adds	r3, #1
 80080be:	3a01      	subs	r2, #1
 80080c0:	6062      	str	r2, [r4, #4]
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	e7e9      	b.n	800809a <__ssvfiscanf_r+0x4a>
 80080c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80080c8:	4621      	mov	r1, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	4798      	blx	r3
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d0e6      	beq.n	80080a0 <__ssvfiscanf_r+0x50>
 80080d2:	e7ed      	b.n	80080b0 <__ssvfiscanf_r+0x60>
 80080d4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80080d8:	f040 8082 	bne.w	80081e0 <__ssvfiscanf_r+0x190>
 80080dc:	9343      	str	r3, [sp, #268]	; 0x10c
 80080de:	9341      	str	r3, [sp, #260]	; 0x104
 80080e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d103      	bne.n	80080f0 <__ssvfiscanf_r+0xa0>
 80080e8:	2310      	movs	r3, #16
 80080ea:	9341      	str	r3, [sp, #260]	; 0x104
 80080ec:	f10a 0502 	add.w	r5, sl, #2
 80080f0:	46aa      	mov	sl, r5
 80080f2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80080f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80080fa:	2a09      	cmp	r2, #9
 80080fc:	d922      	bls.n	8008144 <__ssvfiscanf_r+0xf4>
 80080fe:	2203      	movs	r2, #3
 8008100:	4879      	ldr	r0, [pc, #484]	; (80082e8 <__ssvfiscanf_r+0x298>)
 8008102:	f7f8 f885 	bl	8000210 <memchr>
 8008106:	b138      	cbz	r0, 8008118 <__ssvfiscanf_r+0xc8>
 8008108:	eba0 0309 	sub.w	r3, r0, r9
 800810c:	2001      	movs	r0, #1
 800810e:	4098      	lsls	r0, r3
 8008110:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008112:	4318      	orrs	r0, r3
 8008114:	9041      	str	r0, [sp, #260]	; 0x104
 8008116:	46aa      	mov	sl, r5
 8008118:	f89a 3000 	ldrb.w	r3, [sl]
 800811c:	2b67      	cmp	r3, #103	; 0x67
 800811e:	f10a 0501 	add.w	r5, sl, #1
 8008122:	d82b      	bhi.n	800817c <__ssvfiscanf_r+0x12c>
 8008124:	2b65      	cmp	r3, #101	; 0x65
 8008126:	f080 809f 	bcs.w	8008268 <__ssvfiscanf_r+0x218>
 800812a:	2b47      	cmp	r3, #71	; 0x47
 800812c:	d810      	bhi.n	8008150 <__ssvfiscanf_r+0x100>
 800812e:	2b45      	cmp	r3, #69	; 0x45
 8008130:	f080 809a 	bcs.w	8008268 <__ssvfiscanf_r+0x218>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d06c      	beq.n	8008212 <__ssvfiscanf_r+0x1c2>
 8008138:	2b25      	cmp	r3, #37	; 0x25
 800813a:	d051      	beq.n	80081e0 <__ssvfiscanf_r+0x190>
 800813c:	2303      	movs	r3, #3
 800813e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008140:	9742      	str	r7, [sp, #264]	; 0x108
 8008142:	e027      	b.n	8008194 <__ssvfiscanf_r+0x144>
 8008144:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008146:	fb07 1303 	mla	r3, r7, r3, r1
 800814a:	3b30      	subs	r3, #48	; 0x30
 800814c:	9343      	str	r3, [sp, #268]	; 0x10c
 800814e:	e7cf      	b.n	80080f0 <__ssvfiscanf_r+0xa0>
 8008150:	2b5b      	cmp	r3, #91	; 0x5b
 8008152:	d06a      	beq.n	800822a <__ssvfiscanf_r+0x1da>
 8008154:	d80c      	bhi.n	8008170 <__ssvfiscanf_r+0x120>
 8008156:	2b58      	cmp	r3, #88	; 0x58
 8008158:	d1f0      	bne.n	800813c <__ssvfiscanf_r+0xec>
 800815a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800815c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008160:	9241      	str	r2, [sp, #260]	; 0x104
 8008162:	2210      	movs	r2, #16
 8008164:	9242      	str	r2, [sp, #264]	; 0x108
 8008166:	2b6e      	cmp	r3, #110	; 0x6e
 8008168:	bf8c      	ite	hi
 800816a:	2304      	movhi	r3, #4
 800816c:	2303      	movls	r3, #3
 800816e:	e010      	b.n	8008192 <__ssvfiscanf_r+0x142>
 8008170:	2b63      	cmp	r3, #99	; 0x63
 8008172:	d065      	beq.n	8008240 <__ssvfiscanf_r+0x1f0>
 8008174:	2b64      	cmp	r3, #100	; 0x64
 8008176:	d1e1      	bne.n	800813c <__ssvfiscanf_r+0xec>
 8008178:	9742      	str	r7, [sp, #264]	; 0x108
 800817a:	e7f4      	b.n	8008166 <__ssvfiscanf_r+0x116>
 800817c:	2b70      	cmp	r3, #112	; 0x70
 800817e:	d04b      	beq.n	8008218 <__ssvfiscanf_r+0x1c8>
 8008180:	d826      	bhi.n	80081d0 <__ssvfiscanf_r+0x180>
 8008182:	2b6e      	cmp	r3, #110	; 0x6e
 8008184:	d062      	beq.n	800824c <__ssvfiscanf_r+0x1fc>
 8008186:	d84c      	bhi.n	8008222 <__ssvfiscanf_r+0x1d2>
 8008188:	2b69      	cmp	r3, #105	; 0x69
 800818a:	d1d7      	bne.n	800813c <__ssvfiscanf_r+0xec>
 800818c:	2300      	movs	r3, #0
 800818e:	9342      	str	r3, [sp, #264]	; 0x108
 8008190:	2303      	movs	r3, #3
 8008192:	9347      	str	r3, [sp, #284]	; 0x11c
 8008194:	6863      	ldr	r3, [r4, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd68      	ble.n	800826c <__ssvfiscanf_r+0x21c>
 800819a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800819c:	0659      	lsls	r1, r3, #25
 800819e:	d407      	bmi.n	80081b0 <__ssvfiscanf_r+0x160>
 80081a0:	f7ff fedc 	bl	8007f5c <__locale_ctype_ptr>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	4410      	add	r0, r2
 80081aa:	7842      	ldrb	r2, [r0, #1]
 80081ac:	0712      	lsls	r2, r2, #28
 80081ae:	d464      	bmi.n	800827a <__ssvfiscanf_r+0x22a>
 80081b0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	dc73      	bgt.n	800829e <__ssvfiscanf_r+0x24e>
 80081b6:	466b      	mov	r3, sp
 80081b8:	4622      	mov	r2, r4
 80081ba:	a941      	add	r1, sp, #260	; 0x104
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 f897 	bl	80082f0 <_scanf_chars>
 80081c2:	2801      	cmp	r0, #1
 80081c4:	f000 8089 	beq.w	80082da <__ssvfiscanf_r+0x28a>
 80081c8:	2802      	cmp	r0, #2
 80081ca:	f47f af71 	bne.w	80080b0 <__ssvfiscanf_r+0x60>
 80081ce:	e01d      	b.n	800820c <__ssvfiscanf_r+0x1bc>
 80081d0:	2b75      	cmp	r3, #117	; 0x75
 80081d2:	d0d1      	beq.n	8008178 <__ssvfiscanf_r+0x128>
 80081d4:	2b78      	cmp	r3, #120	; 0x78
 80081d6:	d0c0      	beq.n	800815a <__ssvfiscanf_r+0x10a>
 80081d8:	2b73      	cmp	r3, #115	; 0x73
 80081da:	d1af      	bne.n	800813c <__ssvfiscanf_r+0xec>
 80081dc:	2302      	movs	r3, #2
 80081de:	e7d8      	b.n	8008192 <__ssvfiscanf_r+0x142>
 80081e0:	6863      	ldr	r3, [r4, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd0c      	ble.n	8008200 <__ssvfiscanf_r+0x1b0>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	455a      	cmp	r2, fp
 80081ec:	d175      	bne.n	80082da <__ssvfiscanf_r+0x28a>
 80081ee:	3301      	adds	r3, #1
 80081f0:	6862      	ldr	r2, [r4, #4]
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80081f6:	3a01      	subs	r2, #1
 80081f8:	3301      	adds	r3, #1
 80081fa:	6062      	str	r2, [r4, #4]
 80081fc:	9345      	str	r3, [sp, #276]	; 0x114
 80081fe:	e757      	b.n	80080b0 <__ssvfiscanf_r+0x60>
 8008200:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008202:	4621      	mov	r1, r4
 8008204:	4630      	mov	r0, r6
 8008206:	4798      	blx	r3
 8008208:	2800      	cmp	r0, #0
 800820a:	d0ec      	beq.n	80081e6 <__ssvfiscanf_r+0x196>
 800820c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800820e:	2800      	cmp	r0, #0
 8008210:	d159      	bne.n	80082c6 <__ssvfiscanf_r+0x276>
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
 8008216:	e05c      	b.n	80082d2 <__ssvfiscanf_r+0x282>
 8008218:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800821a:	f042 0220 	orr.w	r2, r2, #32
 800821e:	9241      	str	r2, [sp, #260]	; 0x104
 8008220:	e79b      	b.n	800815a <__ssvfiscanf_r+0x10a>
 8008222:	2308      	movs	r3, #8
 8008224:	9342      	str	r3, [sp, #264]	; 0x108
 8008226:	2304      	movs	r3, #4
 8008228:	e7b3      	b.n	8008192 <__ssvfiscanf_r+0x142>
 800822a:	4629      	mov	r1, r5
 800822c:	4640      	mov	r0, r8
 800822e:	f000 f9b7 	bl	80085a0 <__sccl>
 8008232:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008238:	9341      	str	r3, [sp, #260]	; 0x104
 800823a:	4605      	mov	r5, r0
 800823c:	2301      	movs	r3, #1
 800823e:	e7a8      	b.n	8008192 <__ssvfiscanf_r+0x142>
 8008240:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008246:	9341      	str	r3, [sp, #260]	; 0x104
 8008248:	2300      	movs	r3, #0
 800824a:	e7a2      	b.n	8008192 <__ssvfiscanf_r+0x142>
 800824c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800824e:	06c3      	lsls	r3, r0, #27
 8008250:	f53f af2e 	bmi.w	80080b0 <__ssvfiscanf_r+0x60>
 8008254:	9b00      	ldr	r3, [sp, #0]
 8008256:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008258:	1d19      	adds	r1, r3, #4
 800825a:	9100      	str	r1, [sp, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	07c0      	lsls	r0, r0, #31
 8008260:	bf4c      	ite	mi
 8008262:	801a      	strhmi	r2, [r3, #0]
 8008264:	601a      	strpl	r2, [r3, #0]
 8008266:	e723      	b.n	80080b0 <__ssvfiscanf_r+0x60>
 8008268:	2305      	movs	r3, #5
 800826a:	e792      	b.n	8008192 <__ssvfiscanf_r+0x142>
 800826c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800826e:	4621      	mov	r1, r4
 8008270:	4630      	mov	r0, r6
 8008272:	4798      	blx	r3
 8008274:	2800      	cmp	r0, #0
 8008276:	d090      	beq.n	800819a <__ssvfiscanf_r+0x14a>
 8008278:	e7c8      	b.n	800820c <__ssvfiscanf_r+0x1bc>
 800827a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800827c:	3201      	adds	r2, #1
 800827e:	9245      	str	r2, [sp, #276]	; 0x114
 8008280:	6862      	ldr	r2, [r4, #4]
 8008282:	3a01      	subs	r2, #1
 8008284:	2a00      	cmp	r2, #0
 8008286:	6062      	str	r2, [r4, #4]
 8008288:	dd02      	ble.n	8008290 <__ssvfiscanf_r+0x240>
 800828a:	3301      	adds	r3, #1
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	e787      	b.n	80081a0 <__ssvfiscanf_r+0x150>
 8008290:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008292:	4621      	mov	r1, r4
 8008294:	4630      	mov	r0, r6
 8008296:	4798      	blx	r3
 8008298:	2800      	cmp	r0, #0
 800829a:	d081      	beq.n	80081a0 <__ssvfiscanf_r+0x150>
 800829c:	e7b6      	b.n	800820c <__ssvfiscanf_r+0x1bc>
 800829e:	2b04      	cmp	r3, #4
 80082a0:	dc06      	bgt.n	80082b0 <__ssvfiscanf_r+0x260>
 80082a2:	466b      	mov	r3, sp
 80082a4:	4622      	mov	r2, r4
 80082a6:	a941      	add	r1, sp, #260	; 0x104
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 f885 	bl	80083b8 <_scanf_i>
 80082ae:	e788      	b.n	80081c2 <__ssvfiscanf_r+0x172>
 80082b0:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <__ssvfiscanf_r+0x29c>)
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f43f aefc 	beq.w	80080b0 <__ssvfiscanf_r+0x60>
 80082b8:	466b      	mov	r3, sp
 80082ba:	4622      	mov	r2, r4
 80082bc:	a941      	add	r1, sp, #260	; 0x104
 80082be:	4630      	mov	r0, r6
 80082c0:	f3af 8000 	nop.w
 80082c4:	e77d      	b.n	80081c2 <__ssvfiscanf_r+0x172>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80082cc:	bf18      	it	ne
 80082ce:	f04f 30ff 	movne.w	r0, #4294967295
 80082d2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80082dc:	e7f9      	b.n	80082d2 <__ssvfiscanf_r+0x282>
 80082de:	bf00      	nop
 80082e0:	08007f9d 	.word	0x08007f9d
 80082e4:	08008017 	.word	0x08008017
 80082e8:	08008bde 	.word	0x08008bde
 80082ec:	00000000 	.word	0x00000000

080082f0 <_scanf_chars>:
 80082f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f4:	4615      	mov	r5, r2
 80082f6:	688a      	ldr	r2, [r1, #8]
 80082f8:	4680      	mov	r8, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b932      	cbnz	r2, 800830c <_scanf_chars+0x1c>
 80082fe:	698a      	ldr	r2, [r1, #24]
 8008300:	2a00      	cmp	r2, #0
 8008302:	bf14      	ite	ne
 8008304:	f04f 32ff 	movne.w	r2, #4294967295
 8008308:	2201      	moveq	r2, #1
 800830a:	608a      	str	r2, [r1, #8]
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	06d1      	lsls	r1, r2, #27
 8008310:	bf5f      	itttt	pl
 8008312:	681a      	ldrpl	r2, [r3, #0]
 8008314:	1d11      	addpl	r1, r2, #4
 8008316:	6019      	strpl	r1, [r3, #0]
 8008318:	6817      	ldrpl	r7, [r2, #0]
 800831a:	2600      	movs	r6, #0
 800831c:	69a3      	ldr	r3, [r4, #24]
 800831e:	b1db      	cbz	r3, 8008358 <_scanf_chars+0x68>
 8008320:	2b01      	cmp	r3, #1
 8008322:	d107      	bne.n	8008334 <_scanf_chars+0x44>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	6962      	ldr	r2, [r4, #20]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	5cd3      	ldrb	r3, [r2, r3]
 800832c:	b9a3      	cbnz	r3, 8008358 <_scanf_chars+0x68>
 800832e:	2e00      	cmp	r6, #0
 8008330:	d132      	bne.n	8008398 <_scanf_chars+0xa8>
 8008332:	e006      	b.n	8008342 <_scanf_chars+0x52>
 8008334:	2b02      	cmp	r3, #2
 8008336:	d007      	beq.n	8008348 <_scanf_chars+0x58>
 8008338:	2e00      	cmp	r6, #0
 800833a:	d12d      	bne.n	8008398 <_scanf_chars+0xa8>
 800833c:	69a3      	ldr	r3, [r4, #24]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d12a      	bne.n	8008398 <_scanf_chars+0xa8>
 8008342:	2001      	movs	r0, #1
 8008344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008348:	f7ff fe08 	bl	8007f5c <__locale_ctype_ptr>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	4418      	add	r0, r3
 8008352:	7843      	ldrb	r3, [r0, #1]
 8008354:	071b      	lsls	r3, r3, #28
 8008356:	d4ef      	bmi.n	8008338 <_scanf_chars+0x48>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	06da      	lsls	r2, r3, #27
 800835c:	bf5e      	ittt	pl
 800835e:	682b      	ldrpl	r3, [r5, #0]
 8008360:	781b      	ldrbpl	r3, [r3, #0]
 8008362:	703b      	strbpl	r3, [r7, #0]
 8008364:	682a      	ldr	r2, [r5, #0]
 8008366:	686b      	ldr	r3, [r5, #4]
 8008368:	f102 0201 	add.w	r2, r2, #1
 800836c:	602a      	str	r2, [r5, #0]
 800836e:	68a2      	ldr	r2, [r4, #8]
 8008370:	f103 33ff 	add.w	r3, r3, #4294967295
 8008374:	f102 32ff 	add.w	r2, r2, #4294967295
 8008378:	606b      	str	r3, [r5, #4]
 800837a:	f106 0601 	add.w	r6, r6, #1
 800837e:	bf58      	it	pl
 8008380:	3701      	addpl	r7, #1
 8008382:	60a2      	str	r2, [r4, #8]
 8008384:	b142      	cbz	r2, 8008398 <_scanf_chars+0xa8>
 8008386:	2b00      	cmp	r3, #0
 8008388:	dcc8      	bgt.n	800831c <_scanf_chars+0x2c>
 800838a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800838e:	4629      	mov	r1, r5
 8008390:	4640      	mov	r0, r8
 8008392:	4798      	blx	r3
 8008394:	2800      	cmp	r0, #0
 8008396:	d0c1      	beq.n	800831c <_scanf_chars+0x2c>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	f013 0310 	ands.w	r3, r3, #16
 800839e:	d105      	bne.n	80083ac <_scanf_chars+0xbc>
 80083a0:	68e2      	ldr	r2, [r4, #12]
 80083a2:	3201      	adds	r2, #1
 80083a4:	60e2      	str	r2, [r4, #12]
 80083a6:	69a2      	ldr	r2, [r4, #24]
 80083a8:	b102      	cbz	r2, 80083ac <_scanf_chars+0xbc>
 80083aa:	703b      	strb	r3, [r7, #0]
 80083ac:	6923      	ldr	r3, [r4, #16]
 80083ae:	441e      	add	r6, r3
 80083b0:	6126      	str	r6, [r4, #16]
 80083b2:	2000      	movs	r0, #0
 80083b4:	e7c6      	b.n	8008344 <_scanf_chars+0x54>
	...

080083b8 <_scanf_i>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	469a      	mov	sl, r3
 80083be:	4b74      	ldr	r3, [pc, #464]	; (8008590 <_scanf_i+0x1d8>)
 80083c0:	460c      	mov	r4, r1
 80083c2:	4683      	mov	fp, r0
 80083c4:	4616      	mov	r6, r2
 80083c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ca:	b087      	sub	sp, #28
 80083cc:	ab03      	add	r3, sp, #12
 80083ce:	68a7      	ldr	r7, [r4, #8]
 80083d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083d4:	4b6f      	ldr	r3, [pc, #444]	; (8008594 <_scanf_i+0x1dc>)
 80083d6:	69a1      	ldr	r1, [r4, #24]
 80083d8:	4a6f      	ldr	r2, [pc, #444]	; (8008598 <_scanf_i+0x1e0>)
 80083da:	2903      	cmp	r1, #3
 80083dc:	bf08      	it	eq
 80083de:	461a      	moveq	r2, r3
 80083e0:	1e7b      	subs	r3, r7, #1
 80083e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80083e6:	bf84      	itt	hi
 80083e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083ec:	60a3      	strhi	r3, [r4, #8]
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	9200      	str	r2, [sp, #0]
 80083f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80083f6:	bf88      	it	hi
 80083f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083fc:	f104 091c 	add.w	r9, r4, #28
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bf8c      	ite	hi
 8008404:	197f      	addhi	r7, r7, r5
 8008406:	2700      	movls	r7, #0
 8008408:	464b      	mov	r3, r9
 800840a:	f04f 0800 	mov.w	r8, #0
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	6831      	ldr	r1, [r6, #0]
 8008412:	ab03      	add	r3, sp, #12
 8008414:	2202      	movs	r2, #2
 8008416:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800841a:	7809      	ldrb	r1, [r1, #0]
 800841c:	f7f7 fef8 	bl	8000210 <memchr>
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	b330      	cbz	r0, 8008472 <_scanf_i+0xba>
 8008424:	f1b8 0f01 	cmp.w	r8, #1
 8008428:	d15a      	bne.n	80084e0 <_scanf_i+0x128>
 800842a:	6862      	ldr	r2, [r4, #4]
 800842c:	b92a      	cbnz	r2, 800843a <_scanf_i+0x82>
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	2108      	movs	r1, #8
 8008432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008436:	6061      	str	r1, [r4, #4]
 8008438:	6022      	str	r2, [r4, #0]
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008440:	6022      	str	r2, [r4, #0]
 8008442:	68a2      	ldr	r2, [r4, #8]
 8008444:	1e51      	subs	r1, r2, #1
 8008446:	60a1      	str	r1, [r4, #8]
 8008448:	b19a      	cbz	r2, 8008472 <_scanf_i+0xba>
 800844a:	6832      	ldr	r2, [r6, #0]
 800844c:	1c51      	adds	r1, r2, #1
 800844e:	6031      	str	r1, [r6, #0]
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	1c5d      	adds	r5, r3, #1
 8008456:	6873      	ldr	r3, [r6, #4]
 8008458:	3b01      	subs	r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	6073      	str	r3, [r6, #4]
 800845e:	dc07      	bgt.n	8008470 <_scanf_i+0xb8>
 8008460:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008464:	4631      	mov	r1, r6
 8008466:	4658      	mov	r0, fp
 8008468:	4798      	blx	r3
 800846a:	2800      	cmp	r0, #0
 800846c:	f040 8086 	bne.w	800857c <_scanf_i+0x1c4>
 8008470:	462b      	mov	r3, r5
 8008472:	f108 0801 	add.w	r8, r8, #1
 8008476:	f1b8 0f03 	cmp.w	r8, #3
 800847a:	d1c8      	bne.n	800840e <_scanf_i+0x56>
 800847c:	6862      	ldr	r2, [r4, #4]
 800847e:	b90a      	cbnz	r2, 8008484 <_scanf_i+0xcc>
 8008480:	220a      	movs	r2, #10
 8008482:	6062      	str	r2, [r4, #4]
 8008484:	6862      	ldr	r2, [r4, #4]
 8008486:	4945      	ldr	r1, [pc, #276]	; (800859c <_scanf_i+0x1e4>)
 8008488:	6960      	ldr	r0, [r4, #20]
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	1a89      	subs	r1, r1, r2
 800848e:	f000 f887 	bl	80085a0 <__sccl>
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	f04f 0800 	mov.w	r8, #0
 8008498:	461d      	mov	r5, r3
 800849a:	68a3      	ldr	r3, [r4, #8]
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d03a      	beq.n	8008518 <_scanf_i+0x160>
 80084a2:	6831      	ldr	r1, [r6, #0]
 80084a4:	6960      	ldr	r0, [r4, #20]
 80084a6:	f891 c000 	ldrb.w	ip, [r1]
 80084aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d032      	beq.n	8008518 <_scanf_i+0x160>
 80084b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80084b6:	d121      	bne.n	80084fc <_scanf_i+0x144>
 80084b8:	0510      	lsls	r0, r2, #20
 80084ba:	d51f      	bpl.n	80084fc <_scanf_i+0x144>
 80084bc:	f108 0801 	add.w	r8, r8, #1
 80084c0:	b117      	cbz	r7, 80084c8 <_scanf_i+0x110>
 80084c2:	3301      	adds	r3, #1
 80084c4:	3f01      	subs	r7, #1
 80084c6:	60a3      	str	r3, [r4, #8]
 80084c8:	6873      	ldr	r3, [r6, #4]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	6073      	str	r3, [r6, #4]
 80084d0:	dd1b      	ble.n	800850a <_scanf_i+0x152>
 80084d2:	6833      	ldr	r3, [r6, #0]
 80084d4:	3301      	adds	r3, #1
 80084d6:	6033      	str	r3, [r6, #0]
 80084d8:	68a3      	ldr	r3, [r4, #8]
 80084da:	3b01      	subs	r3, #1
 80084dc:	60a3      	str	r3, [r4, #8]
 80084de:	e7dc      	b.n	800849a <_scanf_i+0xe2>
 80084e0:	f1b8 0f02 	cmp.w	r8, #2
 80084e4:	d1ad      	bne.n	8008442 <_scanf_i+0x8a>
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80084ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80084f0:	d1bf      	bne.n	8008472 <_scanf_i+0xba>
 80084f2:	2110      	movs	r1, #16
 80084f4:	6061      	str	r1, [r4, #4]
 80084f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084fa:	e7a1      	b.n	8008440 <_scanf_i+0x88>
 80084fc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008500:	6022      	str	r2, [r4, #0]
 8008502:	780b      	ldrb	r3, [r1, #0]
 8008504:	702b      	strb	r3, [r5, #0]
 8008506:	3501      	adds	r5, #1
 8008508:	e7de      	b.n	80084c8 <_scanf_i+0x110>
 800850a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800850e:	4631      	mov	r1, r6
 8008510:	4658      	mov	r0, fp
 8008512:	4798      	blx	r3
 8008514:	2800      	cmp	r0, #0
 8008516:	d0df      	beq.n	80084d8 <_scanf_i+0x120>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	05d9      	lsls	r1, r3, #23
 800851c:	d50c      	bpl.n	8008538 <_scanf_i+0x180>
 800851e:	454d      	cmp	r5, r9
 8008520:	d908      	bls.n	8008534 <_scanf_i+0x17c>
 8008522:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008526:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800852a:	4632      	mov	r2, r6
 800852c:	4658      	mov	r0, fp
 800852e:	4798      	blx	r3
 8008530:	1e6f      	subs	r7, r5, #1
 8008532:	463d      	mov	r5, r7
 8008534:	454d      	cmp	r5, r9
 8008536:	d029      	beq.n	800858c <_scanf_i+0x1d4>
 8008538:	6822      	ldr	r2, [r4, #0]
 800853a:	f012 0210 	ands.w	r2, r2, #16
 800853e:	d113      	bne.n	8008568 <_scanf_i+0x1b0>
 8008540:	702a      	strb	r2, [r5, #0]
 8008542:	6863      	ldr	r3, [r4, #4]
 8008544:	9e00      	ldr	r6, [sp, #0]
 8008546:	4649      	mov	r1, r9
 8008548:	4658      	mov	r0, fp
 800854a:	47b0      	blx	r6
 800854c:	f8da 3000 	ldr.w	r3, [sl]
 8008550:	6821      	ldr	r1, [r4, #0]
 8008552:	1d1a      	adds	r2, r3, #4
 8008554:	f8ca 2000 	str.w	r2, [sl]
 8008558:	f011 0f20 	tst.w	r1, #32
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	d010      	beq.n	8008582 <_scanf_i+0x1ca>
 8008560:	6018      	str	r0, [r3, #0]
 8008562:	68e3      	ldr	r3, [r4, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	60e3      	str	r3, [r4, #12]
 8008568:	eba5 0509 	sub.w	r5, r5, r9
 800856c:	44a8      	add	r8, r5
 800856e:	6925      	ldr	r5, [r4, #16]
 8008570:	4445      	add	r5, r8
 8008572:	6125      	str	r5, [r4, #16]
 8008574:	2000      	movs	r0, #0
 8008576:	b007      	add	sp, #28
 8008578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857c:	f04f 0800 	mov.w	r8, #0
 8008580:	e7ca      	b.n	8008518 <_scanf_i+0x160>
 8008582:	07ca      	lsls	r2, r1, #31
 8008584:	bf4c      	ite	mi
 8008586:	8018      	strhmi	r0, [r3, #0]
 8008588:	6018      	strpl	r0, [r3, #0]
 800858a:	e7ea      	b.n	8008562 <_scanf_i+0x1aa>
 800858c:	2001      	movs	r0, #1
 800858e:	e7f2      	b.n	8008576 <_scanf_i+0x1be>
 8008590:	08008838 	.word	0x08008838
 8008594:	080086fd 	.word	0x080086fd
 8008598:	08007f01 	.word	0x08007f01
 800859c:	08008bf2 	.word	0x08008bf2

080085a0 <__sccl>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	780b      	ldrb	r3, [r1, #0]
 80085a4:	2b5e      	cmp	r3, #94	; 0x5e
 80085a6:	bf13      	iteet	ne
 80085a8:	1c4a      	addne	r2, r1, #1
 80085aa:	1c8a      	addeq	r2, r1, #2
 80085ac:	784b      	ldrbeq	r3, [r1, #1]
 80085ae:	2100      	movne	r1, #0
 80085b0:	bf08      	it	eq
 80085b2:	2101      	moveq	r1, #1
 80085b4:	1e44      	subs	r4, r0, #1
 80085b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80085ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 80085be:	42ac      	cmp	r4, r5
 80085c0:	d1fb      	bne.n	80085ba <__sccl+0x1a>
 80085c2:	b913      	cbnz	r3, 80085ca <__sccl+0x2a>
 80085c4:	3a01      	subs	r2, #1
 80085c6:	4610      	mov	r0, r2
 80085c8:	bd70      	pop	{r4, r5, r6, pc}
 80085ca:	f081 0401 	eor.w	r4, r1, #1
 80085ce:	54c4      	strb	r4, [r0, r3]
 80085d0:	1c51      	adds	r1, r2, #1
 80085d2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80085d6:	2d2d      	cmp	r5, #45	; 0x2d
 80085d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80085dc:	460a      	mov	r2, r1
 80085de:	d006      	beq.n	80085ee <__sccl+0x4e>
 80085e0:	2d5d      	cmp	r5, #93	; 0x5d
 80085e2:	d0f0      	beq.n	80085c6 <__sccl+0x26>
 80085e4:	b90d      	cbnz	r5, 80085ea <__sccl+0x4a>
 80085e6:	4632      	mov	r2, r6
 80085e8:	e7ed      	b.n	80085c6 <__sccl+0x26>
 80085ea:	462b      	mov	r3, r5
 80085ec:	e7ef      	b.n	80085ce <__sccl+0x2e>
 80085ee:	780e      	ldrb	r6, [r1, #0]
 80085f0:	2e5d      	cmp	r6, #93	; 0x5d
 80085f2:	d0fa      	beq.n	80085ea <__sccl+0x4a>
 80085f4:	42b3      	cmp	r3, r6
 80085f6:	dcf8      	bgt.n	80085ea <__sccl+0x4a>
 80085f8:	3301      	adds	r3, #1
 80085fa:	429e      	cmp	r6, r3
 80085fc:	54c4      	strb	r4, [r0, r3]
 80085fe:	dcfb      	bgt.n	80085f8 <__sccl+0x58>
 8008600:	3102      	adds	r1, #2
 8008602:	e7e6      	b.n	80085d2 <__sccl+0x32>

08008604 <_strtol_l.isra.0>:
 8008604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	4680      	mov	r8, r0
 800860a:	4689      	mov	r9, r1
 800860c:	4692      	mov	sl, r2
 800860e:	461e      	mov	r6, r3
 8008610:	460f      	mov	r7, r1
 8008612:	463d      	mov	r5, r7
 8008614:	9808      	ldr	r0, [sp, #32]
 8008616:	f815 4b01 	ldrb.w	r4, [r5], #1
 800861a:	f7ff fc9b 	bl	8007f54 <__locale_ctype_ptr_l>
 800861e:	4420      	add	r0, r4
 8008620:	7843      	ldrb	r3, [r0, #1]
 8008622:	f013 0308 	ands.w	r3, r3, #8
 8008626:	d132      	bne.n	800868e <_strtol_l.isra.0+0x8a>
 8008628:	2c2d      	cmp	r4, #45	; 0x2d
 800862a:	d132      	bne.n	8008692 <_strtol_l.isra.0+0x8e>
 800862c:	787c      	ldrb	r4, [r7, #1]
 800862e:	1cbd      	adds	r5, r7, #2
 8008630:	2201      	movs	r2, #1
 8008632:	2e00      	cmp	r6, #0
 8008634:	d05d      	beq.n	80086f2 <_strtol_l.isra.0+0xee>
 8008636:	2e10      	cmp	r6, #16
 8008638:	d109      	bne.n	800864e <_strtol_l.isra.0+0x4a>
 800863a:	2c30      	cmp	r4, #48	; 0x30
 800863c:	d107      	bne.n	800864e <_strtol_l.isra.0+0x4a>
 800863e:	782b      	ldrb	r3, [r5, #0]
 8008640:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008644:	2b58      	cmp	r3, #88	; 0x58
 8008646:	d14f      	bne.n	80086e8 <_strtol_l.isra.0+0xe4>
 8008648:	786c      	ldrb	r4, [r5, #1]
 800864a:	2610      	movs	r6, #16
 800864c:	3502      	adds	r5, #2
 800864e:	2a00      	cmp	r2, #0
 8008650:	bf14      	ite	ne
 8008652:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008656:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800865a:	2700      	movs	r7, #0
 800865c:	fbb1 fcf6 	udiv	ip, r1, r6
 8008660:	4638      	mov	r0, r7
 8008662:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008666:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800866a:	2b09      	cmp	r3, #9
 800866c:	d817      	bhi.n	800869e <_strtol_l.isra.0+0x9a>
 800866e:	461c      	mov	r4, r3
 8008670:	42a6      	cmp	r6, r4
 8008672:	dd23      	ble.n	80086bc <_strtol_l.isra.0+0xb8>
 8008674:	1c7b      	adds	r3, r7, #1
 8008676:	d007      	beq.n	8008688 <_strtol_l.isra.0+0x84>
 8008678:	4584      	cmp	ip, r0
 800867a:	d31c      	bcc.n	80086b6 <_strtol_l.isra.0+0xb2>
 800867c:	d101      	bne.n	8008682 <_strtol_l.isra.0+0x7e>
 800867e:	45a6      	cmp	lr, r4
 8008680:	db19      	blt.n	80086b6 <_strtol_l.isra.0+0xb2>
 8008682:	fb00 4006 	mla	r0, r0, r6, r4
 8008686:	2701      	movs	r7, #1
 8008688:	f815 4b01 	ldrb.w	r4, [r5], #1
 800868c:	e7eb      	b.n	8008666 <_strtol_l.isra.0+0x62>
 800868e:	462f      	mov	r7, r5
 8008690:	e7bf      	b.n	8008612 <_strtol_l.isra.0+0xe>
 8008692:	2c2b      	cmp	r4, #43	; 0x2b
 8008694:	bf04      	itt	eq
 8008696:	1cbd      	addeq	r5, r7, #2
 8008698:	787c      	ldrbeq	r4, [r7, #1]
 800869a:	461a      	mov	r2, r3
 800869c:	e7c9      	b.n	8008632 <_strtol_l.isra.0+0x2e>
 800869e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80086a2:	2b19      	cmp	r3, #25
 80086a4:	d801      	bhi.n	80086aa <_strtol_l.isra.0+0xa6>
 80086a6:	3c37      	subs	r4, #55	; 0x37
 80086a8:	e7e2      	b.n	8008670 <_strtol_l.isra.0+0x6c>
 80086aa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80086ae:	2b19      	cmp	r3, #25
 80086b0:	d804      	bhi.n	80086bc <_strtol_l.isra.0+0xb8>
 80086b2:	3c57      	subs	r4, #87	; 0x57
 80086b4:	e7dc      	b.n	8008670 <_strtol_l.isra.0+0x6c>
 80086b6:	f04f 37ff 	mov.w	r7, #4294967295
 80086ba:	e7e5      	b.n	8008688 <_strtol_l.isra.0+0x84>
 80086bc:	1c7b      	adds	r3, r7, #1
 80086be:	d108      	bne.n	80086d2 <_strtol_l.isra.0+0xce>
 80086c0:	2322      	movs	r3, #34	; 0x22
 80086c2:	f8c8 3000 	str.w	r3, [r8]
 80086c6:	4608      	mov	r0, r1
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	d107      	bne.n	80086de <_strtol_l.isra.0+0xda>
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	b102      	cbz	r2, 80086d6 <_strtol_l.isra.0+0xd2>
 80086d4:	4240      	negs	r0, r0
 80086d6:	f1ba 0f00 	cmp.w	sl, #0
 80086da:	d0f8      	beq.n	80086ce <_strtol_l.isra.0+0xca>
 80086dc:	b10f      	cbz	r7, 80086e2 <_strtol_l.isra.0+0xde>
 80086de:	f105 39ff 	add.w	r9, r5, #4294967295
 80086e2:	f8ca 9000 	str.w	r9, [sl]
 80086e6:	e7f2      	b.n	80086ce <_strtol_l.isra.0+0xca>
 80086e8:	2430      	movs	r4, #48	; 0x30
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	d1af      	bne.n	800864e <_strtol_l.isra.0+0x4a>
 80086ee:	2608      	movs	r6, #8
 80086f0:	e7ad      	b.n	800864e <_strtol_l.isra.0+0x4a>
 80086f2:	2c30      	cmp	r4, #48	; 0x30
 80086f4:	d0a3      	beq.n	800863e <_strtol_l.isra.0+0x3a>
 80086f6:	260a      	movs	r6, #10
 80086f8:	e7a9      	b.n	800864e <_strtol_l.isra.0+0x4a>
	...

080086fc <_strtol_r>:
 80086fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086fe:	4c06      	ldr	r4, [pc, #24]	; (8008718 <_strtol_r+0x1c>)
 8008700:	4d06      	ldr	r5, [pc, #24]	; (800871c <_strtol_r+0x20>)
 8008702:	6824      	ldr	r4, [r4, #0]
 8008704:	6a24      	ldr	r4, [r4, #32]
 8008706:	2c00      	cmp	r4, #0
 8008708:	bf08      	it	eq
 800870a:	462c      	moveq	r4, r5
 800870c:	9400      	str	r4, [sp, #0]
 800870e:	f7ff ff79 	bl	8008604 <_strtol_l.isra.0>
 8008712:	b003      	add	sp, #12
 8008714:	bd30      	pop	{r4, r5, pc}
 8008716:	bf00      	nop
 8008718:	20000010 	.word	0x20000010
 800871c:	200000d8 	.word	0x200000d8

08008720 <__submore>:
 8008720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	460c      	mov	r4, r1
 8008726:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800872c:	4299      	cmp	r1, r3
 800872e:	d11d      	bne.n	800876c <__submore+0x4c>
 8008730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008734:	f7ff f82e 	bl	8007794 <_malloc_r>
 8008738:	b918      	cbnz	r0, 8008742 <__submore+0x22>
 800873a:	f04f 30ff 	mov.w	r0, #4294967295
 800873e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008746:	63a3      	str	r3, [r4, #56]	; 0x38
 8008748:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800874c:	6360      	str	r0, [r4, #52]	; 0x34
 800874e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008752:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008756:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800875a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800875e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008762:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008766:	6020      	str	r0, [r4, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e7e8      	b.n	800873e <__submore+0x1e>
 800876c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800876e:	0077      	lsls	r7, r6, #1
 8008770:	463a      	mov	r2, r7
 8008772:	f000 f827 	bl	80087c4 <_realloc_r>
 8008776:	4605      	mov	r5, r0
 8008778:	2800      	cmp	r0, #0
 800877a:	d0de      	beq.n	800873a <__submore+0x1a>
 800877c:	eb00 0806 	add.w	r8, r0, r6
 8008780:	4601      	mov	r1, r0
 8008782:	4632      	mov	r2, r6
 8008784:	4640      	mov	r0, r8
 8008786:	f000 f812 	bl	80087ae <memcpy>
 800878a:	f8c4 8000 	str.w	r8, [r4]
 800878e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008792:	e7e9      	b.n	8008768 <__submore+0x48>

08008794 <__ascii_wctomb>:
 8008794:	b149      	cbz	r1, 80087aa <__ascii_wctomb+0x16>
 8008796:	2aff      	cmp	r2, #255	; 0xff
 8008798:	bf85      	ittet	hi
 800879a:	238a      	movhi	r3, #138	; 0x8a
 800879c:	6003      	strhi	r3, [r0, #0]
 800879e:	700a      	strbls	r2, [r1, #0]
 80087a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80087a4:	bf98      	it	ls
 80087a6:	2001      	movls	r0, #1
 80087a8:	4770      	bx	lr
 80087aa:	4608      	mov	r0, r1
 80087ac:	4770      	bx	lr

080087ae <memcpy>:
 80087ae:	b510      	push	{r4, lr}
 80087b0:	1e43      	subs	r3, r0, #1
 80087b2:	440a      	add	r2, r1
 80087b4:	4291      	cmp	r1, r2
 80087b6:	d100      	bne.n	80087ba <memcpy+0xc>
 80087b8:	bd10      	pop	{r4, pc}
 80087ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087c2:	e7f7      	b.n	80087b4 <memcpy+0x6>

080087c4 <_realloc_r>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	4607      	mov	r7, r0
 80087c8:	4614      	mov	r4, r2
 80087ca:	460e      	mov	r6, r1
 80087cc:	b921      	cbnz	r1, 80087d8 <_realloc_r+0x14>
 80087ce:	4611      	mov	r1, r2
 80087d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087d4:	f7fe bfde 	b.w	8007794 <_malloc_r>
 80087d8:	b922      	cbnz	r2, 80087e4 <_realloc_r+0x20>
 80087da:	f7fe ff8d 	bl	80076f8 <_free_r>
 80087de:	4625      	mov	r5, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e4:	f000 f814 	bl	8008810 <_malloc_usable_size_r>
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d20f      	bcs.n	800880c <_realloc_r+0x48>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4638      	mov	r0, r7
 80087f0:	f7fe ffd0 	bl	8007794 <_malloc_r>
 80087f4:	4605      	mov	r5, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d0f2      	beq.n	80087e0 <_realloc_r+0x1c>
 80087fa:	4631      	mov	r1, r6
 80087fc:	4622      	mov	r2, r4
 80087fe:	f7ff ffd6 	bl	80087ae <memcpy>
 8008802:	4631      	mov	r1, r6
 8008804:	4638      	mov	r0, r7
 8008806:	f7fe ff77 	bl	80076f8 <_free_r>
 800880a:	e7e9      	b.n	80087e0 <_realloc_r+0x1c>
 800880c:	4635      	mov	r5, r6
 800880e:	e7e7      	b.n	80087e0 <_realloc_r+0x1c>

08008810 <_malloc_usable_size_r>:
 8008810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008814:	1f18      	subs	r0, r3, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	bfbc      	itt	lt
 800881a:	580b      	ldrlt	r3, [r1, r0]
 800881c:	18c0      	addlt	r0, r0, r3
 800881e:	4770      	bx	lr

08008820 <_init>:
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008822:	bf00      	nop
 8008824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008826:	bc08      	pop	{r3}
 8008828:	469e      	mov	lr, r3
 800882a:	4770      	bx	lr

0800882c <_fini>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	bf00      	nop
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr
