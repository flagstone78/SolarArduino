
SolarProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08008aa8  08008aa8  00018aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009020  08009020  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009028  08009028  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08009038  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000248  0800927c  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800927c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116e2  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002978  00000000  00000000  00031956  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  000342d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  00034fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006bcb  00000000  00000000  00035bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b904  00000000  00000000  0003c7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000942af  00000000  00000000  000480a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc356  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  000dc3d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a90 	.word	0x08008a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	08008a90 	.word	0x08008a90

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_ZN7StepperC1EP17TIM_HandleTypeDefPKPK12GPIO_TypeDefPKtb>:
 *      Author: Duane Mathias
 */

#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef* timer, const GPIO_TypeDef* const gpioPorts[3], const uint16_t gpioPins[3], const bool reverseDirection)
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
:ports(gpioPorts),pins(gpioPins), reverse(reverseDirection),timer(timer) {
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <_ZN7StepperC1EP17TIM_HandleTypeDefPKPK12GPIO_TypeDefPKtb+0x3c>)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	7e3a      	ldrb	r2, [r7, #24]
 8000fdc:	751a      	strb	r2, [r3, #20]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	619a      	str	r2, [r3, #24]

}
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	08008abc 	.word	0x08008abc

08000ff8 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <_ZN7StepperD1Ev+0x1c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	08008abc 	.word	0x08008abc

08001018 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
}
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffe9 	bl	8000ff8 <_ZN7StepperD1Ev>
 8001026:	211c      	movs	r1, #28
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f004 f827 	bl	800507c <_ZdlPvj>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZN7Stepper6setDirEb>:

void Stepper::setDir(bool dir){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
	if(reverse) dir = !dir;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7d1b      	ldrb	r3, [r3, #20]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <_ZN7Stepper6setDirEb+0x1c>
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	f083 0301 	eor.w	r3, r3, #1
 8001052:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef*)ports[1],pins[1],(GPIO_PinState)dir);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	3304      	adds	r3, #4
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	3302      	adds	r3, #2
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	78fa      	ldrb	r2, [r7, #3]
 8001066:	4619      	mov	r1, r3
 8001068:	f002 fd36 	bl	8003ad8 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN7Stepper4stepEv>:

void Stepper::step() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	//bool dirState = ((ports[1]->ODR & pins[1]) == pins[1]);
	HAL_GPIO_TogglePin((GPIO_TypeDef*) ports[0], pins[0]);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f002 fd3d 	bl	8003b0a <HAL_GPIO_TogglePin>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_ZN7Stepper6updateEv>:

void Stepper::update(){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	step();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffe7 	bl	8001074 <_ZN7Stepper4stepEv>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <_ZN7Stepper7setFreqEf>:

void Stepper::setFreq(float Hz){
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	ed87 0a00 	vstr	s0, [r7]
	if(Hz < 1) Hz = 1;
 80010bc:	edd7 7a00 	vldr	s15, [r7]
 80010c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d502      	bpl.n	80010d4 <_ZN7Stepper7setFreqEf+0x24>
 80010ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d2:	603b      	str	r3, [r7, #0]
	if(Hz > 2000) Hz = 2000;
 80010d4:	edd7 7a00 	vldr	s15, [r7]
 80010d8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001130 <_ZN7Stepper7setFreqEf+0x80>
 80010dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	dd01      	ble.n	80010ea <_ZN7Stepper7setFreqEf+0x3a>
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <_ZN7Stepper7setFreqEf+0x84>)
 80010e8:	603b      	str	r3, [r7, #0]
	timer->Instance->ARR = (timer,(uint16_t)(65535.0/Hz));
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	f7ff fa44 	bl	8000578 <__aeabi_f2d>
 80010f0:	4603      	mov	r3, r0
 80010f2:	460c      	mov	r4, r1
 80010f4:	461a      	mov	r2, r3
 80010f6:	4623      	mov	r3, r4
 80010f8:	a10b      	add	r1, pc, #44	; (adr r1, 8001128 <_ZN7Stepper7setFreqEf+0x78>)
 80010fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010fe:	f7ff fbbd 	bl	800087c <__aeabi_ddiv>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	4618      	mov	r0, r3
 8001108:	4621      	mov	r1, r4
 800110a:	f7ff fd65 	bl	8000bd8 <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	f3af 8000 	nop.w
 8001128:	00000000 	.word	0x00000000
 800112c:	40efffe0 	.word	0x40efffe0
 8001130:	44fa0000 	.word	0x44fa0000
 8001134:	44fa0000 	.word	0x44fa0000

08001138 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtfbf>:
 *      Author: Duane Mathias
 */

#include "absEncoder.h"

absEncoder::absEncoder(const GPIO_TypeDef* const gpioPorts[10], const uint16_t gpioPins[10], float operatingPoint, bool reverseDirection, float offset)
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6178      	str	r0, [r7, #20]
 8001140:	6139      	str	r1, [r7, #16]
 8001142:	60fa      	str	r2, [r7, #12]
 8001144:	ed87 0a02 	vstr	s0, [r7, #8]
 8001148:	edc7 0a00 	vstr	s1, [r7]
 800114c:	71fb      	strb	r3, [r7, #7]
:ports(gpioPorts),pins(gpioPins),opPoint(operatingPoint),reverse(reverseDirection),degreeOffset(offset) {
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtfbf+0x48>)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	731a      	strb	r2, [r3, #12]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	615a      	str	r2, [r3, #20]

}
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4618      	mov	r0, r3
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	08008acc 	.word	0x08008acc

08001184 <_ZN10absEncoderD1Ev>:

absEncoder::~absEncoder() {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <_ZN10absEncoderD1Ev+0x1c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	08008acc 	.word	0x08008acc

080011a4 <_ZN10absEncoderD0Ev>:
absEncoder::~absEncoder() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
}
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffe9 	bl	8001184 <_ZN10absEncoderD1Ev>
 80011b2:	2118      	movs	r1, #24
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f003 ff61 	bl	800507c <_ZdlPvj>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZN10absEncoder11positionRawEv>:

uint16_t absEncoder::positionRaw(){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	// read all gpio at once
	uint16_t a = GPIOA->IDR;
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <_ZN10absEncoder11positionRawEv+0xcc>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	81fb      	strh	r3, [r7, #14]
	uint16_t b = GPIOB->IDR;
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <_ZN10absEncoder11positionRawEv+0xd0>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	81bb      	strh	r3, [r7, #12]
	uint16_t c = GPIOC->IDR;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <_ZN10absEncoder11positionRawEv+0xd4>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	817b      	strh	r3, [r7, #10]

	//construct greycode
	uint16_t grey = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	82fb      	strh	r3, [r7, #22]
	uint16_t p = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	82bb      	strh	r3, [r7, #20]
	uint8_t bit = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	727b      	strb	r3, [r7, #9]
	for(int i = 0; i<10; i++){
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b09      	cmp	r3, #9
 80011f2:	dc3d      	bgt.n	8001270 <_ZN10absEncoder11positionRawEv+0xac>
		if(ports[i]==GPIOA){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a23      	ldr	r2, [pc, #140]	; (8001290 <_ZN10absEncoder11positionRawEv+0xcc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d102      	bne.n	800120c <_ZN10absEncoder11positionRawEv+0x48>
			p = a;
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	82bb      	strh	r3, [r7, #20]
 800120a:	e016      	b.n	800123a <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOB){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <_ZN10absEncoder11positionRawEv+0xd0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d102      	bne.n	8001224 <_ZN10absEncoder11positionRawEv+0x60>
			p = b;
 800121e:	89bb      	ldrh	r3, [r7, #12]
 8001220:	82bb      	strh	r3, [r7, #20]
 8001222:	e00a      	b.n	800123a <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOC){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <_ZN10absEncoder11positionRawEv+0xd4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <_ZN10absEncoder11positionRawEv+0x76>
			p = c;
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	82bb      	strh	r3, [r7, #20]
		}
		bit = (p&pins[i])>0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	8abb      	ldrh	r3, [r7, #20]
 8001248:	4013      	ands	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	727b      	strb	r3, [r7, #9]
		grey += bit<<i;
 8001258:	7a7a      	ldrb	r2, [r7, #9]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	b29a      	uxth	r2, r3
 8001262:	8afb      	ldrh	r3, [r7, #22]
 8001264:	4413      	add	r3, r2
 8001266:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<10; i++){
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	3301      	adds	r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	e7be      	b.n	80011ee <_ZN10absEncoder11positionRawEv+0x2a>
	}
	grey = (0xffff^grey)&0x02ff; //bitwise invert because the encoder is active low
 8001270:	8afb      	ldrh	r3, [r7, #22]
 8001272:	43db      	mvns	r3, r3
 8001274:	b29a      	uxth	r2, r3
 8001276:	f240 23ff 	movw	r3, #767	; 0x2ff
 800127a:	4013      	ands	r3, r2
 800127c:	82fb      	strh	r3, [r7, #22]
	return grayToBinary(grey);
 800127e:	8afb      	ldrh	r3, [r7, #22]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f8ad 	bl	80013e0 <_Z12grayToBinaryt>
 8001286:	4603      	mov	r3, r0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800
 800129c:	00000000 	.word	0x00000000

080012a0 <_ZN10absEncoder8positionEv>:

//return the position of the encoder in degrees opPoint-180.0 to opPoint+180.0 range
float absEncoder::position(){
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	float deg = positionRaw()*360.0/1024.0;
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff8b 	bl	80011c4 <_ZN10absEncoder11positionRawEv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f94f 	bl	8000554 <__aeabi_i2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <_ZN10absEncoder8positionEv+0x130>)
 80012bc:	f7ff f9b4 	bl	8000628 <__aeabi_dmul>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4618      	mov	r0, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <_ZN10absEncoder8positionEv+0x134>)
 80012ce:	f7ff fad5 	bl	800087c <__aeabi_ddiv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	4618      	mov	r0, r3
 80012d8:	4621      	mov	r1, r4
 80012da:	f7ff fc9d 	bl	8000c18 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	60fb      	str	r3, [r7, #12]
	if(reverse) deg = -deg;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <_ZN10absEncoder8positionEv+0x56>
 80012ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ee:	eef1 7a67 	vneg.f32	s15, s15
 80012f2:	edc7 7a03 	vstr	s15, [r7, #12]
	deg += degreeOffset;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	edc7 7a03 	vstr	s15, [r7, #12]
	if(deg != 0) deg = fmod(deg,360.0); //between -360 to 360
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001314:	d00d      	beq.n	8001332 <_ZN10absEncoder8positionEv+0x92>
 8001316:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80013c8 <_ZN10absEncoder8positionEv+0x128>
 800131a:	ed97 0a03 	vldr	s0, [r7, #12]
 800131e:	f000 f878 	bl	8001412 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001322:	ec54 3b10 	vmov	r3, r4, d0
 8001326:	4618      	mov	r0, r3
 8001328:	4621      	mov	r1, r4
 800132a:	f7ff fc75 	bl	8000c18 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	60fb      	str	r3, [r7, #12]
	if(deg < opPoint-180.0)deg+=360;
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7ff f920 	bl	8000578 <__aeabi_f2d>
 8001338:	4604      	mov	r4, r0
 800133a:	460d      	mov	r5, r1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f919 	bl	8000578 <__aeabi_f2d>
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <_ZN10absEncoder8positionEv+0x138>)
 800134c:	f7fe ffb4 	bl	80002b8 <__aeabi_dsub>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7ff fbd8 	bl	8000b0c <__aeabi_dcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <_ZN10absEncoder8positionEv+0xd4>
 8001362:	edd7 7a03 	vldr	s15, [r7, #12]
 8001366:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80013dc <_ZN10absEncoder8positionEv+0x13c>
 800136a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800136e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001372:	e01f      	b.n	80013b4 <_ZN10absEncoder8positionEv+0x114>
	else if(deg > opPoint+180.0)deg-=360;
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff f8ff 	bl	8000578 <__aeabi_f2d>
 800137a:	4604      	mov	r4, r0
 800137c:	460d      	mov	r5, r1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8f8 	bl	8000578 <__aeabi_f2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <_ZN10absEncoder8positionEv+0x138>)
 800138e:	f7fe ff95 	bl	80002bc <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7ff fbd5 	bl	8000b48 <__aeabi_dcmpgt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <_ZN10absEncoder8positionEv+0x114>
 80013a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80013dc <_ZN10absEncoder8positionEv+0x13c>
 80013ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b0:	edc7 7a03 	vstr	s15, [r7, #12]
	return deg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	ee07 3a90 	vmov	s15, r3
}
 80013ba:	eeb0 0a67 	vmov.f32	s0, s15
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40768000 	.word	0x40768000
 80013d0:	40768000 	.word	0x40768000
 80013d4:	40900000 	.word	0x40900000
 80013d8:	40668000 	.word	0x40668000
 80013dc:	43b40000 	.word	0x43b40000

080013e0 <_Z12grayToBinaryt>:

uint16_t grayToBinary(uint16_t num){
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
	uint16_t mask = num;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	81fb      	strh	r3, [r7, #14]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <_Z12grayToBinaryt+0x24>
		mask >>= 1;
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	105b      	asrs	r3, r3, #1
 80013f8:	81fb      	strh	r3, [r7, #14]
		num   ^= mask;
 80013fa:	88fa      	ldrh	r2, [r7, #6]
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	4053      	eors	r3, r2
 8001400:	80fb      	strh	r3, [r7, #6]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 8001402:	e7f4      	b.n	80013ee <_Z12grayToBinaryt+0xe>
	}
	return num;
 8001404:	88fb      	ldrh	r3, [r7, #6]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 8001412:	b590      	push	{r4, r7, lr}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	ed87 0a03 	vstr	s0, [r7, #12]
 800141c:	ed87 1b00 	vstr	d1, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff f8a9 	bl	8000578 <__aeabi_f2d>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	ed97 1b00 	vldr	d1, [r7]
 800142e:	ec44 3b10 	vmov	d0, r3, r4
 8001432:	f004 f819 	bl	8005468 <fmod>
 8001436:	eeb0 7a40 	vmov.f32	s14, s0
 800143a:	eef0 7a60 	vmov.f32	s15, s1
    }
 800143e:	eeb0 0a47 	vmov.f32	s0, s14
 8001442:	eef0 0a67 	vmov.f32	s1, s15
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	ed87 0a01 	vstr	s0, [r7, #4]
 8001456:	edd7 7a01 	vldr	s15, [r7, #4]
 800145a:	eef0 7ae7 	vabs.f32	s15, s15
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_TIM_PeriodElapsedCallback>:
//clock
//RTC_DS3231 rtc;

// callback function for stepper motor timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(htim == elStepper.timer) {
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d102      	bne.n	8001484 <HAL_TIM_PeriodElapsedCallback+0x18>
		elStepper.update();
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001480:	f7ff fe0a 	bl	8001098 <_ZN7Stepper6updateEv>
	}
	if(htim == azStepper.timer) {
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d102      	bne.n	8001494 <HAL_TIM_PeriodElapsedCallback+0x28>
		azStepper.update();
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001490:	f7ff fe02 	bl	8001098 <_ZN7Stepper6updateEv>
	}
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000334 	.word	0x20000334
 80014a0:	20000350 	.word	0x20000350

080014a4 <mainsetup>:
time_t timeSeconds;
tm tms;

AzEl Target;

void mainsetup(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	elStepper.setFreq(100);
 80014a8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80014c0 <mainsetup+0x1c>
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <mainsetup+0x20>)
 80014ae:	f7ff fdff 	bl	80010b0 <_ZN7Stepper7setFreqEf>
	azStepper.setFreq(100);
 80014b2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80014c0 <mainsetup+0x1c>
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <mainsetup+0x24>)
 80014b8:	f7ff fdfa 	bl	80010b0 <_ZN7Stepper7setFreqEf>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	42c80000 	.word	0x42c80000
 80014c4:	20000334 	.word	0x20000334
 80014c8:	20000350 	.word	0x20000350

080014cc <_Z12motorControlP7StepperP10absEncoderf>:

void motorControl(Stepper* s, absEncoder* e, float targetAngle){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float pos = e->position();
 80014da:	68b8      	ldr	r0, [r7, #8]
 80014dc:	f7ff fee0 	bl	80012a0 <_ZN10absEncoder8positionEv>
 80014e0:	ed87 0a06 	vstr	s0, [r7, #24]
	float err = targetAngle-pos; //feedback
 80014e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80014e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	edc7 7a05 	vstr	s15, [r7, #20]

	float p = 200;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <_Z12motorControlP7StepperP10absEncoderf+0xa0>)
 80014f6:	61fb      	str	r3, [r7, #28]
	if (abs(err) < 1.0) p = 20;
 80014f8:	ed97 0a05 	vldr	s0, [r7, #20]
 80014fc:	f7ff ffa6 	bl	800144c <_ZSt3absf>
 8001500:	eeb0 7a40 	vmov.f32	s14, s0
 8001504:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	bf4c      	ite	mi
 8001512:	2301      	movmi	r3, #1
 8001514:	2300      	movpl	r3, #0
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <_Z12motorControlP7StepperP10absEncoderf+0x54>
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <_Z12motorControlP7StepperP10absEncoderf+0xa4>)
 800151e:	61fb      	str	r3, [r7, #28]
	float vel = p*err; //proportional term
 8001520:	ed97 7a07 	vldr	s14, [r7, #28]
 8001524:	edd7 7a05 	vldr	s15, [r7, #20]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a04 	vstr	s15, [r7, #16]

	//set velocity
	s->setDir(vel > 0);
 8001530:	edd7 7a04 	vldr	s15, [r7, #16]
 8001534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	bfcc      	ite	gt
 800153e:	2301      	movgt	r3, #1
 8001540:	2300      	movle	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4619      	mov	r1, r3
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff fd76 	bl	8001038 <_ZN7Stepper6setDirEb>
	s->setFreq(abs(vel));
 800154c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001550:	f7ff ff7c 	bl	800144c <_ZSt3absf>
 8001554:	eef0 7a40 	vmov.f32	s15, s0
 8001558:	eeb0 0a67 	vmov.f32	s0, s15
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fda7 	bl	80010b0 <_ZN7Stepper7setFreqEf>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	43480000 	.word	0x43480000
 8001570:	41a00000 	.word	0x41a00000

08001574 <_Z5limitPddd>:

void limit(double *var, double high, double low){
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6178      	str	r0, [r7, #20]
 800157c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001580:	ed87 1b00 	vstr	d1, [r7]
	if(*var < low) *var = low;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	e9d3 3400 	ldrd	r3, r4, [r3]
 800158a:	461a      	mov	r2, r3
 800158c:	4623      	mov	r3, r4
 800158e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001592:	f7ff fad9 	bl	8000b48 <__aeabi_dcmpgt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <_Z5limitPddd+0x34>
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015a2:	e9c2 3400 	strd	r3, r4, [r2]
	else if(*var > high) *var = high;
}
 80015a6:	e011      	b.n	80015cc <_Z5limitPddd+0x58>
	else if(*var > high) *var = high;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4623      	mov	r3, r4
 80015b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b6:	f7ff faa9 	bl	8000b0c <__aeabi_dcmplt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d100      	bne.n	80015c2 <_Z5limitPddd+0x4e>
}
 80015c0:	e004      	b.n	80015cc <_Z5limitPddd+0x58>
	else if(*var > high) *var = high;
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015c8:	e9c2 3400 	strd	r3, r4, [r2]
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	0000      	movs	r0, r0
	...

080015d8 <mainloop>:

void mainloop(){
 80015d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	af06      	add	r7, sp, #24
	//get the time (must be called getTime then getDate to work properly)
	HAL_RTC_GetTime(&hrtc,&timeS,RTC_FORMAT_BIN);
 80015de:	2200      	movs	r2, #0
 80015e0:	4953      	ldr	r1, [pc, #332]	; (8001730 <mainloop+0x158>)
 80015e2:	4854      	ldr	r0, [pc, #336]	; (8001734 <mainloop+0x15c>)
 80015e4:	f003 f859 	bl	800469a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&dateS,RTC_FORMAT_BIN);
 80015e8:	2200      	movs	r2, #0
 80015ea:	4953      	ldr	r1, [pc, #332]	; (8001738 <mainloop+0x160>)
 80015ec:	4851      	ldr	r0, [pc, #324]	; (8001734 <mainloop+0x15c>)
 80015ee:	f003 f8b2 	bl	8004756 <HAL_RTC_GetDate>

	const int century = 1; //centuries since 1900
 80015f2:	2301      	movs	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
	tms = {timeS.Seconds,timeS.Minutes,timeS.Hours,dateS.Date,dateS.Month-1,dateS.Year+century*100,0,0,(int)timeS.DayLightSaving};
 80015f6:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <mainloop+0x158>)
 80015f8:	789b      	ldrb	r3, [r3, #2]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <mainloop+0x158>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	461e      	mov	r6, r3
 8001602:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <mainloop+0x158>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461d      	mov	r5, r3
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <mainloop+0x160>)
 800160a:	789b      	ldrb	r3, [r3, #2]
 800160c:	461c      	mov	r4, r3
 800160e:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <mainloop+0x160>)
 8001610:	785b      	ldrb	r3, [r3, #1]
 8001612:	3b01      	subs	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <mainloop+0x160>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	3364      	adds	r3, #100	; 0x64
 800161c:	4944      	ldr	r1, [pc, #272]	; (8001730 <mainloop+0x158>)
 800161e:	68c9      	ldr	r1, [r1, #12]
 8001620:	4608      	mov	r0, r1
 8001622:	4946      	ldr	r1, [pc, #280]	; (800173c <mainloop+0x164>)
 8001624:	600a      	str	r2, [r1, #0]
 8001626:	4945      	ldr	r1, [pc, #276]	; (800173c <mainloop+0x164>)
 8001628:	604e      	str	r6, [r1, #4]
 800162a:	4944      	ldr	r1, [pc, #272]	; (800173c <mainloop+0x164>)
 800162c:	608d      	str	r5, [r1, #8]
 800162e:	4943      	ldr	r1, [pc, #268]	; (800173c <mainloop+0x164>)
 8001630:	60cc      	str	r4, [r1, #12]
 8001632:	4942      	ldr	r1, [pc, #264]	; (800173c <mainloop+0x164>)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	610a      	str	r2, [r1, #16]
 8001638:	4a40      	ldr	r2, [pc, #256]	; (800173c <mainloop+0x164>)
 800163a:	6153      	str	r3, [r2, #20]
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <mainloop+0x164>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <mainloop+0x164>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <mainloop+0x164>)
 800164a:	6218      	str	r0, [r3, #32]

	timeSeconds = mktime(&tms); //update mday and yday
 800164c:	483b      	ldr	r0, [pc, #236]	; (800173c <mainloop+0x164>)
 800164e:	f005 ffd1 	bl	80075f4 <mktime>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <mainloop+0x168>)
 8001658:	e9c2 3400 	strd	r3, r4, [r2]
	Target = calculateSolar(tms,geo);
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <mainloop+0x16c>)
 800165e:	ed93 5b00 	vldr	d5, [r3]
 8001662:	ed93 6b02 	vldr	d6, [r3, #8]
 8001666:	ed93 7b04 	vldr	d7, [r3, #16]
 800166a:	4e34      	ldr	r6, [pc, #208]	; (800173c <mainloop+0x164>)
 800166c:	466d      	mov	r5, sp
 800166e:	f106 0410 	add.w	r4, r6, #16
 8001672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	602b      	str	r3, [r5, #0]
 800167a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800167e:	eeb0 0a45 	vmov.f32	s0, s10
 8001682:	eef0 0a65 	vmov.f32	s1, s11
 8001686:	eeb0 1a46 	vmov.f32	s2, s12
 800168a:	eef0 1a66 	vmov.f32	s3, s13
 800168e:	eeb0 2a47 	vmov.f32	s4, s14
 8001692:	eef0 2a67 	vmov.f32	s5, s15
 8001696:	f001 fac1 	bl	8002c1c <_Z14calculateSolar2tm3Geo>
 800169a:	eeb0 6a40 	vmov.f32	s12, s0
 800169e:	eef0 6a60 	vmov.f32	s13, s1
 80016a2:	eeb0 7a41 	vmov.f32	s14, s2
 80016a6:	eef0 7a61 	vmov.f32	s15, s3
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <mainloop+0x170>)
 80016ac:	ed83 6b00 	vstr	d6, [r3]
 80016b0:	ed83 7b02 	vstr	d7, [r3, #8]

	limit(&Target.Elevation, 90,5);
 80016b4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001710 <mainloop+0x138>
 80016b8:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001718 <mainloop+0x140>
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <mainloop+0x174>)
 80016be:	f7ff ff59 	bl	8001574 <_Z5limitPddd>
	limit(&Target.Azimuth, 300,60);
 80016c2:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001720 <mainloop+0x148>
 80016c6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001728 <mainloop+0x150>
 80016ca:	481f      	ldr	r0, [pc, #124]	; (8001748 <mainloop+0x170>)
 80016cc:	f7ff ff52 	bl	8001574 <_Z5limitPddd>

	motorControl(&elStepper, &elEncoder, Target.Elevation);
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <mainloop+0x170>)
 80016d2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	4621      	mov	r1, r4
 80016da:	f7ff fa9d 	bl	8000c18 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	ee00 3a10 	vmov	s0, r3
 80016e4:	491a      	ldr	r1, [pc, #104]	; (8001750 <mainloop+0x178>)
 80016e6:	481b      	ldr	r0, [pc, #108]	; (8001754 <mainloop+0x17c>)
 80016e8:	f7ff fef0 	bl	80014cc <_Z12motorControlP7StepperP10absEncoderf>
	motorControl(&azStepper, &azEncoder, Target.Azimuth);
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <mainloop+0x170>)
 80016ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016f2:	4618      	mov	r0, r3
 80016f4:	4621      	mov	r1, r4
 80016f6:	f7ff fa8f 	bl	8000c18 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	ee00 3a10 	vmov	s0, r3
 8001700:	4915      	ldr	r1, [pc, #84]	; (8001758 <mainloop+0x180>)
 8001702:	4816      	ldr	r0, [pc, #88]	; (800175c <mainloop+0x184>)
 8001704:	f7ff fee2 	bl	80014cc <_Z12motorControlP7StepperP10absEncoderf>
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	00000000 	.word	0x00000000
 8001714:	40140000 	.word	0x40140000
 8001718:	00000000 	.word	0x00000000
 800171c:	40568000 	.word	0x40568000
 8001720:	00000000 	.word	0x00000000
 8001724:	404e0000 	.word	0x404e0000
 8001728:	00000000 	.word	0x00000000
 800172c:	4072c000 	.word	0x4072c000
 8001730:	20000370 	.word	0x20000370
 8001734:	200002e4 	.word	0x200002e4
 8001738:	2000036c 	.word	0x2000036c
 800173c:	20000390 	.word	0x20000390
 8001740:	20000388 	.word	0x20000388
 8001744:	08008b78 	.word	0x08008b78
 8001748:	200003b8 	.word	0x200003b8
 800174c:	200003c0 	.word	0x200003c0
 8001750:	20000304 	.word	0x20000304
 8001754:	20000334 	.word	0x20000334
 8001758:	2000031c 	.word	0x2000031c
 800175c:	20000350 	.word	0x20000350

08001760 <_Z41__static_initialization_and_destruction_0ii>:
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af02      	add	r7, sp, #8
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d128      	bne.n	80017c2 <_Z41__static_initialization_and_destruction_0ii+0x62>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	4293      	cmp	r3, r2
 8001778:	d123      	bne.n	80017c2 <_Z41__static_initialization_and_destruction_0ii+0x62>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, 0, true, -5);
 800177a:	eef9 0a04 	vmov.f32	s1, #148	; 0xc0a00000 -5.0
 800177e:	2301      	movs	r3, #1
 8001780:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80017f4 <_Z41__static_initialization_and_destruction_0ii+0x94>
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001786:	491d      	ldr	r1, [pc, #116]	; (80017fc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001788:	481d      	ldr	r0, [pc, #116]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800178a:	f7ff fcd5 	bl	8001138 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtfbf>
absEncoder azEncoder(AzEncoderPorts,AzEncoderPins, 180, false, 183);
 800178e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001804 <_Z41__static_initialization_and_destruction_0ii+0xa4>
 8001792:	2300      	movs	r3, #0
 8001794:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001808 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800179a:	491d      	ldr	r1, [pc, #116]	; (8001810 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800179c:	481d      	ldr	r0, [pc, #116]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800179e:	f7ff fccb 	bl	8001138 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKtfbf>
Stepper elStepper(&htim1,ElStepperPorts,ElStepperPins, true);
 80017a2:	2301      	movs	r3, #1
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80017aa:	491d      	ldr	r1, [pc, #116]	; (8001820 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80017ac:	481d      	ldr	r0, [pc, #116]	; (8001824 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80017ae:	f7ff fc03 	bl	8000fb8 <_ZN7StepperC1EP17TIM_HandleTypeDefPKPK12GPIO_TypeDefPKtb>
Stepper azStepper(&htim2,AzStepperPorts,AzStepperPins, true);
 80017b2:	2301      	movs	r3, #1
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80017ba:	491d      	ldr	r1, [pc, #116]	; (8001830 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80017bc:	481d      	ldr	r0, [pc, #116]	; (8001834 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80017be:	f7ff fbfb 	bl	8000fb8 <_ZN7StepperC1EP17TIM_HandleTypeDefPKPK12GPIO_TypeDefPKtb>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d110      	bne.n	80017ea <_Z41__static_initialization_and_destruction_0ii+0x8a>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10b      	bne.n	80017ea <_Z41__static_initialization_and_destruction_0ii+0x8a>
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80017d4:	f7ff fc10 	bl	8000ff8 <_ZN7StepperD1Ev>
Stepper elStepper(&htim1,ElStepperPorts,ElStepperPins, true);
 80017d8:	4812      	ldr	r0, [pc, #72]	; (8001824 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80017da:	f7ff fc0d 	bl	8000ff8 <_ZN7StepperD1Ev>
absEncoder azEncoder(AzEncoderPorts,AzEncoderPins, 180, false, 183);
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80017e0:	f7ff fcd0 	bl	8001184 <_ZN10absEncoderD1Ev>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins, 0, true, -5);
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80017e6:	f7ff fccd 	bl	8001184 <_ZN10absEncoderD1Ev>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	00000000 	.word	0x00000000
 80017f8:	08008afc 	.word	0x08008afc
 80017fc:	08008ad4 	.word	0x08008ad4
 8001800:	20000304 	.word	0x20000304
 8001804:	43370000 	.word	0x43370000
 8001808:	43340000 	.word	0x43340000
 800180c:	08008b4c 	.word	0x08008b4c
 8001810:	08008b24 	.word	0x08008b24
 8001814:	2000031c 	.word	0x2000031c
 8001818:	08008b1c 	.word	0x08008b1c
 800181c:	08008b10 	.word	0x08008b10
 8001820:	20000264 	.word	0x20000264
 8001824:	20000334 	.word	0x20000334
 8001828:	08008b6c 	.word	0x08008b6c
 800182c:	08008b60 	.word	0x08008b60
 8001830:	200002a4 	.word	0x200002a4
 8001834:	20000350 	.word	0x20000350

08001838 <_GLOBAL__sub_I_htim1>:
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
 800183c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff ff8d 	bl	8001760 <_Z41__static_initialization_and_destruction_0ii>
 8001846:	bd80      	pop	{r7, pc}

08001848 <_GLOBAL__sub_D_htim1>:
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
 800184c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ff85 	bl	8001760 <_Z41__static_initialization_and_destruction_0ii>
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 8001858:	b490      	push	{r4, r7}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	ed87 0b00 	vstr	d0, [r7]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 800186a:	ec44 3b17 	vmov	d7, r3, r4
 800186e:	eeb0 0a47 	vmov.f32	s0, s14
 8001872:	eef0 0a67 	vmov.f32	s1, s15
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bc90      	pop	{r4, r7}
 800187c:	4770      	bx	lr
	...

08001880 <_Z18calcTimeJulianCentd>:

/*************************************************************/
/* Solar position calculation functions */
/*************************************************************/

double calcTimeJulianCent(double jd) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	ed87 0b00 	vstr	d0, [r7]
	double T = (jd - 2451545.0)/36525.0;
 800188a:	a30f      	add	r3, pc, #60	; (adr r3, 80018c8 <_Z18calcTimeJulianCentd+0x48>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001894:	f7fe fd10 	bl	80002b8 <__aeabi_dsub>
 8001898:	4603      	mov	r3, r0
 800189a:	460c      	mov	r4, r1
 800189c:	4618      	mov	r0, r3
 800189e:	4621      	mov	r1, r4
 80018a0:	a30b      	add	r3, pc, #44	; (adr r3, 80018d0 <_Z18calcTimeJulianCentd+0x50>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe ffe9 	bl	800087c <__aeabi_ddiv>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return T;
 80018b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80018b6:	ec44 3b17 	vmov	d7, r3, r4
}
 80018ba:	eeb0 0a47 	vmov.f32	s0, s14
 80018be:	eef0 0a67 	vmov.f32	s1, s15
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	80000000 	.word	0x80000000
 80018cc:	4142b42c 	.word	0x4142b42c
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40e1d5a0 	.word	0x40e1d5a0

080018d8 <_Z8radToDegd>:

	return doy;
}


double radToDeg(double angleRad) {
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	ed87 0b00 	vstr	d0, [r7]
	return (180.0 * angleRad / M_PI);
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <_Z8radToDegd+0x48>)
 80018e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ec:	f7fe fe9c 	bl	8000628 <__aeabi_dmul>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	4618      	mov	r0, r3
 80018f6:	4621      	mov	r1, r4
 80018f8:	a307      	add	r3, pc, #28	; (adr r3, 8001918 <_Z8radToDegd+0x40>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffbd 	bl	800087c <__aeabi_ddiv>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	ec44 3b17 	vmov	d7, r3, r4
}
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	eef0 0a67 	vmov.f32	s1, s15
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	54442d18 	.word	0x54442d18
 800191c:	400921fb 	.word	0x400921fb
 8001920:	40668000 	.word	0x40668000
 8001924:	00000000 	.word	0x00000000

08001928 <_Z8degToRadd>:

double degToRad(double angleDeg) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0b00 	vstr	d0, [r7]
	return (M_PI * angleDeg / 180.0);
 8001932:	a30e      	add	r3, pc, #56	; (adr r3, 800196c <_Z8degToRadd+0x44>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193c:	f7fe fe74 	bl	8000628 <__aeabi_dmul>
 8001940:	4603      	mov	r3, r0
 8001942:	460c      	mov	r4, r1
 8001944:	4618      	mov	r0, r3
 8001946:	4621      	mov	r1, r4
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <_Z8degToRadd+0x40>)
 800194e:	f7fe ff95 	bl	800087c <__aeabi_ddiv>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	ec44 3b17 	vmov	d7, r3, r4
}
 800195a:	eeb0 0a47 	vmov.f32	s0, s14
 800195e:	eef0 0a67 	vmov.f32	s1, s15
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	40668000 	.word	0x40668000
 800196c:	54442d18 	.word	0x54442d18
 8001970:	400921fb 	.word	0x400921fb
 8001974:	00000000 	.word	0x00000000

08001978 <_Z19calcGeomMeanLongSund>:

double calcGeomMeanLongSun(double t) {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0b00 	vstr	d0, [r7]
	double L0 = 280.46646 + t * (36000.76983 + t*(0.0003032));
 8001982:	a330      	add	r3, pc, #192	; (adr r3, 8001a44 <_Z19calcGeomMeanLongSund+0xcc>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800198c:	f7fe fe4c 	bl	8000628 <__aeabi_dmul>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	a32c      	add	r3, pc, #176	; (adr r3, 8001a4c <_Z19calcGeomMeanLongSund+0xd4>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fc8d 	bl	80002bc <__adddf3>
 80019a2:	4603      	mov	r3, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	4618      	mov	r0, r3
 80019a8:	4621      	mov	r1, r4
 80019aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ae:	f7fe fe3b 	bl	8000628 <__aeabi_dmul>
 80019b2:	4603      	mov	r3, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	4618      	mov	r0, r3
 80019b8:	4621      	mov	r1, r4
 80019ba:	a326      	add	r3, pc, #152	; (adr r3, 8001a54 <_Z19calcGeomMeanLongSund+0xdc>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fc7c 	bl	80002bc <__adddf3>
 80019c4:	4603      	mov	r3, r0
 80019c6:	460c      	mov	r4, r1
 80019c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(L0 > 360.0) {
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <_Z19calcGeomMeanLongSund+0xc8>)
 80019d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d6:	f7ff f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d100      	bne.n	80019e2 <_Z19calcGeomMeanLongSund+0x6a>
 80019e0:	e00b      	b.n	80019fa <_Z19calcGeomMeanLongSund+0x82>
		L0 -= 360.0;
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <_Z19calcGeomMeanLongSund+0xc8>)
 80019e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ec:	f7fe fc64 	bl	80002b8 <__aeabi_dsub>
 80019f0:	4603      	mov	r3, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(L0 > 360.0) {
 80019f8:	e7e8      	b.n	80019cc <_Z19calcGeomMeanLongSund+0x54>
	}
	while(L0 < 0.0) {
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a06:	f7ff f881 	bl	8000b0c <__aeabi_dcmplt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <_Z19calcGeomMeanLongSund+0xb0>
		L0 += 360.0;
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <_Z19calcGeomMeanLongSund+0xc8>)
 8001a16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a1a:	f7fe fc4f 	bl	80002bc <__adddf3>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while(L0 < 0.0) {
 8001a26:	e7e8      	b.n	80019fa <_Z19calcGeomMeanLongSund+0x82>
	}
	return L0;		// in degrees
 8001a28:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a2c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001a30:	eeb0 0a47 	vmov.f32	s0, s14
 8001a34:	eef0 0a67 	vmov.f32	s1, s15
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40768000 	.word	0x40768000
 8001a44:	158aabc0 	.word	0x158aabc0
 8001a48:	3f33deda 	.word	0x3f33deda
 8001a4c:	a272862f 	.word	0xa272862f
 8001a50:	40e19418 	.word	0x40e19418
 8001a54:	9ec2ce46 	.word	0x9ec2ce46
 8001a58:	40718776 	.word	0x40718776
 8001a5c:	00000000 	.word	0x00000000

08001a60 <_Z22calcGeomMeanAnomalySund>:

double calcGeomMeanAnomalySun(double t) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	ed87 0b00 	vstr	d0, [r7]
	double M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
 8001a6a:	a319      	add	r3, pc, #100	; (adr r3, 8001ad0 <_Z22calcGeomMeanAnomalySund+0x70>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a74:	f7fe fdd8 	bl	8000628 <__aeabi_dmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4623      	mov	r3, r4
 8001a80:	a115      	add	r1, pc, #84	; (adr r1, 8001ad8 <_Z22calcGeomMeanAnomalySund+0x78>)
 8001a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a86:	f7fe fc17 	bl	80002b8 <__aeabi_dsub>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a96:	f7fe fdc7 	bl	8000628 <__aeabi_dmul>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	a30f      	add	r3, pc, #60	; (adr r3, 8001ae0 <_Z22calcGeomMeanAnomalySund+0x80>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fc08 	bl	80002bc <__adddf3>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return M;		// in degrees
 8001ab4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ab8:	ec44 3b17 	vmov	d7, r3, r4
}
 8001abc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac0:	eef0 0a67 	vmov.f32	s1, s15
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	f260db0c 	.word	0xf260db0c
 8001ad4:	3f242550 	.word	0x3f242550
 8001ad8:	9bf9c62a 	.word	0x9bf9c62a
 8001adc:	40e193e1 	.word	0x40e193e1
 8001ae0:	3c0c1fc9 	.word	0x3c0c1fc9
 8001ae4:	40765877 	.word	0x40765877

08001ae8 <_Z26calcEccentricityEarthOrbitd>:

double calcEccentricityEarthOrbit(double t) {
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0b00 	vstr	d0, [r7]
	double e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
 8001af2:	a319      	add	r3, pc, #100	; (adr r3, 8001b58 <_Z26calcEccentricityEarthOrbitd+0x70>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001afc:	f7fe fd94 	bl	8000628 <__aeabi_dmul>
 8001b00:	4603      	mov	r3, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	4618      	mov	r0, r3
 8001b06:	4621      	mov	r1, r4
 8001b08:	a315      	add	r3, pc, #84	; (adr r3, 8001b60 <_Z26calcEccentricityEarthOrbitd+0x78>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fbd5 	bl	80002bc <__adddf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b1e:	f7fe fd83 	bl	8000628 <__aeabi_dmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	a10f      	add	r1, pc, #60	; (adr r1, 8001b68 <_Z26calcEccentricityEarthOrbitd+0x80>)
 8001b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b30:	f7fe fbc2 	bl	80002b8 <__aeabi_dsub>
 8001b34:	4603      	mov	r3, r0
 8001b36:	460c      	mov	r4, r1
 8001b38:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return e;		// unitless
 8001b3c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b40:	ec44 3b17 	vmov	d7, r3, r4
}
 8001b44:	eeb0 0a47 	vmov.f32	s0, s14
 8001b48:	eef0 0a67 	vmov.f32	s1, s15
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	f3af 8000 	nop.w
 8001b58:	fc64d800 	.word	0xfc64d800
 8001b5c:	3e810160 	.word	0x3e810160
 8001b60:	525fe303 	.word	0x525fe303
 8001b64:	3f060a1c 	.word	0x3f060a1c
 8001b68:	725d0380 	.word	0x725d0380
 8001b6c:	3f911c11 	.word	0x3f911c11

08001b70 <_Z17calcSunEqOfCenterd>:

double calcSunEqOfCenter(double t) {
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	ed87 0b00 	vstr	d0, [r7]
	double m = calcGeomMeanAnomalySun(t);
 8001b7a:	ed97 0b00 	vldr	d0, [r7]
 8001b7e:	f7ff ff6f 	bl	8001a60 <_Z22calcGeomMeanAnomalySund>
 8001b82:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	double mrad = degToRad(m);
 8001b86:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001b8a:	f7ff fecd 	bl	8001928 <_Z8degToRadd>
 8001b8e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double sinm = sin(mrad);
 8001b92:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001b96:	f003 fb3f 	bl	8005218 <sin>
 8001b9a:	ed87 0b08 	vstr	d0, [r7, #32]
	double sin2m = sin(mrad+mrad);
 8001b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	f7fe fb89 	bl	80002bc <__adddf3>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	ec44 3b17 	vmov	d7, r3, r4
 8001bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb6:	eef0 0a67 	vmov.f32	s1, s15
 8001bba:	f003 fb2d 	bl	8005218 <sin>
 8001bbe:	ed87 0b06 	vstr	d0, [r7, #24]
	double sin3m = sin(mrad+mrad+mrad);
 8001bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	f7fe fb77 	bl	80002bc <__adddf3>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bda:	f7fe fb6f 	bl	80002bc <__adddf3>
 8001bde:	4603      	mov	r3, r0
 8001be0:	460c      	mov	r4, r1
 8001be2:	ec44 3b17 	vmov	d7, r3, r4
 8001be6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bea:	eef0 0a67 	vmov.f32	s1, s15
 8001bee:	f003 fb13 	bl	8005218 <sin>
 8001bf2:	ed87 0b04 	vstr	d0, [r7, #16]
	double C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
 8001bf6:	a334      	add	r3, pc, #208	; (adr r3, 8001cc8 <_Z17calcSunEqOfCenterd+0x158>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c00:	f7fe fd12 	bl	8000628 <__aeabi_dmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	a330      	add	r3, pc, #192	; (adr r3, 8001cd0 <_Z17calcSunEqOfCenterd+0x160>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fb53 	bl	80002bc <__adddf3>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c22:	f7fe fd01 	bl	8000628 <__aeabi_dmul>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	a12a      	add	r1, pc, #168	; (adr r1, 8001cd8 <_Z17calcSunEqOfCenterd+0x168>)
 8001c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c34:	f7fe fb40 	bl	80002b8 <__aeabi_dsub>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4621      	mov	r1, r4
 8001c40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c44:	f7fe fcf0 	bl	8000628 <__aeabi_dmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	4625      	mov	r5, r4
 8001c4e:	461c      	mov	r4, r3
 8001c50:	a323      	add	r3, pc, #140	; (adr r3, 8001ce0 <_Z17calcSunEqOfCenterd+0x170>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c5a:	f7fe fce5 	bl	8000628 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	a121      	add	r1, pc, #132	; (adr r1, 8001ce8 <_Z17calcSunEqOfCenterd+0x178>)
 8001c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c68:	f7fe fb26 	bl	80002b8 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c78:	f7fe fcd6 	bl	8000628 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f7fe fb1a 	bl	80002bc <__adddf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	4625      	mov	r5, r4
 8001c8e:	461c      	mov	r4, r3
 8001c90:	a317      	add	r3, pc, #92	; (adr r3, 8001cf0 <_Z17calcSunEqOfCenterd+0x180>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c9a:	f7fe fcc5 	bl	8000628 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	f7fe fb09 	bl	80002bc <__adddf3>
 8001caa:	4603      	mov	r3, r0
 8001cac:	460c      	mov	r4, r1
 8001cae:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return C;		// in degrees
 8001cb2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001cb6:	ec44 3b17 	vmov	d7, r3, r4
}
 8001cba:	eeb0 0a47 	vmov.f32	s0, s14
 8001cbe:	eef0 0a67 	vmov.f32	s1, s15
 8001cc2:	3738      	adds	r7, #56	; 0x38
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc8:	593e5fb7 	.word	0x593e5fb7
 8001ccc:	3eed5c31 	.word	0x3eed5c31
 8001cd0:	976ff3ae 	.word	0x976ff3ae
 8001cd4:	3f73bafd 	.word	0x3f73bafd
 8001cd8:	b4edb2f6 	.word	0xb4edb2f6
 8001cdc:	3ffea235 	.word	0x3ffea235
 8001ce0:	c99f1ae3 	.word	0xc99f1ae3
 8001ce4:	3f1a79fe 	.word	0x3f1a79fe
 8001ce8:	84988095 	.word	0x84988095
 8001cec:	3f94790b 	.word	0x3f94790b
 8001cf0:	8c6d612c 	.word	0x8c6d612c
 8001cf4:	3f32f09d 	.word	0x3f32f09d

08001cf8 <_Z15calcSunTrueLongd>:

double calcSunTrueLong(double t) {
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	ed87 0b00 	vstr	d0, [r7]
	double l0 = calcGeomMeanLongSun(t);
 8001d02:	ed97 0b00 	vldr	d0, [r7]
 8001d06:	f7ff fe37 	bl	8001978 <_Z19calcGeomMeanLongSund>
 8001d0a:	ed87 0b06 	vstr	d0, [r7, #24]
	double c = calcSunEqOfCenter(t);
 8001d0e:	ed97 0b00 	vldr	d0, [r7]
 8001d12:	f7ff ff2d 	bl	8001b70 <_Z17calcSunEqOfCenterd>
 8001d16:	ed87 0b04 	vstr	d0, [r7, #16]
	double O = l0 + c;
 8001d1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d22:	f7fe facb 	bl	80002bc <__adddf3>
 8001d26:	4603      	mov	r3, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return O;		// in degrees
 8001d2e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d32:	ec44 3b17 	vmov	d7, r3, r4
}
 8001d36:	eeb0 0a47 	vmov.f32	s0, s14
 8001d3a:	eef0 0a67 	vmov.f32	s1, s15
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	0000      	movs	r0, r0
	...

08001d48 <_Z19calcSunApparentLongd>:
	double e = calcEccentricityEarthOrbit(t);
	double R = (1.000001018 * (1 - e * e)) / (1 + e * cos(degToRad(v)));
	return R;		// in AUs
}

double calcSunApparentLong(double t) {
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	ed87 0b00 	vstr	d0, [r7]
	double o = calcSunTrueLong(t);
 8001d52:	ed97 0b00 	vldr	d0, [r7]
 8001d56:	f7ff ffcf 	bl	8001cf8 <_Z15calcSunTrueLongd>
 8001d5a:	ed87 0b06 	vstr	d0, [r7, #24]
	double omega = 125.04 - 1934.136 * t;
 8001d5e:	a324      	add	r3, pc, #144	; (adr r3, 8001df0 <_Z19calcSunApparentLongd+0xa8>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d68:	f7fe fc5e 	bl	8000628 <__aeabi_dmul>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	461a      	mov	r2, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	a120      	add	r1, pc, #128	; (adr r1, 8001df8 <_Z19calcSunApparentLongd+0xb0>)
 8001d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d7a:	f7fe fa9d 	bl	80002b8 <__aeabi_dsub>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460c      	mov	r4, r1
 8001d82:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double lambda = o - 0.00569 - 0.00478 * sin(degToRad(omega));
 8001d86:	a31e      	add	r3, pc, #120	; (adr r3, 8001e00 <_Z19calcSunApparentLongd+0xb8>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d90:	f7fe fa92 	bl	80002b8 <__aeabi_dsub>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	4625      	mov	r5, r4
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001da0:	f7ff fdc2 	bl	8001928 <_Z8degToRadd>
 8001da4:	eeb0 7a40 	vmov.f32	s14, s0
 8001da8:	eef0 7a60 	vmov.f32	s15, s1
 8001dac:	eeb0 0a47 	vmov.f32	s0, s14
 8001db0:	eef0 0a67 	vmov.f32	s1, s15
 8001db4:	f003 fa30 	bl	8005218 <sin>
 8001db8:	ec51 0b10 	vmov	r0, r1, d0
 8001dbc:	a312      	add	r3, pc, #72	; (adr r3, 8001e08 <_Z19calcSunApparentLongd+0xc0>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fc31 	bl	8000628 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4629      	mov	r1, r5
 8001dce:	f7fe fa73 	bl	80002b8 <__aeabi_dsub>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return lambda;		// in degrees
 8001dda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001dde:	ec44 3b17 	vmov	d7, r3, r4
}
 8001de2:	eeb0 0a47 	vmov.f32	s0, s14
 8001de6:	eef0 0a67 	vmov.f32	s1, s15
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdb0      	pop	{r4, r5, r7, pc}
 8001df0:	43958106 	.word	0x43958106
 8001df4:	409e388b 	.word	0x409e388b
 8001df8:	5c28f5c3 	.word	0x5c28f5c3
 8001dfc:	405f428f 	.word	0x405f428f
 8001e00:	bea0ba1f 	.word	0xbea0ba1f
 8001e04:	3f774e65 	.word	0x3f774e65
 8001e08:	7acc4ef9 	.word	0x7acc4ef9
 8001e0c:	3f739431 	.word	0x3f739431

08001e10 <_Z27calcMeanObliquityOfEclipticd>:

double calcMeanObliquityOfEcliptic(double t) {
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	ed87 0b00 	vstr	d0, [r7]
	double seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
 8001e1a:	a336      	add	r3, pc, #216	; (adr r3, 8001ef4 <_Z27calcMeanObliquityOfEclipticd+0xe4>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e24:	f7fe fc00 	bl	8000628 <__aeabi_dmul>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4623      	mov	r3, r4
 8001e30:	a132      	add	r1, pc, #200	; (adr r1, 8001efc <_Z27calcMeanObliquityOfEclipticd+0xec>)
 8001e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e36:	f7fe fa3f 	bl	80002b8 <__aeabi_dsub>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4621      	mov	r1, r4
 8001e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e46:	f7fe fbef 	bl	8000628 <__aeabi_dmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4621      	mov	r1, r4
 8001e52:	a32c      	add	r3, pc, #176	; (adr r3, 8001f04 <_Z27calcMeanObliquityOfEclipticd+0xf4>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fa30 	bl	80002bc <__adddf3>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4618      	mov	r0, r3
 8001e62:	4621      	mov	r1, r4
 8001e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e68:	f7fe fbde 	bl	8000628 <__aeabi_dmul>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	460c      	mov	r4, r1
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	a125      	add	r1, pc, #148	; (adr r1, 8001f0c <_Z27calcMeanObliquityOfEclipticd+0xfc>)
 8001e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e7a:	f7fe fa1d 	bl	80002b8 <__aeabi_dsub>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <_Z27calcMeanObliquityOfEclipticd+0xd8>)
 8001e8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e90:	f7fe fcf4 	bl	800087c <__aeabi_ddiv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	460c      	mov	r4, r1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <_Z27calcMeanObliquityOfEclipticd+0xdc>)
 8001ea2:	f7fe fa0b 	bl	80002bc <__adddf3>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <_Z27calcMeanObliquityOfEclipticd+0xd8>)
 8001eb4:	f7fe fce2 	bl	800087c <__aeabi_ddiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <_Z27calcMeanObliquityOfEclipticd+0xe0>)
 8001ec6:	f7fe f9f9 	bl	80002bc <__adddf3>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return e0;		// in degrees
 8001ed2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ed6:	ec44 3b17 	vmov	d7, r3, r4
}
 8001eda:	eeb0 0a47 	vmov.f32	s0, s14
 8001ede:	eef0 0a67 	vmov.f32	s1, s15
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	404e0000 	.word	0x404e0000
 8001eec:	403a0000 	.word	0x403a0000
 8001ef0:	40370000 	.word	0x40370000
 8001ef4:	ed4a1ad6 	.word	0xed4a1ad6
 8001ef8:	3f5db445 	.word	0x3f5db445
 8001efc:	5a31a4be 	.word	0x5a31a4be
 8001f00:	3f435547 	.word	0x3f435547
 8001f04:	eb851eb8 	.word	0xeb851eb8
 8001f08:	40476851 	.word	0x40476851
 8001f0c:	20c49ba6 	.word	0x20c49ba6
 8001f10:	403572b0 	.word	0x403572b0
 8001f14:	00000000 	.word	0x00000000

08001f18 <_Z23calcObliquityCorrectiond>:

double calcObliquityCorrection(double t) {
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	ed87 0b00 	vstr	d0, [r7]
	double e0 = calcMeanObliquityOfEcliptic(t);
 8001f22:	ed97 0b00 	vldr	d0, [r7]
 8001f26:	f7ff ff73 	bl	8001e10 <_Z27calcMeanObliquityOfEclipticd>
 8001f2a:	ed87 0b06 	vstr	d0, [r7, #24]
	double omega = 125.04 - 1934.136 * t;
 8001f2e:	a320      	add	r3, pc, #128	; (adr r3, 8001fb0 <_Z23calcObliquityCorrectiond+0x98>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f38:	f7fe fb76 	bl	8000628 <__aeabi_dmul>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	461a      	mov	r2, r3
 8001f42:	4623      	mov	r3, r4
 8001f44:	a11c      	add	r1, pc, #112	; (adr r1, 8001fb8 <_Z23calcObliquityCorrectiond+0xa0>)
 8001f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f4a:	f7fe f9b5 	bl	80002b8 <__aeabi_dsub>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460c      	mov	r4, r1
 8001f52:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double e = e0 + 0.00256 * cos(degToRad(omega));
 8001f56:	ed97 0b04 	vldr	d0, [r7, #16]
 8001f5a:	f7ff fce5 	bl	8001928 <_Z8degToRadd>
 8001f5e:	eeb0 7a40 	vmov.f32	s14, s0
 8001f62:	eef0 7a60 	vmov.f32	s15, s1
 8001f66:	eeb0 0a47 	vmov.f32	s0, s14
 8001f6a:	eef0 0a67 	vmov.f32	s1, s15
 8001f6e:	f003 f88b 	bl	8005088 <cos>
 8001f72:	ec51 0b10 	vmov	r0, r1, d0
 8001f76:	a312      	add	r3, pc, #72	; (adr r3, 8001fc0 <_Z23calcObliquityCorrectiond+0xa8>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fb54 	bl	8000628 <__aeabi_dmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	461a      	mov	r2, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f8c:	f7fe f996 	bl	80002bc <__adddf3>
 8001f90:	4603      	mov	r3, r0
 8001f92:	460c      	mov	r4, r1
 8001f94:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return e;		// in degrees
 8001f98:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f9c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001fa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa4:	eef0 0a67 	vmov.f32	s1, s15
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	43958106 	.word	0x43958106
 8001fb4:	409e388b 	.word	0x409e388b
 8001fb8:	5c28f5c3 	.word	0x5c28f5c3
 8001fbc:	405f428f 	.word	0x405f428f
 8001fc0:	88e368f1 	.word	0x88e368f1
 8001fc4:	3f64f8b5 	.word	0x3f64f8b5

08001fc8 <_Z18calcSunDeclinationd>:
	double tanadenom = (cos(degToRad(lambda)));
	double alpha = radToDeg(atan2(tananum, tanadenom));
	return alpha;		// in degrees
}

double calcSunDeclination(double t) {
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	ed87 0b00 	vstr	d0, [r7]
	double e = calcObliquityCorrection(t);
 8001fd2:	ed97 0b00 	vldr	d0, [r7]
 8001fd6:	f7ff ff9f 	bl	8001f18 <_Z23calcObliquityCorrectiond>
 8001fda:	ed87 0b08 	vstr	d0, [r7, #32]
	double lambda = calcSunApparentLong(t);
 8001fde:	ed97 0b00 	vldr	d0, [r7]
 8001fe2:	f7ff feb1 	bl	8001d48 <_Z19calcSunApparentLongd>
 8001fe6:	ed87 0b06 	vstr	d0, [r7, #24]
	double sint = sin(degToRad(e)) * sin(degToRad(lambda));
 8001fea:	ed97 0b08 	vldr	d0, [r7, #32]
 8001fee:	f7ff fc9b 	bl	8001928 <_Z8degToRadd>
 8001ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ff6:	eef0 7a60 	vmov.f32	s15, s1
 8001ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffe:	eef0 0a67 	vmov.f32	s1, s15
 8002002:	f003 f909 	bl	8005218 <sin>
 8002006:	ec55 4b10 	vmov	r4, r5, d0
 800200a:	ed97 0b06 	vldr	d0, [r7, #24]
 800200e:	f7ff fc8b 	bl	8001928 <_Z8degToRadd>
 8002012:	eeb0 7a40 	vmov.f32	s14, s0
 8002016:	eef0 7a60 	vmov.f32	s15, s1
 800201a:	eeb0 0a47 	vmov.f32	s0, s14
 800201e:	eef0 0a67 	vmov.f32	s1, s15
 8002022:	f003 f8f9 	bl	8005218 <sin>
 8002026:	ec53 2b10 	vmov	r2, r3, d0
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe fafb 	bl	8000628 <__aeabi_dmul>
 8002032:	4603      	mov	r3, r0
 8002034:	460c      	mov	r4, r1
 8002036:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double theta = radToDeg(asin(sint));
 800203a:	ed97 0b04 	vldr	d0, [r7, #16]
 800203e:	f003 f9bb 	bl	80053b8 <asin>
 8002042:	eeb0 7a40 	vmov.f32	s14, s0
 8002046:	eef0 7a60 	vmov.f32	s15, s1
 800204a:	eeb0 0a47 	vmov.f32	s0, s14
 800204e:	eef0 0a67 	vmov.f32	s1, s15
 8002052:	f7ff fc41 	bl	80018d8 <_Z8radToDegd>
 8002056:	ed87 0b02 	vstr	d0, [r7, #8]
	return theta;		// in degrees
 800205a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800205e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002062:	eeb0 0a47 	vmov.f32	s0, s14
 8002066:	eef0 0a67 	vmov.f32	s1, s15
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}

08002070 <_Z18calcEquationOfTimed>:

double calcEquationOfTime(double t) {
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b098      	sub	sp, #96	; 0x60
 8002074:	af00      	add	r7, sp, #0
 8002076:	ed87 0b00 	vstr	d0, [r7]
	double epsilon = calcObliquityCorrection(t);
 800207a:	ed97 0b00 	vldr	d0, [r7]
 800207e:	f7ff ff4b 	bl	8001f18 <_Z23calcObliquityCorrectiond>
 8002082:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
	double l0 = calcGeomMeanLongSun(t);
 8002086:	ed97 0b00 	vldr	d0, [r7]
 800208a:	f7ff fc75 	bl	8001978 <_Z19calcGeomMeanLongSund>
 800208e:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
	double e = calcEccentricityEarthOrbit(t);
 8002092:	ed97 0b00 	vldr	d0, [r7]
 8002096:	f7ff fd27 	bl	8001ae8 <_Z26calcEccentricityEarthOrbitd>
 800209a:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	double m = calcGeomMeanAnomalySun(t);
 800209e:	ed97 0b00 	vldr	d0, [r7]
 80020a2:	f7ff fcdd 	bl	8001a60 <_Z22calcGeomMeanAnomalySund>
 80020a6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

	double y = tan(degToRad(epsilon)/2.0);
 80020aa:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80020ae:	f7ff fc3b 	bl	8001928 <_Z8degToRadd>
 80020b2:	ec51 0b10 	vmov	r0, r1, d0
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020be:	f7fe fbdd 	bl	800087c <__aeabi_ddiv>
 80020c2:	4603      	mov	r3, r0
 80020c4:	460c      	mov	r4, r1
 80020c6:	ec44 3b17 	vmov	d7, r3, r4
 80020ca:	eeb0 0a47 	vmov.f32	s0, s14
 80020ce:	eef0 0a67 	vmov.f32	s1, s15
 80020d2:	f003 f8e9 	bl	80052a8 <tan>
 80020d6:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	y *= y;
 80020da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020e2:	f7fe faa1 	bl	8000628 <__aeabi_dmul>
 80020e6:	4603      	mov	r3, r0
 80020e8:	460c      	mov	r4, r1
 80020ea:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	double sin2l0 = sin(2.0 * degToRad(l0));
 80020ee:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80020f2:	f7ff fc19 	bl	8001928 <_Z8degToRadd>
 80020f6:	ec51 0b10 	vmov	r0, r1, d0
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	f7fe f8dd 	bl	80002bc <__adddf3>
 8002102:	4603      	mov	r3, r0
 8002104:	460c      	mov	r4, r1
 8002106:	ec44 3b17 	vmov	d7, r3, r4
 800210a:	eeb0 0a47 	vmov.f32	s0, s14
 800210e:	eef0 0a67 	vmov.f32	s1, s15
 8002112:	f003 f881 	bl	8005218 <sin>
 8002116:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	double sinm   = sin(degToRad(m));
 800211a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800211e:	f7ff fc03 	bl	8001928 <_Z8degToRadd>
 8002122:	eeb0 7a40 	vmov.f32	s14, s0
 8002126:	eef0 7a60 	vmov.f32	s15, s1
 800212a:	eeb0 0a47 	vmov.f32	s0, s14
 800212e:	eef0 0a67 	vmov.f32	s1, s15
 8002132:	f003 f871 	bl	8005218 <sin>
 8002136:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double cos2l0 = cos(2.0 * degToRad(l0));
 800213a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800213e:	f7ff fbf3 	bl	8001928 <_Z8degToRadd>
 8002142:	ec51 0b10 	vmov	r0, r1, d0
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	f7fe f8b7 	bl	80002bc <__adddf3>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	ec44 3b17 	vmov	d7, r3, r4
 8002156:	eeb0 0a47 	vmov.f32	s0, s14
 800215a:	eef0 0a67 	vmov.f32	s1, s15
 800215e:	f002 ff93 	bl	8005088 <cos>
 8002162:	ed87 0b08 	vstr	d0, [r7, #32]
	double sin4l0 = sin(4.0 * degToRad(l0));
 8002166:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800216a:	f7ff fbdd 	bl	8001928 <_Z8degToRadd>
 800216e:	ec51 0b10 	vmov	r0, r1, d0
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b64      	ldr	r3, [pc, #400]	; (8002308 <_Z18calcEquationOfTimed+0x298>)
 8002178:	f7fe fa56 	bl	8000628 <__aeabi_dmul>
 800217c:	4603      	mov	r3, r0
 800217e:	460c      	mov	r4, r1
 8002180:	ec44 3b17 	vmov	d7, r3, r4
 8002184:	eeb0 0a47 	vmov.f32	s0, s14
 8002188:	eef0 0a67 	vmov.f32	s1, s15
 800218c:	f003 f844 	bl	8005218 <sin>
 8002190:	ed87 0b06 	vstr	d0, [r7, #24]
	double sin2m  = sin(2.0 * degToRad(m));
 8002194:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002198:	f7ff fbc6 	bl	8001928 <_Z8degToRadd>
 800219c:	ec51 0b10 	vmov	r0, r1, d0
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	f7fe f88a 	bl	80002bc <__adddf3>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	ec44 3b17 	vmov	d7, r3, r4
 80021b0:	eeb0 0a47 	vmov.f32	s0, s14
 80021b4:	eef0 0a67 	vmov.f32	s1, s15
 80021b8:	f003 f82e 	bl	8005218 <sin>
 80021bc:	ed87 0b04 	vstr	d0, [r7, #16]

	double Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0 - 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;
 80021c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021c8:	f7fe fa2e 	bl	8000628 <__aeabi_dmul>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	4625      	mov	r5, r4
 80021d2:	461c      	mov	r4, r3
 80021d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	f7fe f86e 	bl	80002bc <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ec:	f7fe fa1c 	bl	8000628 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4620      	mov	r0, r4
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fe f85e 	bl	80002b8 <__aeabi_dsub>
 80021fc:	4603      	mov	r3, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	4625      	mov	r5, r4
 8002202:	461c      	mov	r4, r3
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <_Z18calcEquationOfTimed+0x298>)
 800220a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800220e:	f7fe fa0b 	bl	8000628 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800221e:	f7fe fa03 	bl	8000628 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800222e:	f7fe f9fb 	bl	8000628 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	f7fe f837 	bl	80002bc <__adddf3>
 800224e:	4603      	mov	r3, r0
 8002250:	460c      	mov	r4, r1
 8002252:	4625      	mov	r5, r4
 8002254:	461c      	mov	r4, r3
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <_Z18calcEquationOfTimed+0x29c>)
 800225c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002260:	f7fe f9e2 	bl	8000628 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002270:	f7fe f9da 	bl	8000628 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002280:	f7fe f9d2 	bl	8000628 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4620      	mov	r0, r4
 800228a:	4629      	mov	r1, r5
 800228c:	f7fe f814 	bl	80002b8 <__aeabi_dsub>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	4625      	mov	r5, r4
 8002296:	461c      	mov	r4, r3
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <_Z18calcEquationOfTimed+0x2a0>)
 800229e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022a2:	f7fe f9c1 	bl	8000628 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022b2:	f7fe f9b9 	bl	8000628 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022c2:	f7fe f9b1 	bl	8000628 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fd fff3 	bl	80002b8 <__aeabi_dsub>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return radToDeg(Etime)*4.0;	// in minutes of time
 80022da:	ed97 0b02 	vldr	d0, [r7, #8]
 80022de:	f7ff fafb 	bl	80018d8 <_Z8radToDegd>
 80022e2:	ec51 0b10 	vmov	r0, r1, d0
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_Z18calcEquationOfTimed+0x298>)
 80022ec:	f7fe f99c 	bl	8000628 <__aeabi_dmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	ec44 3b17 	vmov	d7, r3, r4
}
 80022f8:	eeb0 0a47 	vmov.f32	s0, s14
 80022fc:	eef0 0a67 	vmov.f32	s1, s15
 8002300:	3760      	adds	r7, #96	; 0x60
 8002302:	46bd      	mov	sp, r7
 8002304:	bdb0      	pop	{r4, r5, r7, pc}
 8002306:	bf00      	nop
 8002308:	40100000 	.word	0x40100000
 800230c:	3fe00000 	.word	0x3fe00000
 8002310:	3ff40000 	.word	0x3ff40000

08002314 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe f919 	bl	8000554 <__aeabi_i2d>
 8002322:	4603      	mov	r3, r0
 8002324:	460c      	mov	r4, r1
 8002326:	ec44 3b17 	vmov	d7, r3, r4
 800232a:	eeb0 0a47 	vmov.f32	s0, s14
 800232e:	eef0 0a67 	vmov.f32	s1, s15
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bd90      	pop	{r4, r7, pc}

08002338 <_Z5getJDiid>:
	double HAarg = (cos(degToRad(90.833))/(cos(latRad)*cos(sdRad))-tan(latRad) * tan(sdRad));
	if(HAarg > 1 || HAarg < -1) return -1;
	else return acos(HAarg); // in radians (for sunset, use -HA)
}

double getJD(int year, int month, double day) {
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	ed87 0b00 	vstr	d0, [r7]
	if (month <= 2) {
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b02      	cmp	r3, #2
 800234a:	dc05      	bgt.n	8002358 <_Z5getJDiid+0x20>
		year -= 1;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3b01      	subs	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
		month += 12;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	330c      	adds	r3, #12
 8002356:	60bb      	str	r3, [r7, #8]
	}
	int A = floor(year/100);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <_Z5getJDiid+0x160>)
 800235c:	fb82 1203 	smull	r1, r2, r2, r3
 8002360:	1152      	asrs	r2, r2, #5
 8002362:	17db      	asrs	r3, r3, #31
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffd4 	bl	8002314 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800236c:	ec54 3b10 	vmov	r3, r4, d0
 8002370:	4618      	mov	r0, r3
 8002372:	4621      	mov	r1, r4
 8002374:	f7fe fc08 	bl	8000b88 <__aeabi_d2iz>
 8002378:	4603      	mov	r3, r0
 800237a:	61fb      	str	r3, [r7, #28]
	int B = 2 - A + floor(A/4);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0302 	rsb	r3, r3, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f8e6 	bl	8000554 <__aeabi_i2d>
 8002388:	4604      	mov	r4, r0
 800238a:	460d      	mov	r5, r1
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	da00      	bge.n	8002394 <_Z5getJDiid+0x5c>
 8002392:	3303      	adds	r3, #3
 8002394:	109b      	asrs	r3, r3, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ffbc 	bl	8002314 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800239c:	ec53 2b10 	vmov	r2, r3, d0
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fd ff8a 	bl	80002bc <__adddf3>
 80023a8:	4603      	mov	r3, r0
 80023aa:	460c      	mov	r4, r1
 80023ac:	4618      	mov	r0, r3
 80023ae:	4621      	mov	r1, r4
 80023b0:	f7fe fbea 	bl	8000b88 <__aeabi_d2iz>
 80023b4:	4603      	mov	r3, r0
 80023b6:	61bb      	str	r3, [r7, #24]
	double JD = floor(365.25*(year + 4716)) + floor(30.6001*(month+1)) + day + B - 1524.5;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80023be:	330c      	adds	r3, #12
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f8c7 	bl	8000554 <__aeabi_i2d>
 80023c6:	a32e      	add	r3, pc, #184	; (adr r3, 8002480 <_Z5getJDiid+0x148>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe f92c 	bl	8000628 <__aeabi_dmul>
 80023d0:	4603      	mov	r3, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	ec44 3b17 	vmov	d7, r3, r4
 80023d8:	eeb0 0a47 	vmov.f32	s0, s14
 80023dc:	eef0 0a67 	vmov.f32	s1, s15
 80023e0:	f002 fe96 	bl	8005110 <floor>
 80023e4:	ec56 5b10 	vmov	r5, r6, d0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8b1 	bl	8000554 <__aeabi_i2d>
 80023f2:	a325      	add	r3, pc, #148	; (adr r3, 8002488 <_Z5getJDiid+0x150>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f916 	bl	8000628 <__aeabi_dmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	ec44 3b17 	vmov	d7, r3, r4
 8002404:	eeb0 0a47 	vmov.f32	s0, s14
 8002408:	eef0 0a67 	vmov.f32	s1, s15
 800240c:	f002 fe80 	bl	8005110 <floor>
 8002410:	ec54 3b10 	vmov	r3, r4, d0
 8002414:	461a      	mov	r2, r3
 8002416:	4623      	mov	r3, r4
 8002418:	4628      	mov	r0, r5
 800241a:	4631      	mov	r1, r6
 800241c:	f7fd ff4e 	bl	80002bc <__adddf3>
 8002420:	4603      	mov	r3, r0
 8002422:	460c      	mov	r4, r1
 8002424:	4618      	mov	r0, r3
 8002426:	4621      	mov	r1, r4
 8002428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242c:	f7fd ff46 	bl	80002bc <__adddf3>
 8002430:	4603      	mov	r3, r0
 8002432:	460c      	mov	r4, r1
 8002434:	4625      	mov	r5, r4
 8002436:	461c      	mov	r4, r3
 8002438:	69b8      	ldr	r0, [r7, #24]
 800243a:	f7fe f88b 	bl	8000554 <__aeabi_i2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd ff39 	bl	80002bc <__adddf3>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	4618      	mov	r0, r3
 8002450:	4621      	mov	r1, r4
 8002452:	a30f      	add	r3, pc, #60	; (adr r3, 8002490 <_Z5getJDiid+0x158>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fd ff2e 	bl	80002b8 <__aeabi_dsub>
 800245c:	4603      	mov	r3, r0
 800245e:	460c      	mov	r4, r1
 8002460:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return JD;
 8002464:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002468:	ec44 3b17 	vmov	d7, r3, r4
}
 800246c:	eeb0 0a47 	vmov.f32	s0, s14
 8002470:	eef0 0a67 	vmov.f32	s1, s15
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	bf00      	nop
 800247c:	f3af 8000 	nop.w
 8002480:	00000000 	.word	0x00000000
 8002484:	4076d400 	.word	0x4076d400
 8002488:	27525461 	.word	0x27525461
 800248c:	403e99a0 	.word	0x403e99a0
 8002490:	00000000 	.word	0x00000000
 8002494:	4097d200 	.word	0x4097d200
 8002498:	51eb851f 	.word	0x51eb851f
 800249c:	00000000 	.word	0x00000000

080024a0 <_Z14calcRefractiond>:

double calcRefraction(double elev) {
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	ed87 0b00 	vstr	d0, [r7]
	double correction;
	if (elev > 85.0) {
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <_Z14calcRefractiond+0x258>)
 80024b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b4:	f7fe fb48 	bl	8000b48 <__aeabi_dcmpgt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <_Z14calcRefractiond+0x2c>
		correction = 0.0;
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	f04f 0400 	mov.w	r4, #0
 80024c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80024ca:	e0db      	b.n	8002684 <_Z14calcRefractiond+0x1e4>
	} else {
		double te = tan(degToRad(elev));
 80024cc:	ed97 0b00 	vldr	d0, [r7]
 80024d0:	f7ff fa2a 	bl	8001928 <_Z8degToRadd>
 80024d4:	eeb0 7a40 	vmov.f32	s14, s0
 80024d8:	eef0 7a60 	vmov.f32	s15, s1
 80024dc:	eeb0 0a47 	vmov.f32	s0, s14
 80024e0:	eef0 0a67 	vmov.f32	s1, s15
 80024e4:	f002 fee0 	bl	80052a8 <tan>
 80024e8:	ed87 0b02 	vstr	d0, [r7, #8]
		if (elev > 5.0) {
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	4b82      	ldr	r3, [pc, #520]	; (80026fc <_Z14calcRefractiond+0x25c>)
 80024f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f6:	f7fe fb27 	bl	8000b48 <__aeabi_dcmpgt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d059      	beq.n	80025b4 <_Z14calcRefractiond+0x114>
			correction = 58.1 / te - 0.07 / (te*te*te) + 0.000086 / (te*te*te*te*te);
 8002500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002504:	a166      	add	r1, pc, #408	; (adr r1, 80026a0 <_Z14calcRefractiond+0x200>)
 8002506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800250a:	f7fe f9b7 	bl	800087c <__aeabi_ddiv>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	4625      	mov	r5, r4
 8002514:	461c      	mov	r4, r3
 8002516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800251a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800251e:	f7fe f883 	bl	8000628 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800252e:	f7fe f87b 	bl	8000628 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	a15c      	add	r1, pc, #368	; (adr r1, 80026a8 <_Z14calcRefractiond+0x208>)
 8002538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800253c:	f7fe f99e 	bl	800087c <__aeabi_ddiv>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fd feb6 	bl	80002b8 <__aeabi_dsub>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	4625      	mov	r5, r4
 8002552:	461c      	mov	r4, r3
 8002554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002558:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800255c:	f7fe f864 	bl	8000628 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256c:	f7fe f85c 	bl	8000628 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800257c:	f7fe f854 	bl	8000628 <__aeabi_dmul>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800258c:	f7fe f84c 	bl	8000628 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	a146      	add	r1, pc, #280	; (adr r1, 80026b0 <_Z14calcRefractiond+0x210>)
 8002596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800259a:	f7fe f96f 	bl	800087c <__aeabi_ddiv>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4620      	mov	r0, r4
 80025a4:	4629      	mov	r1, r5
 80025a6:	f7fd fe89 	bl	80002bc <__adddf3>
 80025aa:	4603      	mov	r3, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80025b2:	e05c      	b.n	800266e <_Z14calcRefractiond+0x1ce>
		} else if (elev > -0.575) {
 80025b4:	a340      	add	r3, pc, #256	; (adr r3, 80026b8 <_Z14calcRefractiond+0x218>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025be:	f7fe fac3 	bl	8000b48 <__aeabi_dcmpgt>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d047      	beq.n	8002658 <_Z14calcRefractiond+0x1b8>
			correction = 1735.0 + elev * (-518.2 + elev * (103.4 + elev * (-12.79 + elev * 0.711) ) );
 80025c8:	a33d      	add	r3, pc, #244	; (adr r3, 80026c0 <_Z14calcRefractiond+0x220>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d2:	f7fe f829 	bl	8000628 <__aeabi_dmul>
 80025d6:	4603      	mov	r3, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	4618      	mov	r0, r3
 80025dc:	4621      	mov	r1, r4
 80025de:	a33a      	add	r3, pc, #232	; (adr r3, 80026c8 <_Z14calcRefractiond+0x228>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fd fe68 	bl	80002b8 <__aeabi_dsub>
 80025e8:	4603      	mov	r3, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	4618      	mov	r0, r3
 80025ee:	4621      	mov	r1, r4
 80025f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025f4:	f7fe f818 	bl	8000628 <__aeabi_dmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	4618      	mov	r0, r3
 80025fe:	4621      	mov	r1, r4
 8002600:	a333      	add	r3, pc, #204	; (adr r3, 80026d0 <_Z14calcRefractiond+0x230>)
 8002602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002606:	f7fd fe59 	bl	80002bc <__adddf3>
 800260a:	4603      	mov	r3, r0
 800260c:	460c      	mov	r4, r1
 800260e:	4618      	mov	r0, r3
 8002610:	4621      	mov	r1, r4
 8002612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002616:	f7fe f807 	bl	8000628 <__aeabi_dmul>
 800261a:	4603      	mov	r3, r0
 800261c:	460c      	mov	r4, r1
 800261e:	4618      	mov	r0, r3
 8002620:	4621      	mov	r1, r4
 8002622:	a32d      	add	r3, pc, #180	; (adr r3, 80026d8 <_Z14calcRefractiond+0x238>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	f7fd fe46 	bl	80002b8 <__aeabi_dsub>
 800262c:	4603      	mov	r3, r0
 800262e:	460c      	mov	r4, r1
 8002630:	4618      	mov	r0, r3
 8002632:	4621      	mov	r1, r4
 8002634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002638:	f7fd fff6 	bl	8000628 <__aeabi_dmul>
 800263c:	4603      	mov	r3, r0
 800263e:	460c      	mov	r4, r1
 8002640:	4618      	mov	r0, r3
 8002642:	4621      	mov	r1, r4
 8002644:	a326      	add	r3, pc, #152	; (adr r3, 80026e0 <_Z14calcRefractiond+0x240>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd fe37 	bl	80002bc <__adddf3>
 800264e:	4603      	mov	r3, r0
 8002650:	460c      	mov	r4, r1
 8002652:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002656:	e00a      	b.n	800266e <_Z14calcRefractiond+0x1ce>
		} else {
			correction = -20.774 / te;
 8002658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800265c:	a122      	add	r1, pc, #136	; (adr r1, 80026e8 <_Z14calcRefractiond+0x248>)
 800265e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002662:	f7fe f90b 	bl	800087c <__aeabi_ddiv>
 8002666:	4603      	mov	r3, r0
 8002668:	460c      	mov	r4, r1
 800266a:	e9c7 3404 	strd	r3, r4, [r7, #16]
		}
		correction = correction / 3600.0;
 800266e:	a320      	add	r3, pc, #128	; (adr r3, 80026f0 <_Z14calcRefractiond+0x250>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002678:	f7fe f900 	bl	800087c <__aeabi_ddiv>
 800267c:	4603      	mov	r3, r0
 800267e:	460c      	mov	r4, r1
 8002680:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}

	return correction;
 8002684:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002688:	ec44 3b17 	vmov	d7, r3, r4
}
 800268c:	eeb0 0a47 	vmov.f32	s0, s14
 8002690:	eef0 0a67 	vmov.f32	s1, s15
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bdb0      	pop	{r4, r5, r7, pc}
 800269a:	bf00      	nop
 800269c:	f3af 8000 	nop.w
 80026a0:	cccccccd 	.word	0xcccccccd
 80026a4:	404d0ccc 	.word	0x404d0ccc
 80026a8:	1eb851ec 	.word	0x1eb851ec
 80026ac:	3fb1eb85 	.word	0x3fb1eb85
 80026b0:	bff47736 	.word	0xbff47736
 80026b4:	3f168b5c 	.word	0x3f168b5c
 80026b8:	66666666 	.word	0x66666666
 80026bc:	bfe26666 	.word	0xbfe26666
 80026c0:	126e978d 	.word	0x126e978d
 80026c4:	3fe6c083 	.word	0x3fe6c083
 80026c8:	e147ae14 	.word	0xe147ae14
 80026cc:	4029947a 	.word	0x4029947a
 80026d0:	9999999a 	.word	0x9999999a
 80026d4:	4059d999 	.word	0x4059d999
 80026d8:	9999999a 	.word	0x9999999a
 80026dc:	40803199 	.word	0x40803199
 80026e0:	00000000 	.word	0x00000000
 80026e4:	409b1c00 	.word	0x409b1c00
 80026e8:	dd2f1aa0 	.word	0xdd2f1aa0
 80026ec:	c034c624 	.word	0xc034c624
 80026f0:	00000000 	.word	0x00000000
 80026f4:	40ac2000 	.word	0x40ac2000
 80026f8:	40554000 	.word	0x40554000
 80026fc:	40140000 	.word	0x40140000

08002700 <_Z8calcAzElddddd>:

AzEl calcAzEl(double T, double localtime, double latitude, double longitude, double zone) {
 8002700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002704:	b0b0      	sub	sp, #192	; 0xc0
 8002706:	af00      	add	r7, sp, #0
 8002708:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 800270c:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8002710:	ed87 2b08 	vstr	d2, [r7, #32]
 8002714:	ed87 3b06 	vstr	d3, [r7, #24]
 8002718:	ed87 4b04 	vstr	d4, [r7, #16]

	double eqTime = calcEquationOfTime(T);
 800271c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002720:	f7ff fca6 	bl	8002070 <_Z18calcEquationOfTimed>
 8002724:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
	double theta  = calcSunDeclination(T);
 8002728:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800272c:	f7ff fc4c 	bl	8001fc8 <_Z18calcSunDeclinationd>
 8002730:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88

	double solarTimeFix = eqTime + 4.0 * longitude - 60.0 * zone;
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	4b72      	ldr	r3, [pc, #456]	; (8002904 <_Z8calcAzElddddd+0x204>)
 800273a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800273e:	f7fd ff73 	bl	8000628 <__aeabi_dmul>
 8002742:	4603      	mov	r3, r0
 8002744:	460c      	mov	r4, r1
 8002746:	4618      	mov	r0, r3
 8002748:	4621      	mov	r1, r4
 800274a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800274e:	f7fd fdb5 	bl	80002bc <__adddf3>
 8002752:	4603      	mov	r3, r0
 8002754:	460c      	mov	r4, r1
 8002756:	4625      	mov	r5, r4
 8002758:	461c      	mov	r4, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <_Z8calcAzElddddd+0x208>)
 8002760:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002764:	f7fd ff60 	bl	8000628 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4620      	mov	r0, r4
 800276e:	4629      	mov	r1, r5
 8002770:	f7fd fda2 	bl	80002b8 <__aeabi_dsub>
 8002774:	4603      	mov	r3, r0
 8002776:	460c      	mov	r4, r1
 8002778:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	//double earthRadVec = calcSunRadVector(T);
	double trueSolarTime = localtime + solarTimeFix;
 800277c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002780:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002784:	f7fd fd9a 	bl	80002bc <__adddf3>
 8002788:	4603      	mov	r3, r0
 800278a:	460c      	mov	r4, r1
 800278c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	while (trueSolarTime > 1440) {
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	4b5d      	ldr	r3, [pc, #372]	; (800290c <_Z8calcAzElddddd+0x20c>)
 8002796:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800279a:	f7fe f9d5 	bl	8000b48 <__aeabi_dcmpgt>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <_Z8calcAzElddddd+0xbc>
		trueSolarTime -= 1440;
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	4b58      	ldr	r3, [pc, #352]	; (800290c <_Z8calcAzElddddd+0x20c>)
 80027aa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80027ae:	f7fd fd83 	bl	80002b8 <__aeabi_dsub>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	while (trueSolarTime > 1440) {
 80027ba:	e7e9      	b.n	8002790 <_Z8calcAzElddddd+0x90>
	}
	double hourAngle = trueSolarTime / 4.0 - 180.0;
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <_Z8calcAzElddddd+0x204>)
 80027c2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80027c6:	f7fe f859 	bl	800087c <__aeabi_ddiv>
 80027ca:	4603      	mov	r3, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	4618      	mov	r0, r3
 80027d0:	4621      	mov	r1, r4
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <_Z8calcAzElddddd+0x210>)
 80027d8:	f7fd fd6e 	bl	80002b8 <__aeabi_dsub>
 80027dc:	4603      	mov	r3, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	if (hourAngle < -180) {
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <_Z8calcAzElddddd+0x214>)
 80027ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027ee:	f7fe f98d 	bl	8000b0c <__aeabi_dcmplt>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <_Z8calcAzElddddd+0x10e>
		hourAngle += 360.0;
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	4b46      	ldr	r3, [pc, #280]	; (8002918 <_Z8calcAzElddddd+0x218>)
 80027fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002802:	f7fd fd5b 	bl	80002bc <__adddf3>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	}
	double haRad = degToRad(hourAngle);
 800280e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8002812:	f7ff f889 	bl	8001928 <_Z8degToRadd>
 8002816:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
	double csz = sin(degToRad(latitude)) * sin(degToRad(theta)) + cos(degToRad(latitude)) * cos(degToRad(theta)) * cos(haRad);
 800281a:	ed97 0b08 	vldr	d0, [r7, #32]
 800281e:	f7ff f883 	bl	8001928 <_Z8degToRadd>
 8002822:	eeb0 7a40 	vmov.f32	s14, s0
 8002826:	eef0 7a60 	vmov.f32	s15, s1
 800282a:	eeb0 0a47 	vmov.f32	s0, s14
 800282e:	eef0 0a67 	vmov.f32	s1, s15
 8002832:	f002 fcf1 	bl	8005218 <sin>
 8002836:	ec55 4b10 	vmov	r4, r5, d0
 800283a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800283e:	f7ff f873 	bl	8001928 <_Z8degToRadd>
 8002842:	eeb0 7a40 	vmov.f32	s14, s0
 8002846:	eef0 7a60 	vmov.f32	s15, s1
 800284a:	eeb0 0a47 	vmov.f32	s0, s14
 800284e:	eef0 0a67 	vmov.f32	s1, s15
 8002852:	f002 fce1 	bl	8005218 <sin>
 8002856:	ec53 2b10 	vmov	r2, r3, d0
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fd fee3 	bl	8000628 <__aeabi_dmul>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	4625      	mov	r5, r4
 8002868:	461c      	mov	r4, r3
 800286a:	ed97 0b08 	vldr	d0, [r7, #32]
 800286e:	f7ff f85b 	bl	8001928 <_Z8degToRadd>
 8002872:	eeb0 7a40 	vmov.f32	s14, s0
 8002876:	eef0 7a60 	vmov.f32	s15, s1
 800287a:	eeb0 0a47 	vmov.f32	s0, s14
 800287e:	eef0 0a67 	vmov.f32	s1, s15
 8002882:	f002 fc01 	bl	8005088 <cos>
 8002886:	ec59 8b10 	vmov	r8, r9, d0
 800288a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800288e:	f7ff f84b 	bl	8001928 <_Z8degToRadd>
 8002892:	eeb0 7a40 	vmov.f32	s14, s0
 8002896:	eef0 7a60 	vmov.f32	s15, s1
 800289a:	eeb0 0a47 	vmov.f32	s0, s14
 800289e:	eef0 0a67 	vmov.f32	s1, s15
 80028a2:	f002 fbf1 	bl	8005088 <cos>
 80028a6:	ec53 2b10 	vmov	r2, r3, d0
 80028aa:	4640      	mov	r0, r8
 80028ac:	4649      	mov	r1, r9
 80028ae:	f7fd febb 	bl	8000628 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 80028be:	f002 fbe3 	bl	8005088 <cos>
 80028c2:	ec53 2b10 	vmov	r2, r3, d0
 80028c6:	4640      	mov	r0, r8
 80028c8:	4649      	mov	r1, r9
 80028ca:	f7fd fead 	bl	8000628 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd fcf1 	bl	80002bc <__adddf3>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	if (csz > 1.0) {
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <_Z8calcAzElddddd+0x21c>)
 80028e8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80028ec:	f7fe f92c 	bl	8000b48 <__aeabi_dcmpgt>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d014      	beq.n	8002920 <_Z8calcAzElddddd+0x220>
		csz = 1.0;
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	4c08      	ldr	r4, [pc, #32]	; (800291c <_Z8calcAzElddddd+0x21c>)
 80028fc:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8002900:	e01d      	b.n	800293e <_Z8calcAzElddddd+0x23e>
 8002902:	bf00      	nop
 8002904:	40100000 	.word	0x40100000
 8002908:	404e0000 	.word	0x404e0000
 800290c:	40968000 	.word	0x40968000
 8002910:	40668000 	.word	0x40668000
 8002914:	c0668000 	.word	0xc0668000
 8002918:	40768000 	.word	0x40768000
 800291c:	3ff00000 	.word	0x3ff00000
	} else if (csz < -1.0) {
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	4bb8      	ldr	r3, [pc, #736]	; (8002c08 <_Z8calcAzElddddd+0x508>)
 8002926:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800292a:	f7fe f8ef 	bl	8000b0c <__aeabi_dcmplt>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <_Z8calcAzElddddd+0x23e>
		csz = -1.0;
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	4cb3      	ldr	r4, [pc, #716]	; (8002c08 <_Z8calcAzElddddd+0x508>)
 800293a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	}
	double zenith = radToDeg(acos(csz));
 800293e:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8002942:	f002 fce1 	bl	8005308 <acos>
 8002946:	eeb0 7a40 	vmov.f32	s14, s0
 800294a:	eef0 7a60 	vmov.f32	s15, s1
 800294e:	eeb0 0a47 	vmov.f32	s0, s14
 8002952:	eef0 0a67 	vmov.f32	s1, s15
 8002956:	f7fe ffbf 	bl	80018d8 <_Z8radToDegd>
 800295a:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
	double azDenom = ( cos(degToRad(latitude)) * sin(degToRad(zenith)) );
 800295e:	ed97 0b08 	vldr	d0, [r7, #32]
 8002962:	f7fe ffe1 	bl	8001928 <_Z8degToRadd>
 8002966:	eeb0 7a40 	vmov.f32	s14, s0
 800296a:	eef0 7a60 	vmov.f32	s15, s1
 800296e:	eeb0 0a47 	vmov.f32	s0, s14
 8002972:	eef0 0a67 	vmov.f32	s1, s15
 8002976:	f002 fb87 	bl	8005088 <cos>
 800297a:	ec55 4b10 	vmov	r4, r5, d0
 800297e:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 8002982:	f7fe ffd1 	bl	8001928 <_Z8degToRadd>
 8002986:	eeb0 7a40 	vmov.f32	s14, s0
 800298a:	eef0 7a60 	vmov.f32	s15, s1
 800298e:	eeb0 0a47 	vmov.f32	s0, s14
 8002992:	eef0 0a67 	vmov.f32	s1, s15
 8002996:	f002 fc3f 	bl	8005218 <sin>
 800299a:	ec53 2b10 	vmov	r2, r3, d0
 800299e:	4620      	mov	r0, r4
 80029a0:	4629      	mov	r1, r5
 80029a2:	f7fd fe41 	bl	8000628 <__aeabi_dmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	460c      	mov	r4, r1
 80029aa:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	double azimuth;
	if ( abs(azDenom) > 0.001) {
 80029ae:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 80029b2:	f7fe ff51 	bl	8001858 <_ZSt3absd>
 80029b6:	ec51 0b10 	vmov	r0, r1, d0
 80029ba:	2301      	movs	r3, #1
 80029bc:	461c      	mov	r4, r3
 80029be:	a390      	add	r3, pc, #576	; (adr r3, 8002c00 <_Z8calcAzElddddd+0x500>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fe f8c0 	bl	8000b48 <__aeabi_dcmpgt>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <_Z8calcAzElddddd+0x2d2>
 80029ce:	2300      	movs	r3, #0
 80029d0:	461c      	mov	r4, r3
 80029d2:	b2e3      	uxtb	r3, r4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a4 	beq.w	8002b22 <_Z8calcAzElddddd+0x422>
		double azRad = (( sin(degToRad(latitude)) * cos(degToRad(zenith)) ) - sin(degToRad(theta))) / azDenom;
 80029da:	ed97 0b08 	vldr	d0, [r7, #32]
 80029de:	f7fe ffa3 	bl	8001928 <_Z8degToRadd>
 80029e2:	eeb0 7a40 	vmov.f32	s14, s0
 80029e6:	eef0 7a60 	vmov.f32	s15, s1
 80029ea:	eeb0 0a47 	vmov.f32	s0, s14
 80029ee:	eef0 0a67 	vmov.f32	s1, s15
 80029f2:	f002 fc11 	bl	8005218 <sin>
 80029f6:	ec55 4b10 	vmov	r4, r5, d0
 80029fa:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 80029fe:	f7fe ff93 	bl	8001928 <_Z8degToRadd>
 8002a02:	eeb0 7a40 	vmov.f32	s14, s0
 8002a06:	eef0 7a60 	vmov.f32	s15, s1
 8002a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0e:	eef0 0a67 	vmov.f32	s1, s15
 8002a12:	f002 fb39 	bl	8005088 <cos>
 8002a16:	ec53 2b10 	vmov	r2, r3, d0
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f7fd fe03 	bl	8000628 <__aeabi_dmul>
 8002a22:	4603      	mov	r3, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	4625      	mov	r5, r4
 8002a28:	461c      	mov	r4, r3
 8002a2a:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8002a2e:	f7fe ff7b 	bl	8001928 <_Z8degToRadd>
 8002a32:	eeb0 7a40 	vmov.f32	s14, s0
 8002a36:	eef0 7a60 	vmov.f32	s15, s1
 8002a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a3e:	eef0 0a67 	vmov.f32	s1, s15
 8002a42:	f002 fbe9 	bl	8005218 <sin>
 8002a46:	ec53 2b10 	vmov	r2, r3, d0
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f7fd fc33 	bl	80002b8 <__aeabi_dsub>
 8002a52:	4603      	mov	r3, r0
 8002a54:	460c      	mov	r4, r1
 8002a56:	4618      	mov	r0, r3
 8002a58:	4621      	mov	r1, r4
 8002a5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a5e:	f7fd ff0d 	bl	800087c <__aeabi_ddiv>
 8002a62:	4603      	mov	r3, r0
 8002a64:	460c      	mov	r4, r1
 8002a66:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		if (abs(azRad) > 1.0) {
 8002a6a:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 8002a6e:	f7fe fef3 	bl	8001858 <_ZSt3absd>
 8002a72:	ec51 0b10 	vmov	r0, r1, d0
 8002a76:	2301      	movs	r3, #1
 8002a78:	461c      	mov	r4, r3
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <_Z8calcAzElddddd+0x50c>)
 8002a80:	f7fe f862 	bl	8000b48 <__aeabi_dcmpgt>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <_Z8calcAzElddddd+0x38e>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	461c      	mov	r4, r3
 8002a8e:	b2e3      	uxtb	r3, r4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <_Z8calcAzElddddd+0x3c0>
			if (azRad < 0) {
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002aa0:	f7fe f834 	bl	8000b0c <__aeabi_dcmplt>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <_Z8calcAzElddddd+0x3b6>
				azRad = -1.0;
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	4c56      	ldr	r4, [pc, #344]	; (8002c08 <_Z8calcAzElddddd+0x508>)
 8002ab0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8002ab4:	e004      	b.n	8002ac0 <_Z8calcAzElddddd+0x3c0>
			} else {
				azRad = 1.0;
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	4c54      	ldr	r4, [pc, #336]	; (8002c0c <_Z8calcAzElddddd+0x50c>)
 8002abc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			}
		}
		azimuth = 180.0 - radToDeg(acos(azRad));
 8002ac0:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 8002ac4:	f002 fc20 	bl	8005308 <acos>
 8002ac8:	eeb0 7a40 	vmov.f32	s14, s0
 8002acc:	eef0 7a60 	vmov.f32	s15, s1
 8002ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ad4:	eef0 0a67 	vmov.f32	s1, s15
 8002ad8:	f7fe fefe 	bl	80018d8 <_Z8radToDegd>
 8002adc:	ec54 3b10 	vmov	r3, r4, d0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	f04f 0000 	mov.w	r0, #0
 8002ae8:	4949      	ldr	r1, [pc, #292]	; (8002c10 <_Z8calcAzElddddd+0x510>)
 8002aea:	f7fd fbe5 	bl	80002b8 <__aeabi_dsub>
 8002aee:	4603      	mov	r3, r0
 8002af0:	460c      	mov	r4, r1
 8002af2:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		if (hourAngle > 0.0) {
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b02:	f7fe f821 	bl	8000b48 <__aeabi_dcmpgt>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <_Z8calcAzElddddd+0x450>
			azimuth = -azimuth;
 8002b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002b20:	e016      	b.n	8002b50 <_Z8calcAzElddddd+0x450>
		}
	} else {
		if (latitude > 0.0) {
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b2e:	f7fe f80b 	bl	8000b48 <__aeabi_dcmpgt>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <_Z8calcAzElddddd+0x444>
			azimuth = 180.0;
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	4c34      	ldr	r4, [pc, #208]	; (8002c10 <_Z8calcAzElddddd+0x510>)
 8002b3e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8002b42:	e005      	b.n	8002b50 <_Z8calcAzElddddd+0x450>
		} else {
			azimuth = 0.0;
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	f04f 0400 	mov.w	r4, #0
 8002b4c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		}
	}
	if (azimuth < 0.0) {
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002b5c:	f7fd ffd6 	bl	8000b0c <__aeabi_dcmplt>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <_Z8calcAzElddddd+0x47c>
		azimuth += 360.0;
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <_Z8calcAzElddddd+0x514>)
 8002b6c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002b70:	f7fd fba4 	bl	80002bc <__adddf3>
 8002b74:	4603      	mov	r3, r0
 8002b76:	460c      	mov	r4, r1
 8002b78:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	}
	double exoatmElevation = 90.0 - zenith;
 8002b7c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b80:	f04f 0000 	mov.w	r0, #0
 8002b84:	4924      	ldr	r1, [pc, #144]	; (8002c18 <_Z8calcAzElddddd+0x518>)
 8002b86:	f7fd fb97 	bl	80002b8 <__aeabi_dsub>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	// Atmospheric Refraction correction
	double refractionCorrection = calcRefraction(exoatmElevation);
 8002b92:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8002b96:	f7ff fc83 	bl	80024a0 <_Z14calcRefractiond>
 8002b9a:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58

	double solarZen = zenith - refractionCorrection;
 8002b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ba2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002ba6:	f7fd fb87 	bl	80002b8 <__aeabi_dsub>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double elevation = 90.0 - solarZen;
 8002bb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	4917      	ldr	r1, [pc, #92]	; (8002c18 <_Z8calcAzElddddd+0x518>)
 8002bbc:	f7fd fb7c 	bl	80002b8 <__aeabi_dsub>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	return AzEl{azimuth, elevation};
 8002bc8:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002bcc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8002bd0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002bd4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8002bd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002bdc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002be0:	ec42 1b16 	vmov	d6, r1, r2
 8002be4:	ec44 3b17 	vmov	d7, r3, r4
}
 8002be8:	eeb0 0a46 	vmov.f32	s0, s12
 8002bec:	eef0 0a66 	vmov.f32	s1, s13
 8002bf0:	eeb0 1a47 	vmov.f32	s2, s14
 8002bf4:	eef0 1a67 	vmov.f32	s3, s15
 8002bf8:	37c0      	adds	r7, #192	; 0xc0
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c04:	3f50624d 	.word	0x3f50624d
 8002c08:	bff00000 	.word	0xbff00000
 8002c0c:	3ff00000 	.word	0x3ff00000
 8002c10:	40668000 	.word	0x40668000
 8002c14:	40768000 	.word	0x40768000
 8002c18:	40568000 	.word	0x40568000

08002c1c <_Z14calculateSolar2tm3Geo>:

//--------------------------------------------------------------
// Do the calculations and update the result text boxes


AzEl calculateSolar(tm tms, Geo geo) {
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	b5b0      	push	{r4, r5, r7, lr}
 8002c20:	b096      	sub	sp, #88	; 0x58
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c2c:	eeb0 5a40 	vmov.f32	s10, s0
 8002c30:	eef0 5a60 	vmov.f32	s11, s1
 8002c34:	eeb0 6a41 	vmov.f32	s12, s2
 8002c38:	eef0 6a61 	vmov.f32	s13, s3
 8002c3c:	eeb0 7a42 	vmov.f32	s14, s4
 8002c40:	eef0 7a62 	vmov.f32	s15, s5
 8002c44:	ed87 5b04 	vstr	d5, [r7, #16]
 8002c48:	ed87 6b06 	vstr	d6, [r7, #24]
 8002c4c:	ed87 7b08 	vstr	d7, [r7, #32]

	double time_local =  tms.tm_hour*60 + tms.tm_min + tms.tm_sec/60.0; //local time in minutes
 8002c50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	4413      	add	r3, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fc77 	bl	8000554 <__aeabi_i2d>
 8002c66:	4604      	mov	r4, r0
 8002c68:	460d      	mov	r5, r1
 8002c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fc71 	bl	8000554 <__aeabi_i2d>
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <_Z14calculateSolar2tm3Geo+0x164>)
 8002c78:	f7fd fe00 	bl	800087c <__aeabi_ddiv>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4620      	mov	r0, r4
 8002c82:	4629      	mov	r1, r5
 8002c84:	f7fd fb1a 	bl	80002bc <__adddf3>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	double jday = getJD(tms.tm_year+1900, tms.tm_mon+1, tms.tm_mday);
 8002c90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c92:	f203 746c 	addw	r4, r3, #1900	; 0x76c
 8002c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c98:	1c5d      	adds	r5, r3, #1
 8002c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fc59 	bl	8000554 <__aeabi_i2d>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	ec43 2b10 	vmov	d0, r2, r3
 8002caa:	4629      	mov	r1, r5
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7ff fb43 	bl	8002338 <_Z5getJDiid>
 8002cb2:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	double total = jday + time_local/1440.0 - geo.tz/24.0;
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <_Z14calculateSolar2tm3Geo+0x168>)
 8002cbc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002cc0:	f7fd fddc 	bl	800087c <__aeabi_ddiv>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	4621      	mov	r1, r4
 8002ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cd0:	f7fd faf4 	bl	80002bc <__adddf3>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	4625      	mov	r5, r4
 8002cda:	461c      	mov	r4, r3
 8002cdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <_Z14calculateSolar2tm3Geo+0x16c>)
 8002ce6:	f7fd fdc9 	bl	800087c <__aeabi_ddiv>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd fae1 	bl	80002b8 <__aeabi_dsub>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	460c      	mov	r4, r1
 8002cfa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	double T = calcTimeJulianCent(total);
 8002cfe:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002d02:	f7fe fdbd 	bl	8001880 <_Z18calcTimeJulianCentd>
 8002d06:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	return calcAzEl(T, time_local, geo.lat, geo.lon, geo.tz);
 8002d0a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d0e:	ed97 6b08 	vldr	d6, [r7, #32]
 8002d12:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d16:	eeb0 4a45 	vmov.f32	s8, s10
 8002d1a:	eef0 4a65 	vmov.f32	s9, s11
 8002d1e:	eeb0 3a46 	vmov.f32	s6, s12
 8002d22:	eef0 3a66 	vmov.f32	s7, s13
 8002d26:	eeb0 2a47 	vmov.f32	s4, s14
 8002d2a:	eef0 2a67 	vmov.f32	s5, s15
 8002d2e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002d32:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002d36:	f7ff fce3 	bl	8002700 <_Z8calcAzElddddd>
 8002d3a:	eeb0 6a40 	vmov.f32	s12, s0
 8002d3e:	eef0 6a60 	vmov.f32	s13, s1
 8002d42:	eeb0 7a41 	vmov.f32	s14, s2
 8002d46:	eef0 7a61 	vmov.f32	s15, s3
 8002d4a:	ed87 6b0a 	vstr	d6, [r7, #40]	; 0x28
 8002d4e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 8002d52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002d56:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002d5a:	ec42 1b16 	vmov	d6, r1, r2
 8002d5e:	ec44 3b17 	vmov	d7, r3, r4
	//SunRiseSet rise = calcSunriseSet(1, jday, geo.lat, geo.lon, geo.tz);
	//SunRiseSet set  = calcSunriseSet(0, jday, geo.lat, geo.lon, geo.tz);

	//double eqTime = calcEquationOfTime(T);
	//double theta  = calcSunDeclination(T);
}
 8002d62:	eeb0 0a46 	vmov.f32	s0, s12
 8002d66:	eef0 0a66 	vmov.f32	s1, s13
 8002d6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002d6e:	eef0 1a67 	vmov.f32	s3, s15
 8002d72:	3758      	adds	r7, #88	; 0x58
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002d7a:	b004      	add	sp, #16
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	404e0000 	.word	0x404e0000
 8002d84:	40968000 	.word	0x40968000
 8002d88:	40380000 	.word	0x40380000

08002d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d90:	f000 fb9c 	bl	80034cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d94:	f000 f818 	bl	8002dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d98:	f000 f97e 	bl	8003098 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002d9c:	f000 f8dc 	bl	8002f58 <MX_TIM1_Init>
  MX_RTC_Init();
 8002da0:	f000 f896 	bl	8002ed0 <MX_RTC_Init>
  MX_TIM2_Init();
 8002da4:	f000 f92a 	bl	8002ffc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1); //enable steppers
 8002da8:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <main+0x34>)
 8002daa:	f001 fdc0 	bl	800492e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); //enable steppers
 8002dae:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <main+0x38>)
 8002db0:	f001 fdbd 	bl	800492e <HAL_TIM_Base_Start_IT>
  mainsetup();
 8002db4:	f7fe fb76 	bl	80014a4 <mainsetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainloop();
 8002db8:	f7fe fc0e 	bl	80015d8 <mainloop>
 8002dbc:	e7fc      	b.n	8002db8 <main+0x2c>
 8002dbe:	bf00      	nop
 8002dc0:	20000264 	.word	0x20000264
 8002dc4:	200002a4 	.word	0x200002a4

08002dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b098      	sub	sp, #96	; 0x60
 8002dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dd2:	2230      	movs	r2, #48	; 0x30
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 fb2a 	bl	8007430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dec:	f107 0308 	add.w	r3, r7, #8
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <SystemClock_Config+0x100>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <SystemClock_Config+0x100>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <SystemClock_Config+0x100>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <SystemClock_Config+0x104>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <SystemClock_Config+0x104>)
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <SystemClock_Config+0x104>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002e38:	2306      	movs	r3, #6
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e40:	2301      	movs	r3, #1
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e44:	2310      	movs	r3, #16
 8002e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002e54:	2354      	movs	r3, #84	; 0x54
 8002e56:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fe6b 	bl	8003b40 <HAL_RCC_OscConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002e70:	f000 f9f2 	bl	8003258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e74:	230f      	movs	r3, #15
 8002e76:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e8a:	f107 031c 	add.w	r3, r7, #28
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 f8c5 	bl	8004020 <HAL_RCC_ClockConfig>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002e9c:	f000 f9dc 	bl	8003258 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 fa74 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002eba:	f000 f9cd 	bl	8003258 <Error_Handler>
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3760      	adds	r7, #96	; 0x60
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <MX_RTC_Init+0x80>)
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <MX_RTC_Init+0x84>)
 8002eec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <MX_RTC_Init+0x80>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <MX_RTC_Init+0x80>)
 8002ef6:	227f      	movs	r2, #127	; 0x7f
 8002ef8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <MX_RTC_Init+0x80>)
 8002efc:	22ff      	movs	r2, #255	; 0xff
 8002efe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <MX_RTC_Init+0x80>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <MX_RTC_Init+0x80>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <MX_RTC_Init+0x80>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f12:	480f      	ldr	r0, [pc, #60]	; (8002f50 <MX_RTC_Init+0x80>)
 8002f14:	f001 fb30 	bl	8004578 <HAL_RTC_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002f1e:	f000 f99b 	bl	8003258 <Error_Handler>
  	  //set to gmt time
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8002f22:	230f      	movs	r3, #15
 8002f24:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 22;
 8002f26:	2316      	movs	r3, #22
 8002f28:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 55;
 8002f2a:	2337      	movs	r3, #55	; 0x37
 8002f2c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002f36:	2306      	movs	r3, #6
 8002f38:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8002f3e:	2306      	movs	r3, #6
 8002f40:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8002f42:	2315      	movs	r3, #21
 8002f44:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN RTC_Init 2 */
  //HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
  //HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
  /* USER CODE END RTC_Init 2 */

}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200002e4 	.word	0x200002e4
 8002f54:	40002800 	.word	0x40002800

08002f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002f76:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <MX_TIM1_Init+0xa0>)
 8002f78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1282;
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002f7c:	f240 5202 	movw	r2, #1282	; 0x502
 8002f80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002f84:	2210      	movs	r2, #16
 8002f86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fa2:	4814      	ldr	r0, [pc, #80]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002fa4:	f001 fc98 	bl	80048d8 <HAL_TIM_Base_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002fae:	f000 f953 	bl	8003258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002fc0:	f001 fde1 	bl	8004b86 <HAL_TIM_ConfigClockSource>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002fca:	f000 f945 	bl	8003258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <MX_TIM1_Init+0x9c>)
 8002fdc:	f001 ffcc 	bl	8004f78 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002fe6:	f000 f937 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000264 	.word	0x20000264
 8002ff8:	40010000 	.word	0x40010000

08002ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003002:	f107 0308 	add.w	r3, r7, #8
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003010:	463b      	mov	r3, r7
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <MX_TIM2_Init+0x98>)
 800301a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800301e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1282;
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <MX_TIM2_Init+0x98>)
 8003022:	f240 5202 	movw	r2, #1282	; 0x502
 8003026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <MX_TIM2_Init+0x98>)
 800302a:	2210      	movs	r2, #16
 800302c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <MX_TIM2_Init+0x98>)
 8003030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <MX_TIM2_Init+0x98>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800303c:	4b15      	ldr	r3, [pc, #84]	; (8003094 <MX_TIM2_Init+0x98>)
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003042:	4814      	ldr	r0, [pc, #80]	; (8003094 <MX_TIM2_Init+0x98>)
 8003044:	f001 fc48 	bl	80048d8 <HAL_TIM_Base_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800304e:	f000 f903 	bl	8003258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003056:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	4619      	mov	r1, r3
 800305e:	480d      	ldr	r0, [pc, #52]	; (8003094 <MX_TIM2_Init+0x98>)
 8003060:	f001 fd91 	bl	8004b86 <HAL_TIM_ConfigClockSource>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800306a:	f000 f8f5 	bl	8003258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003076:	463b      	mov	r3, r7
 8003078:	4619      	mov	r1, r3
 800307a:	4806      	ldr	r0, [pc, #24]	; (8003094 <MX_TIM2_Init+0x98>)
 800307c:	f001 ff7c 	bl	8004f78 <HAL_TIMEx_MasterConfigSynchronization>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003086:	f000 f8e7 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200002a4 	.word	0x200002a4

08003098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b64      	ldr	r3, [pc, #400]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a63      	ldr	r2, [pc, #396]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b5d      	ldr	r3, [pc, #372]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a5c      	ldr	r2, [pc, #368]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b56      	ldr	r3, [pc, #344]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a55      	ldr	r2, [pc, #340]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <MX_GPIO_Init+0x1ac>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <MX_GPIO_Init+0x1ac>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <MX_GPIO_Init+0x1ac>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <MX_GPIO_Init+0x1ac>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AzEna_Pin|AzDir_Pin, GPIO_PIN_RESET);
 800311e:	2200      	movs	r2, #0
 8003120:	2103      	movs	r1, #3
 8003122:	4849      	ldr	r0, [pc, #292]	; (8003248 <MX_GPIO_Init+0x1b0>)
 8003124:	f000 fcd8 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ElPul_Pin|ElDir_Pin|ElEna_Pin, GPIO_PIN_RESET);
 8003128:	2200      	movs	r2, #0
 800312a:	2113      	movs	r1, #19
 800312c:	4847      	ldr	r0, [pc, #284]	; (800324c <MX_GPIO_Init+0x1b4>)
 800312e:	f000 fcd3 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AzPul_GPIO_Port, AzPul_Pin, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
 8003134:	2101      	movs	r1, #1
 8003136:	4846      	ldr	r0, [pc, #280]	; (8003250 <MX_GPIO_Init+0x1b8>)
 8003138:	f000 fcce 	bl	8003ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800313c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003142:	4b44      	ldr	r3, [pc, #272]	; (8003254 <MX_GPIO_Init+0x1bc>)
 8003144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	483d      	ldr	r0, [pc, #244]	; (8003248 <MX_GPIO_Init+0x1b0>)
 8003152:	f000 fb3f 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AzEna_Pin AzDir_Pin */
  GPIO_InitStruct.Pin = AzEna_Pin|AzDir_Pin;
 8003156:	2303      	movs	r3, #3
 8003158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315a:	2301      	movs	r3, #1
 800315c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4619      	mov	r1, r3
 800316c:	4836      	ldr	r0, [pc, #216]	; (8003248 <MX_GPIO_Init+0x1b0>)
 800316e:	f000 fb31 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ElPul_Pin ElDir_Pin ElEna_Pin */
  GPIO_InitStruct.Pin = ElPul_Pin|ElDir_Pin|ElEna_Pin;
 8003172:	2313      	movs	r3, #19
 8003174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003176:	2301      	movs	r3, #1
 8003178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	4830      	ldr	r0, [pc, #192]	; (800324c <MX_GPIO_Init+0x1b4>)
 800318a:	f000 fb23 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ElYellow_Pin ElGreen_Pin ElPurple_Pin ElWhite_Pin
                           ElGrey_Pin AzGreen_Pin AzYellow_Pin */
  GPIO_InitStruct.Pin = ElYellow_Pin|ElGreen_Pin|ElPurple_Pin|ElWhite_Pin
 800318e:	f44f 53df 	mov.w	r3, #7136	; 0x1be0
 8003192:	617b      	str	r3, [r7, #20]
                          |ElGrey_Pin|AzGreen_Pin|AzYellow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003198:	2301      	movs	r3, #1
 800319a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4619      	mov	r1, r3
 80031a2:	482a      	ldr	r0, [pc, #168]	; (800324c <MX_GPIO_Init+0x1b4>)
 80031a4:	f000 fb16 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AzOrange_Pin AzRed_Pin AzBlack_Pin ElBlack_Pin */
  GPIO_InitStruct.Pin = AzOrange_Pin|AzRed_Pin|AzBlack_Pin|ElBlack_Pin;
 80031a8:	f44f 7358 	mov.w	r3, #864	; 0x360
 80031ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	4822      	ldr	r0, [pc, #136]	; (8003248 <MX_GPIO_Init+0x1b0>)
 80031be:	f000 fb09 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AzPul_Pin */
  GPIO_InitStruct.Pin = AzPul_Pin;
 80031c2:	2301      	movs	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AzPul_GPIO_Port, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	481d      	ldr	r0, [pc, #116]	; (8003250 <MX_GPIO_Init+0x1b8>)
 80031da:	f000 fafb 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AzWhite_Pin AzGrey_Pin AzPurple_Pin AzRedWhite_Pin
                           AzBlackWhite_Pin ElBlackWhite_Pin ElRedWhite_Pin ElRed_Pin
                           ElOrange_Pin */
  GPIO_InitStruct.Pin = AzWhite_Pin|AzGrey_Pin|AzPurple_Pin|AzRedWhite_Pin
 80031de:	f247 3336 	movw	r3, #29494	; 0x7336
 80031e2:	617b      	str	r3, [r7, #20]
                          |AzBlackWhite_Pin|ElBlackWhite_Pin|ElRedWhite_Pin|ElRed_Pin
                          |ElOrange_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e8:	2301      	movs	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	4817      	ldr	r0, [pc, #92]	; (8003250 <MX_GPIO_Init+0x1b8>)
 80031f4:	f000 faee 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SCL_D6_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_D6_Pin;
 80031f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031fe:	2312      	movs	r3, #18
 8003200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003202:	2301      	movs	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800320a:	2304      	movs	r3, #4
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2C2_SCL_D6_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	480e      	ldr	r0, [pc, #56]	; (8003250 <MX_GPIO_Init+0x1b8>)
 8003216:	f000 fadd 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SDA_D3_Pin */
  GPIO_InitStruct.Pin = I2C2_SDA_D3_Pin;
 800321a:	2308      	movs	r3, #8
 800321c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800321e:	2312      	movs	r3, #18
 8003220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003222:	2301      	movs	r3, #1
 8003224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800322a:	2309      	movs	r3, #9
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2C2_SDA_D3_GPIO_Port, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4806      	ldr	r0, [pc, #24]	; (8003250 <MX_GPIO_Init+0x1b8>)
 8003236:	f000 facd 	bl	80037d4 <HAL_GPIO_Init>

}
 800323a:	bf00      	nop
 800323c:	3728      	adds	r7, #40	; 0x28
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	40020800 	.word	0x40020800
 800324c:	40020000 	.word	0x40020000
 8003250:	40020400 	.word	0x40020400
 8003254:	10210000 	.word	0x10210000

08003258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800325c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800325e:	e7fe      	b.n	800325e <Error_Handler+0x6>

08003260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_MspInit+0x4c>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <HAL_MspInit+0x4c>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_MspInit+0x4c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_MspInit+0x4c>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_MspInit+0x4c>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_MspInit+0x4c>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800329e:	2007      	movs	r0, #7
 80032a0:	f000 fa56 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_RTC_MspInit+0x24>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d102      	bne.n	80032c8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_RTC_MspInit+0x28>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40002800 	.word	0x40002800
 80032d8:	42470e3c 	.word	0x42470e3c

080032dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_TIM_Base_MspInit+0x80>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d116      	bne.n	800331c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_TIM_Base_MspInit+0x84>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a1a      	ldr	r2, [pc, #104]	; (8003360 <HAL_TIM_Base_MspInit+0x84>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_TIM_Base_MspInit+0x84>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	2019      	movs	r0, #25
 8003310:	f000 fa29 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003314:	2019      	movs	r0, #25
 8003316:	f000 fa42 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800331a:	e01a      	b.n	8003352 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003324:	d115      	bne.n	8003352 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_TIM_Base_MspInit+0x84>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_TIM_Base_MspInit+0x84>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_TIM_Base_MspInit+0x84>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	201c      	movs	r0, #28
 8003348:	f000 fa0d 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800334c:	201c      	movs	r0, #28
 800334e:	f000 fa26 	bl	800379e <HAL_NVIC_EnableIRQ>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40023800 	.word	0x40023800

08003364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003368:	e7fe      	b.n	8003368 <NMI_Handler+0x4>

0800336a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <HardFault_Handler+0x4>

08003370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003374:	e7fe      	b.n	8003374 <MemManage_Handler+0x4>

08003376 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337a:	e7fe      	b.n	800337a <BusFault_Handler+0x4>

0800337c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003380:	e7fe      	b.n	8003380 <UsageFault_Handler+0x4>

08003382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b0:	f000 f8de 	bl	8003570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033be:	f001 fada 	bl	8004976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000264 	.word	0x20000264

080033cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <TIM2_IRQHandler+0x10>)
 80033d2:	f001 fad0 	bl	8004976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200002a4 	.word	0x200002a4

080033e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <_sbrk+0x5c>)
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <_sbrk+0x60>)
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <_sbrk+0x64>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <_sbrk+0x64>)
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <_sbrk+0x68>)
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d207      	bcs.n	8003420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003410:	f003 ffdc 	bl	80073cc <__errno>
 8003414:	4602      	mov	r2, r0
 8003416:	230c      	movs	r3, #12
 8003418:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	e009      	b.n	8003434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <_sbrk+0x64>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <_sbrk+0x64>)
 8003430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20018000 	.word	0x20018000
 8003440:	00000400 	.word	0x00000400
 8003444:	200003cc 	.word	0x200003cc
 8003448:	20000408 	.word	0x20000408

0800344c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <SystemInit+0x28>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	4a07      	ldr	r2, [pc, #28]	; (8003474 <SystemInit+0x28>)
 8003458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800345c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <SystemInit+0x28>)
 8003462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003466:	609a      	str	r2, [r3, #8]
#endif
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800347c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800347e:	e003      	b.n	8003488 <LoopCopyDataInit>

08003480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003486:	3104      	adds	r1, #4

08003488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800348c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800348e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003490:	d3f6      	bcc.n	8003480 <CopyDataInit>
  ldr  r2, =_sbss
 8003492:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003494:	e002      	b.n	800349c <LoopFillZerobss>

08003496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003498:	f842 3b04 	str.w	r3, [r2], #4

0800349c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800349e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034a0:	d3f9      	bcc.n	8003496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034a2:	f7ff ffd3 	bl	800344c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034a6:	f003 ff97 	bl	80073d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034aa:	f7ff fc6f 	bl	8002d8c <main>
  bx  lr    
 80034ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034b0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80034b4:	08009038 	.word	0x08009038
  ldr  r0, =_sdata
 80034b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034bc:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 80034c0:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 80034c4:	20000404 	.word	0x20000404

080034c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c8:	e7fe      	b.n	80034c8 <ADC_IRQHandler>
	...

080034cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_Init+0x40>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_Init+0x40>)
 80034d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_Init+0x40>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_Init+0x40>)
 80034e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_Init+0x40>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_Init+0x40>)
 80034ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f4:	2003      	movs	r0, #3
 80034f6:	f000 f92b 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034fa:	2000      	movs	r0, #0
 80034fc:	f000 f808 	bl	8003510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003500:	f7ff feae 	bl	8003260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023c00 	.word	0x40023c00

08003510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_InitTick+0x54>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_InitTick+0x58>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003526:	fbb3 f3f1 	udiv	r3, r3, r1
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f943 	bl	80037ba <HAL_SYSTICK_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e00e      	b.n	800355c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d80a      	bhi.n	800355a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003544:	2200      	movs	r2, #0
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f000 f90b 	bl	8003766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003550:	4a06      	ldr	r2, [pc, #24]	; (800356c <HAL_InitTick+0x5c>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000004 	.word	0x20000004
 8003568:	2000000c 	.word	0x2000000c
 800356c:	20000008 	.word	0x20000008

08003570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_IncTick+0x20>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_IncTick+0x24>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4413      	add	r3, r2
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_IncTick+0x24>)
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c
 8003594:	200003fc 	.word	0x200003fc

08003598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return uwTick;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_GetTick+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	200003fc 	.word	0x200003fc

080035b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035cc:	4013      	ands	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035e2:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <__NVIC_SetPriorityGrouping+0x44>)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	60d3      	str	r3, [r2, #12]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <__NVIC_GetPriorityGrouping+0x18>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	f003 0307 	and.w	r3, r3, #7
}
 8003606:	4618      	mov	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	2b00      	cmp	r3, #0
 8003624:	db0b      	blt.n	800363e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4907      	ldr	r1, [pc, #28]	; (800364c <__NVIC_EnableIRQ+0x38>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	2001      	movs	r0, #1
 8003636:	fa00 f202 	lsl.w	r2, r0, r2
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000e100 	.word	0xe000e100

08003650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	db0a      	blt.n	800367a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	490c      	ldr	r1, [pc, #48]	; (800369c <__NVIC_SetPriority+0x4c>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	440b      	add	r3, r1
 8003674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003678:	e00a      	b.n	8003690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4908      	ldr	r1, [pc, #32]	; (80036a0 <__NVIC_SetPriority+0x50>)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3b04      	subs	r3, #4
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	440b      	add	r3, r1
 800368e:	761a      	strb	r2, [r3, #24]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000e100 	.word	0xe000e100
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	; 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f1c3 0307 	rsb	r3, r3, #7
 80036be:	2b04      	cmp	r3, #4
 80036c0:	bf28      	it	cs
 80036c2:	2304      	movcs	r3, #4
 80036c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d902      	bls.n	80036d4 <NVIC_EncodePriority+0x30>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3b03      	subs	r3, #3
 80036d2:	e000      	b.n	80036d6 <NVIC_EncodePriority+0x32>
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43d9      	mvns	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	4313      	orrs	r3, r2
         );
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800371c:	d301      	bcc.n	8003722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371e:	2301      	movs	r3, #1
 8003720:	e00f      	b.n	8003742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <SysTick_Config+0x40>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372a:	210f      	movs	r1, #15
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	f7ff ff8e 	bl	8003650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <SysTick_Config+0x40>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <SysTick_Config+0x40>)
 800373c:	2207      	movs	r2, #7
 800373e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010

08003750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff29 	bl	80035b0 <__NVIC_SetPriorityGrouping>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003778:	f7ff ff3e 	bl	80035f8 <__NVIC_GetPriorityGrouping>
 800377c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7ff ff8e 	bl	80036a4 <NVIC_EncodePriority>
 8003788:	4602      	mov	r2, r0
 800378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff5d 	bl	8003650 <__NVIC_SetPriority>
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff31 	bl	8003614 <__NVIC_EnableIRQ>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ffa2 	bl	800370c <SysTick_Config>
 80037c8:	4603      	mov	r3, r0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e159      	b.n	8003aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f0:	2201      	movs	r2, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	f040 8148 	bne.w	8003a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d00b      	beq.n	800382e <HAL_GPIO_Init+0x5a>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d007      	beq.n	800382e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003822:	2b11      	cmp	r3, #17
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b12      	cmp	r3, #18
 800382c:	d130      	bne.n	8003890 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003864:	2201      	movs	r2, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 0201 	and.w	r2, r3, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0xfc>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b12      	cmp	r3, #18
 80038ce:	d123      	bne.n	8003918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	08da      	lsrs	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3208      	adds	r2, #8
 80038d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	220f      	movs	r2, #15
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	08da      	lsrs	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3208      	adds	r2, #8
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a2 	beq.w	8003a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_GPIO_Init+0x2e4>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	4a55      	ldr	r2, [pc, #340]	; (8003ab8 <HAL_GPIO_Init+0x2e4>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003968:	6453      	str	r3, [r2, #68]	; 0x44
 800396a:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <HAL_GPIO_Init+0x2e4>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003976:	4a51      	ldr	r2, [pc, #324]	; (8003abc <HAL_GPIO_Init+0x2e8>)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	3302      	adds	r3, #2
 800397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	220f      	movs	r2, #15
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a48      	ldr	r2, [pc, #288]	; (8003ac0 <HAL_GPIO_Init+0x2ec>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x202>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <HAL_GPIO_Init+0x2f0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x1fe>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a46      	ldr	r2, [pc, #280]	; (8003ac8 <HAL_GPIO_Init+0x2f4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x1fa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a45      	ldr	r2, [pc, #276]	; (8003acc <HAL_GPIO_Init+0x2f8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x1f6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a44      	ldr	r2, [pc, #272]	; (8003ad0 <HAL_GPIO_Init+0x2fc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x1f2>
 80039c2:	2304      	movs	r3, #4
 80039c4:	e008      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e006      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039ca:	2303      	movs	r3, #3
 80039cc:	e004      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e002      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039d6:	2300      	movs	r3, #0
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	0092      	lsls	r2, r2, #2
 80039e0:	4093      	lsls	r3, r2
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e8:	4934      	ldr	r1, [pc, #208]	; (8003abc <HAL_GPIO_Init+0x2e8>)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a6e:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a98:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <HAL_GPIO_Init+0x300>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b0f      	cmp	r3, #15
 8003aa8:	f67f aea2 	bls.w	80037f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aac:	bf00      	nop
 8003aae:	3724      	adds	r7, #36	; 0x24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40013800 	.word	0x40013800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40020800 	.word	0x40020800
 8003acc:	40020c00 	.word	0x40020c00
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40013c00 	.word	0x40013c00

08003ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af4:	e003      	b.n	8003afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	041a      	lsls	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	887b      	ldrh	r3, [r7, #2]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d104      	bne.n	8003b2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	041a      	lsls	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b2c:	e002      	b.n	8003b34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e25b      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d075      	beq.n	8003c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	4ba3      	ldr	r3, [pc, #652]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4ba0      	ldr	r3, [pc, #640]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d112      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b9d      	ldr	r3, [pc, #628]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b99      	ldr	r3, [pc, #612]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x108>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d157      	bne.n	8003c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e236      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x74>
 8003ba6:	4b91      	ldr	r3, [pc, #580]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a90      	ldr	r2, [pc, #576]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a87      	ldr	r2, [pc, #540]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bd8:	4b84      	ldr	r3, [pc, #528]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a83      	ldr	r2, [pc, #524]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b81      	ldr	r3, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a80      	ldr	r2, [pc, #512]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7ff fcce 	bl	8003598 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7ff fcca 	bl	8003598 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e1fb      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7ff fcba 	bl	8003598 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7ff fcb6 	bl	8003598 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1e7      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0xe8>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d063      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1bb      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b56      	ldr	r3, [pc, #344]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4952      	ldr	r1, [pc, #328]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	e03a      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <HAL_RCC_OscConfig+0x2b0>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7ff fc6f 	bl	8003598 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7ff fc6b 	bl	8003598 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e19c      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	4b46      	ldr	r3, [pc, #280]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b43      	ldr	r3, [pc, #268]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4940      	ldr	r1, [pc, #256]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <HAL_RCC_OscConfig+0x2b0>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7ff fc4e 	bl	8003598 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d00:	f7ff fc4a 	bl	8003598 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e17b      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d030      	beq.n	8003d8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d32:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <HAL_RCC_OscConfig+0x2b4>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7ff fc2e 	bl	8003598 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d40:	f7ff fc2a 	bl	8003598 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e15b      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x200>
 8003d5e:	e015      	b.n	8003d8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x2b4>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7ff fc17 	bl	8003598 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7ff fc13 	bl	8003598 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e144      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a0 	beq.w	8003eda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x2b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d121      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x2b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_RCC_OscConfig+0x2b8>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de2:	f7ff fbd9 	bl	8003598 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	e011      	b.n	8003e0e <HAL_RCC_OscConfig+0x2ce>
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	42470000 	.word	0x42470000
 8003df4:	42470e80 	.word	0x42470e80
 8003df8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfc:	f7ff fbcc 	bl	8003598 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0fd      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b81      	ldr	r3, [pc, #516]	; (8004014 <HAL_RCC_OscConfig+0x4d4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d106      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2f0>
 8003e22:	4b7d      	ldr	r3, [pc, #500]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a7c      	ldr	r2, [pc, #496]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	e01c      	b.n	8003e6a <HAL_RCC_OscConfig+0x32a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d10c      	bne.n	8003e52 <HAL_RCC_OscConfig+0x312>
 8003e38:	4b77      	ldr	r3, [pc, #476]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a76      	ldr	r2, [pc, #472]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e3e:	f043 0304 	orr.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	4b74      	ldr	r3, [pc, #464]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a73      	ldr	r2, [pc, #460]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	e00b      	b.n	8003e6a <HAL_RCC_OscConfig+0x32a>
 8003e52:	4b71      	ldr	r3, [pc, #452]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a70      	ldr	r2, [pc, #448]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	4b6e      	ldr	r3, [pc, #440]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a6d      	ldr	r2, [pc, #436]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d015      	beq.n	8003e9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7ff fb91 	bl	8003598 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7ff fb8d 	bl	8003598 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0bc      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ee      	beq.n	8003e7a <HAL_RCC_OscConfig+0x33a>
 8003e9c:	e014      	b.n	8003ec8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9e:	f7ff fb7b 	bl	8003598 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7ff fb77 	bl	8003598 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0a6      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ebc:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ee      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ece:	4b52      	ldr	r3, [pc, #328]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a51      	ldr	r2, [pc, #324]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8092 	beq.w	8004008 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ee4:	4b4c      	ldr	r3, [pc, #304]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d05c      	beq.n	8003faa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d141      	bne.n	8003f7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef8:	4b48      	ldr	r3, [pc, #288]	; (800401c <HAL_RCC_OscConfig+0x4dc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7ff fb4b 	bl	8003598 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f06:	f7ff fb47 	bl	8003598 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e078      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f18:	4b3f      	ldr	r3, [pc, #252]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	019b      	lsls	r3, r3, #6
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	061b      	lsls	r3, r3, #24
 8003f48:	4933      	ldr	r1, [pc, #204]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4e:	4b33      	ldr	r3, [pc, #204]	; (800401c <HAL_RCC_OscConfig+0x4dc>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7ff fb20 	bl	8003598 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7ff fb1c 	bl	8003598 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e04d      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x41c>
 8003f7a:	e045      	b.n	8004008 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_RCC_OscConfig+0x4dc>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7ff fb09 	bl	8003598 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7ff fb05 	bl	8003598 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e036      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x44a>
 8003fa8:	e02e      	b.n	8004008 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e029      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb6:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_RCC_OscConfig+0x4d8>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d11c      	bne.n	8004004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d115      	bne.n	8004004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d10d      	bne.n	8004004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d106      	bne.n	8004004 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40007000 	.word	0x40007000
 8004018:	40023800 	.word	0x40023800
 800401c:	42470060 	.word	0x42470060

08004020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0cc      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b68      	ldr	r3, [pc, #416]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d90c      	bls.n	800405c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d020      	beq.n	80040aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004074:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	494d      	ldr	r1, [pc, #308]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d044      	beq.n	8004140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e07f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d003      	beq.n	80040de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040de:	4b3f      	ldr	r3, [pc, #252]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e06f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e067      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fe:	4b37      	ldr	r3, [pc, #220]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4934      	ldr	r1, [pc, #208]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004110:	f7ff fa42 	bl	8003598 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7ff fa3e 	bl	8003598 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e04f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d20c      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e032      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4916      	ldr	r1, [pc, #88]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490e      	ldr	r1, [pc, #56]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041a6:	f000 f821 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 80041aa:	4601      	mov	r1, r0
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 80041b8:	5cd3      	ldrb	r3, [r2, r3]
 80041ba:	fa21 f303 	lsr.w	r3, r1, r3
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff f9a2 	bl	8003510 <HAL_InitTick>

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00
 80041dc:	40023800 	.word	0x40023800
 80041e0:	08008b90 	.word	0x08008b90
 80041e4:	20000004 	.word	0x20000004
 80041e8:	20000008 	.word	0x20000008

080041ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	2300      	movs	r3, #0
 80041fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004202:	4b63      	ldr	r3, [pc, #396]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b04      	cmp	r3, #4
 800420c:	d007      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x32>
 800420e:	2b08      	cmp	r3, #8
 8004210:	d008      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x38>
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 80b4 	bne.w	8004380 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800421a:	60bb      	str	r3, [r7, #8]
       break;
 800421c:	e0b3      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421e:	4b5e      	ldr	r3, [pc, #376]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004220:	60bb      	str	r3, [r7, #8]
      break;
 8004222:	e0b0      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004224:	4b5a      	ldr	r3, [pc, #360]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800422c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422e:	4b58      	ldr	r3, [pc, #352]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04a      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	4b55      	ldr	r3, [pc, #340]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	f04f 0400 	mov.w	r4, #0
 8004244:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	ea03 0501 	and.w	r5, r3, r1
 8004250:	ea04 0602 	and.w	r6, r4, r2
 8004254:	4629      	mov	r1, r5
 8004256:	4632      	mov	r2, r6
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f04f 0400 	mov.w	r4, #0
 8004260:	0154      	lsls	r4, r2, #5
 8004262:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004266:	014b      	lsls	r3, r1, #5
 8004268:	4619      	mov	r1, r3
 800426a:	4622      	mov	r2, r4
 800426c:	1b49      	subs	r1, r1, r5
 800426e:	eb62 0206 	sbc.w	r2, r2, r6
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f04f 0400 	mov.w	r4, #0
 800427a:	0194      	lsls	r4, r2, #6
 800427c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004280:	018b      	lsls	r3, r1, #6
 8004282:	1a5b      	subs	r3, r3, r1
 8004284:	eb64 0402 	sbc.w	r4, r4, r2
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	00e2      	lsls	r2, r4, #3
 8004292:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004296:	00d9      	lsls	r1, r3, #3
 8004298:	460b      	mov	r3, r1
 800429a:	4614      	mov	r4, r2
 800429c:	195b      	adds	r3, r3, r5
 800429e:	eb44 0406 	adc.w	r4, r4, r6
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	0262      	lsls	r2, r4, #9
 80042ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042b0:	0259      	lsls	r1, r3, #9
 80042b2:	460b      	mov	r3, r1
 80042b4:	4614      	mov	r4, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	4621      	mov	r1, r4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f04f 0400 	mov.w	r4, #0
 80042c0:	461a      	mov	r2, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	f7fc fcf8 	bl	8000cb8 <__aeabi_uldivmod>
 80042c8:	4603      	mov	r3, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e049      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	f04f 0400 	mov.w	r4, #0
 80042da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	ea03 0501 	and.w	r5, r3, r1
 80042e6:	ea04 0602 	and.w	r6, r4, r2
 80042ea:	4629      	mov	r1, r5
 80042ec:	4632      	mov	r2, r6
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f04f 0400 	mov.w	r4, #0
 80042f6:	0154      	lsls	r4, r2, #5
 80042f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042fc:	014b      	lsls	r3, r1, #5
 80042fe:	4619      	mov	r1, r3
 8004300:	4622      	mov	r2, r4
 8004302:	1b49      	subs	r1, r1, r5
 8004304:	eb62 0206 	sbc.w	r2, r2, r6
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	f04f 0400 	mov.w	r4, #0
 8004310:	0194      	lsls	r4, r2, #6
 8004312:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004316:	018b      	lsls	r3, r1, #6
 8004318:	1a5b      	subs	r3, r3, r1
 800431a:	eb64 0402 	sbc.w	r4, r4, r2
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800432c:	00d9      	lsls	r1, r3, #3
 800432e:	460b      	mov	r3, r1
 8004330:	4614      	mov	r4, r2
 8004332:	195b      	adds	r3, r3, r5
 8004334:	eb44 0406 	adc.w	r4, r4, r6
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	02a2      	lsls	r2, r4, #10
 8004342:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004346:	0299      	lsls	r1, r3, #10
 8004348:	460b      	mov	r3, r1
 800434a:	4614      	mov	r4, r2
 800434c:	4618      	mov	r0, r3
 800434e:	4621      	mov	r1, r4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f04f 0400 	mov.w	r4, #0
 8004356:	461a      	mov	r2, r3
 8004358:	4623      	mov	r3, r4
 800435a:	f7fc fcad 	bl	8000cb8 <__aeabi_uldivmod>
 800435e:	4603      	mov	r3, r0
 8004360:	460c      	mov	r4, r1
 8004362:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	60bb      	str	r3, [r7, #8]
      break;
 800437e:	e002      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004382:	60bb      	str	r3, [r7, #8]
      break;
 8004384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004386:	68bb      	ldr	r3, [r7, #8]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	00f42400 	.word	0x00f42400
 8004398:	007a1200 	.word	0x007a1200

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d035      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043c4:	4b67      	ldr	r3, [pc, #412]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ca:	f7ff f8e5 	bl	8003598 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043d2:	f7ff f8e1 	bl	8003598 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0ba      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e4:	4b60      	ldr	r3, [pc, #384]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f0      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	019a      	lsls	r2, r3, #6
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	071b      	lsls	r3, r3, #28
 80043fc:	495a      	ldr	r1, [pc, #360]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004404:	4b57      	ldr	r3, [pc, #348]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800440a:	f7ff f8c5 	bl	8003598 <HAL_GetTick>
 800440e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004412:	f7ff f8c1 	bl	8003598 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e09a      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8083 	beq.w	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b49      	ldr	r3, [pc, #292]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a48      	ldr	r2, [pc, #288]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800445a:	4b44      	ldr	r3, [pc, #272]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a43      	ldr	r2, [pc, #268]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004466:	f7ff f897 	bl	8003598 <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7ff f893 	bl	8003598 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e06c      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004480:	4b3a      	ldr	r3, [pc, #232]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800448c:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004494:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02f      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d028      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044aa:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b4:	4b2e      	ldr	r3, [pc, #184]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044c0:	4a29      	ldr	r2, [pc, #164]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d114      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044d2:	f7ff f861 	bl	8003598 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7ff f85d 	bl	8003598 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e034      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0ee      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004508:	d10d      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800450a:	4b17      	ldr	r3, [pc, #92]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451e:	4912      	ldr	r1, [pc, #72]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]
 8004524:	e005      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4a0f      	ldr	r2, [pc, #60]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800452c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004530:	6093      	str	r3, [r2, #8]
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004534:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453e:	490a      	ldr	r1, [pc, #40]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	7c1a      	ldrb	r2, [r3, #16]
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004556:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	42470068 	.word	0x42470068
 8004568:	40023800 	.word	0x40023800
 800456c:	40007000 	.word	0x40007000
 8004570:	42470e40 	.word	0x42470e40
 8004574:	424711e0 	.word	0x424711e0

08004578 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e083      	b.n	8004692 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7f5b      	ldrb	r3, [r3, #29]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fe fe88 	bl	80032b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	22ca      	movs	r2, #202	; 0xca
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2253      	movs	r2, #83	; 0x53
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f944 	bl	8004844 <RTC_EnterInitMode>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	22ff      	movs	r2, #255	; 0xff
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2204      	movs	r2, #4
 80045ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e05e      	b.n	8004692 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6919      	ldr	r1, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	041a      	lsls	r2, r3, #16
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004632:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10e      	bne.n	8004660 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8d6 	bl	80047f4 <HAL_RTC_WaitForSynchro>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	22ff      	movs	r2, #255	; 0xff
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e018      	b.n	8004692 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004690:	2300      	movs	r3, #0
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80046cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	b2da      	uxtb	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11a      	bne.n	800474c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f8be 	bl	800489c <RTC_Bcd2ToByte>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f8b5 	bl	800489c <RTC_Bcd2ToByte>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	789b      	ldrb	r3, [r3, #2]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f8ac 	bl	800489c <RTC_Bcd2ToByte>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004774:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	0b5b      	lsrs	r3, r3, #13
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11a      	bne.n	80047ea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	78db      	ldrb	r3, [r3, #3]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f86f 	bl	800489c <RTC_Bcd2ToByte>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	785b      	ldrb	r3, [r3, #1]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f866 	bl	800489c <RTC_Bcd2ToByte>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	789b      	ldrb	r3, [r3, #2]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f85d 	bl	800489c <RTC_Bcd2ToByte>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800480e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004810:	f7fe fec2 	bl	8003598 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004816:	e009      	b.n	800482c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004818:	f7fe febe 	bl	8003598 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004826:	d901      	bls.n	800482c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e007      	b.n	800483c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ee      	beq.n	8004818 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d119      	bne.n	8004892 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f04f 32ff 	mov.w	r2, #4294967295
 8004866:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004868:	f7fe fe96 	bl	8003598 <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800486e:	e009      	b.n	8004884 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004870:	f7fe fe92 	bl	8003598 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800487e:	d901      	bls.n	8004884 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e007      	b.n	8004894 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0ee      	beq.n	8004870 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	b2db      	uxtb	r3, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e01d      	b.n	8004926 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fe fcec 	bl	80032dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f000 fa14 	bl	8004d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b06      	cmp	r3, #6
 8004956:	d007      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b02      	cmp	r3, #2
 800498a:	d122      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d11b      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0202 	mvn.w	r2, #2
 80049a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f9a5 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 80049be:	e005      	b.n	80049cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f997 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9a8 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d122      	bne.n	8004a26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d11b      	bne.n	8004a26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0204 	mvn.w	r2, #4
 80049f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f97b 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004a12:	e005      	b.n	8004a20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f96d 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f97e 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d122      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d11b      	bne.n	8004a7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f06f 0208 	mvn.w	r2, #8
 8004a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f951 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004a66:	e005      	b.n	8004a74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f943 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f954 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d122      	bne.n	8004ace <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d11b      	bne.n	8004ace <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0210 	mvn.w	r2, #16
 8004a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f927 	bl	8004d08 <HAL_TIM_IC_CaptureCallback>
 8004aba:	e005      	b.n	8004ac8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f919 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f92a 	bl	8004d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10e      	bne.n	8004afa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0201 	mvn.w	r2, #1
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc fcb9 	bl	800146c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b04:	2b80      	cmp	r3, #128	; 0x80
 8004b06:	d10e      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 faa1 	bl	8005068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d10e      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b40      	cmp	r3, #64	; 0x40
 8004b40:	d107      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8ef 	bl	8004d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d10e      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0220 	mvn.w	r2, #32
 8004b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fa6b 	bl	8005054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_ConfigClockSource+0x18>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e0a6      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x166>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bbc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d067      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0x120>
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d80b      	bhi.n	8004bf2 <HAL_TIM_ConfigClockSource+0x6c>
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d073      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x140>
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d802      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x62>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d06f      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004be6:	e078      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d06c      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x140>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d06a      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004bf0:	e073      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004bf2:	2b70      	cmp	r3, #112	; 0x70
 8004bf4:	d00d      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x8c>
 8004bf6:	2b70      	cmp	r3, #112	; 0x70
 8004bf8:	d804      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x7e>
 8004bfa:	2b50      	cmp	r3, #80	; 0x50
 8004bfc:	d033      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0xe0>
 8004bfe:	2b60      	cmp	r3, #96	; 0x60
 8004c00:	d041      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c02:	e06a      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c08:	d066      	beq.n	8004cd8 <HAL_TIM_ConfigClockSource+0x152>
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0e:	d017      	beq.n	8004c40 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c10:	e063      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f000 f989 	bl	8004f38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	609a      	str	r2, [r3, #8]
      break;
 8004c3e:	e04c      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6899      	ldr	r1, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f000 f972 	bl	8004f38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c62:	609a      	str	r2, [r3, #8]
      break;
 8004c64:	e039      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 f8e6 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2150      	movs	r1, #80	; 0x50
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f93f 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e029      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f000 f905 	bl	8004ea2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2160      	movs	r1, #96	; 0x60
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f92f 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004ca4:	e019      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 f8c6 	bl	8004e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2140      	movs	r1, #64	; 0x40
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f91f 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e009      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f000 f916 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004cd6:	e000      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004cd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a34      	ldr	r2, [pc, #208]	; (8004e28 <TIM_Base_SetConfig+0xe4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00f      	beq.n	8004d7c <TIM_Base_SetConfig+0x38>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0x38>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a31      	ldr	r2, [pc, #196]	; (8004e2c <TIM_Base_SetConfig+0xe8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0x38>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a30      	ldr	r2, [pc, #192]	; (8004e30 <TIM_Base_SetConfig+0xec>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0x38>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <TIM_Base_SetConfig+0xf0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <TIM_Base_SetConfig+0xe4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01b      	beq.n	8004dce <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d017      	beq.n	8004dce <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a22      	ldr	r2, [pc, #136]	; (8004e2c <TIM_Base_SetConfig+0xe8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <TIM_Base_SetConfig+0xec>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00f      	beq.n	8004dce <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <TIM_Base_SetConfig+0xf0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1f      	ldr	r2, [pc, #124]	; (8004e38 <TIM_Base_SetConfig+0xf4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <TIM_Base_SetConfig+0xf8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <TIM_Base_SetConfig+0xfc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d108      	bne.n	8004de0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <TIM_Base_SetConfig+0xe4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d103      	bne.n	8004e14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	615a      	str	r2, [r3, #20]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800

08004e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f023 030a 	bic.w	r3, r3, #10
 8004e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0210 	bic.w	r2, r3, #16
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f043 0307 	orr.w	r3, r3, #7
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	021a      	lsls	r2, r3, #8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e050      	b.n	8005032 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d018      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fdc:	d013      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a18      	ldr	r2, [pc, #96]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00e      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a15      	ldr	r2, [pc, #84]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d10c      	bne.n	8005020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	4313      	orrs	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40000c00 	.word	0x40000c00
 8005050:	40014000 	.word	0x40014000

08005054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_ZdlPvj>:
 800507c:	f000 b800 	b.w	8005080 <_ZdlPv>

08005080 <_ZdlPv>:
 8005080:	f002 b9ce 	b.w	8007420 <free>
 8005084:	0000      	movs	r0, r0
	...

08005088 <cos>:
 8005088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800508a:	ec51 0b10 	vmov	r0, r1, d0
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <cos+0x80>)
 8005090:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005094:	4293      	cmp	r3, r2
 8005096:	dc06      	bgt.n	80050a6 <cos+0x1e>
 8005098:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8005100 <cos+0x78>
 800509c:	f001 fa6c 	bl	8006578 <__kernel_cos>
 80050a0:	ec51 0b10 	vmov	r0, r1, d0
 80050a4:	e007      	b.n	80050b6 <cos+0x2e>
 80050a6:	4a19      	ldr	r2, [pc, #100]	; (800510c <cos+0x84>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	dd09      	ble.n	80050c0 <cos+0x38>
 80050ac:	ee10 2a10 	vmov	r2, s0
 80050b0:	460b      	mov	r3, r1
 80050b2:	f7fb f901 	bl	80002b8 <__aeabi_dsub>
 80050b6:	ec41 0b10 	vmov	d0, r0, r1
 80050ba:	b005      	add	sp, #20
 80050bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80050c0:	4668      	mov	r0, sp
 80050c2:	f000 ffb5 	bl	8006030 <__ieee754_rem_pio2>
 80050c6:	f000 0003 	and.w	r0, r0, #3
 80050ca:	2801      	cmp	r0, #1
 80050cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80050d0:	ed9d 0b00 	vldr	d0, [sp]
 80050d4:	d007      	beq.n	80050e6 <cos+0x5e>
 80050d6:	2802      	cmp	r0, #2
 80050d8:	d00e      	beq.n	80050f8 <cos+0x70>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d0de      	beq.n	800509c <cos+0x14>
 80050de:	2001      	movs	r0, #1
 80050e0:	f001 fe52 	bl	8006d88 <__kernel_sin>
 80050e4:	e7dc      	b.n	80050a0 <cos+0x18>
 80050e6:	f001 fe4f 	bl	8006d88 <__kernel_sin>
 80050ea:	ec53 2b10 	vmov	r2, r3, d0
 80050ee:	ee10 0a10 	vmov	r0, s0
 80050f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80050f6:	e7de      	b.n	80050b6 <cos+0x2e>
 80050f8:	f001 fa3e 	bl	8006578 <__kernel_cos>
 80050fc:	e7f5      	b.n	80050ea <cos+0x62>
 80050fe:	bf00      	nop
	...
 8005108:	3fe921fb 	.word	0x3fe921fb
 800510c:	7fefffff 	.word	0x7fefffff

08005110 <floor>:
 8005110:	ec51 0b10 	vmov	r0, r1, d0
 8005114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005118:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800511c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005120:	2e13      	cmp	r6, #19
 8005122:	460c      	mov	r4, r1
 8005124:	ee10 5a10 	vmov	r5, s0
 8005128:	4680      	mov	r8, r0
 800512a:	dc34      	bgt.n	8005196 <floor+0x86>
 800512c:	2e00      	cmp	r6, #0
 800512e:	da16      	bge.n	800515e <floor+0x4e>
 8005130:	a335      	add	r3, pc, #212	; (adr r3, 8005208 <floor+0xf8>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb f8c1 	bl	80002bc <__adddf3>
 800513a:	2200      	movs	r2, #0
 800513c:	2300      	movs	r3, #0
 800513e:	f7fb fd03 	bl	8000b48 <__aeabi_dcmpgt>
 8005142:	b148      	cbz	r0, 8005158 <floor+0x48>
 8005144:	2c00      	cmp	r4, #0
 8005146:	da59      	bge.n	80051fc <floor+0xec>
 8005148:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800514c:	4a30      	ldr	r2, [pc, #192]	; (8005210 <floor+0x100>)
 800514e:	432b      	orrs	r3, r5
 8005150:	2500      	movs	r5, #0
 8005152:	42ab      	cmp	r3, r5
 8005154:	bf18      	it	ne
 8005156:	4614      	movne	r4, r2
 8005158:	4621      	mov	r1, r4
 800515a:	4628      	mov	r0, r5
 800515c:	e025      	b.n	80051aa <floor+0x9a>
 800515e:	4f2d      	ldr	r7, [pc, #180]	; (8005214 <floor+0x104>)
 8005160:	4137      	asrs	r7, r6
 8005162:	ea01 0307 	and.w	r3, r1, r7
 8005166:	4303      	orrs	r3, r0
 8005168:	d01f      	beq.n	80051aa <floor+0x9a>
 800516a:	a327      	add	r3, pc, #156	; (adr r3, 8005208 <floor+0xf8>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fb f8a4 	bl	80002bc <__adddf3>
 8005174:	2200      	movs	r2, #0
 8005176:	2300      	movs	r3, #0
 8005178:	f7fb fce6 	bl	8000b48 <__aeabi_dcmpgt>
 800517c:	2800      	cmp	r0, #0
 800517e:	d0eb      	beq.n	8005158 <floor+0x48>
 8005180:	2c00      	cmp	r4, #0
 8005182:	bfbe      	ittt	lt
 8005184:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005188:	fa43 f606 	asrlt.w	r6, r3, r6
 800518c:	19a4      	addlt	r4, r4, r6
 800518e:	ea24 0407 	bic.w	r4, r4, r7
 8005192:	2500      	movs	r5, #0
 8005194:	e7e0      	b.n	8005158 <floor+0x48>
 8005196:	2e33      	cmp	r6, #51	; 0x33
 8005198:	dd0b      	ble.n	80051b2 <floor+0xa2>
 800519a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800519e:	d104      	bne.n	80051aa <floor+0x9a>
 80051a0:	ee10 2a10 	vmov	r2, s0
 80051a4:	460b      	mov	r3, r1
 80051a6:	f7fb f889 	bl	80002bc <__adddf3>
 80051aa:	ec41 0b10 	vmov	d0, r0, r1
 80051ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80051b6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ba:	fa23 f707 	lsr.w	r7, r3, r7
 80051be:	4207      	tst	r7, r0
 80051c0:	d0f3      	beq.n	80051aa <floor+0x9a>
 80051c2:	a311      	add	r3, pc, #68	; (adr r3, 8005208 <floor+0xf8>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f878 	bl	80002bc <__adddf3>
 80051cc:	2200      	movs	r2, #0
 80051ce:	2300      	movs	r3, #0
 80051d0:	f7fb fcba 	bl	8000b48 <__aeabi_dcmpgt>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d0bf      	beq.n	8005158 <floor+0x48>
 80051d8:	2c00      	cmp	r4, #0
 80051da:	da02      	bge.n	80051e2 <floor+0xd2>
 80051dc:	2e14      	cmp	r6, #20
 80051de:	d103      	bne.n	80051e8 <floor+0xd8>
 80051e0:	3401      	adds	r4, #1
 80051e2:	ea25 0507 	bic.w	r5, r5, r7
 80051e6:	e7b7      	b.n	8005158 <floor+0x48>
 80051e8:	2301      	movs	r3, #1
 80051ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80051ee:	fa03 f606 	lsl.w	r6, r3, r6
 80051f2:	4435      	add	r5, r6
 80051f4:	4545      	cmp	r5, r8
 80051f6:	bf38      	it	cc
 80051f8:	18e4      	addcc	r4, r4, r3
 80051fa:	e7f2      	b.n	80051e2 <floor+0xd2>
 80051fc:	2500      	movs	r5, #0
 80051fe:	462c      	mov	r4, r5
 8005200:	e7aa      	b.n	8005158 <floor+0x48>
 8005202:	bf00      	nop
 8005204:	f3af 8000 	nop.w
 8005208:	8800759c 	.word	0x8800759c
 800520c:	7e37e43c 	.word	0x7e37e43c
 8005210:	bff00000 	.word	0xbff00000
 8005214:	000fffff 	.word	0x000fffff

08005218 <sin>:
 8005218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800521a:	ec51 0b10 	vmov	r0, r1, d0
 800521e:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <sin+0x88>)
 8005220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005224:	4293      	cmp	r3, r2
 8005226:	dc07      	bgt.n	8005238 <sin+0x20>
 8005228:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005298 <sin+0x80>
 800522c:	2000      	movs	r0, #0
 800522e:	f001 fdab 	bl	8006d88 <__kernel_sin>
 8005232:	ec51 0b10 	vmov	r0, r1, d0
 8005236:	e007      	b.n	8005248 <sin+0x30>
 8005238:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <sin+0x8c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	dd09      	ble.n	8005252 <sin+0x3a>
 800523e:	ee10 2a10 	vmov	r2, s0
 8005242:	460b      	mov	r3, r1
 8005244:	f7fb f838 	bl	80002b8 <__aeabi_dsub>
 8005248:	ec41 0b10 	vmov	d0, r0, r1
 800524c:	b005      	add	sp, #20
 800524e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005252:	4668      	mov	r0, sp
 8005254:	f000 feec 	bl	8006030 <__ieee754_rem_pio2>
 8005258:	f000 0003 	and.w	r0, r0, #3
 800525c:	2801      	cmp	r0, #1
 800525e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005262:	ed9d 0b00 	vldr	d0, [sp]
 8005266:	d004      	beq.n	8005272 <sin+0x5a>
 8005268:	2802      	cmp	r0, #2
 800526a:	d005      	beq.n	8005278 <sin+0x60>
 800526c:	b970      	cbnz	r0, 800528c <sin+0x74>
 800526e:	2001      	movs	r0, #1
 8005270:	e7dd      	b.n	800522e <sin+0x16>
 8005272:	f001 f981 	bl	8006578 <__kernel_cos>
 8005276:	e7dc      	b.n	8005232 <sin+0x1a>
 8005278:	2001      	movs	r0, #1
 800527a:	f001 fd85 	bl	8006d88 <__kernel_sin>
 800527e:	ec53 2b10 	vmov	r2, r3, d0
 8005282:	ee10 0a10 	vmov	r0, s0
 8005286:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800528a:	e7dd      	b.n	8005248 <sin+0x30>
 800528c:	f001 f974 	bl	8006578 <__kernel_cos>
 8005290:	e7f5      	b.n	800527e <sin+0x66>
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
	...
 80052a0:	3fe921fb 	.word	0x3fe921fb
 80052a4:	7fefffff 	.word	0x7fefffff

080052a8 <tan>:
 80052a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052aa:	ec51 0b10 	vmov	r0, r1, d0
 80052ae:	4a14      	ldr	r2, [pc, #80]	; (8005300 <tan+0x58>)
 80052b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052b4:	4293      	cmp	r3, r2
 80052b6:	dc05      	bgt.n	80052c4 <tan+0x1c>
 80052b8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80052f8 <tan+0x50>
 80052bc:	2001      	movs	r0, #1
 80052be:	f001 fe1f 	bl	8006f00 <__kernel_tan>
 80052c2:	e009      	b.n	80052d8 <tan+0x30>
 80052c4:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <tan+0x5c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	dd09      	ble.n	80052de <tan+0x36>
 80052ca:	ee10 2a10 	vmov	r2, s0
 80052ce:	460b      	mov	r3, r1
 80052d0:	f7fa fff2 	bl	80002b8 <__aeabi_dsub>
 80052d4:	ec41 0b10 	vmov	d0, r0, r1
 80052d8:	b005      	add	sp, #20
 80052da:	f85d fb04 	ldr.w	pc, [sp], #4
 80052de:	4668      	mov	r0, sp
 80052e0:	f000 fea6 	bl	8006030 <__ieee754_rem_pio2>
 80052e4:	0040      	lsls	r0, r0, #1
 80052e6:	f000 0002 	and.w	r0, r0, #2
 80052ea:	f1c0 0001 	rsb	r0, r0, #1
 80052ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052f2:	ed9d 0b00 	vldr	d0, [sp]
 80052f6:	e7e2      	b.n	80052be <tan+0x16>
	...
 8005300:	3fe921fb 	.word	0x3fe921fb
 8005304:	7fefffff 	.word	0x7fefffff

08005308 <acos>:
 8005308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530a:	ed2d 8b02 	vpush	{d8}
 800530e:	4e26      	ldr	r6, [pc, #152]	; (80053a8 <acos+0xa0>)
 8005310:	b08b      	sub	sp, #44	; 0x2c
 8005312:	ec55 4b10 	vmov	r4, r5, d0
 8005316:	f000 f90b 	bl	8005530 <__ieee754_acos>
 800531a:	f996 3000 	ldrsb.w	r3, [r6]
 800531e:	eeb0 8a40 	vmov.f32	s16, s0
 8005322:	eef0 8a60 	vmov.f32	s17, s1
 8005326:	3301      	adds	r3, #1
 8005328:	d036      	beq.n	8005398 <acos+0x90>
 800532a:	4622      	mov	r2, r4
 800532c:	462b      	mov	r3, r5
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fb fc13 	bl	8000b5c <__aeabi_dcmpun>
 8005336:	4607      	mov	r7, r0
 8005338:	bb70      	cbnz	r0, 8005398 <acos+0x90>
 800533a:	ec45 4b10 	vmov	d0, r4, r5
 800533e:	f001 ffab 	bl	8007298 <fabs>
 8005342:	2200      	movs	r2, #0
 8005344:	4b19      	ldr	r3, [pc, #100]	; (80053ac <acos+0xa4>)
 8005346:	ec51 0b10 	vmov	r0, r1, d0
 800534a:	f7fb fbfd 	bl	8000b48 <__aeabi_dcmpgt>
 800534e:	b318      	cbz	r0, 8005398 <acos+0x90>
 8005350:	2301      	movs	r3, #1
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	4816      	ldr	r0, [pc, #88]	; (80053b0 <acos+0xa8>)
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <acos+0xac>)
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	9708      	str	r7, [sp, #32]
 800535c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005360:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005364:	f001 ffa4 	bl	80072b0 <nan>
 8005368:	f996 3000 	ldrsb.w	r3, [r6]
 800536c:	2b02      	cmp	r3, #2
 800536e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005372:	d104      	bne.n	800537e <acos+0x76>
 8005374:	f002 f82a 	bl	80073cc <__errno>
 8005378:	2321      	movs	r3, #33	; 0x21
 800537a:	6003      	str	r3, [r0, #0]
 800537c:	e004      	b.n	8005388 <acos+0x80>
 800537e:	4668      	mov	r0, sp
 8005380:	f001 ff93 	bl	80072aa <matherr>
 8005384:	2800      	cmp	r0, #0
 8005386:	d0f5      	beq.n	8005374 <acos+0x6c>
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	b11b      	cbz	r3, 8005394 <acos+0x8c>
 800538c:	f002 f81e 	bl	80073cc <__errno>
 8005390:	9b08      	ldr	r3, [sp, #32]
 8005392:	6003      	str	r3, [r0, #0]
 8005394:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005398:	eeb0 0a48 	vmov.f32	s0, s16
 800539c:	eef0 0a68 	vmov.f32	s1, s17
 80053a0:	b00b      	add	sp, #44	; 0x2c
 80053a2:	ecbd 8b02 	vpop	{d8}
 80053a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a8:	2000000d 	.word	0x2000000d
 80053ac:	3ff00000 	.word	0x3ff00000
 80053b0:	08008eb6 	.word	0x08008eb6
 80053b4:	08008ba0 	.word	0x08008ba0

080053b8 <asin>:
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	ed2d 8b02 	vpush	{d8}
 80053be:	4e26      	ldr	r6, [pc, #152]	; (8005458 <asin+0xa0>)
 80053c0:	b08b      	sub	sp, #44	; 0x2c
 80053c2:	ec55 4b10 	vmov	r4, r5, d0
 80053c6:	f000 fb0f 	bl	80059e8 <__ieee754_asin>
 80053ca:	f996 3000 	ldrsb.w	r3, [r6]
 80053ce:	eeb0 8a40 	vmov.f32	s16, s0
 80053d2:	eef0 8a60 	vmov.f32	s17, s1
 80053d6:	3301      	adds	r3, #1
 80053d8:	d036      	beq.n	8005448 <asin+0x90>
 80053da:	4622      	mov	r2, r4
 80053dc:	462b      	mov	r3, r5
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fb fbbb 	bl	8000b5c <__aeabi_dcmpun>
 80053e6:	4607      	mov	r7, r0
 80053e8:	bb70      	cbnz	r0, 8005448 <asin+0x90>
 80053ea:	ec45 4b10 	vmov	d0, r4, r5
 80053ee:	f001 ff53 	bl	8007298 <fabs>
 80053f2:	2200      	movs	r2, #0
 80053f4:	4b19      	ldr	r3, [pc, #100]	; (800545c <asin+0xa4>)
 80053f6:	ec51 0b10 	vmov	r0, r1, d0
 80053fa:	f7fb fba5 	bl	8000b48 <__aeabi_dcmpgt>
 80053fe:	b318      	cbz	r0, 8005448 <asin+0x90>
 8005400:	2301      	movs	r3, #1
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	4816      	ldr	r0, [pc, #88]	; (8005460 <asin+0xa8>)
 8005406:	4b17      	ldr	r3, [pc, #92]	; (8005464 <asin+0xac>)
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	9708      	str	r7, [sp, #32]
 800540c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005410:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005414:	f001 ff4c 	bl	80072b0 <nan>
 8005418:	f996 3000 	ldrsb.w	r3, [r6]
 800541c:	2b02      	cmp	r3, #2
 800541e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005422:	d104      	bne.n	800542e <asin+0x76>
 8005424:	f001 ffd2 	bl	80073cc <__errno>
 8005428:	2321      	movs	r3, #33	; 0x21
 800542a:	6003      	str	r3, [r0, #0]
 800542c:	e004      	b.n	8005438 <asin+0x80>
 800542e:	4668      	mov	r0, sp
 8005430:	f001 ff3b 	bl	80072aa <matherr>
 8005434:	2800      	cmp	r0, #0
 8005436:	d0f5      	beq.n	8005424 <asin+0x6c>
 8005438:	9b08      	ldr	r3, [sp, #32]
 800543a:	b11b      	cbz	r3, 8005444 <asin+0x8c>
 800543c:	f001 ffc6 	bl	80073cc <__errno>
 8005440:	9b08      	ldr	r3, [sp, #32]
 8005442:	6003      	str	r3, [r0, #0]
 8005444:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005448:	eeb0 0a48 	vmov.f32	s0, s16
 800544c:	eef0 0a68 	vmov.f32	s1, s17
 8005450:	b00b      	add	sp, #44	; 0x2c
 8005452:	ecbd 8b02 	vpop	{d8}
 8005456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005458:	2000000d 	.word	0x2000000d
 800545c:	3ff00000 	.word	0x3ff00000
 8005460:	08008eb6 	.word	0x08008eb6
 8005464:	08008ba5 	.word	0x08008ba5

08005468 <fmod>:
 8005468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800546c:	ed2d 8b02 	vpush	{d8}
 8005470:	b08b      	sub	sp, #44	; 0x2c
 8005472:	ec55 4b10 	vmov	r4, r5, d0
 8005476:	ec57 6b11 	vmov	r6, r7, d1
 800547a:	f000 fcc5 	bl	8005e08 <__ieee754_fmod>
 800547e:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <fmod+0xc0>)
 8005480:	eeb0 8a40 	vmov.f32	s16, s0
 8005484:	eef0 8a60 	vmov.f32	s17, s1
 8005488:	f993 8000 	ldrsb.w	r8, [r3]
 800548c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005490:	d030      	beq.n	80054f4 <fmod+0x8c>
 8005492:	4632      	mov	r2, r6
 8005494:	463b      	mov	r3, r7
 8005496:	4630      	mov	r0, r6
 8005498:	4639      	mov	r1, r7
 800549a:	f7fb fb5f 	bl	8000b5c <__aeabi_dcmpun>
 800549e:	bb48      	cbnz	r0, 80054f4 <fmod+0x8c>
 80054a0:	4622      	mov	r2, r4
 80054a2:	462b      	mov	r3, r5
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fb fb58 	bl	8000b5c <__aeabi_dcmpun>
 80054ac:	4681      	mov	r9, r0
 80054ae:	bb08      	cbnz	r0, 80054f4 <fmod+0x8c>
 80054b0:	2200      	movs	r2, #0
 80054b2:	2300      	movs	r3, #0
 80054b4:	4630      	mov	r0, r6
 80054b6:	4639      	mov	r1, r7
 80054b8:	f7fb fb1e 	bl	8000af8 <__aeabi_dcmpeq>
 80054bc:	b1d0      	cbz	r0, 80054f4 <fmod+0x8c>
 80054be:	2301      	movs	r3, #1
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <fmod+0xc4>)
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80054ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80054ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80054d2:	f1b8 0f00 	cmp.w	r8, #0
 80054d6:	d116      	bne.n	8005506 <fmod+0x9e>
 80054d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80054dc:	4668      	mov	r0, sp
 80054de:	f001 fee4 	bl	80072aa <matherr>
 80054e2:	b1d8      	cbz	r0, 800551c <fmod+0xb4>
 80054e4:	9b08      	ldr	r3, [sp, #32]
 80054e6:	b11b      	cbz	r3, 80054f0 <fmod+0x88>
 80054e8:	f001 ff70 	bl	80073cc <__errno>
 80054ec:	9b08      	ldr	r3, [sp, #32]
 80054ee:	6003      	str	r3, [r0, #0]
 80054f0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80054f4:	eeb0 0a48 	vmov.f32	s0, s16
 80054f8:	eef0 0a68 	vmov.f32	s1, s17
 80054fc:	b00b      	add	sp, #44	; 0x2c
 80054fe:	ecbd 8b02 	vpop	{d8}
 8005502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	f7fb f9b5 	bl	800087c <__aeabi_ddiv>
 8005512:	f1b8 0f02 	cmp.w	r8, #2
 8005516:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800551a:	d1df      	bne.n	80054dc <fmod+0x74>
 800551c:	f001 ff56 	bl	80073cc <__errno>
 8005520:	2321      	movs	r3, #33	; 0x21
 8005522:	6003      	str	r3, [r0, #0]
 8005524:	e7de      	b.n	80054e4 <fmod+0x7c>
 8005526:	bf00      	nop
 8005528:	2000000d 	.word	0x2000000d
 800552c:	08008baa 	.word	0x08008baa

08005530 <__ieee754_acos>:
 8005530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	ec55 4b10 	vmov	r4, r5, d0
 8005538:	49b7      	ldr	r1, [pc, #732]	; (8005818 <__ieee754_acos+0x2e8>)
 800553a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800553e:	428b      	cmp	r3, r1
 8005540:	dd1b      	ble.n	800557a <__ieee754_acos+0x4a>
 8005542:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8005546:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800554a:	4323      	orrs	r3, r4
 800554c:	d109      	bne.n	8005562 <__ieee754_acos+0x32>
 800554e:	2d00      	cmp	r5, #0
 8005550:	f300 8211 	bgt.w	8005976 <__ieee754_acos+0x446>
 8005554:	a196      	add	r1, pc, #600	; (adr r1, 80057b0 <__ieee754_acos+0x280>)
 8005556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800555a:	ec41 0b10 	vmov	d0, r0, r1
 800555e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	ee10 2a10 	vmov	r2, s0
 8005566:	462b      	mov	r3, r5
 8005568:	4620      	mov	r0, r4
 800556a:	4629      	mov	r1, r5
 800556c:	f7fa fea4 	bl	80002b8 <__aeabi_dsub>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	f7fb f982 	bl	800087c <__aeabi_ddiv>
 8005578:	e7ef      	b.n	800555a <__ieee754_acos+0x2a>
 800557a:	49a8      	ldr	r1, [pc, #672]	; (800581c <__ieee754_acos+0x2ec>)
 800557c:	428b      	cmp	r3, r1
 800557e:	f300 8087 	bgt.w	8005690 <__ieee754_acos+0x160>
 8005582:	4aa7      	ldr	r2, [pc, #668]	; (8005820 <__ieee754_acos+0x2f0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	f340 81f9 	ble.w	800597c <__ieee754_acos+0x44c>
 800558a:	ee10 2a10 	vmov	r2, s0
 800558e:	ee10 0a10 	vmov	r0, s0
 8005592:	462b      	mov	r3, r5
 8005594:	4629      	mov	r1, r5
 8005596:	f7fb f847 	bl	8000628 <__aeabi_dmul>
 800559a:	a387      	add	r3, pc, #540	; (adr r3, 80057b8 <__ieee754_acos+0x288>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	4606      	mov	r6, r0
 80055a2:	460f      	mov	r7, r1
 80055a4:	f7fb f840 	bl	8000628 <__aeabi_dmul>
 80055a8:	a385      	add	r3, pc, #532	; (adr r3, 80057c0 <__ieee754_acos+0x290>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fa fe85 	bl	80002bc <__adddf3>
 80055b2:	4632      	mov	r2, r6
 80055b4:	463b      	mov	r3, r7
 80055b6:	f7fb f837 	bl	8000628 <__aeabi_dmul>
 80055ba:	a383      	add	r3, pc, #524	; (adr r3, 80057c8 <__ieee754_acos+0x298>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fa fe7a 	bl	80002b8 <__aeabi_dsub>
 80055c4:	4632      	mov	r2, r6
 80055c6:	463b      	mov	r3, r7
 80055c8:	f7fb f82e 	bl	8000628 <__aeabi_dmul>
 80055cc:	a380      	add	r3, pc, #512	; (adr r3, 80057d0 <__ieee754_acos+0x2a0>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fa fe73 	bl	80002bc <__adddf3>
 80055d6:	4632      	mov	r2, r6
 80055d8:	463b      	mov	r3, r7
 80055da:	f7fb f825 	bl	8000628 <__aeabi_dmul>
 80055de:	a37e      	add	r3, pc, #504	; (adr r3, 80057d8 <__ieee754_acos+0x2a8>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f7fa fe68 	bl	80002b8 <__aeabi_dsub>
 80055e8:	4632      	mov	r2, r6
 80055ea:	463b      	mov	r3, r7
 80055ec:	f7fb f81c 	bl	8000628 <__aeabi_dmul>
 80055f0:	a37b      	add	r3, pc, #492	; (adr r3, 80057e0 <__ieee754_acos+0x2b0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe61 	bl	80002bc <__adddf3>
 80055fa:	4632      	mov	r2, r6
 80055fc:	463b      	mov	r3, r7
 80055fe:	f7fb f813 	bl	8000628 <__aeabi_dmul>
 8005602:	a379      	add	r3, pc, #484	; (adr r3, 80057e8 <__ieee754_acos+0x2b8>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	4680      	mov	r8, r0
 800560a:	4689      	mov	r9, r1
 800560c:	4630      	mov	r0, r6
 800560e:	4639      	mov	r1, r7
 8005610:	f7fb f80a 	bl	8000628 <__aeabi_dmul>
 8005614:	a376      	add	r3, pc, #472	; (adr r3, 80057f0 <__ieee754_acos+0x2c0>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa fe4d 	bl	80002b8 <__aeabi_dsub>
 800561e:	4632      	mov	r2, r6
 8005620:	463b      	mov	r3, r7
 8005622:	f7fb f801 	bl	8000628 <__aeabi_dmul>
 8005626:	a374      	add	r3, pc, #464	; (adr r3, 80057f8 <__ieee754_acos+0x2c8>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f7fa fe46 	bl	80002bc <__adddf3>
 8005630:	4632      	mov	r2, r6
 8005632:	463b      	mov	r3, r7
 8005634:	f7fa fff8 	bl	8000628 <__aeabi_dmul>
 8005638:	a371      	add	r3, pc, #452	; (adr r3, 8005800 <__ieee754_acos+0x2d0>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fe3b 	bl	80002b8 <__aeabi_dsub>
 8005642:	4632      	mov	r2, r6
 8005644:	463b      	mov	r3, r7
 8005646:	f7fa ffef 	bl	8000628 <__aeabi_dmul>
 800564a:	2200      	movs	r2, #0
 800564c:	4b75      	ldr	r3, [pc, #468]	; (8005824 <__ieee754_acos+0x2f4>)
 800564e:	f7fa fe35 	bl	80002bc <__adddf3>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4640      	mov	r0, r8
 8005658:	4649      	mov	r1, r9
 800565a:	f7fb f90f 	bl	800087c <__aeabi_ddiv>
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	f7fa ffe1 	bl	8000628 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	a167      	add	r1, pc, #412	; (adr r1, 8005808 <__ieee754_acos+0x2d8>)
 800566c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005670:	f7fa fe22 	bl	80002b8 <__aeabi_dsub>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4620      	mov	r0, r4
 800567a:	4629      	mov	r1, r5
 800567c:	f7fa fe1c 	bl	80002b8 <__aeabi_dsub>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	a162      	add	r1, pc, #392	; (adr r1, 8005810 <__ieee754_acos+0x2e0>)
 8005686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800568a:	f7fa fe15 	bl	80002b8 <__aeabi_dsub>
 800568e:	e764      	b.n	800555a <__ieee754_acos+0x2a>
 8005690:	2d00      	cmp	r5, #0
 8005692:	f280 80cb 	bge.w	800582c <__ieee754_acos+0x2fc>
 8005696:	ee10 0a10 	vmov	r0, s0
 800569a:	2200      	movs	r2, #0
 800569c:	4b61      	ldr	r3, [pc, #388]	; (8005824 <__ieee754_acos+0x2f4>)
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fa fe0c 	bl	80002bc <__adddf3>
 80056a4:	2200      	movs	r2, #0
 80056a6:	4b60      	ldr	r3, [pc, #384]	; (8005828 <__ieee754_acos+0x2f8>)
 80056a8:	f7fa ffbe 	bl	8000628 <__aeabi_dmul>
 80056ac:	a342      	add	r3, pc, #264	; (adr r3, 80057b8 <__ieee754_acos+0x288>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	4604      	mov	r4, r0
 80056b4:	460d      	mov	r5, r1
 80056b6:	f7fa ffb7 	bl	8000628 <__aeabi_dmul>
 80056ba:	a341      	add	r3, pc, #260	; (adr r3, 80057c0 <__ieee754_acos+0x290>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f7fa fdfc 	bl	80002bc <__adddf3>
 80056c4:	4622      	mov	r2, r4
 80056c6:	462b      	mov	r3, r5
 80056c8:	f7fa ffae 	bl	8000628 <__aeabi_dmul>
 80056cc:	a33e      	add	r3, pc, #248	; (adr r3, 80057c8 <__ieee754_acos+0x298>)
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f7fa fdf1 	bl	80002b8 <__aeabi_dsub>
 80056d6:	4622      	mov	r2, r4
 80056d8:	462b      	mov	r3, r5
 80056da:	f7fa ffa5 	bl	8000628 <__aeabi_dmul>
 80056de:	a33c      	add	r3, pc, #240	; (adr r3, 80057d0 <__ieee754_acos+0x2a0>)
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f7fa fdea 	bl	80002bc <__adddf3>
 80056e8:	4622      	mov	r2, r4
 80056ea:	462b      	mov	r3, r5
 80056ec:	f7fa ff9c 	bl	8000628 <__aeabi_dmul>
 80056f0:	a339      	add	r3, pc, #228	; (adr r3, 80057d8 <__ieee754_acos+0x2a8>)
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	f7fa fddf 	bl	80002b8 <__aeabi_dsub>
 80056fa:	4622      	mov	r2, r4
 80056fc:	462b      	mov	r3, r5
 80056fe:	f7fa ff93 	bl	8000628 <__aeabi_dmul>
 8005702:	a337      	add	r3, pc, #220	; (adr r3, 80057e0 <__ieee754_acos+0x2b0>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f7fa fdd8 	bl	80002bc <__adddf3>
 800570c:	4622      	mov	r2, r4
 800570e:	462b      	mov	r3, r5
 8005710:	f7fa ff8a 	bl	8000628 <__aeabi_dmul>
 8005714:	ec45 4b10 	vmov	d0, r4, r5
 8005718:	4680      	mov	r8, r0
 800571a:	4689      	mov	r9, r1
 800571c:	f000 fe7a 	bl	8006414 <__ieee754_sqrt>
 8005720:	a331      	add	r3, pc, #196	; (adr r3, 80057e8 <__ieee754_acos+0x2b8>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	ec57 6b10 	vmov	r6, r7, d0
 800572e:	f7fa ff7b 	bl	8000628 <__aeabi_dmul>
 8005732:	a32f      	add	r3, pc, #188	; (adr r3, 80057f0 <__ieee754_acos+0x2c0>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa fdbe 	bl	80002b8 <__aeabi_dsub>
 800573c:	4622      	mov	r2, r4
 800573e:	462b      	mov	r3, r5
 8005740:	f7fa ff72 	bl	8000628 <__aeabi_dmul>
 8005744:	a32c      	add	r3, pc, #176	; (adr r3, 80057f8 <__ieee754_acos+0x2c8>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fdb7 	bl	80002bc <__adddf3>
 800574e:	4622      	mov	r2, r4
 8005750:	462b      	mov	r3, r5
 8005752:	f7fa ff69 	bl	8000628 <__aeabi_dmul>
 8005756:	a32a      	add	r3, pc, #168	; (adr r3, 8005800 <__ieee754_acos+0x2d0>)
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f7fa fdac 	bl	80002b8 <__aeabi_dsub>
 8005760:	4622      	mov	r2, r4
 8005762:	462b      	mov	r3, r5
 8005764:	f7fa ff60 	bl	8000628 <__aeabi_dmul>
 8005768:	2200      	movs	r2, #0
 800576a:	4b2e      	ldr	r3, [pc, #184]	; (8005824 <__ieee754_acos+0x2f4>)
 800576c:	f7fa fda6 	bl	80002bc <__adddf3>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4640      	mov	r0, r8
 8005776:	4649      	mov	r1, r9
 8005778:	f7fb f880 	bl	800087c <__aeabi_ddiv>
 800577c:	4632      	mov	r2, r6
 800577e:	463b      	mov	r3, r7
 8005780:	f7fa ff52 	bl	8000628 <__aeabi_dmul>
 8005784:	a320      	add	r3, pc, #128	; (adr r3, 8005808 <__ieee754_acos+0x2d8>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fd95 	bl	80002b8 <__aeabi_dsub>
 800578e:	4632      	mov	r2, r6
 8005790:	463b      	mov	r3, r7
 8005792:	f7fa fd93 	bl	80002bc <__adddf3>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	f7fa fd8f 	bl	80002bc <__adddf3>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	a103      	add	r1, pc, #12	; (adr r1, 80057b0 <__ieee754_acos+0x280>)
 80057a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057a8:	e76f      	b.n	800568a <__ieee754_acos+0x15a>
 80057aa:	bf00      	nop
 80057ac:	f3af 8000 	nop.w
 80057b0:	54442d18 	.word	0x54442d18
 80057b4:	400921fb 	.word	0x400921fb
 80057b8:	0dfdf709 	.word	0x0dfdf709
 80057bc:	3f023de1 	.word	0x3f023de1
 80057c0:	7501b288 	.word	0x7501b288
 80057c4:	3f49efe0 	.word	0x3f49efe0
 80057c8:	b5688f3b 	.word	0xb5688f3b
 80057cc:	3fa48228 	.word	0x3fa48228
 80057d0:	0e884455 	.word	0x0e884455
 80057d4:	3fc9c155 	.word	0x3fc9c155
 80057d8:	03eb6f7d 	.word	0x03eb6f7d
 80057dc:	3fd4d612 	.word	0x3fd4d612
 80057e0:	55555555 	.word	0x55555555
 80057e4:	3fc55555 	.word	0x3fc55555
 80057e8:	b12e9282 	.word	0xb12e9282
 80057ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80057f0:	1b8d0159 	.word	0x1b8d0159
 80057f4:	3fe6066c 	.word	0x3fe6066c
 80057f8:	9c598ac8 	.word	0x9c598ac8
 80057fc:	40002ae5 	.word	0x40002ae5
 8005800:	1c8a2d4b 	.word	0x1c8a2d4b
 8005804:	40033a27 	.word	0x40033a27
 8005808:	33145c07 	.word	0x33145c07
 800580c:	3c91a626 	.word	0x3c91a626
 8005810:	54442d18 	.word	0x54442d18
 8005814:	3ff921fb 	.word	0x3ff921fb
 8005818:	3fefffff 	.word	0x3fefffff
 800581c:	3fdfffff 	.word	0x3fdfffff
 8005820:	3c600000 	.word	0x3c600000
 8005824:	3ff00000 	.word	0x3ff00000
 8005828:	3fe00000 	.word	0x3fe00000
 800582c:	ee10 2a10 	vmov	r2, s0
 8005830:	462b      	mov	r3, r5
 8005832:	2000      	movs	r0, #0
 8005834:	496a      	ldr	r1, [pc, #424]	; (80059e0 <__ieee754_acos+0x4b0>)
 8005836:	f7fa fd3f 	bl	80002b8 <__aeabi_dsub>
 800583a:	2200      	movs	r2, #0
 800583c:	4b69      	ldr	r3, [pc, #420]	; (80059e4 <__ieee754_acos+0x4b4>)
 800583e:	f7fa fef3 	bl	8000628 <__aeabi_dmul>
 8005842:	4604      	mov	r4, r0
 8005844:	460d      	mov	r5, r1
 8005846:	ec45 4b10 	vmov	d0, r4, r5
 800584a:	f000 fde3 	bl	8006414 <__ieee754_sqrt>
 800584e:	a34e      	add	r3, pc, #312	; (adr r3, 8005988 <__ieee754_acos+0x458>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	4620      	mov	r0, r4
 8005856:	4629      	mov	r1, r5
 8005858:	ec59 8b10 	vmov	r8, r9, d0
 800585c:	f7fa fee4 	bl	8000628 <__aeabi_dmul>
 8005860:	a34b      	add	r3, pc, #300	; (adr r3, 8005990 <__ieee754_acos+0x460>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa fd29 	bl	80002bc <__adddf3>
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	f7fa fedb 	bl	8000628 <__aeabi_dmul>
 8005872:	a349      	add	r3, pc, #292	; (adr r3, 8005998 <__ieee754_acos+0x468>)
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f7fa fd1e 	bl	80002b8 <__aeabi_dsub>
 800587c:	4622      	mov	r2, r4
 800587e:	462b      	mov	r3, r5
 8005880:	f7fa fed2 	bl	8000628 <__aeabi_dmul>
 8005884:	a346      	add	r3, pc, #280	; (adr r3, 80059a0 <__ieee754_acos+0x470>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fd17 	bl	80002bc <__adddf3>
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	f7fa fec9 	bl	8000628 <__aeabi_dmul>
 8005896:	a344      	add	r3, pc, #272	; (adr r3, 80059a8 <__ieee754_acos+0x478>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f7fa fd0c 	bl	80002b8 <__aeabi_dsub>
 80058a0:	4622      	mov	r2, r4
 80058a2:	462b      	mov	r3, r5
 80058a4:	f7fa fec0 	bl	8000628 <__aeabi_dmul>
 80058a8:	a341      	add	r3, pc, #260	; (adr r3, 80059b0 <__ieee754_acos+0x480>)
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f7fa fd05 	bl	80002bc <__adddf3>
 80058b2:	4622      	mov	r2, r4
 80058b4:	462b      	mov	r3, r5
 80058b6:	f7fa feb7 	bl	8000628 <__aeabi_dmul>
 80058ba:	a33f      	add	r3, pc, #252	; (adr r3, 80059b8 <__ieee754_acos+0x488>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	4682      	mov	sl, r0
 80058c2:	468b      	mov	fp, r1
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f7fa feae 	bl	8000628 <__aeabi_dmul>
 80058cc:	a33c      	add	r3, pc, #240	; (adr r3, 80059c0 <__ieee754_acos+0x490>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f7fa fcf1 	bl	80002b8 <__aeabi_dsub>
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	f7fa fea5 	bl	8000628 <__aeabi_dmul>
 80058de:	a33a      	add	r3, pc, #232	; (adr r3, 80059c8 <__ieee754_acos+0x498>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f7fa fcea 	bl	80002bc <__adddf3>
 80058e8:	4622      	mov	r2, r4
 80058ea:	462b      	mov	r3, r5
 80058ec:	f7fa fe9c 	bl	8000628 <__aeabi_dmul>
 80058f0:	a337      	add	r3, pc, #220	; (adr r3, 80059d0 <__ieee754_acos+0x4a0>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f7fa fcdf 	bl	80002b8 <__aeabi_dsub>
 80058fa:	4622      	mov	r2, r4
 80058fc:	462b      	mov	r3, r5
 80058fe:	f7fa fe93 	bl	8000628 <__aeabi_dmul>
 8005902:	2200      	movs	r2, #0
 8005904:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <__ieee754_acos+0x4b0>)
 8005906:	f7fa fcd9 	bl	80002bc <__adddf3>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4650      	mov	r0, sl
 8005910:	4659      	mov	r1, fp
 8005912:	f7fa ffb3 	bl	800087c <__aeabi_ddiv>
 8005916:	4642      	mov	r2, r8
 8005918:	464b      	mov	r3, r9
 800591a:	f7fa fe85 	bl	8000628 <__aeabi_dmul>
 800591e:	2600      	movs	r6, #0
 8005920:	4682      	mov	sl, r0
 8005922:	468b      	mov	fp, r1
 8005924:	4632      	mov	r2, r6
 8005926:	464b      	mov	r3, r9
 8005928:	4630      	mov	r0, r6
 800592a:	4649      	mov	r1, r9
 800592c:	f7fa fe7c 	bl	8000628 <__aeabi_dmul>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4620      	mov	r0, r4
 8005936:	4629      	mov	r1, r5
 8005938:	f7fa fcbe 	bl	80002b8 <__aeabi_dsub>
 800593c:	4632      	mov	r2, r6
 800593e:	4604      	mov	r4, r0
 8005940:	460d      	mov	r5, r1
 8005942:	464b      	mov	r3, r9
 8005944:	4640      	mov	r0, r8
 8005946:	4649      	mov	r1, r9
 8005948:	f7fa fcb8 	bl	80002bc <__adddf3>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4620      	mov	r0, r4
 8005952:	4629      	mov	r1, r5
 8005954:	f7fa ff92 	bl	800087c <__aeabi_ddiv>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4650      	mov	r0, sl
 800595e:	4659      	mov	r1, fp
 8005960:	f7fa fcac 	bl	80002bc <__adddf3>
 8005964:	4632      	mov	r2, r6
 8005966:	464b      	mov	r3, r9
 8005968:	f7fa fca8 	bl	80002bc <__adddf3>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	f7fa fca4 	bl	80002bc <__adddf3>
 8005974:	e5f1      	b.n	800555a <__ieee754_acos+0x2a>
 8005976:	2000      	movs	r0, #0
 8005978:	2100      	movs	r1, #0
 800597a:	e5ee      	b.n	800555a <__ieee754_acos+0x2a>
 800597c:	a116      	add	r1, pc, #88	; (adr r1, 80059d8 <__ieee754_acos+0x4a8>)
 800597e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005982:	e5ea      	b.n	800555a <__ieee754_acos+0x2a>
 8005984:	f3af 8000 	nop.w
 8005988:	0dfdf709 	.word	0x0dfdf709
 800598c:	3f023de1 	.word	0x3f023de1
 8005990:	7501b288 	.word	0x7501b288
 8005994:	3f49efe0 	.word	0x3f49efe0
 8005998:	b5688f3b 	.word	0xb5688f3b
 800599c:	3fa48228 	.word	0x3fa48228
 80059a0:	0e884455 	.word	0x0e884455
 80059a4:	3fc9c155 	.word	0x3fc9c155
 80059a8:	03eb6f7d 	.word	0x03eb6f7d
 80059ac:	3fd4d612 	.word	0x3fd4d612
 80059b0:	55555555 	.word	0x55555555
 80059b4:	3fc55555 	.word	0x3fc55555
 80059b8:	b12e9282 	.word	0xb12e9282
 80059bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80059c0:	1b8d0159 	.word	0x1b8d0159
 80059c4:	3fe6066c 	.word	0x3fe6066c
 80059c8:	9c598ac8 	.word	0x9c598ac8
 80059cc:	40002ae5 	.word	0x40002ae5
 80059d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80059d4:	40033a27 	.word	0x40033a27
 80059d8:	54442d18 	.word	0x54442d18
 80059dc:	3ff921fb 	.word	0x3ff921fb
 80059e0:	3ff00000 	.word	0x3ff00000
 80059e4:	3fe00000 	.word	0x3fe00000

080059e8 <__ieee754_asin>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ec55 4b10 	vmov	r4, r5, d0
 80059f0:	4bcb      	ldr	r3, [pc, #812]	; (8005d20 <__ieee754_asin+0x338>)
 80059f2:	b087      	sub	sp, #28
 80059f4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80059f8:	429f      	cmp	r7, r3
 80059fa:	9501      	str	r5, [sp, #4]
 80059fc:	dd31      	ble.n	8005a62 <__ieee754_asin+0x7a>
 80059fe:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8005a02:	ee10 3a10 	vmov	r3, s0
 8005a06:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8005a0a:	433b      	orrs	r3, r7
 8005a0c:	d117      	bne.n	8005a3e <__ieee754_asin+0x56>
 8005a0e:	a3aa      	add	r3, pc, #680	; (adr r3, 8005cb8 <__ieee754_asin+0x2d0>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	ee10 0a10 	vmov	r0, s0
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fe05 	bl	8000628 <__aeabi_dmul>
 8005a1e:	a3a8      	add	r3, pc, #672	; (adr r3, 8005cc0 <__ieee754_asin+0x2d8>)
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	4620      	mov	r0, r4
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f7fa fdfc 	bl	8000628 <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	f7fa fc40 	bl	80002bc <__adddf3>
 8005a3c:	e00a      	b.n	8005a54 <__ieee754_asin+0x6c>
 8005a3e:	ee10 2a10 	vmov	r2, s0
 8005a42:	462b      	mov	r3, r5
 8005a44:	4620      	mov	r0, r4
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7fa fc36 	bl	80002b8 <__aeabi_dsub>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	f7fa ff14 	bl	800087c <__aeabi_ddiv>
 8005a54:	4604      	mov	r4, r0
 8005a56:	460d      	mov	r5, r1
 8005a58:	ec45 4b10 	vmov	d0, r4, r5
 8005a5c:	b007      	add	sp, #28
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	4bb0      	ldr	r3, [pc, #704]	; (8005d24 <__ieee754_asin+0x33c>)
 8005a64:	429f      	cmp	r7, r3
 8005a66:	dc11      	bgt.n	8005a8c <__ieee754_asin+0xa4>
 8005a68:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8005a6c:	f280 80ae 	bge.w	8005bcc <__ieee754_asin+0x1e4>
 8005a70:	a395      	add	r3, pc, #596	; (adr r3, 8005cc8 <__ieee754_asin+0x2e0>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	ee10 0a10 	vmov	r0, s0
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	f7fa fc1e 	bl	80002bc <__adddf3>
 8005a80:	2200      	movs	r2, #0
 8005a82:	4ba9      	ldr	r3, [pc, #676]	; (8005d28 <__ieee754_asin+0x340>)
 8005a84:	f7fb f860 	bl	8000b48 <__aeabi_dcmpgt>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d1e5      	bne.n	8005a58 <__ieee754_asin+0x70>
 8005a8c:	ec45 4b10 	vmov	d0, r4, r5
 8005a90:	f001 fc02 	bl	8007298 <fabs>
 8005a94:	2000      	movs	r0, #0
 8005a96:	ec53 2b10 	vmov	r2, r3, d0
 8005a9a:	49a3      	ldr	r1, [pc, #652]	; (8005d28 <__ieee754_asin+0x340>)
 8005a9c:	f7fa fc0c 	bl	80002b8 <__aeabi_dsub>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4ba2      	ldr	r3, [pc, #648]	; (8005d2c <__ieee754_asin+0x344>)
 8005aa4:	f7fa fdc0 	bl	8000628 <__aeabi_dmul>
 8005aa8:	a389      	add	r3, pc, #548	; (adr r3, 8005cd0 <__ieee754_asin+0x2e8>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	f7fa fdb9 	bl	8000628 <__aeabi_dmul>
 8005ab6:	a388      	add	r3, pc, #544	; (adr r3, 8005cd8 <__ieee754_asin+0x2f0>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f7fa fbfe 	bl	80002bc <__adddf3>
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	f7fa fdb0 	bl	8000628 <__aeabi_dmul>
 8005ac8:	a385      	add	r3, pc, #532	; (adr r3, 8005ce0 <__ieee754_asin+0x2f8>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa fbf3 	bl	80002b8 <__aeabi_dsub>
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	f7fa fda7 	bl	8000628 <__aeabi_dmul>
 8005ada:	a383      	add	r3, pc, #524	; (adr r3, 8005ce8 <__ieee754_asin+0x300>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f7fa fbec 	bl	80002bc <__adddf3>
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	f7fa fd9e 	bl	8000628 <__aeabi_dmul>
 8005aec:	a380      	add	r3, pc, #512	; (adr r3, 8005cf0 <__ieee754_asin+0x308>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f7fa fbe1 	bl	80002b8 <__aeabi_dsub>
 8005af6:	4622      	mov	r2, r4
 8005af8:	462b      	mov	r3, r5
 8005afa:	f7fa fd95 	bl	8000628 <__aeabi_dmul>
 8005afe:	a37e      	add	r3, pc, #504	; (adr r3, 8005cf8 <__ieee754_asin+0x310>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fbda 	bl	80002bc <__adddf3>
 8005b08:	4622      	mov	r2, r4
 8005b0a:	462b      	mov	r3, r5
 8005b0c:	f7fa fd8c 	bl	8000628 <__aeabi_dmul>
 8005b10:	a37b      	add	r3, pc, #492	; (adr r3, 8005d00 <__ieee754_asin+0x318>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	4680      	mov	r8, r0
 8005b18:	4689      	mov	r9, r1
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	f7fa fd83 	bl	8000628 <__aeabi_dmul>
 8005b22:	a379      	add	r3, pc, #484	; (adr r3, 8005d08 <__ieee754_asin+0x320>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fbc6 	bl	80002b8 <__aeabi_dsub>
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	462b      	mov	r3, r5
 8005b30:	f7fa fd7a 	bl	8000628 <__aeabi_dmul>
 8005b34:	a376      	add	r3, pc, #472	; (adr r3, 8005d10 <__ieee754_asin+0x328>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fbbf 	bl	80002bc <__adddf3>
 8005b3e:	4622      	mov	r2, r4
 8005b40:	462b      	mov	r3, r5
 8005b42:	f7fa fd71 	bl	8000628 <__aeabi_dmul>
 8005b46:	a374      	add	r3, pc, #464	; (adr r3, 8005d18 <__ieee754_asin+0x330>)
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f7fa fbb4 	bl	80002b8 <__aeabi_dsub>
 8005b50:	4622      	mov	r2, r4
 8005b52:	462b      	mov	r3, r5
 8005b54:	f7fa fd68 	bl	8000628 <__aeabi_dmul>
 8005b58:	4b73      	ldr	r3, [pc, #460]	; (8005d28 <__ieee754_asin+0x340>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f7fa fbae 	bl	80002bc <__adddf3>
 8005b60:	ec45 4b10 	vmov	d0, r4, r5
 8005b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b68:	f000 fc54 	bl	8006414 <__ieee754_sqrt>
 8005b6c:	4b70      	ldr	r3, [pc, #448]	; (8005d30 <__ieee754_asin+0x348>)
 8005b6e:	429f      	cmp	r7, r3
 8005b70:	ec5b ab10 	vmov	sl, fp, d0
 8005b74:	f340 80de 	ble.w	8005d34 <__ieee754_asin+0x34c>
 8005b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	4649      	mov	r1, r9
 8005b80:	f7fa fe7c 	bl	800087c <__aeabi_ddiv>
 8005b84:	4652      	mov	r2, sl
 8005b86:	465b      	mov	r3, fp
 8005b88:	f7fa fd4e 	bl	8000628 <__aeabi_dmul>
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	465b      	mov	r3, fp
 8005b90:	f7fa fb94 	bl	80002bc <__adddf3>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	f7fa fb90 	bl	80002bc <__adddf3>
 8005b9c:	a348      	add	r3, pc, #288	; (adr r3, 8005cc0 <__ieee754_asin+0x2d8>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fb89 	bl	80002b8 <__aeabi_dsub>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	a143      	add	r1, pc, #268	; (adr r1, 8005cb8 <__ieee754_asin+0x2d0>)
 8005bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb0:	f7fa fb82 	bl	80002b8 <__aeabi_dsub>
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bfdc      	itt	le
 8005bba:	4602      	movle	r2, r0
 8005bbc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	460d      	mov	r5, r1
 8005bc4:	bfdc      	itt	le
 8005bc6:	4614      	movle	r4, r2
 8005bc8:	461d      	movle	r5, r3
 8005bca:	e745      	b.n	8005a58 <__ieee754_asin+0x70>
 8005bcc:	ee10 2a10 	vmov	r2, s0
 8005bd0:	ee10 0a10 	vmov	r0, s0
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa fd26 	bl	8000628 <__aeabi_dmul>
 8005bdc:	a33c      	add	r3, pc, #240	; (adr r3, 8005cd0 <__ieee754_asin+0x2e8>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	4606      	mov	r6, r0
 8005be4:	460f      	mov	r7, r1
 8005be6:	f7fa fd1f 	bl	8000628 <__aeabi_dmul>
 8005bea:	a33b      	add	r3, pc, #236	; (adr r3, 8005cd8 <__ieee754_asin+0x2f0>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	f7fa fb64 	bl	80002bc <__adddf3>
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	f7fa fd16 	bl	8000628 <__aeabi_dmul>
 8005bfc:	a338      	add	r3, pc, #224	; (adr r3, 8005ce0 <__ieee754_asin+0x2f8>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f7fa fb59 	bl	80002b8 <__aeabi_dsub>
 8005c06:	4632      	mov	r2, r6
 8005c08:	463b      	mov	r3, r7
 8005c0a:	f7fa fd0d 	bl	8000628 <__aeabi_dmul>
 8005c0e:	a336      	add	r3, pc, #216	; (adr r3, 8005ce8 <__ieee754_asin+0x300>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa fb52 	bl	80002bc <__adddf3>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	f7fa fd04 	bl	8000628 <__aeabi_dmul>
 8005c20:	a333      	add	r3, pc, #204	; (adr r3, 8005cf0 <__ieee754_asin+0x308>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f7fa fb47 	bl	80002b8 <__aeabi_dsub>
 8005c2a:	4632      	mov	r2, r6
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	f7fa fcfb 	bl	8000628 <__aeabi_dmul>
 8005c32:	a331      	add	r3, pc, #196	; (adr r3, 8005cf8 <__ieee754_asin+0x310>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fb40 	bl	80002bc <__adddf3>
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	f7fa fcf2 	bl	8000628 <__aeabi_dmul>
 8005c44:	a32e      	add	r3, pc, #184	; (adr r3, 8005d00 <__ieee754_asin+0x318>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	4689      	mov	r9, r1
 8005c4e:	4630      	mov	r0, r6
 8005c50:	4639      	mov	r1, r7
 8005c52:	f7fa fce9 	bl	8000628 <__aeabi_dmul>
 8005c56:	a32c      	add	r3, pc, #176	; (adr r3, 8005d08 <__ieee754_asin+0x320>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f7fa fb2c 	bl	80002b8 <__aeabi_dsub>
 8005c60:	4632      	mov	r2, r6
 8005c62:	463b      	mov	r3, r7
 8005c64:	f7fa fce0 	bl	8000628 <__aeabi_dmul>
 8005c68:	a329      	add	r3, pc, #164	; (adr r3, 8005d10 <__ieee754_asin+0x328>)
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f7fa fb25 	bl	80002bc <__adddf3>
 8005c72:	4632      	mov	r2, r6
 8005c74:	463b      	mov	r3, r7
 8005c76:	f7fa fcd7 	bl	8000628 <__aeabi_dmul>
 8005c7a:	a327      	add	r3, pc, #156	; (adr r3, 8005d18 <__ieee754_asin+0x330>)
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f7fa fb1a 	bl	80002b8 <__aeabi_dsub>
 8005c84:	4632      	mov	r2, r6
 8005c86:	463b      	mov	r3, r7
 8005c88:	f7fa fcce 	bl	8000628 <__aeabi_dmul>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <__ieee754_asin+0x340>)
 8005c90:	f7fa fb14 	bl	80002bc <__adddf3>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa fdee 	bl	800087c <__aeabi_ddiv>
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	462b      	mov	r3, r5
 8005ca4:	f7fa fcc0 	bl	8000628 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	e6c2      	b.n	8005a38 <__ieee754_asin+0x50>
 8005cb2:	bf00      	nop
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	54442d18 	.word	0x54442d18
 8005cbc:	3ff921fb 	.word	0x3ff921fb
 8005cc0:	33145c07 	.word	0x33145c07
 8005cc4:	3c91a626 	.word	0x3c91a626
 8005cc8:	8800759c 	.word	0x8800759c
 8005ccc:	7e37e43c 	.word	0x7e37e43c
 8005cd0:	0dfdf709 	.word	0x0dfdf709
 8005cd4:	3f023de1 	.word	0x3f023de1
 8005cd8:	7501b288 	.word	0x7501b288
 8005cdc:	3f49efe0 	.word	0x3f49efe0
 8005ce0:	b5688f3b 	.word	0xb5688f3b
 8005ce4:	3fa48228 	.word	0x3fa48228
 8005ce8:	0e884455 	.word	0x0e884455
 8005cec:	3fc9c155 	.word	0x3fc9c155
 8005cf0:	03eb6f7d 	.word	0x03eb6f7d
 8005cf4:	3fd4d612 	.word	0x3fd4d612
 8005cf8:	55555555 	.word	0x55555555
 8005cfc:	3fc55555 	.word	0x3fc55555
 8005d00:	b12e9282 	.word	0xb12e9282
 8005d04:	3fb3b8c5 	.word	0x3fb3b8c5
 8005d08:	1b8d0159 	.word	0x1b8d0159
 8005d0c:	3fe6066c 	.word	0x3fe6066c
 8005d10:	9c598ac8 	.word	0x9c598ac8
 8005d14:	40002ae5 	.word	0x40002ae5
 8005d18:	1c8a2d4b 	.word	0x1c8a2d4b
 8005d1c:	40033a27 	.word	0x40033a27
 8005d20:	3fefffff 	.word	0x3fefffff
 8005d24:	3fdfffff 	.word	0x3fdfffff
 8005d28:	3ff00000 	.word	0x3ff00000
 8005d2c:	3fe00000 	.word	0x3fe00000
 8005d30:	3fef3332 	.word	0x3fef3332
 8005d34:	ee10 2a10 	vmov	r2, s0
 8005d38:	ee10 0a10 	vmov	r0, s0
 8005d3c:	465b      	mov	r3, fp
 8005d3e:	4659      	mov	r1, fp
 8005d40:	f7fa fabc 	bl	80002bc <__adddf3>
 8005d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fd94 	bl	800087c <__aeabi_ddiv>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d5c:	f7fa fc64 	bl	8000628 <__aeabi_dmul>
 8005d60:	2600      	movs	r6, #0
 8005d62:	4680      	mov	r8, r0
 8005d64:	4689      	mov	r9, r1
 8005d66:	4632      	mov	r2, r6
 8005d68:	465b      	mov	r3, fp
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4659      	mov	r1, fp
 8005d6e:	f7fa fc5b 	bl	8000628 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fa9d 	bl	80002b8 <__aeabi_dsub>
 8005d7e:	4632      	mov	r2, r6
 8005d80:	4604      	mov	r4, r0
 8005d82:	460d      	mov	r5, r1
 8005d84:	465b      	mov	r3, fp
 8005d86:	4650      	mov	r0, sl
 8005d88:	4659      	mov	r1, fp
 8005d8a:	f7fa fa97 	bl	80002bc <__adddf3>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4620      	mov	r0, r4
 8005d94:	4629      	mov	r1, r5
 8005d96:	f7fa fd71 	bl	800087c <__aeabi_ddiv>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	f7fa fa8d 	bl	80002bc <__adddf3>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	a114      	add	r1, pc, #80	; (adr r1, 8005df8 <__ieee754_asin+0x410>)
 8005da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dac:	f7fa fa84 	bl	80002b8 <__aeabi_dsub>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4640      	mov	r0, r8
 8005db6:	4649      	mov	r1, r9
 8005db8:	f7fa fa7e 	bl	80002b8 <__aeabi_dsub>
 8005dbc:	465f      	mov	r7, fp
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	4632      	mov	r2, r6
 8005dc4:	465b      	mov	r3, fp
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	f7fa fa77 	bl	80002bc <__adddf3>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	a10b      	add	r1, pc, #44	; (adr r1, 8005e00 <__ieee754_asin+0x418>)
 8005dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd8:	f7fa fa6e 	bl	80002b8 <__aeabi_dsub>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4620      	mov	r0, r4
 8005de2:	4629      	mov	r1, r5
 8005de4:	f7fa fa68 	bl	80002b8 <__aeabi_dsub>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	a104      	add	r1, pc, #16	; (adr r1, 8005e00 <__ieee754_asin+0x418>)
 8005dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005df2:	e6dd      	b.n	8005bb0 <__ieee754_asin+0x1c8>
 8005df4:	f3af 8000 	nop.w
 8005df8:	33145c07 	.word	0x33145c07
 8005dfc:	3c91a626 	.word	0x3c91a626
 8005e00:	54442d18 	.word	0x54442d18
 8005e04:	3fe921fb 	.word	0x3fe921fb

08005e08 <__ieee754_fmod>:
 8005e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e0c:	ec53 2b11 	vmov	r2, r3, d1
 8005e10:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8005e14:	ea5e 0402 	orrs.w	r4, lr, r2
 8005e18:	ec51 0b10 	vmov	r0, r1, d0
 8005e1c:	461e      	mov	r6, r3
 8005e1e:	ee11 5a10 	vmov	r5, s2
 8005e22:	4694      	mov	ip, r2
 8005e24:	d00c      	beq.n	8005e40 <__ieee754_fmod+0x38>
 8005e26:	4c7a      	ldr	r4, [pc, #488]	; (8006010 <__ieee754_fmod+0x208>)
 8005e28:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8005e2c:	45a0      	cmp	r8, r4
 8005e2e:	4689      	mov	r9, r1
 8005e30:	dc06      	bgt.n	8005e40 <__ieee754_fmod+0x38>
 8005e32:	4254      	negs	r4, r2
 8005e34:	4314      	orrs	r4, r2
 8005e36:	4f77      	ldr	r7, [pc, #476]	; (8006014 <__ieee754_fmod+0x20c>)
 8005e38:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8005e3c:	42bc      	cmp	r4, r7
 8005e3e:	d909      	bls.n	8005e54 <__ieee754_fmod+0x4c>
 8005e40:	f7fa fbf2 	bl	8000628 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	f7fa fd18 	bl	800087c <__aeabi_ddiv>
 8005e4c:	ec41 0b10 	vmov	d0, r0, r1
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	45f0      	cmp	r8, lr
 8005e56:	ee10 2a10 	vmov	r2, s0
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8005e60:	dc0a      	bgt.n	8005e78 <__ieee754_fmod+0x70>
 8005e62:	dbf3      	blt.n	8005e4c <__ieee754_fmod+0x44>
 8005e64:	42a8      	cmp	r0, r5
 8005e66:	d3f1      	bcc.n	8005e4c <__ieee754_fmod+0x44>
 8005e68:	d106      	bne.n	8005e78 <__ieee754_fmod+0x70>
 8005e6a:	496b      	ldr	r1, [pc, #428]	; (8006018 <__ieee754_fmod+0x210>)
 8005e6c:	0fe4      	lsrs	r4, r4, #31
 8005e6e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005e72:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005e76:	e7e9      	b.n	8005e4c <__ieee754_fmod+0x44>
 8005e78:	4b68      	ldr	r3, [pc, #416]	; (800601c <__ieee754_fmod+0x214>)
 8005e7a:	4598      	cmp	r8, r3
 8005e7c:	dc49      	bgt.n	8005f12 <__ieee754_fmod+0x10a>
 8005e7e:	f1b8 0f00 	cmp.w	r8, #0
 8005e82:	d13d      	bne.n	8005f00 <__ieee754_fmod+0xf8>
 8005e84:	4866      	ldr	r0, [pc, #408]	; (8006020 <__ieee754_fmod+0x218>)
 8005e86:	4611      	mov	r1, r2
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	dc36      	bgt.n	8005efa <__ieee754_fmod+0xf2>
 8005e8c:	459e      	cmp	lr, r3
 8005e8e:	dc51      	bgt.n	8005f34 <__ieee754_fmod+0x12c>
 8005e90:	f1be 0f00 	cmp.w	lr, #0
 8005e94:	d145      	bne.n	8005f22 <__ieee754_fmod+0x11a>
 8005e96:	4b62      	ldr	r3, [pc, #392]	; (8006020 <__ieee754_fmod+0x218>)
 8005e98:	4629      	mov	r1, r5
 8005e9a:	2900      	cmp	r1, #0
 8005e9c:	dc3e      	bgt.n	8005f1c <__ieee754_fmod+0x114>
 8005e9e:	4961      	ldr	r1, [pc, #388]	; (8006024 <__ieee754_fmod+0x21c>)
 8005ea0:	4288      	cmp	r0, r1
 8005ea2:	db4c      	blt.n	8005f3e <__ieee754_fmod+0x136>
 8005ea4:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8005ea8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005eac:	4a5d      	ldr	r2, [pc, #372]	; (8006024 <__ieee754_fmod+0x21c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	db59      	blt.n	8005f66 <__ieee754_fmod+0x15e>
 8005eb2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8005eb6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8005eba:	1ac0      	subs	r0, r0, r3
 8005ebc:	1b8a      	subs	r2, r1, r6
 8005ebe:	eba7 050c 	sub.w	r5, r7, ip
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d166      	bne.n	8005f94 <__ieee754_fmod+0x18c>
 8005ec6:	4567      	cmp	r7, ip
 8005ec8:	bf38      	it	cc
 8005eca:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	bfbc      	itt	lt
 8005ed2:	463d      	movlt	r5, r7
 8005ed4:	460a      	movlt	r2, r1
 8005ed6:	ea52 0105 	orrs.w	r1, r2, r5
 8005eda:	d0c6      	beq.n	8005e6a <__ieee754_fmod+0x62>
 8005edc:	494f      	ldr	r1, [pc, #316]	; (800601c <__ieee754_fmod+0x214>)
 8005ede:	428a      	cmp	r2, r1
 8005ee0:	dd6d      	ble.n	8005fbe <__ieee754_fmod+0x1b6>
 8005ee2:	4950      	ldr	r1, [pc, #320]	; (8006024 <__ieee754_fmod+0x21c>)
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	db70      	blt.n	8005fca <__ieee754_fmod+0x1c2>
 8005ee8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8005eec:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005ef0:	4314      	orrs	r4, r2
 8005ef2:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	e7a8      	b.n	8005e4c <__ieee754_fmod+0x44>
 8005efa:	3801      	subs	r0, #1
 8005efc:	0049      	lsls	r1, r1, #1
 8005efe:	e7c3      	b.n	8005e88 <__ieee754_fmod+0x80>
 8005f00:	4848      	ldr	r0, [pc, #288]	; (8006024 <__ieee754_fmod+0x21c>)
 8005f02:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8005f06:	0049      	lsls	r1, r1, #1
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	f100 30ff 	add.w	r0, r0, #4294967295
 8005f0e:	dcfa      	bgt.n	8005f06 <__ieee754_fmod+0xfe>
 8005f10:	e7bc      	b.n	8005e8c <__ieee754_fmod+0x84>
 8005f12:	ea4f 5028 	mov.w	r0, r8, asr #20
 8005f16:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005f1a:	e7b7      	b.n	8005e8c <__ieee754_fmod+0x84>
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	0049      	lsls	r1, r1, #1
 8005f20:	e7bb      	b.n	8005e9a <__ieee754_fmod+0x92>
 8005f22:	4b40      	ldr	r3, [pc, #256]	; (8006024 <__ieee754_fmod+0x21c>)
 8005f24:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8005f28:	0049      	lsls	r1, r1, #1
 8005f2a:	2900      	cmp	r1, #0
 8005f2c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f30:	dcfa      	bgt.n	8005f28 <__ieee754_fmod+0x120>
 8005f32:	e7b4      	b.n	8005e9e <__ieee754_fmod+0x96>
 8005f34:	ea4f 532e 	mov.w	r3, lr, asr #20
 8005f38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f3c:	e7af      	b.n	8005e9e <__ieee754_fmod+0x96>
 8005f3e:	1a0f      	subs	r7, r1, r0
 8005f40:	2f1f      	cmp	r7, #31
 8005f42:	dc0a      	bgt.n	8005f5a <__ieee754_fmod+0x152>
 8005f44:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8005f48:	fa08 f807 	lsl.w	r8, r8, r7
 8005f4c:	fa22 f101 	lsr.w	r1, r2, r1
 8005f50:	ea41 0108 	orr.w	r1, r1, r8
 8005f54:	fa02 f707 	lsl.w	r7, r2, r7
 8005f58:	e7a8      	b.n	8005eac <__ieee754_fmod+0xa4>
 8005f5a:	4933      	ldr	r1, [pc, #204]	; (8006028 <__ieee754_fmod+0x220>)
 8005f5c:	1a09      	subs	r1, r1, r0
 8005f5e:	fa02 f101 	lsl.w	r1, r2, r1
 8005f62:	2700      	movs	r7, #0
 8005f64:	e7a2      	b.n	8005eac <__ieee754_fmod+0xa4>
 8005f66:	eba2 0c03 	sub.w	ip, r2, r3
 8005f6a:	f1bc 0f1f 	cmp.w	ip, #31
 8005f6e:	dc0a      	bgt.n	8005f86 <__ieee754_fmod+0x17e>
 8005f70:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8005f74:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005f78:	fa25 f606 	lsr.w	r6, r5, r6
 8005f7c:	ea46 060e 	orr.w	r6, r6, lr
 8005f80:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005f84:	e799      	b.n	8005eba <__ieee754_fmod+0xb2>
 8005f86:	4e28      	ldr	r6, [pc, #160]	; (8006028 <__ieee754_fmod+0x220>)
 8005f88:	1af6      	subs	r6, r6, r3
 8005f8a:	fa05 f606 	lsl.w	r6, r5, r6
 8005f8e:	f04f 0c00 	mov.w	ip, #0
 8005f92:	e792      	b.n	8005eba <__ieee754_fmod+0xb2>
 8005f94:	4567      	cmp	r7, ip
 8005f96:	bf38      	it	cc
 8005f98:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	da05      	bge.n	8005fac <__ieee754_fmod+0x1a4>
 8005fa0:	0ffa      	lsrs	r2, r7, #31
 8005fa2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005fa6:	007f      	lsls	r7, r7, #1
 8005fa8:	3801      	subs	r0, #1
 8005faa:	e787      	b.n	8005ebc <__ieee754_fmod+0xb4>
 8005fac:	ea52 0105 	orrs.w	r1, r2, r5
 8005fb0:	f43f af5b 	beq.w	8005e6a <__ieee754_fmod+0x62>
 8005fb4:	0fe9      	lsrs	r1, r5, #31
 8005fb6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005fba:	006f      	lsls	r7, r5, #1
 8005fbc:	e7f4      	b.n	8005fa8 <__ieee754_fmod+0x1a0>
 8005fbe:	0fe8      	lsrs	r0, r5, #31
 8005fc0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005fc4:	006d      	lsls	r5, r5, #1
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	e789      	b.n	8005ede <__ieee754_fmod+0xd6>
 8005fca:	1ac9      	subs	r1, r1, r3
 8005fcc:	2914      	cmp	r1, #20
 8005fce:	dc0a      	bgt.n	8005fe6 <__ieee754_fmod+0x1de>
 8005fd0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	40cd      	lsrs	r5, r1
 8005fda:	432b      	orrs	r3, r5
 8005fdc:	410a      	asrs	r2, r1
 8005fde:	ea42 0104 	orr.w	r1, r2, r4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	e732      	b.n	8005e4c <__ieee754_fmod+0x44>
 8005fe6:	291f      	cmp	r1, #31
 8005fe8:	dc07      	bgt.n	8005ffa <__ieee754_fmod+0x1f2>
 8005fea:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005fee:	40cd      	lsrs	r5, r1
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	432b      	orrs	r3, r5
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	e7f1      	b.n	8005fde <__ieee754_fmod+0x1d6>
 8005ffa:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005ffe:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8006002:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8006006:	33e2      	adds	r3, #226	; 0xe2
 8006008:	fa42 f303 	asr.w	r3, r2, r3
 800600c:	e7f3      	b.n	8005ff6 <__ieee754_fmod+0x1ee>
 800600e:	bf00      	nop
 8006010:	7fefffff 	.word	0x7fefffff
 8006014:	7ff00000 	.word	0x7ff00000
 8006018:	08008bb0 	.word	0x08008bb0
 800601c:	000fffff 	.word	0x000fffff
 8006020:	fffffbed 	.word	0xfffffbed
 8006024:	fffffc02 	.word	0xfffffc02
 8006028:	fffffbe2 	.word	0xfffffbe2
 800602c:	00000000 	.word	0x00000000

08006030 <__ieee754_rem_pio2>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	ec57 6b10 	vmov	r6, r7, d0
 8006038:	4bc3      	ldr	r3, [pc, #780]	; (8006348 <__ieee754_rem_pio2+0x318>)
 800603a:	b08d      	sub	sp, #52	; 0x34
 800603c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006040:	4598      	cmp	r8, r3
 8006042:	4604      	mov	r4, r0
 8006044:	9704      	str	r7, [sp, #16]
 8006046:	dc07      	bgt.n	8006058 <__ieee754_rem_pio2+0x28>
 8006048:	2200      	movs	r2, #0
 800604a:	2300      	movs	r3, #0
 800604c:	ed84 0b00 	vstr	d0, [r4]
 8006050:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006054:	2500      	movs	r5, #0
 8006056:	e027      	b.n	80060a8 <__ieee754_rem_pio2+0x78>
 8006058:	4bbc      	ldr	r3, [pc, #752]	; (800634c <__ieee754_rem_pio2+0x31c>)
 800605a:	4598      	cmp	r8, r3
 800605c:	dc75      	bgt.n	800614a <__ieee754_rem_pio2+0x11a>
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	4dbb      	ldr	r5, [pc, #748]	; (8006350 <__ieee754_rem_pio2+0x320>)
 8006062:	2b00      	cmp	r3, #0
 8006064:	ee10 0a10 	vmov	r0, s0
 8006068:	a3a9      	add	r3, pc, #676	; (adr r3, 8006310 <__ieee754_rem_pio2+0x2e0>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	4639      	mov	r1, r7
 8006070:	dd36      	ble.n	80060e0 <__ieee754_rem_pio2+0xb0>
 8006072:	f7fa f921 	bl	80002b8 <__aeabi_dsub>
 8006076:	45a8      	cmp	r8, r5
 8006078:	4606      	mov	r6, r0
 800607a:	460f      	mov	r7, r1
 800607c:	d018      	beq.n	80060b0 <__ieee754_rem_pio2+0x80>
 800607e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006318 <__ieee754_rem_pio2+0x2e8>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa f918 	bl	80002b8 <__aeabi_dsub>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	e9c4 2300 	strd	r2, r3, [r4]
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	f7fa f910 	bl	80002b8 <__aeabi_dsub>
 8006098:	a39f      	add	r3, pc, #636	; (adr r3, 8006318 <__ieee754_rem_pio2+0x2e8>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa f90b 	bl	80002b8 <__aeabi_dsub>
 80060a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060a6:	2501      	movs	r5, #1
 80060a8:	4628      	mov	r0, r5
 80060aa:	b00d      	add	sp, #52	; 0x34
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b0:	a39b      	add	r3, pc, #620	; (adr r3, 8006320 <__ieee754_rem_pio2+0x2f0>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa f8ff 	bl	80002b8 <__aeabi_dsub>
 80060ba:	a39b      	add	r3, pc, #620	; (adr r3, 8006328 <__ieee754_rem_pio2+0x2f8>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	4606      	mov	r6, r0
 80060c2:	460f      	mov	r7, r1
 80060c4:	f7fa f8f8 	bl	80002b8 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	e9c4 2300 	strd	r2, r3, [r4]
 80060d0:	4630      	mov	r0, r6
 80060d2:	4639      	mov	r1, r7
 80060d4:	f7fa f8f0 	bl	80002b8 <__aeabi_dsub>
 80060d8:	a393      	add	r3, pc, #588	; (adr r3, 8006328 <__ieee754_rem_pio2+0x2f8>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	e7de      	b.n	800609e <__ieee754_rem_pio2+0x6e>
 80060e0:	f7fa f8ec 	bl	80002bc <__adddf3>
 80060e4:	45a8      	cmp	r8, r5
 80060e6:	4606      	mov	r6, r0
 80060e8:	460f      	mov	r7, r1
 80060ea:	d016      	beq.n	800611a <__ieee754_rem_pio2+0xea>
 80060ec:	a38a      	add	r3, pc, #552	; (adr r3, 8006318 <__ieee754_rem_pio2+0x2e8>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f7fa f8e3 	bl	80002bc <__adddf3>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	e9c4 2300 	strd	r2, r3, [r4]
 80060fe:	4630      	mov	r0, r6
 8006100:	4639      	mov	r1, r7
 8006102:	f7fa f8d9 	bl	80002b8 <__aeabi_dsub>
 8006106:	a384      	add	r3, pc, #528	; (adr r3, 8006318 <__ieee754_rem_pio2+0x2e8>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa f8d6 	bl	80002bc <__adddf3>
 8006110:	f04f 35ff 	mov.w	r5, #4294967295
 8006114:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006118:	e7c6      	b.n	80060a8 <__ieee754_rem_pio2+0x78>
 800611a:	a381      	add	r3, pc, #516	; (adr r3, 8006320 <__ieee754_rem_pio2+0x2f0>)
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f7fa f8cc 	bl	80002bc <__adddf3>
 8006124:	a380      	add	r3, pc, #512	; (adr r3, 8006328 <__ieee754_rem_pio2+0x2f8>)
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	f7fa f8c5 	bl	80002bc <__adddf3>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	e9c4 2300 	strd	r2, r3, [r4]
 800613a:	4630      	mov	r0, r6
 800613c:	4639      	mov	r1, r7
 800613e:	f7fa f8bb 	bl	80002b8 <__aeabi_dsub>
 8006142:	a379      	add	r3, pc, #484	; (adr r3, 8006328 <__ieee754_rem_pio2+0x2f8>)
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	e7e0      	b.n	800610c <__ieee754_rem_pio2+0xdc>
 800614a:	4b82      	ldr	r3, [pc, #520]	; (8006354 <__ieee754_rem_pio2+0x324>)
 800614c:	4598      	cmp	r8, r3
 800614e:	f300 80d0 	bgt.w	80062f2 <__ieee754_rem_pio2+0x2c2>
 8006152:	f001 f8a1 	bl	8007298 <fabs>
 8006156:	ec57 6b10 	vmov	r6, r7, d0
 800615a:	ee10 0a10 	vmov	r0, s0
 800615e:	a374      	add	r3, pc, #464	; (adr r3, 8006330 <__ieee754_rem_pio2+0x300>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	4639      	mov	r1, r7
 8006166:	f7fa fa5f 	bl	8000628 <__aeabi_dmul>
 800616a:	2200      	movs	r2, #0
 800616c:	4b7a      	ldr	r3, [pc, #488]	; (8006358 <__ieee754_rem_pio2+0x328>)
 800616e:	f7fa f8a5 	bl	80002bc <__adddf3>
 8006172:	f7fa fd09 	bl	8000b88 <__aeabi_d2iz>
 8006176:	4605      	mov	r5, r0
 8006178:	f7fa f9ec 	bl	8000554 <__aeabi_i2d>
 800617c:	a364      	add	r3, pc, #400	; (adr r3, 8006310 <__ieee754_rem_pio2+0x2e0>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006186:	f7fa fa4f 	bl	8000628 <__aeabi_dmul>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4630      	mov	r0, r6
 8006190:	4639      	mov	r1, r7
 8006192:	f7fa f891 	bl	80002b8 <__aeabi_dsub>
 8006196:	a360      	add	r3, pc, #384	; (adr r3, 8006318 <__ieee754_rem_pio2+0x2e8>)
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	4682      	mov	sl, r0
 800619e:	468b      	mov	fp, r1
 80061a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a4:	f7fa fa40 	bl	8000628 <__aeabi_dmul>
 80061a8:	2d1f      	cmp	r5, #31
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	dc0c      	bgt.n	80061ca <__ieee754_rem_pio2+0x19a>
 80061b0:	1e6a      	subs	r2, r5, #1
 80061b2:	4b6a      	ldr	r3, [pc, #424]	; (800635c <__ieee754_rem_pio2+0x32c>)
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	4543      	cmp	r3, r8
 80061ba:	d006      	beq.n	80061ca <__ieee754_rem_pio2+0x19a>
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	4650      	mov	r0, sl
 80061c2:	4659      	mov	r1, fp
 80061c4:	f7fa f878 	bl	80002b8 <__aeabi_dsub>
 80061c8:	e00e      	b.n	80061e8 <__ieee754_rem_pio2+0x1b8>
 80061ca:	4632      	mov	r2, r6
 80061cc:	463b      	mov	r3, r7
 80061ce:	4650      	mov	r0, sl
 80061d0:	4659      	mov	r1, fp
 80061d2:	f7fa f871 	bl	80002b8 <__aeabi_dsub>
 80061d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80061da:	9305      	str	r3, [sp, #20]
 80061dc:	9a05      	ldr	r2, [sp, #20]
 80061de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	dc02      	bgt.n	80061ee <__ieee754_rem_pio2+0x1be>
 80061e8:	e9c4 0100 	strd	r0, r1, [r4]
 80061ec:	e039      	b.n	8006262 <__ieee754_rem_pio2+0x232>
 80061ee:	a34c      	add	r3, pc, #304	; (adr r3, 8006320 <__ieee754_rem_pio2+0x2f0>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f8:	f7fa fa16 	bl	8000628 <__aeabi_dmul>
 80061fc:	4606      	mov	r6, r0
 80061fe:	460f      	mov	r7, r1
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4650      	mov	r0, sl
 8006206:	4659      	mov	r1, fp
 8006208:	f7fa f856 	bl	80002b8 <__aeabi_dsub>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4680      	mov	r8, r0
 8006212:	4689      	mov	r9, r1
 8006214:	4650      	mov	r0, sl
 8006216:	4659      	mov	r1, fp
 8006218:	f7fa f84e 	bl	80002b8 <__aeabi_dsub>
 800621c:	4632      	mov	r2, r6
 800621e:	463b      	mov	r3, r7
 8006220:	f7fa f84a 	bl	80002b8 <__aeabi_dsub>
 8006224:	a340      	add	r3, pc, #256	; (adr r3, 8006328 <__ieee754_rem_pio2+0x2f8>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006232:	f7fa f9f9 	bl	8000628 <__aeabi_dmul>
 8006236:	4632      	mov	r2, r6
 8006238:	463b      	mov	r3, r7
 800623a:	f7fa f83d 	bl	80002b8 <__aeabi_dsub>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4606      	mov	r6, r0
 8006244:	460f      	mov	r7, r1
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa f835 	bl	80002b8 <__aeabi_dsub>
 800624e:	9a05      	ldr	r2, [sp, #20]
 8006250:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b31      	cmp	r3, #49	; 0x31
 8006258:	dc20      	bgt.n	800629c <__ieee754_rem_pio2+0x26c>
 800625a:	e9c4 0100 	strd	r0, r1, [r4]
 800625e:	46c2      	mov	sl, r8
 8006260:	46cb      	mov	fp, r9
 8006262:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006266:	4650      	mov	r0, sl
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	4659      	mov	r1, fp
 800626e:	f7fa f823 	bl	80002b8 <__aeabi_dsub>
 8006272:	463b      	mov	r3, r7
 8006274:	4632      	mov	r2, r6
 8006276:	f7fa f81f 	bl	80002b8 <__aeabi_dsub>
 800627a:	9b04      	ldr	r3, [sp, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006282:	f6bf af11 	bge.w	80060a8 <__ieee754_rem_pio2+0x78>
 8006286:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	f8c4 8000 	str.w	r8, [r4]
 8006290:	60a0      	str	r0, [r4, #8]
 8006292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006296:	60e3      	str	r3, [r4, #12]
 8006298:	426d      	negs	r5, r5
 800629a:	e705      	b.n	80060a8 <__ieee754_rem_pio2+0x78>
 800629c:	a326      	add	r3, pc, #152	; (adr r3, 8006338 <__ieee754_rem_pio2+0x308>)
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a6:	f7fa f9bf 	bl	8000628 <__aeabi_dmul>
 80062aa:	4606      	mov	r6, r0
 80062ac:	460f      	mov	r7, r1
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	f7f9 ffff 	bl	80002b8 <__aeabi_dsub>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4682      	mov	sl, r0
 80062c0:	468b      	mov	fp, r1
 80062c2:	4640      	mov	r0, r8
 80062c4:	4649      	mov	r1, r9
 80062c6:	f7f9 fff7 	bl	80002b8 <__aeabi_dsub>
 80062ca:	4632      	mov	r2, r6
 80062cc:	463b      	mov	r3, r7
 80062ce:	f7f9 fff3 	bl	80002b8 <__aeabi_dsub>
 80062d2:	a31b      	add	r3, pc, #108	; (adr r3, 8006340 <__ieee754_rem_pio2+0x310>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	4606      	mov	r6, r0
 80062da:	460f      	mov	r7, r1
 80062dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e0:	f7fa f9a2 	bl	8000628 <__aeabi_dmul>
 80062e4:	4632      	mov	r2, r6
 80062e6:	463b      	mov	r3, r7
 80062e8:	f7f9 ffe6 	bl	80002b8 <__aeabi_dsub>
 80062ec:	4606      	mov	r6, r0
 80062ee:	460f      	mov	r7, r1
 80062f0:	e764      	b.n	80061bc <__ieee754_rem_pio2+0x18c>
 80062f2:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <__ieee754_rem_pio2+0x330>)
 80062f4:	4598      	cmp	r8, r3
 80062f6:	dd35      	ble.n	8006364 <__ieee754_rem_pio2+0x334>
 80062f8:	ee10 2a10 	vmov	r2, s0
 80062fc:	463b      	mov	r3, r7
 80062fe:	4630      	mov	r0, r6
 8006300:	4639      	mov	r1, r7
 8006302:	f7f9 ffd9 	bl	80002b8 <__aeabi_dsub>
 8006306:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800630a:	e9c4 0100 	strd	r0, r1, [r4]
 800630e:	e6a1      	b.n	8006054 <__ieee754_rem_pio2+0x24>
 8006310:	54400000 	.word	0x54400000
 8006314:	3ff921fb 	.word	0x3ff921fb
 8006318:	1a626331 	.word	0x1a626331
 800631c:	3dd0b461 	.word	0x3dd0b461
 8006320:	1a600000 	.word	0x1a600000
 8006324:	3dd0b461 	.word	0x3dd0b461
 8006328:	2e037073 	.word	0x2e037073
 800632c:	3ba3198a 	.word	0x3ba3198a
 8006330:	6dc9c883 	.word	0x6dc9c883
 8006334:	3fe45f30 	.word	0x3fe45f30
 8006338:	2e000000 	.word	0x2e000000
 800633c:	3ba3198a 	.word	0x3ba3198a
 8006340:	252049c1 	.word	0x252049c1
 8006344:	397b839a 	.word	0x397b839a
 8006348:	3fe921fb 	.word	0x3fe921fb
 800634c:	4002d97b 	.word	0x4002d97b
 8006350:	3ff921fb 	.word	0x3ff921fb
 8006354:	413921fb 	.word	0x413921fb
 8006358:	3fe00000 	.word	0x3fe00000
 800635c:	08008bc0 	.word	0x08008bc0
 8006360:	7fefffff 	.word	0x7fefffff
 8006364:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006368:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800636c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006370:	4630      	mov	r0, r6
 8006372:	460f      	mov	r7, r1
 8006374:	f7fa fc08 	bl	8000b88 <__aeabi_d2iz>
 8006378:	f7fa f8ec 	bl	8000554 <__aeabi_i2d>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006388:	f7f9 ff96 	bl	80002b8 <__aeabi_dsub>
 800638c:	2200      	movs	r2, #0
 800638e:	4b1f      	ldr	r3, [pc, #124]	; (800640c <__ieee754_rem_pio2+0x3dc>)
 8006390:	f7fa f94a 	bl	8000628 <__aeabi_dmul>
 8006394:	460f      	mov	r7, r1
 8006396:	4606      	mov	r6, r0
 8006398:	f7fa fbf6 	bl	8000b88 <__aeabi_d2iz>
 800639c:	f7fa f8da 	bl	8000554 <__aeabi_i2d>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4630      	mov	r0, r6
 80063a6:	4639      	mov	r1, r7
 80063a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063ac:	f7f9 ff84 	bl	80002b8 <__aeabi_dsub>
 80063b0:	2200      	movs	r2, #0
 80063b2:	4b16      	ldr	r3, [pc, #88]	; (800640c <__ieee754_rem_pio2+0x3dc>)
 80063b4:	f7fa f938 	bl	8000628 <__aeabi_dmul>
 80063b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80063c0:	f04f 0803 	mov.w	r8, #3
 80063c4:	2600      	movs	r6, #0
 80063c6:	2700      	movs	r7, #0
 80063c8:	4632      	mov	r2, r6
 80063ca:	463b      	mov	r3, r7
 80063cc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80063d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80063d4:	f7fa fb90 	bl	8000af8 <__aeabi_dcmpeq>
 80063d8:	b9b0      	cbnz	r0, 8006408 <__ieee754_rem_pio2+0x3d8>
 80063da:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <__ieee754_rem_pio2+0x3e0>)
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	2302      	movs	r3, #2
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	462a      	mov	r2, r5
 80063e4:	4643      	mov	r3, r8
 80063e6:	4621      	mov	r1, r4
 80063e8:	a806      	add	r0, sp, #24
 80063ea:	f000 f98d 	bl	8006708 <__kernel_rem_pio2>
 80063ee:	9b04      	ldr	r3, [sp, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	4605      	mov	r5, r0
 80063f4:	f6bf ae58 	bge.w	80060a8 <__ieee754_rem_pio2+0x78>
 80063f8:	6863      	ldr	r3, [r4, #4]
 80063fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	68e3      	ldr	r3, [r4, #12]
 8006402:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006406:	e746      	b.n	8006296 <__ieee754_rem_pio2+0x266>
 8006408:	46d0      	mov	r8, sl
 800640a:	e7dd      	b.n	80063c8 <__ieee754_rem_pio2+0x398>
 800640c:	41700000 	.word	0x41700000
 8006410:	08008c40 	.word	0x08008c40

08006414 <__ieee754_sqrt>:
 8006414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006418:	4955      	ldr	r1, [pc, #340]	; (8006570 <__ieee754_sqrt+0x15c>)
 800641a:	ec55 4b10 	vmov	r4, r5, d0
 800641e:	43a9      	bics	r1, r5
 8006420:	462b      	mov	r3, r5
 8006422:	462a      	mov	r2, r5
 8006424:	d112      	bne.n	800644c <__ieee754_sqrt+0x38>
 8006426:	ee10 2a10 	vmov	r2, s0
 800642a:	ee10 0a10 	vmov	r0, s0
 800642e:	4629      	mov	r1, r5
 8006430:	f7fa f8fa 	bl	8000628 <__aeabi_dmul>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4620      	mov	r0, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f7f9 ff3e 	bl	80002bc <__adddf3>
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	ec45 4b10 	vmov	d0, r4, r5
 8006448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800644c:	2d00      	cmp	r5, #0
 800644e:	ee10 0a10 	vmov	r0, s0
 8006452:	4621      	mov	r1, r4
 8006454:	dc0f      	bgt.n	8006476 <__ieee754_sqrt+0x62>
 8006456:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800645a:	4330      	orrs	r0, r6
 800645c:	d0f2      	beq.n	8006444 <__ieee754_sqrt+0x30>
 800645e:	b155      	cbz	r5, 8006476 <__ieee754_sqrt+0x62>
 8006460:	ee10 2a10 	vmov	r2, s0
 8006464:	4620      	mov	r0, r4
 8006466:	4629      	mov	r1, r5
 8006468:	f7f9 ff26 	bl	80002b8 <__aeabi_dsub>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	f7fa fa04 	bl	800087c <__aeabi_ddiv>
 8006474:	e7e4      	b.n	8006440 <__ieee754_sqrt+0x2c>
 8006476:	151b      	asrs	r3, r3, #20
 8006478:	d073      	beq.n	8006562 <__ieee754_sqrt+0x14e>
 800647a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800647e:	07dd      	lsls	r5, r3, #31
 8006480:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006484:	bf48      	it	mi
 8006486:	0fc8      	lsrmi	r0, r1, #31
 8006488:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800648c:	bf44      	itt	mi
 800648e:	0049      	lslmi	r1, r1, #1
 8006490:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006494:	2500      	movs	r5, #0
 8006496:	1058      	asrs	r0, r3, #1
 8006498:	0fcb      	lsrs	r3, r1, #31
 800649a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800649e:	0049      	lsls	r1, r1, #1
 80064a0:	2316      	movs	r3, #22
 80064a2:	462c      	mov	r4, r5
 80064a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80064a8:	19a7      	adds	r7, r4, r6
 80064aa:	4297      	cmp	r7, r2
 80064ac:	bfde      	ittt	le
 80064ae:	19bc      	addle	r4, r7, r6
 80064b0:	1bd2      	suble	r2, r2, r7
 80064b2:	19ad      	addle	r5, r5, r6
 80064b4:	0fcf      	lsrs	r7, r1, #31
 80064b6:	3b01      	subs	r3, #1
 80064b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80064bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064c4:	d1f0      	bne.n	80064a8 <__ieee754_sqrt+0x94>
 80064c6:	f04f 0c20 	mov.w	ip, #32
 80064ca:	469e      	mov	lr, r3
 80064cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80064d0:	42a2      	cmp	r2, r4
 80064d2:	eb06 070e 	add.w	r7, r6, lr
 80064d6:	dc02      	bgt.n	80064de <__ieee754_sqrt+0xca>
 80064d8:	d112      	bne.n	8006500 <__ieee754_sqrt+0xec>
 80064da:	428f      	cmp	r7, r1
 80064dc:	d810      	bhi.n	8006500 <__ieee754_sqrt+0xec>
 80064de:	2f00      	cmp	r7, #0
 80064e0:	eb07 0e06 	add.w	lr, r7, r6
 80064e4:	da42      	bge.n	800656c <__ieee754_sqrt+0x158>
 80064e6:	f1be 0f00 	cmp.w	lr, #0
 80064ea:	db3f      	blt.n	800656c <__ieee754_sqrt+0x158>
 80064ec:	f104 0801 	add.w	r8, r4, #1
 80064f0:	1b12      	subs	r2, r2, r4
 80064f2:	428f      	cmp	r7, r1
 80064f4:	bf88      	it	hi
 80064f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80064fa:	1bc9      	subs	r1, r1, r7
 80064fc:	4433      	add	r3, r6
 80064fe:	4644      	mov	r4, r8
 8006500:	0052      	lsls	r2, r2, #1
 8006502:	f1bc 0c01 	subs.w	ip, ip, #1
 8006506:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800650a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800650e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006512:	d1dd      	bne.n	80064d0 <__ieee754_sqrt+0xbc>
 8006514:	430a      	orrs	r2, r1
 8006516:	d006      	beq.n	8006526 <__ieee754_sqrt+0x112>
 8006518:	1c5c      	adds	r4, r3, #1
 800651a:	bf13      	iteet	ne
 800651c:	3301      	addne	r3, #1
 800651e:	3501      	addeq	r5, #1
 8006520:	4663      	moveq	r3, ip
 8006522:	f023 0301 	bicne.w	r3, r3, #1
 8006526:	106a      	asrs	r2, r5, #1
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	07e9      	lsls	r1, r5, #31
 800652c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006530:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006534:	bf48      	it	mi
 8006536:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800653a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800653e:	461c      	mov	r4, r3
 8006540:	e780      	b.n	8006444 <__ieee754_sqrt+0x30>
 8006542:	0aca      	lsrs	r2, r1, #11
 8006544:	3815      	subs	r0, #21
 8006546:	0549      	lsls	r1, r1, #21
 8006548:	2a00      	cmp	r2, #0
 800654a:	d0fa      	beq.n	8006542 <__ieee754_sqrt+0x12e>
 800654c:	02d6      	lsls	r6, r2, #11
 800654e:	d50a      	bpl.n	8006566 <__ieee754_sqrt+0x152>
 8006550:	f1c3 0420 	rsb	r4, r3, #32
 8006554:	fa21 f404 	lsr.w	r4, r1, r4
 8006558:	1e5d      	subs	r5, r3, #1
 800655a:	4099      	lsls	r1, r3
 800655c:	4322      	orrs	r2, r4
 800655e:	1b43      	subs	r3, r0, r5
 8006560:	e78b      	b.n	800647a <__ieee754_sqrt+0x66>
 8006562:	4618      	mov	r0, r3
 8006564:	e7f0      	b.n	8006548 <__ieee754_sqrt+0x134>
 8006566:	0052      	lsls	r2, r2, #1
 8006568:	3301      	adds	r3, #1
 800656a:	e7ef      	b.n	800654c <__ieee754_sqrt+0x138>
 800656c:	46a0      	mov	r8, r4
 800656e:	e7bf      	b.n	80064f0 <__ieee754_sqrt+0xdc>
 8006570:	7ff00000 	.word	0x7ff00000
 8006574:	00000000 	.word	0x00000000

08006578 <__kernel_cos>:
 8006578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ec59 8b10 	vmov	r8, r9, d0
 8006580:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8006584:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006588:	ed2d 8b02 	vpush	{d8}
 800658c:	eeb0 8a41 	vmov.f32	s16, s2
 8006590:	eef0 8a61 	vmov.f32	s17, s3
 8006594:	da07      	bge.n	80065a6 <__kernel_cos+0x2e>
 8006596:	ee10 0a10 	vmov	r0, s0
 800659a:	4649      	mov	r1, r9
 800659c:	f7fa faf4 	bl	8000b88 <__aeabi_d2iz>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f000 8089 	beq.w	80066b8 <__kernel_cos+0x140>
 80065a6:	4642      	mov	r2, r8
 80065a8:	464b      	mov	r3, r9
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	f7fa f83b 	bl	8000628 <__aeabi_dmul>
 80065b2:	2200      	movs	r2, #0
 80065b4:	4b4e      	ldr	r3, [pc, #312]	; (80066f0 <__kernel_cos+0x178>)
 80065b6:	4604      	mov	r4, r0
 80065b8:	460d      	mov	r5, r1
 80065ba:	f7fa f835 	bl	8000628 <__aeabi_dmul>
 80065be:	a340      	add	r3, pc, #256	; (adr r3, 80066c0 <__kernel_cos+0x148>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	4682      	mov	sl, r0
 80065c6:	468b      	mov	fp, r1
 80065c8:	4620      	mov	r0, r4
 80065ca:	4629      	mov	r1, r5
 80065cc:	f7fa f82c 	bl	8000628 <__aeabi_dmul>
 80065d0:	a33d      	add	r3, pc, #244	; (adr r3, 80066c8 <__kernel_cos+0x150>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f7f9 fe71 	bl	80002bc <__adddf3>
 80065da:	4622      	mov	r2, r4
 80065dc:	462b      	mov	r3, r5
 80065de:	f7fa f823 	bl	8000628 <__aeabi_dmul>
 80065e2:	a33b      	add	r3, pc, #236	; (adr r3, 80066d0 <__kernel_cos+0x158>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f7f9 fe66 	bl	80002b8 <__aeabi_dsub>
 80065ec:	4622      	mov	r2, r4
 80065ee:	462b      	mov	r3, r5
 80065f0:	f7fa f81a 	bl	8000628 <__aeabi_dmul>
 80065f4:	a338      	add	r3, pc, #224	; (adr r3, 80066d8 <__kernel_cos+0x160>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7f9 fe5f 	bl	80002bc <__adddf3>
 80065fe:	4622      	mov	r2, r4
 8006600:	462b      	mov	r3, r5
 8006602:	f7fa f811 	bl	8000628 <__aeabi_dmul>
 8006606:	a336      	add	r3, pc, #216	; (adr r3, 80066e0 <__kernel_cos+0x168>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f7f9 fe54 	bl	80002b8 <__aeabi_dsub>
 8006610:	4622      	mov	r2, r4
 8006612:	462b      	mov	r3, r5
 8006614:	f7fa f808 	bl	8000628 <__aeabi_dmul>
 8006618:	a333      	add	r3, pc, #204	; (adr r3, 80066e8 <__kernel_cos+0x170>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7f9 fe4d 	bl	80002bc <__adddf3>
 8006622:	4622      	mov	r2, r4
 8006624:	462b      	mov	r3, r5
 8006626:	f7f9 ffff 	bl	8000628 <__aeabi_dmul>
 800662a:	4622      	mov	r2, r4
 800662c:	462b      	mov	r3, r5
 800662e:	f7f9 fffb 	bl	8000628 <__aeabi_dmul>
 8006632:	ec53 2b18 	vmov	r2, r3, d8
 8006636:	4604      	mov	r4, r0
 8006638:	460d      	mov	r5, r1
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	f7f9 fff3 	bl	8000628 <__aeabi_dmul>
 8006642:	460b      	mov	r3, r1
 8006644:	4602      	mov	r2, r0
 8006646:	4629      	mov	r1, r5
 8006648:	4620      	mov	r0, r4
 800664a:	f7f9 fe35 	bl	80002b8 <__aeabi_dsub>
 800664e:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <__kernel_cos+0x17c>)
 8006650:	429e      	cmp	r6, r3
 8006652:	4680      	mov	r8, r0
 8006654:	4689      	mov	r9, r1
 8006656:	dc11      	bgt.n	800667c <__kernel_cos+0x104>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4650      	mov	r0, sl
 800665e:	4659      	mov	r1, fp
 8006660:	f7f9 fe2a 	bl	80002b8 <__aeabi_dsub>
 8006664:	460b      	mov	r3, r1
 8006666:	4924      	ldr	r1, [pc, #144]	; (80066f8 <__kernel_cos+0x180>)
 8006668:	4602      	mov	r2, r0
 800666a:	2000      	movs	r0, #0
 800666c:	f7f9 fe24 	bl	80002b8 <__aeabi_dsub>
 8006670:	ecbd 8b02 	vpop	{d8}
 8006674:	ec41 0b10 	vmov	d0, r0, r1
 8006678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667c:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <__kernel_cos+0x184>)
 800667e:	491e      	ldr	r1, [pc, #120]	; (80066f8 <__kernel_cos+0x180>)
 8006680:	429e      	cmp	r6, r3
 8006682:	bfcc      	ite	gt
 8006684:	4d1e      	ldrgt	r5, [pc, #120]	; (8006700 <__kernel_cos+0x188>)
 8006686:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800668a:	2400      	movs	r4, #0
 800668c:	4622      	mov	r2, r4
 800668e:	462b      	mov	r3, r5
 8006690:	2000      	movs	r0, #0
 8006692:	f7f9 fe11 	bl	80002b8 <__aeabi_dsub>
 8006696:	4622      	mov	r2, r4
 8006698:	4606      	mov	r6, r0
 800669a:	460f      	mov	r7, r1
 800669c:	462b      	mov	r3, r5
 800669e:	4650      	mov	r0, sl
 80066a0:	4659      	mov	r1, fp
 80066a2:	f7f9 fe09 	bl	80002b8 <__aeabi_dsub>
 80066a6:	4642      	mov	r2, r8
 80066a8:	464b      	mov	r3, r9
 80066aa:	f7f9 fe05 	bl	80002b8 <__aeabi_dsub>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	e7d9      	b.n	800666c <__kernel_cos+0xf4>
 80066b8:	2000      	movs	r0, #0
 80066ba:	490f      	ldr	r1, [pc, #60]	; (80066f8 <__kernel_cos+0x180>)
 80066bc:	e7d8      	b.n	8006670 <__kernel_cos+0xf8>
 80066be:	bf00      	nop
 80066c0:	be8838d4 	.word	0xbe8838d4
 80066c4:	bda8fae9 	.word	0xbda8fae9
 80066c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80066cc:	3e21ee9e 	.word	0x3e21ee9e
 80066d0:	809c52ad 	.word	0x809c52ad
 80066d4:	3e927e4f 	.word	0x3e927e4f
 80066d8:	19cb1590 	.word	0x19cb1590
 80066dc:	3efa01a0 	.word	0x3efa01a0
 80066e0:	16c15177 	.word	0x16c15177
 80066e4:	3f56c16c 	.word	0x3f56c16c
 80066e8:	5555554c 	.word	0x5555554c
 80066ec:	3fa55555 	.word	0x3fa55555
 80066f0:	3fe00000 	.word	0x3fe00000
 80066f4:	3fd33332 	.word	0x3fd33332
 80066f8:	3ff00000 	.word	0x3ff00000
 80066fc:	3fe90000 	.word	0x3fe90000
 8006700:	3fd20000 	.word	0x3fd20000
 8006704:	00000000 	.word	0x00000000

08006708 <__kernel_rem_pio2>:
 8006708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670c:	ed2d 8b02 	vpush	{d8}
 8006710:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006714:	1ed4      	subs	r4, r2, #3
 8006716:	9308      	str	r3, [sp, #32]
 8006718:	9101      	str	r1, [sp, #4]
 800671a:	4bc5      	ldr	r3, [pc, #788]	; (8006a30 <__kernel_rem_pio2+0x328>)
 800671c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800671e:	9009      	str	r0, [sp, #36]	; 0x24
 8006720:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	9b08      	ldr	r3, [sp, #32]
 8006728:	3b01      	subs	r3, #1
 800672a:	9307      	str	r3, [sp, #28]
 800672c:	2318      	movs	r3, #24
 800672e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006732:	f06f 0317 	mvn.w	r3, #23
 8006736:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800673a:	fb04 3303 	mla	r3, r4, r3, r3
 800673e:	eb03 0a02 	add.w	sl, r3, r2
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	9a07      	ldr	r2, [sp, #28]
 8006746:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006a20 <__kernel_rem_pio2+0x318>
 800674a:	eb03 0802 	add.w	r8, r3, r2
 800674e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006750:	1aa7      	subs	r7, r4, r2
 8006752:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006756:	ae22      	add	r6, sp, #136	; 0x88
 8006758:	2500      	movs	r5, #0
 800675a:	4545      	cmp	r5, r8
 800675c:	dd13      	ble.n	8006786 <__kernel_rem_pio2+0x7e>
 800675e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006a20 <__kernel_rem_pio2+0x318>
 8006762:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006766:	2600      	movs	r6, #0
 8006768:	9b04      	ldr	r3, [sp, #16]
 800676a:	429e      	cmp	r6, r3
 800676c:	dc32      	bgt.n	80067d4 <__kernel_rem_pio2+0xcc>
 800676e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	9b08      	ldr	r3, [sp, #32]
 8006774:	199d      	adds	r5, r3, r6
 8006776:	ab22      	add	r3, sp, #136	; 0x88
 8006778:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800677c:	9306      	str	r3, [sp, #24]
 800677e:	ec59 8b18 	vmov	r8, r9, d8
 8006782:	2700      	movs	r7, #0
 8006784:	e01f      	b.n	80067c6 <__kernel_rem_pio2+0xbe>
 8006786:	42ef      	cmn	r7, r5
 8006788:	d407      	bmi.n	800679a <__kernel_rem_pio2+0x92>
 800678a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800678e:	f7f9 fee1 	bl	8000554 <__aeabi_i2d>
 8006792:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006796:	3501      	adds	r5, #1
 8006798:	e7df      	b.n	800675a <__kernel_rem_pio2+0x52>
 800679a:	ec51 0b18 	vmov	r0, r1, d8
 800679e:	e7f8      	b.n	8006792 <__kernel_rem_pio2+0x8a>
 80067a0:	9906      	ldr	r1, [sp, #24]
 80067a2:	9d02      	ldr	r5, [sp, #8]
 80067a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80067a8:	9106      	str	r1, [sp, #24]
 80067aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80067ae:	9502      	str	r5, [sp, #8]
 80067b0:	f7f9 ff3a 	bl	8000628 <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7f9 fd7e 	bl	80002bc <__adddf3>
 80067c0:	3701      	adds	r7, #1
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	9b07      	ldr	r3, [sp, #28]
 80067c8:	429f      	cmp	r7, r3
 80067ca:	dde9      	ble.n	80067a0 <__kernel_rem_pio2+0x98>
 80067cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7c9      	b.n	8006768 <__kernel_rem_pio2+0x60>
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	aa0e      	add	r2, sp, #56	; 0x38
 80067d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067dc:	930c      	str	r3, [sp, #48]	; 0x30
 80067de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80067e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80067e4:	9c04      	ldr	r4, [sp, #16]
 80067e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e8:	ab9a      	add	r3, sp, #616	; 0x268
 80067ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80067ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80067fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80067fe:	ab9a      	add	r3, sp, #616	; 0x268
 8006800:	445b      	add	r3, fp
 8006802:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006806:	2500      	movs	r5, #0
 8006808:	1b63      	subs	r3, r4, r5
 800680a:	2b00      	cmp	r3, #0
 800680c:	dc78      	bgt.n	8006900 <__kernel_rem_pio2+0x1f8>
 800680e:	4650      	mov	r0, sl
 8006810:	ec49 8b10 	vmov	d0, r8, r9
 8006814:	f000 fd54 	bl	80072c0 <scalbn>
 8006818:	ec57 6b10 	vmov	r6, r7, d0
 800681c:	2200      	movs	r2, #0
 800681e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006822:	ee10 0a10 	vmov	r0, s0
 8006826:	4639      	mov	r1, r7
 8006828:	f7f9 fefe 	bl	8000628 <__aeabi_dmul>
 800682c:	ec41 0b10 	vmov	d0, r0, r1
 8006830:	f7fe fc6e 	bl	8005110 <floor>
 8006834:	2200      	movs	r2, #0
 8006836:	ec51 0b10 	vmov	r0, r1, d0
 800683a:	4b7e      	ldr	r3, [pc, #504]	; (8006a34 <__kernel_rem_pio2+0x32c>)
 800683c:	f7f9 fef4 	bl	8000628 <__aeabi_dmul>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	f7f9 fd36 	bl	80002b8 <__aeabi_dsub>
 800684c:	460f      	mov	r7, r1
 800684e:	4606      	mov	r6, r0
 8006850:	f7fa f99a 	bl	8000b88 <__aeabi_d2iz>
 8006854:	9006      	str	r0, [sp, #24]
 8006856:	f7f9 fe7d 	bl	8000554 <__aeabi_i2d>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fd29 	bl	80002b8 <__aeabi_dsub>
 8006866:	f1ba 0f00 	cmp.w	sl, #0
 800686a:	4606      	mov	r6, r0
 800686c:	460f      	mov	r7, r1
 800686e:	dd6c      	ble.n	800694a <__kernel_rem_pio2+0x242>
 8006870:	1e62      	subs	r2, r4, #1
 8006872:	ab0e      	add	r3, sp, #56	; 0x38
 8006874:	f1ca 0118 	rsb	r1, sl, #24
 8006878:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800687c:	9d06      	ldr	r5, [sp, #24]
 800687e:	fa40 f301 	asr.w	r3, r0, r1
 8006882:	441d      	add	r5, r3
 8006884:	408b      	lsls	r3, r1
 8006886:	1ac0      	subs	r0, r0, r3
 8006888:	ab0e      	add	r3, sp, #56	; 0x38
 800688a:	9506      	str	r5, [sp, #24]
 800688c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006890:	f1ca 0317 	rsb	r3, sl, #23
 8006894:	fa40 f303 	asr.w	r3, r0, r3
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	9b02      	ldr	r3, [sp, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	dd62      	ble.n	8006966 <__kernel_rem_pio2+0x25e>
 80068a0:	9b06      	ldr	r3, [sp, #24]
 80068a2:	2200      	movs	r2, #0
 80068a4:	3301      	adds	r3, #1
 80068a6:	9306      	str	r3, [sp, #24]
 80068a8:	4615      	mov	r5, r2
 80068aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80068ae:	4294      	cmp	r4, r2
 80068b0:	f300 8095 	bgt.w	80069de <__kernel_rem_pio2+0x2d6>
 80068b4:	f1ba 0f00 	cmp.w	sl, #0
 80068b8:	dd07      	ble.n	80068ca <__kernel_rem_pio2+0x1c2>
 80068ba:	f1ba 0f01 	cmp.w	sl, #1
 80068be:	f000 80a2 	beq.w	8006a06 <__kernel_rem_pio2+0x2fe>
 80068c2:	f1ba 0f02 	cmp.w	sl, #2
 80068c6:	f000 80c1 	beq.w	8006a4c <__kernel_rem_pio2+0x344>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d14a      	bne.n	8006966 <__kernel_rem_pio2+0x25e>
 80068d0:	4632      	mov	r2, r6
 80068d2:	463b      	mov	r3, r7
 80068d4:	2000      	movs	r0, #0
 80068d6:	4958      	ldr	r1, [pc, #352]	; (8006a38 <__kernel_rem_pio2+0x330>)
 80068d8:	f7f9 fcee 	bl	80002b8 <__aeabi_dsub>
 80068dc:	4606      	mov	r6, r0
 80068de:	460f      	mov	r7, r1
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	d040      	beq.n	8006966 <__kernel_rem_pio2+0x25e>
 80068e4:	4650      	mov	r0, sl
 80068e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006a28 <__kernel_rem_pio2+0x320>
 80068ea:	f000 fce9 	bl	80072c0 <scalbn>
 80068ee:	4630      	mov	r0, r6
 80068f0:	4639      	mov	r1, r7
 80068f2:	ec53 2b10 	vmov	r2, r3, d0
 80068f6:	f7f9 fcdf 	bl	80002b8 <__aeabi_dsub>
 80068fa:	4606      	mov	r6, r0
 80068fc:	460f      	mov	r7, r1
 80068fe:	e032      	b.n	8006966 <__kernel_rem_pio2+0x25e>
 8006900:	2200      	movs	r2, #0
 8006902:	4b4e      	ldr	r3, [pc, #312]	; (8006a3c <__kernel_rem_pio2+0x334>)
 8006904:	4640      	mov	r0, r8
 8006906:	4649      	mov	r1, r9
 8006908:	f7f9 fe8e 	bl	8000628 <__aeabi_dmul>
 800690c:	f7fa f93c 	bl	8000b88 <__aeabi_d2iz>
 8006910:	f7f9 fe20 	bl	8000554 <__aeabi_i2d>
 8006914:	2200      	movs	r2, #0
 8006916:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <__kernel_rem_pio2+0x338>)
 8006918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800691c:	f7f9 fe84 	bl	8000628 <__aeabi_dmul>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4640      	mov	r0, r8
 8006926:	4649      	mov	r1, r9
 8006928:	f7f9 fcc6 	bl	80002b8 <__aeabi_dsub>
 800692c:	f7fa f92c 	bl	8000b88 <__aeabi_d2iz>
 8006930:	ab0e      	add	r3, sp, #56	; 0x38
 8006932:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006936:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800693a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693e:	f7f9 fcbd 	bl	80002bc <__adddf3>
 8006942:	3501      	adds	r5, #1
 8006944:	4680      	mov	r8, r0
 8006946:	4689      	mov	r9, r1
 8006948:	e75e      	b.n	8006808 <__kernel_rem_pio2+0x100>
 800694a:	d105      	bne.n	8006958 <__kernel_rem_pio2+0x250>
 800694c:	1e63      	subs	r3, r4, #1
 800694e:	aa0e      	add	r2, sp, #56	; 0x38
 8006950:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006954:	15c3      	asrs	r3, r0, #23
 8006956:	e79f      	b.n	8006898 <__kernel_rem_pio2+0x190>
 8006958:	2200      	movs	r2, #0
 800695a:	4b3a      	ldr	r3, [pc, #232]	; (8006a44 <__kernel_rem_pio2+0x33c>)
 800695c:	f7fa f8ea 	bl	8000b34 <__aeabi_dcmpge>
 8006960:	2800      	cmp	r0, #0
 8006962:	d139      	bne.n	80069d8 <__kernel_rem_pio2+0x2d0>
 8006964:	9002      	str	r0, [sp, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	4630      	mov	r0, r6
 800696c:	4639      	mov	r1, r7
 800696e:	f7fa f8c3 	bl	8000af8 <__aeabi_dcmpeq>
 8006972:	2800      	cmp	r0, #0
 8006974:	f000 80c7 	beq.w	8006b06 <__kernel_rem_pio2+0x3fe>
 8006978:	1e65      	subs	r5, r4, #1
 800697a:	462b      	mov	r3, r5
 800697c:	2200      	movs	r2, #0
 800697e:	9904      	ldr	r1, [sp, #16]
 8006980:	428b      	cmp	r3, r1
 8006982:	da6a      	bge.n	8006a5a <__kernel_rem_pio2+0x352>
 8006984:	2a00      	cmp	r2, #0
 8006986:	f000 8088 	beq.w	8006a9a <__kernel_rem_pio2+0x392>
 800698a:	ab0e      	add	r3, sp, #56	; 0x38
 800698c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006990:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80b4 	beq.w	8006b02 <__kernel_rem_pio2+0x3fa>
 800699a:	4650      	mov	r0, sl
 800699c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006a28 <__kernel_rem_pio2+0x320>
 80069a0:	f000 fc8e 	bl	80072c0 <scalbn>
 80069a4:	00ec      	lsls	r4, r5, #3
 80069a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80069a8:	191e      	adds	r6, r3, r4
 80069aa:	ec59 8b10 	vmov	r8, r9, d0
 80069ae:	f106 0a08 	add.w	sl, r6, #8
 80069b2:	462f      	mov	r7, r5
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	f280 80df 	bge.w	8006b78 <__kernel_rem_pio2+0x470>
 80069ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006a20 <__kernel_rem_pio2+0x318>
 80069be:	f04f 0a00 	mov.w	sl, #0
 80069c2:	eba5 030a 	sub.w	r3, r5, sl
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f2c0 810a 	blt.w	8006be0 <__kernel_rem_pio2+0x4d8>
 80069cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006a48 <__kernel_rem_pio2+0x340>
 80069d0:	ec59 8b18 	vmov	r8, r9, d8
 80069d4:	2700      	movs	r7, #0
 80069d6:	e0f5      	b.n	8006bc4 <__kernel_rem_pio2+0x4bc>
 80069d8:	2302      	movs	r3, #2
 80069da:	9302      	str	r3, [sp, #8]
 80069dc:	e760      	b.n	80068a0 <__kernel_rem_pio2+0x198>
 80069de:	ab0e      	add	r3, sp, #56	; 0x38
 80069e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e4:	b94d      	cbnz	r5, 80069fa <__kernel_rem_pio2+0x2f2>
 80069e6:	b12b      	cbz	r3, 80069f4 <__kernel_rem_pio2+0x2ec>
 80069e8:	a80e      	add	r0, sp, #56	; 0x38
 80069ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80069ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80069f2:	2301      	movs	r3, #1
 80069f4:	3201      	adds	r2, #1
 80069f6:	461d      	mov	r5, r3
 80069f8:	e759      	b.n	80068ae <__kernel_rem_pio2+0x1a6>
 80069fa:	a80e      	add	r0, sp, #56	; 0x38
 80069fc:	1acb      	subs	r3, r1, r3
 80069fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006a02:	462b      	mov	r3, r5
 8006a04:	e7f6      	b.n	80069f4 <__kernel_rem_pio2+0x2ec>
 8006a06:	1e62      	subs	r2, r4, #1
 8006a08:	ab0e      	add	r3, sp, #56	; 0x38
 8006a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a12:	a90e      	add	r1, sp, #56	; 0x38
 8006a14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a18:	e757      	b.n	80068ca <__kernel_rem_pio2+0x1c2>
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w
	...
 8006a2c:	3ff00000 	.word	0x3ff00000
 8006a30:	08008d88 	.word	0x08008d88
 8006a34:	40200000 	.word	0x40200000
 8006a38:	3ff00000 	.word	0x3ff00000
 8006a3c:	3e700000 	.word	0x3e700000
 8006a40:	41700000 	.word	0x41700000
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	08008d48 	.word	0x08008d48
 8006a4c:	1e62      	subs	r2, r4, #1
 8006a4e:	ab0e      	add	r3, sp, #56	; 0x38
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006a58:	e7db      	b.n	8006a12 <__kernel_rem_pio2+0x30a>
 8006a5a:	a90e      	add	r1, sp, #56	; 0x38
 8006a5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	430a      	orrs	r2, r1
 8006a64:	e78b      	b.n	800697e <__kernel_rem_pio2+0x276>
 8006a66:	3301      	adds	r3, #1
 8006a68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d0fa      	beq.n	8006a66 <__kernel_rem_pio2+0x35e>
 8006a70:	9a08      	ldr	r2, [sp, #32]
 8006a72:	4422      	add	r2, r4
 8006a74:	00d2      	lsls	r2, r2, #3
 8006a76:	a922      	add	r1, sp, #136	; 0x88
 8006a78:	18e3      	adds	r3, r4, r3
 8006a7a:	9206      	str	r2, [sp, #24]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	f10b 0108 	add.w	r1, fp, #8
 8006a84:	f102 0308 	add.w	r3, r2, #8
 8006a88:	1c66      	adds	r6, r4, #1
 8006a8a:	910a      	str	r1, [sp, #40]	; 0x28
 8006a8c:	2500      	movs	r5, #0
 8006a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8006a90:	9b02      	ldr	r3, [sp, #8]
 8006a92:	42b3      	cmp	r3, r6
 8006a94:	da04      	bge.n	8006aa0 <__kernel_rem_pio2+0x398>
 8006a96:	461c      	mov	r4, r3
 8006a98:	e6a6      	b.n	80067e8 <__kernel_rem_pio2+0xe0>
 8006a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e7e3      	b.n	8006a68 <__kernel_rem_pio2+0x360>
 8006aa0:	9b06      	ldr	r3, [sp, #24]
 8006aa2:	18ef      	adds	r7, r5, r3
 8006aa4:	ab22      	add	r3, sp, #136	; 0x88
 8006aa6:	441f      	add	r7, r3
 8006aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aaa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006aae:	f7f9 fd51 	bl	8000554 <__aeabi_i2d>
 8006ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab4:	461c      	mov	r4, r3
 8006ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab8:	e9c7 0100 	strd	r0, r1, [r7]
 8006abc:	eb03 0b05 	add.w	fp, r3, r5
 8006ac0:	2700      	movs	r7, #0
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	f04f 0900 	mov.w	r9, #0
 8006aca:	9b07      	ldr	r3, [sp, #28]
 8006acc:	429f      	cmp	r7, r3
 8006ace:	dd08      	ble.n	8006ae2 <__kernel_rem_pio2+0x3da>
 8006ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad2:	aa72      	add	r2, sp, #456	; 0x1c8
 8006ad4:	18eb      	adds	r3, r5, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006adc:	3601      	adds	r6, #1
 8006ade:	3508      	adds	r5, #8
 8006ae0:	e7d6      	b.n	8006a90 <__kernel_rem_pio2+0x388>
 8006ae2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006ae6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006aea:	f7f9 fd9d 	bl	8000628 <__aeabi_dmul>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4640      	mov	r0, r8
 8006af4:	4649      	mov	r1, r9
 8006af6:	f7f9 fbe1 	bl	80002bc <__adddf3>
 8006afa:	3701      	adds	r7, #1
 8006afc:	4680      	mov	r8, r0
 8006afe:	4689      	mov	r9, r1
 8006b00:	e7e3      	b.n	8006aca <__kernel_rem_pio2+0x3c2>
 8006b02:	3d01      	subs	r5, #1
 8006b04:	e741      	b.n	800698a <__kernel_rem_pio2+0x282>
 8006b06:	f1ca 0000 	rsb	r0, sl, #0
 8006b0a:	ec47 6b10 	vmov	d0, r6, r7
 8006b0e:	f000 fbd7 	bl	80072c0 <scalbn>
 8006b12:	ec57 6b10 	vmov	r6, r7, d0
 8006b16:	2200      	movs	r2, #0
 8006b18:	4b99      	ldr	r3, [pc, #612]	; (8006d80 <__kernel_rem_pio2+0x678>)
 8006b1a:	ee10 0a10 	vmov	r0, s0
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7fa f808 	bl	8000b34 <__aeabi_dcmpge>
 8006b24:	b1f8      	cbz	r0, 8006b66 <__kernel_rem_pio2+0x45e>
 8006b26:	2200      	movs	r2, #0
 8006b28:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <__kernel_rem_pio2+0x67c>)
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	f7f9 fd7b 	bl	8000628 <__aeabi_dmul>
 8006b32:	f7fa f829 	bl	8000b88 <__aeabi_d2iz>
 8006b36:	4680      	mov	r8, r0
 8006b38:	f7f9 fd0c 	bl	8000554 <__aeabi_i2d>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4b90      	ldr	r3, [pc, #576]	; (8006d80 <__kernel_rem_pio2+0x678>)
 8006b40:	f7f9 fd72 	bl	8000628 <__aeabi_dmul>
 8006b44:	460b      	mov	r3, r1
 8006b46:	4602      	mov	r2, r0
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7f9 fbb4 	bl	80002b8 <__aeabi_dsub>
 8006b50:	f7fa f81a 	bl	8000b88 <__aeabi_d2iz>
 8006b54:	1c65      	adds	r5, r4, #1
 8006b56:	ab0e      	add	r3, sp, #56	; 0x38
 8006b58:	f10a 0a18 	add.w	sl, sl, #24
 8006b5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b60:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006b64:	e719      	b.n	800699a <__kernel_rem_pio2+0x292>
 8006b66:	4630      	mov	r0, r6
 8006b68:	4639      	mov	r1, r7
 8006b6a:	f7fa f80d 	bl	8000b88 <__aeabi_d2iz>
 8006b6e:	ab0e      	add	r3, sp, #56	; 0x38
 8006b70:	4625      	mov	r5, r4
 8006b72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b76:	e710      	b.n	800699a <__kernel_rem_pio2+0x292>
 8006b78:	ab0e      	add	r3, sp, #56	; 0x38
 8006b7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006b7e:	f7f9 fce9 	bl	8000554 <__aeabi_i2d>
 8006b82:	4642      	mov	r2, r8
 8006b84:	464b      	mov	r3, r9
 8006b86:	f7f9 fd4f 	bl	8000628 <__aeabi_dmul>
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006b90:	4b7c      	ldr	r3, [pc, #496]	; (8006d84 <__kernel_rem_pio2+0x67c>)
 8006b92:	4640      	mov	r0, r8
 8006b94:	4649      	mov	r1, r9
 8006b96:	f7f9 fd47 	bl	8000628 <__aeabi_dmul>
 8006b9a:	3f01      	subs	r7, #1
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	4689      	mov	r9, r1
 8006ba0:	e708      	b.n	80069b4 <__kernel_rem_pio2+0x2ac>
 8006ba2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006bae:	f7f9 fd3b 	bl	8000628 <__aeabi_dmul>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	4649      	mov	r1, r9
 8006bba:	f7f9 fb7f 	bl	80002bc <__adddf3>
 8006bbe:	3701      	adds	r7, #1
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	4689      	mov	r9, r1
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	429f      	cmp	r7, r3
 8006bc8:	dc01      	bgt.n	8006bce <__kernel_rem_pio2+0x4c6>
 8006bca:	45ba      	cmp	sl, r7
 8006bcc:	dae9      	bge.n	8006ba2 <__kernel_rem_pio2+0x49a>
 8006bce:	ab4a      	add	r3, sp, #296	; 0x128
 8006bd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006bd4:	e9c3 8900 	strd	r8, r9, [r3]
 8006bd8:	f10a 0a01 	add.w	sl, sl, #1
 8006bdc:	3e08      	subs	r6, #8
 8006bde:	e6f0      	b.n	80069c2 <__kernel_rem_pio2+0x2ba>
 8006be0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d85b      	bhi.n	8006c9e <__kernel_rem_pio2+0x596>
 8006be6:	e8df f003 	tbb	[pc, r3]
 8006bea:	264a      	.short	0x264a
 8006bec:	0226      	.short	0x0226
 8006bee:	ab9a      	add	r3, sp, #616	; 0x268
 8006bf0:	441c      	add	r4, r3
 8006bf2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006bf6:	46a2      	mov	sl, r4
 8006bf8:	46ab      	mov	fp, r5
 8006bfa:	f1bb 0f00 	cmp.w	fp, #0
 8006bfe:	dc6c      	bgt.n	8006cda <__kernel_rem_pio2+0x5d2>
 8006c00:	46a2      	mov	sl, r4
 8006c02:	46ab      	mov	fp, r5
 8006c04:	f1bb 0f01 	cmp.w	fp, #1
 8006c08:	f300 8086 	bgt.w	8006d18 <__kernel_rem_pio2+0x610>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	2d01      	cmp	r5, #1
 8006c12:	f300 80a0 	bgt.w	8006d56 <__kernel_rem_pio2+0x64e>
 8006c16:	9b02      	ldr	r3, [sp, #8]
 8006c18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006c1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 809e 	bne.w	8006d62 <__kernel_rem_pio2+0x65a>
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	e9c3 7800 	strd	r7, r8, [r3]
 8006c2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006c30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006c34:	e033      	b.n	8006c9e <__kernel_rem_pio2+0x596>
 8006c36:	3408      	adds	r4, #8
 8006c38:	ab4a      	add	r3, sp, #296	; 0x128
 8006c3a:	441c      	add	r4, r3
 8006c3c:	462e      	mov	r6, r5
 8006c3e:	2000      	movs	r0, #0
 8006c40:	2100      	movs	r1, #0
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	da3a      	bge.n	8006cbc <__kernel_rem_pio2+0x5b4>
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d03d      	beq.n	8006cc8 <__kernel_rem_pio2+0x5c0>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c52:	9c01      	ldr	r4, [sp, #4]
 8006c54:	e9c4 2300 	strd	r2, r3, [r4]
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006c60:	f7f9 fb2a 	bl	80002b8 <__aeabi_dsub>
 8006c64:	ae4c      	add	r6, sp, #304	; 0x130
 8006c66:	2401      	movs	r4, #1
 8006c68:	42a5      	cmp	r5, r4
 8006c6a:	da30      	bge.n	8006cce <__kernel_rem_pio2+0x5c6>
 8006c6c:	9b02      	ldr	r3, [sp, #8]
 8006c6e:	b113      	cbz	r3, 8006c76 <__kernel_rem_pio2+0x56e>
 8006c70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c74:	4619      	mov	r1, r3
 8006c76:	9b01      	ldr	r3, [sp, #4]
 8006c78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006c7c:	e00f      	b.n	8006c9e <__kernel_rem_pio2+0x596>
 8006c7e:	ab9a      	add	r3, sp, #616	; 0x268
 8006c80:	441c      	add	r4, r3
 8006c82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006c86:	2000      	movs	r0, #0
 8006c88:	2100      	movs	r1, #0
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	da10      	bge.n	8006cb0 <__kernel_rem_pio2+0x5a8>
 8006c8e:	9b02      	ldr	r3, [sp, #8]
 8006c90:	b113      	cbz	r3, 8006c98 <__kernel_rem_pio2+0x590>
 8006c92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c96:	4619      	mov	r1, r3
 8006c98:	9b01      	ldr	r3, [sp, #4]
 8006c9a:	e9c3 0100 	strd	r0, r1, [r3]
 8006c9e:	9b06      	ldr	r3, [sp, #24]
 8006ca0:	f003 0007 	and.w	r0, r3, #7
 8006ca4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006ca8:	ecbd 8b02 	vpop	{d8}
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006cb4:	f7f9 fb02 	bl	80002bc <__adddf3>
 8006cb8:	3d01      	subs	r5, #1
 8006cba:	e7e6      	b.n	8006c8a <__kernel_rem_pio2+0x582>
 8006cbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006cc0:	f7f9 fafc 	bl	80002bc <__adddf3>
 8006cc4:	3e01      	subs	r6, #1
 8006cc6:	e7bc      	b.n	8006c42 <__kernel_rem_pio2+0x53a>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	e7c1      	b.n	8006c52 <__kernel_rem_pio2+0x54a>
 8006cce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006cd2:	f7f9 faf3 	bl	80002bc <__adddf3>
 8006cd6:	3401      	adds	r4, #1
 8006cd8:	e7c6      	b.n	8006c68 <__kernel_rem_pio2+0x560>
 8006cda:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006cde:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006ce2:	4640      	mov	r0, r8
 8006ce4:	ec53 2b17 	vmov	r2, r3, d7
 8006ce8:	4649      	mov	r1, r9
 8006cea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cee:	f7f9 fae5 	bl	80002bc <__adddf3>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	f7f9 fadb 	bl	80002b8 <__aeabi_dsub>
 8006d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d06:	f7f9 fad9 	bl	80002bc <__adddf3>
 8006d0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d0e:	e9ca 0100 	strd	r0, r1, [sl]
 8006d12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006d16:	e770      	b.n	8006bfa <__kernel_rem_pio2+0x4f2>
 8006d18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006d1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006d20:	4630      	mov	r0, r6
 8006d22:	ec53 2b17 	vmov	r2, r3, d7
 8006d26:	4639      	mov	r1, r7
 8006d28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d2c:	f7f9 fac6 	bl	80002bc <__adddf3>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4680      	mov	r8, r0
 8006d36:	4689      	mov	r9, r1
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7f9 fabc 	bl	80002b8 <__aeabi_dsub>
 8006d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d44:	f7f9 faba 	bl	80002bc <__adddf3>
 8006d48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d4c:	e9ca 0100 	strd	r0, r1, [sl]
 8006d50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006d54:	e756      	b.n	8006c04 <__kernel_rem_pio2+0x4fc>
 8006d56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d5a:	f7f9 faaf 	bl	80002bc <__adddf3>
 8006d5e:	3d01      	subs	r5, #1
 8006d60:	e756      	b.n	8006c10 <__kernel_rem_pio2+0x508>
 8006d62:	9b01      	ldr	r3, [sp, #4]
 8006d64:	9a01      	ldr	r2, [sp, #4]
 8006d66:	601f      	str	r7, [r3, #0]
 8006d68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006d6c:	605c      	str	r4, [r3, #4]
 8006d6e:	609d      	str	r5, [r3, #8]
 8006d70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d74:	60d3      	str	r3, [r2, #12]
 8006d76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d7a:	6110      	str	r0, [r2, #16]
 8006d7c:	6153      	str	r3, [r2, #20]
 8006d7e:	e78e      	b.n	8006c9e <__kernel_rem_pio2+0x596>
 8006d80:	41700000 	.word	0x41700000
 8006d84:	3e700000 	.word	0x3e700000

08006d88 <__kernel_sin>:
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	ec55 4b10 	vmov	r4, r5, d0
 8006d90:	b085      	sub	sp, #20
 8006d92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006d9a:	ed8d 1b00 	vstr	d1, [sp]
 8006d9e:	9002      	str	r0, [sp, #8]
 8006da0:	da06      	bge.n	8006db0 <__kernel_sin+0x28>
 8006da2:	ee10 0a10 	vmov	r0, s0
 8006da6:	4629      	mov	r1, r5
 8006da8:	f7f9 feee 	bl	8000b88 <__aeabi_d2iz>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d051      	beq.n	8006e54 <__kernel_sin+0xcc>
 8006db0:	4622      	mov	r2, r4
 8006db2:	462b      	mov	r3, r5
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 fc36 	bl	8000628 <__aeabi_dmul>
 8006dbc:	4682      	mov	sl, r0
 8006dbe:	468b      	mov	fp, r1
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fc2e 	bl	8000628 <__aeabi_dmul>
 8006dcc:	a341      	add	r3, pc, #260	; (adr r3, 8006ed4 <__kernel_sin+0x14c>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	4689      	mov	r9, r1
 8006dd6:	4650      	mov	r0, sl
 8006dd8:	4659      	mov	r1, fp
 8006dda:	f7f9 fc25 	bl	8000628 <__aeabi_dmul>
 8006dde:	a33f      	add	r3, pc, #252	; (adr r3, 8006edc <__kernel_sin+0x154>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fa68 	bl	80002b8 <__aeabi_dsub>
 8006de8:	4652      	mov	r2, sl
 8006dea:	465b      	mov	r3, fp
 8006dec:	f7f9 fc1c 	bl	8000628 <__aeabi_dmul>
 8006df0:	a33c      	add	r3, pc, #240	; (adr r3, 8006ee4 <__kernel_sin+0x15c>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fa61 	bl	80002bc <__adddf3>
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	465b      	mov	r3, fp
 8006dfe:	f7f9 fc13 	bl	8000628 <__aeabi_dmul>
 8006e02:	a33a      	add	r3, pc, #232	; (adr r3, 8006eec <__kernel_sin+0x164>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 fa56 	bl	80002b8 <__aeabi_dsub>
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	465b      	mov	r3, fp
 8006e10:	f7f9 fc0a 	bl	8000628 <__aeabi_dmul>
 8006e14:	a337      	add	r3, pc, #220	; (adr r3, 8006ef4 <__kernel_sin+0x16c>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fa4f 	bl	80002bc <__adddf3>
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	4606      	mov	r6, r0
 8006e22:	460f      	mov	r7, r1
 8006e24:	b9db      	cbnz	r3, 8006e5e <__kernel_sin+0xd6>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	f7f9 fbfb 	bl	8000628 <__aeabi_dmul>
 8006e32:	a325      	add	r3, pc, #148	; (adr r3, 8006ec8 <__kernel_sin+0x140>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fa3e 	bl	80002b8 <__aeabi_dsub>
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	464b      	mov	r3, r9
 8006e40:	f7f9 fbf2 	bl	8000628 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	f7f9 fa36 	bl	80002bc <__adddf3>
 8006e50:	4604      	mov	r4, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	ec45 4b10 	vmov	d0, r4, r5
 8006e58:	b005      	add	sp, #20
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	2200      	movs	r2, #0
 8006e60:	4b1b      	ldr	r3, [pc, #108]	; (8006ed0 <__kernel_sin+0x148>)
 8006e62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e66:	f7f9 fbdf 	bl	8000628 <__aeabi_dmul>
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e70:	463b      	mov	r3, r7
 8006e72:	4640      	mov	r0, r8
 8006e74:	4649      	mov	r1, r9
 8006e76:	f7f9 fbd7 	bl	8000628 <__aeabi_dmul>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e82:	f7f9 fa19 	bl	80002b8 <__aeabi_dsub>
 8006e86:	4652      	mov	r2, sl
 8006e88:	465b      	mov	r3, fp
 8006e8a:	f7f9 fbcd 	bl	8000628 <__aeabi_dmul>
 8006e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e92:	f7f9 fa11 	bl	80002b8 <__aeabi_dsub>
 8006e96:	a30c      	add	r3, pc, #48	; (adr r3, 8006ec8 <__kernel_sin+0x140>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	460f      	mov	r7, r1
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	f7f9 fbc0 	bl	8000628 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4630      	mov	r0, r6
 8006eae:	4639      	mov	r1, r7
 8006eb0:	f7f9 fa04 	bl	80002bc <__adddf3>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4620      	mov	r0, r4
 8006eba:	4629      	mov	r1, r5
 8006ebc:	f7f9 f9fc 	bl	80002b8 <__aeabi_dsub>
 8006ec0:	e7c6      	b.n	8006e50 <__kernel_sin+0xc8>
 8006ec2:	bf00      	nop
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	55555549 	.word	0x55555549
 8006ecc:	3fc55555 	.word	0x3fc55555
 8006ed0:	3fe00000 	.word	0x3fe00000
 8006ed4:	5acfd57c 	.word	0x5acfd57c
 8006ed8:	3de5d93a 	.word	0x3de5d93a
 8006edc:	8a2b9ceb 	.word	0x8a2b9ceb
 8006ee0:	3e5ae5e6 	.word	0x3e5ae5e6
 8006ee4:	57b1fe7d 	.word	0x57b1fe7d
 8006ee8:	3ec71de3 	.word	0x3ec71de3
 8006eec:	19c161d5 	.word	0x19c161d5
 8006ef0:	3f2a01a0 	.word	0x3f2a01a0
 8006ef4:	1110f8a6 	.word	0x1110f8a6
 8006ef8:	3f811111 	.word	0x3f811111
 8006efc:	00000000 	.word	0x00000000

08006f00 <__kernel_tan>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	ec5b ab10 	vmov	sl, fp, d0
 8006f08:	4bbf      	ldr	r3, [pc, #764]	; (8007208 <__kernel_tan+0x308>)
 8006f0a:	b089      	sub	sp, #36	; 0x24
 8006f0c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006f10:	429f      	cmp	r7, r3
 8006f12:	ec59 8b11 	vmov	r8, r9, d1
 8006f16:	4606      	mov	r6, r0
 8006f18:	f8cd b008 	str.w	fp, [sp, #8]
 8006f1c:	dc22      	bgt.n	8006f64 <__kernel_tan+0x64>
 8006f1e:	ee10 0a10 	vmov	r0, s0
 8006f22:	4659      	mov	r1, fp
 8006f24:	f7f9 fe30 	bl	8000b88 <__aeabi_d2iz>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d145      	bne.n	8006fb8 <__kernel_tan+0xb8>
 8006f2c:	1c73      	adds	r3, r6, #1
 8006f2e:	4652      	mov	r2, sl
 8006f30:	4313      	orrs	r3, r2
 8006f32:	433b      	orrs	r3, r7
 8006f34:	d110      	bne.n	8006f58 <__kernel_tan+0x58>
 8006f36:	ec4b ab10 	vmov	d0, sl, fp
 8006f3a:	f000 f9ad 	bl	8007298 <fabs>
 8006f3e:	49b3      	ldr	r1, [pc, #716]	; (800720c <__kernel_tan+0x30c>)
 8006f40:	ec53 2b10 	vmov	r2, r3, d0
 8006f44:	2000      	movs	r0, #0
 8006f46:	f7f9 fc99 	bl	800087c <__aeabi_ddiv>
 8006f4a:	4682      	mov	sl, r0
 8006f4c:	468b      	mov	fp, r1
 8006f4e:	ec4b ab10 	vmov	d0, sl, fp
 8006f52:	b009      	add	sp, #36	; 0x24
 8006f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f58:	2e01      	cmp	r6, #1
 8006f5a:	d0f8      	beq.n	8006f4e <__kernel_tan+0x4e>
 8006f5c:	465b      	mov	r3, fp
 8006f5e:	2000      	movs	r0, #0
 8006f60:	49ab      	ldr	r1, [pc, #684]	; (8007210 <__kernel_tan+0x310>)
 8006f62:	e7f0      	b.n	8006f46 <__kernel_tan+0x46>
 8006f64:	4bab      	ldr	r3, [pc, #684]	; (8007214 <__kernel_tan+0x314>)
 8006f66:	429f      	cmp	r7, r3
 8006f68:	dd26      	ble.n	8006fb8 <__kernel_tan+0xb8>
 8006f6a:	9b02      	ldr	r3, [sp, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	da09      	bge.n	8006f84 <__kernel_tan+0x84>
 8006f70:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f74:	469b      	mov	fp, r3
 8006f76:	ee10 aa10 	vmov	sl, s0
 8006f7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f7e:	ee11 8a10 	vmov	r8, s2
 8006f82:	4699      	mov	r9, r3
 8006f84:	4652      	mov	r2, sl
 8006f86:	465b      	mov	r3, fp
 8006f88:	a181      	add	r1, pc, #516	; (adr r1, 8007190 <__kernel_tan+0x290>)
 8006f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f8e:	f7f9 f993 	bl	80002b8 <__aeabi_dsub>
 8006f92:	4642      	mov	r2, r8
 8006f94:	464b      	mov	r3, r9
 8006f96:	4604      	mov	r4, r0
 8006f98:	460d      	mov	r5, r1
 8006f9a:	a17f      	add	r1, pc, #508	; (adr r1, 8007198 <__kernel_tan+0x298>)
 8006f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fa0:	f7f9 f98a 	bl	80002b8 <__aeabi_dsub>
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	f7f9 f988 	bl	80002bc <__adddf3>
 8006fac:	f04f 0800 	mov.w	r8, #0
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	468b      	mov	fp, r1
 8006fb4:	f04f 0900 	mov.w	r9, #0
 8006fb8:	4652      	mov	r2, sl
 8006fba:	465b      	mov	r3, fp
 8006fbc:	4650      	mov	r0, sl
 8006fbe:	4659      	mov	r1, fp
 8006fc0:	f7f9 fb32 	bl	8000628 <__aeabi_dmul>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8006fcc:	f7f9 fb2c 	bl	8000628 <__aeabi_dmul>
 8006fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	4650      	mov	r0, sl
 8006fda:	4659      	mov	r1, fp
 8006fdc:	f7f9 fb24 	bl	8000628 <__aeabi_dmul>
 8006fe0:	a36f      	add	r3, pc, #444	; (adr r3, 80071a0 <__kernel_tan+0x2a0>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 fb1b 	bl	8000628 <__aeabi_dmul>
 8006ff2:	a36d      	add	r3, pc, #436	; (adr r3, 80071a8 <__kernel_tan+0x2a8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 f960 	bl	80002bc <__adddf3>
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	462b      	mov	r3, r5
 8007000:	f7f9 fb12 	bl	8000628 <__aeabi_dmul>
 8007004:	a36a      	add	r3, pc, #424	; (adr r3, 80071b0 <__kernel_tan+0x2b0>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 f957 	bl	80002bc <__adddf3>
 800700e:	4622      	mov	r2, r4
 8007010:	462b      	mov	r3, r5
 8007012:	f7f9 fb09 	bl	8000628 <__aeabi_dmul>
 8007016:	a368      	add	r3, pc, #416	; (adr r3, 80071b8 <__kernel_tan+0x2b8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f7f9 f94e 	bl	80002bc <__adddf3>
 8007020:	4622      	mov	r2, r4
 8007022:	462b      	mov	r3, r5
 8007024:	f7f9 fb00 	bl	8000628 <__aeabi_dmul>
 8007028:	a365      	add	r3, pc, #404	; (adr r3, 80071c0 <__kernel_tan+0x2c0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f945 	bl	80002bc <__adddf3>
 8007032:	4622      	mov	r2, r4
 8007034:	462b      	mov	r3, r5
 8007036:	f7f9 faf7 	bl	8000628 <__aeabi_dmul>
 800703a:	a363      	add	r3, pc, #396	; (adr r3, 80071c8 <__kernel_tan+0x2c8>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 f93c 	bl	80002bc <__adddf3>
 8007044:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007048:	f7f9 faee 	bl	8000628 <__aeabi_dmul>
 800704c:	a360      	add	r3, pc, #384	; (adr r3, 80071d0 <__kernel_tan+0x2d0>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 fae5 	bl	8000628 <__aeabi_dmul>
 800705e:	a35e      	add	r3, pc, #376	; (adr r3, 80071d8 <__kernel_tan+0x2d8>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 f92a 	bl	80002bc <__adddf3>
 8007068:	4622      	mov	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	f7f9 fadc 	bl	8000628 <__aeabi_dmul>
 8007070:	a35b      	add	r3, pc, #364	; (adr r3, 80071e0 <__kernel_tan+0x2e0>)
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f7f9 f921 	bl	80002bc <__adddf3>
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	f7f9 fad3 	bl	8000628 <__aeabi_dmul>
 8007082:	a359      	add	r3, pc, #356	; (adr r3, 80071e8 <__kernel_tan+0x2e8>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 f918 	bl	80002bc <__adddf3>
 800708c:	4622      	mov	r2, r4
 800708e:	462b      	mov	r3, r5
 8007090:	f7f9 faca 	bl	8000628 <__aeabi_dmul>
 8007094:	a356      	add	r3, pc, #344	; (adr r3, 80071f0 <__kernel_tan+0x2f0>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f7f9 f90f 	bl	80002bc <__adddf3>
 800709e:	4622      	mov	r2, r4
 80070a0:	462b      	mov	r3, r5
 80070a2:	f7f9 fac1 	bl	8000628 <__aeabi_dmul>
 80070a6:	a354      	add	r3, pc, #336	; (adr r3, 80071f8 <__kernel_tan+0x2f8>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 f906 	bl	80002bc <__adddf3>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b8:	f7f9 f900 	bl	80002bc <__adddf3>
 80070bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c0:	f7f9 fab2 	bl	8000628 <__aeabi_dmul>
 80070c4:	4642      	mov	r2, r8
 80070c6:	464b      	mov	r3, r9
 80070c8:	f7f9 f8f8 	bl	80002bc <__adddf3>
 80070cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070d0:	f7f9 faaa 	bl	8000628 <__aeabi_dmul>
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	f7f9 f8f0 	bl	80002bc <__adddf3>
 80070dc:	a348      	add	r3, pc, #288	; (adr r3, 8007200 <__kernel_tan+0x300>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	4604      	mov	r4, r0
 80070e4:	460d      	mov	r5, r1
 80070e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070ea:	f7f9 fa9d 	bl	8000628 <__aeabi_dmul>
 80070ee:	4622      	mov	r2, r4
 80070f0:	462b      	mov	r3, r5
 80070f2:	f7f9 f8e3 	bl	80002bc <__adddf3>
 80070f6:	e9cd 0100 	strd	r0, r1, [sp]
 80070fa:	460b      	mov	r3, r1
 80070fc:	4602      	mov	r2, r0
 80070fe:	4659      	mov	r1, fp
 8007100:	4650      	mov	r0, sl
 8007102:	f7f9 f8db 	bl	80002bc <__adddf3>
 8007106:	4b43      	ldr	r3, [pc, #268]	; (8007214 <__kernel_tan+0x314>)
 8007108:	429f      	cmp	r7, r3
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	f340 8083 	ble.w	8007218 <__kernel_tan+0x318>
 8007112:	4630      	mov	r0, r6
 8007114:	f7f9 fa1e 	bl	8000554 <__aeabi_i2d>
 8007118:	4622      	mov	r2, r4
 800711a:	4680      	mov	r8, r0
 800711c:	4689      	mov	r9, r1
 800711e:	462b      	mov	r3, r5
 8007120:	4620      	mov	r0, r4
 8007122:	4629      	mov	r1, r5
 8007124:	f7f9 fa80 	bl	8000628 <__aeabi_dmul>
 8007128:	4642      	mov	r2, r8
 800712a:	4606      	mov	r6, r0
 800712c:	460f      	mov	r7, r1
 800712e:	464b      	mov	r3, r9
 8007130:	4620      	mov	r0, r4
 8007132:	4629      	mov	r1, r5
 8007134:	f7f9 f8c2 	bl	80002bc <__adddf3>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4630      	mov	r0, r6
 800713e:	4639      	mov	r1, r7
 8007140:	f7f9 fb9c 	bl	800087c <__aeabi_ddiv>
 8007144:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007148:	f7f9 f8b6 	bl	80002b8 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4650      	mov	r0, sl
 8007152:	4659      	mov	r1, fp
 8007154:	f7f9 f8b0 	bl	80002b8 <__aeabi_dsub>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	f7f9 f8ae 	bl	80002bc <__adddf3>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4640      	mov	r0, r8
 8007166:	4649      	mov	r1, r9
 8007168:	f7f9 f8a6 	bl	80002b8 <__aeabi_dsub>
 800716c:	9b02      	ldr	r3, [sp, #8]
 800716e:	4604      	mov	r4, r0
 8007170:	1798      	asrs	r0, r3, #30
 8007172:	f000 0002 	and.w	r0, r0, #2
 8007176:	f1c0 0001 	rsb	r0, r0, #1
 800717a:	460d      	mov	r5, r1
 800717c:	f7f9 f9ea 	bl	8000554 <__aeabi_i2d>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4620      	mov	r0, r4
 8007186:	4629      	mov	r1, r5
 8007188:	f7f9 fa4e 	bl	8000628 <__aeabi_dmul>
 800718c:	e6dd      	b.n	8006f4a <__kernel_tan+0x4a>
 800718e:	bf00      	nop
 8007190:	54442d18 	.word	0x54442d18
 8007194:	3fe921fb 	.word	0x3fe921fb
 8007198:	33145c07 	.word	0x33145c07
 800719c:	3c81a626 	.word	0x3c81a626
 80071a0:	74bf7ad4 	.word	0x74bf7ad4
 80071a4:	3efb2a70 	.word	0x3efb2a70
 80071a8:	32f0a7e9 	.word	0x32f0a7e9
 80071ac:	3f12b80f 	.word	0x3f12b80f
 80071b0:	1a8d1068 	.word	0x1a8d1068
 80071b4:	3f3026f7 	.word	0x3f3026f7
 80071b8:	fee08315 	.word	0xfee08315
 80071bc:	3f57dbc8 	.word	0x3f57dbc8
 80071c0:	e96e8493 	.word	0xe96e8493
 80071c4:	3f8226e3 	.word	0x3f8226e3
 80071c8:	1bb341fe 	.word	0x1bb341fe
 80071cc:	3faba1ba 	.word	0x3faba1ba
 80071d0:	db605373 	.word	0xdb605373
 80071d4:	bef375cb 	.word	0xbef375cb
 80071d8:	a03792a6 	.word	0xa03792a6
 80071dc:	3f147e88 	.word	0x3f147e88
 80071e0:	f2f26501 	.word	0xf2f26501
 80071e4:	3f4344d8 	.word	0x3f4344d8
 80071e8:	c9560328 	.word	0xc9560328
 80071ec:	3f6d6d22 	.word	0x3f6d6d22
 80071f0:	8406d637 	.word	0x8406d637
 80071f4:	3f9664f4 	.word	0x3f9664f4
 80071f8:	1110fe7a 	.word	0x1110fe7a
 80071fc:	3fc11111 	.word	0x3fc11111
 8007200:	55555563 	.word	0x55555563
 8007204:	3fd55555 	.word	0x3fd55555
 8007208:	3e2fffff 	.word	0x3e2fffff
 800720c:	3ff00000 	.word	0x3ff00000
 8007210:	bff00000 	.word	0xbff00000
 8007214:	3fe59427 	.word	0x3fe59427
 8007218:	2e01      	cmp	r6, #1
 800721a:	d036      	beq.n	800728a <__kernel_tan+0x38a>
 800721c:	460f      	mov	r7, r1
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	2000      	movs	r0, #0
 8007224:	491a      	ldr	r1, [pc, #104]	; (8007290 <__kernel_tan+0x390>)
 8007226:	f7f9 fb29 	bl	800087c <__aeabi_ddiv>
 800722a:	2600      	movs	r6, #0
 800722c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007230:	4652      	mov	r2, sl
 8007232:	465b      	mov	r3, fp
 8007234:	4630      	mov	r0, r6
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 f83e 	bl	80002b8 <__aeabi_dsub>
 800723c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007248:	f7f9 f836 	bl	80002b8 <__aeabi_dsub>
 800724c:	4632      	mov	r2, r6
 800724e:	462b      	mov	r3, r5
 8007250:	f7f9 f9ea 	bl	8000628 <__aeabi_dmul>
 8007254:	4632      	mov	r2, r6
 8007256:	4682      	mov	sl, r0
 8007258:	468b      	mov	fp, r1
 800725a:	462b      	mov	r3, r5
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 f9e2 	bl	8000628 <__aeabi_dmul>
 8007264:	2200      	movs	r2, #0
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <__kernel_tan+0x394>)
 8007268:	f7f9 f828 	bl	80002bc <__adddf3>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4650      	mov	r0, sl
 8007272:	4659      	mov	r1, fp
 8007274:	f7f9 f822 	bl	80002bc <__adddf3>
 8007278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800727c:	f7f9 f9d4 	bl	8000628 <__aeabi_dmul>
 8007280:	4632      	mov	r2, r6
 8007282:	462b      	mov	r3, r5
 8007284:	f7f9 f81a 	bl	80002bc <__adddf3>
 8007288:	e65f      	b.n	8006f4a <__kernel_tan+0x4a>
 800728a:	4682      	mov	sl, r0
 800728c:	468b      	mov	fp, r1
 800728e:	e65e      	b.n	8006f4e <__kernel_tan+0x4e>
 8007290:	bff00000 	.word	0xbff00000
 8007294:	3ff00000 	.word	0x3ff00000

08007298 <fabs>:
 8007298:	ec51 0b10 	vmov	r0, r1, d0
 800729c:	ee10 2a10 	vmov	r2, s0
 80072a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072a4:	ec43 2b10 	vmov	d0, r2, r3
 80072a8:	4770      	bx	lr

080072aa <matherr>:
 80072aa:	2000      	movs	r0, #0
 80072ac:	4770      	bx	lr
	...

080072b0 <nan>:
 80072b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80072b8 <nan+0x8>
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	00000000 	.word	0x00000000
 80072bc:	7ff80000 	.word	0x7ff80000

080072c0 <scalbn>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	ec55 4b10 	vmov	r4, r5, d0
 80072c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80072ca:	4606      	mov	r6, r0
 80072cc:	462b      	mov	r3, r5
 80072ce:	b9aa      	cbnz	r2, 80072fc <scalbn+0x3c>
 80072d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072d4:	4323      	orrs	r3, r4
 80072d6:	d03b      	beq.n	8007350 <scalbn+0x90>
 80072d8:	4b31      	ldr	r3, [pc, #196]	; (80073a0 <scalbn+0xe0>)
 80072da:	4629      	mov	r1, r5
 80072dc:	2200      	movs	r2, #0
 80072de:	ee10 0a10 	vmov	r0, s0
 80072e2:	f7f9 f9a1 	bl	8000628 <__aeabi_dmul>
 80072e6:	4b2f      	ldr	r3, [pc, #188]	; (80073a4 <scalbn+0xe4>)
 80072e8:	429e      	cmp	r6, r3
 80072ea:	4604      	mov	r4, r0
 80072ec:	460d      	mov	r5, r1
 80072ee:	da12      	bge.n	8007316 <scalbn+0x56>
 80072f0:	a327      	add	r3, pc, #156	; (adr r3, 8007390 <scalbn+0xd0>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f9 f997 	bl	8000628 <__aeabi_dmul>
 80072fa:	e009      	b.n	8007310 <scalbn+0x50>
 80072fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007300:	428a      	cmp	r2, r1
 8007302:	d10c      	bne.n	800731e <scalbn+0x5e>
 8007304:	ee10 2a10 	vmov	r2, s0
 8007308:	4620      	mov	r0, r4
 800730a:	4629      	mov	r1, r5
 800730c:	f7f8 ffd6 	bl	80002bc <__adddf3>
 8007310:	4604      	mov	r4, r0
 8007312:	460d      	mov	r5, r1
 8007314:	e01c      	b.n	8007350 <scalbn+0x90>
 8007316:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800731a:	460b      	mov	r3, r1
 800731c:	3a36      	subs	r2, #54	; 0x36
 800731e:	4432      	add	r2, r6
 8007320:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007324:	428a      	cmp	r2, r1
 8007326:	dd0b      	ble.n	8007340 <scalbn+0x80>
 8007328:	ec45 4b11 	vmov	d1, r4, r5
 800732c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007398 <scalbn+0xd8>
 8007330:	f000 f83c 	bl	80073ac <copysign>
 8007334:	a318      	add	r3, pc, #96	; (adr r3, 8007398 <scalbn+0xd8>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	ec51 0b10 	vmov	r0, r1, d0
 800733e:	e7da      	b.n	80072f6 <scalbn+0x36>
 8007340:	2a00      	cmp	r2, #0
 8007342:	dd08      	ble.n	8007356 <scalbn+0x96>
 8007344:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007348:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800734c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007350:	ec45 4b10 	vmov	d0, r4, r5
 8007354:	bd70      	pop	{r4, r5, r6, pc}
 8007356:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800735a:	da0d      	bge.n	8007378 <scalbn+0xb8>
 800735c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007360:	429e      	cmp	r6, r3
 8007362:	ec45 4b11 	vmov	d1, r4, r5
 8007366:	dce1      	bgt.n	800732c <scalbn+0x6c>
 8007368:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007390 <scalbn+0xd0>
 800736c:	f000 f81e 	bl	80073ac <copysign>
 8007370:	a307      	add	r3, pc, #28	; (adr r3, 8007390 <scalbn+0xd0>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	e7e0      	b.n	800733a <scalbn+0x7a>
 8007378:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800737c:	3236      	adds	r2, #54	; 0x36
 800737e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007382:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	2200      	movs	r2, #0
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <scalbn+0xe8>)
 800738e:	e7b2      	b.n	80072f6 <scalbn+0x36>
 8007390:	c2f8f359 	.word	0xc2f8f359
 8007394:	01a56e1f 	.word	0x01a56e1f
 8007398:	8800759c 	.word	0x8800759c
 800739c:	7e37e43c 	.word	0x7e37e43c
 80073a0:	43500000 	.word	0x43500000
 80073a4:	ffff3cb0 	.word	0xffff3cb0
 80073a8:	3c900000 	.word	0x3c900000

080073ac <copysign>:
 80073ac:	ec51 0b10 	vmov	r0, r1, d0
 80073b0:	ee11 0a90 	vmov	r0, s3
 80073b4:	ee10 2a10 	vmov	r2, s0
 80073b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80073c0:	ea41 0300 	orr.w	r3, r1, r0
 80073c4:	ec43 2b10 	vmov	d0, r2, r3
 80073c8:	4770      	bx	lr
	...

080073cc <__errno>:
 80073cc:	4b01      	ldr	r3, [pc, #4]	; (80073d4 <__errno+0x8>)
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20000010 	.word	0x20000010

080073d8 <__libc_init_array>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	4e0d      	ldr	r6, [pc, #52]	; (8007410 <__libc_init_array+0x38>)
 80073dc:	4c0d      	ldr	r4, [pc, #52]	; (8007414 <__libc_init_array+0x3c>)
 80073de:	1ba4      	subs	r4, r4, r6
 80073e0:	10a4      	asrs	r4, r4, #2
 80073e2:	2500      	movs	r5, #0
 80073e4:	42a5      	cmp	r5, r4
 80073e6:	d109      	bne.n	80073fc <__libc_init_array+0x24>
 80073e8:	4e0b      	ldr	r6, [pc, #44]	; (8007418 <__libc_init_array+0x40>)
 80073ea:	4c0c      	ldr	r4, [pc, #48]	; (800741c <__libc_init_array+0x44>)
 80073ec:	f001 fb50 	bl	8008a90 <_init>
 80073f0:	1ba4      	subs	r4, r4, r6
 80073f2:	10a4      	asrs	r4, r4, #2
 80073f4:	2500      	movs	r5, #0
 80073f6:	42a5      	cmp	r5, r4
 80073f8:	d105      	bne.n	8007406 <__libc_init_array+0x2e>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007400:	4798      	blx	r3
 8007402:	3501      	adds	r5, #1
 8007404:	e7ee      	b.n	80073e4 <__libc_init_array+0xc>
 8007406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800740a:	4798      	blx	r3
 800740c:	3501      	adds	r5, #1
 800740e:	e7f2      	b.n	80073f6 <__libc_init_array+0x1e>
 8007410:	08009028 	.word	0x08009028
 8007414:	08009028 	.word	0x08009028
 8007418:	08009028 	.word	0x08009028
 800741c:	08009030 	.word	0x08009030

08007420 <free>:
 8007420:	4b02      	ldr	r3, [pc, #8]	; (800742c <free+0xc>)
 8007422:	4601      	mov	r1, r0
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	f000 ba9f 	b.w	8007968 <_free_r>
 800742a:	bf00      	nop
 800742c:	20000010 	.word	0x20000010

08007430 <memset>:
 8007430:	4402      	add	r2, r0
 8007432:	4603      	mov	r3, r0
 8007434:	4293      	cmp	r3, r2
 8007436:	d100      	bne.n	800743a <memset+0xa>
 8007438:	4770      	bx	lr
 800743a:	f803 1b01 	strb.w	r1, [r3], #1
 800743e:	e7f9      	b.n	8007434 <memset+0x4>

08007440 <validate_structure>:
 8007440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007442:	6801      	ldr	r1, [r0, #0]
 8007444:	293b      	cmp	r1, #59	; 0x3b
 8007446:	4604      	mov	r4, r0
 8007448:	d911      	bls.n	800746e <validate_structure+0x2e>
 800744a:	223c      	movs	r2, #60	; 0x3c
 800744c:	4668      	mov	r0, sp
 800744e:	f000 fd71 	bl	8007f34 <div>
 8007452:	9a01      	ldr	r2, [sp, #4]
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	9900      	ldr	r1, [sp, #0]
 8007458:	2a00      	cmp	r2, #0
 800745a:	440b      	add	r3, r1
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	bfbb      	ittet	lt
 8007460:	323c      	addlt	r2, #60	; 0x3c
 8007462:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007466:	6022      	strge	r2, [r4, #0]
 8007468:	6022      	strlt	r2, [r4, #0]
 800746a:	bfb8      	it	lt
 800746c:	6063      	strlt	r3, [r4, #4]
 800746e:	6861      	ldr	r1, [r4, #4]
 8007470:	293b      	cmp	r1, #59	; 0x3b
 8007472:	d911      	bls.n	8007498 <validate_structure+0x58>
 8007474:	223c      	movs	r2, #60	; 0x3c
 8007476:	4668      	mov	r0, sp
 8007478:	f000 fd5c 	bl	8007f34 <div>
 800747c:	9a01      	ldr	r2, [sp, #4]
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	9900      	ldr	r1, [sp, #0]
 8007482:	2a00      	cmp	r2, #0
 8007484:	440b      	add	r3, r1
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	bfbb      	ittet	lt
 800748a:	323c      	addlt	r2, #60	; 0x3c
 800748c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007490:	6062      	strge	r2, [r4, #4]
 8007492:	6062      	strlt	r2, [r4, #4]
 8007494:	bfb8      	it	lt
 8007496:	60a3      	strlt	r3, [r4, #8]
 8007498:	68a1      	ldr	r1, [r4, #8]
 800749a:	2917      	cmp	r1, #23
 800749c:	d911      	bls.n	80074c2 <validate_structure+0x82>
 800749e:	2218      	movs	r2, #24
 80074a0:	4668      	mov	r0, sp
 80074a2:	f000 fd47 	bl	8007f34 <div>
 80074a6:	9a01      	ldr	r2, [sp, #4]
 80074a8:	68e3      	ldr	r3, [r4, #12]
 80074aa:	9900      	ldr	r1, [sp, #0]
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	440b      	add	r3, r1
 80074b0:	60e3      	str	r3, [r4, #12]
 80074b2:	bfbb      	ittet	lt
 80074b4:	3218      	addlt	r2, #24
 80074b6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80074ba:	60a2      	strge	r2, [r4, #8]
 80074bc:	60a2      	strlt	r2, [r4, #8]
 80074be:	bfb8      	it	lt
 80074c0:	60e3      	strlt	r3, [r4, #12]
 80074c2:	6921      	ldr	r1, [r4, #16]
 80074c4:	290b      	cmp	r1, #11
 80074c6:	d911      	bls.n	80074ec <validate_structure+0xac>
 80074c8:	220c      	movs	r2, #12
 80074ca:	4668      	mov	r0, sp
 80074cc:	f000 fd32 	bl	8007f34 <div>
 80074d0:	9a01      	ldr	r2, [sp, #4]
 80074d2:	6963      	ldr	r3, [r4, #20]
 80074d4:	9900      	ldr	r1, [sp, #0]
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	440b      	add	r3, r1
 80074da:	6163      	str	r3, [r4, #20]
 80074dc:	bfbb      	ittet	lt
 80074de:	320c      	addlt	r2, #12
 80074e0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80074e4:	6122      	strge	r2, [r4, #16]
 80074e6:	6122      	strlt	r2, [r4, #16]
 80074e8:	bfb8      	it	lt
 80074ea:	6163      	strlt	r3, [r4, #20]
 80074ec:	6963      	ldr	r3, [r4, #20]
 80074ee:	0799      	lsls	r1, r3, #30
 80074f0:	d120      	bne.n	8007534 <validate_structure+0xf4>
 80074f2:	2164      	movs	r1, #100	; 0x64
 80074f4:	fb93 f2f1 	sdiv	r2, r3, r1
 80074f8:	fb01 3212 	mls	r2, r1, r2, r3
 80074fc:	b9e2      	cbnz	r2, 8007538 <validate_structure+0xf8>
 80074fe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007506:	fb93 f2f1 	sdiv	r2, r3, r1
 800750a:	fb01 3312 	mls	r3, r1, r2, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	231c      	movne	r3, #28
 8007514:	231d      	moveq	r3, #29
 8007516:	68e2      	ldr	r2, [r4, #12]
 8007518:	2a00      	cmp	r2, #0
 800751a:	dc0f      	bgt.n	800753c <validate_structure+0xfc>
 800751c:	4f34      	ldr	r7, [pc, #208]	; (80075f0 <validate_structure+0x1b0>)
 800751e:	260b      	movs	r6, #11
 8007520:	2064      	movs	r0, #100	; 0x64
 8007522:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007526:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800752a:	f1bc 0f00 	cmp.w	ip, #0
 800752e:	dd14      	ble.n	800755a <validate_structure+0x11a>
 8007530:	b003      	add	sp, #12
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007534:	231c      	movs	r3, #28
 8007536:	e7ee      	b.n	8007516 <validate_structure+0xd6>
 8007538:	231d      	movs	r3, #29
 800753a:	e7ec      	b.n	8007516 <validate_structure+0xd6>
 800753c:	4f2c      	ldr	r7, [pc, #176]	; (80075f0 <validate_structure+0x1b0>)
 800753e:	f04f 0c00 	mov.w	ip, #0
 8007542:	2564      	movs	r5, #100	; 0x64
 8007544:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8007548:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800754c:	2a01      	cmp	r2, #1
 800754e:	d02f      	beq.n	80075b0 <validate_structure+0x170>
 8007550:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8007554:	4281      	cmp	r1, r0
 8007556:	dc2e      	bgt.n	80075b6 <validate_structure+0x176>
 8007558:	e7ea      	b.n	8007530 <validate_structure+0xf0>
 800755a:	6921      	ldr	r1, [r4, #16]
 800755c:	3901      	subs	r1, #1
 800755e:	6121      	str	r1, [r4, #16]
 8007560:	3101      	adds	r1, #1
 8007562:	d114      	bne.n	800758e <validate_structure+0x14e>
 8007564:	6963      	ldr	r3, [r4, #20]
 8007566:	1e59      	subs	r1, r3, #1
 8007568:	078a      	lsls	r2, r1, #30
 800756a:	e9c4 6104 	strd	r6, r1, [r4, #16]
 800756e:	d117      	bne.n	80075a0 <validate_structure+0x160>
 8007570:	fb91 f2f0 	sdiv	r2, r1, r0
 8007574:	fb00 1112 	mls	r1, r0, r2, r1
 8007578:	b9a1      	cbnz	r1, 80075a4 <validate_structure+0x164>
 800757a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800757e:	fb93 f2f5 	sdiv	r2, r3, r5
 8007582:	fb05 3312 	mls	r3, r5, r2, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	bf14      	ite	ne
 800758a:	231c      	movne	r3, #28
 800758c:	231d      	moveq	r3, #29
 800758e:	6922      	ldr	r2, [r4, #16]
 8007590:	2a01      	cmp	r2, #1
 8007592:	bf14      	ite	ne
 8007594:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8007598:	461a      	moveq	r2, r3
 800759a:	4462      	add	r2, ip
 800759c:	60e2      	str	r2, [r4, #12]
 800759e:	e7c2      	b.n	8007526 <validate_structure+0xe6>
 80075a0:	231c      	movs	r3, #28
 80075a2:	e7f4      	b.n	800758e <validate_structure+0x14e>
 80075a4:	231d      	movs	r3, #29
 80075a6:	e7f2      	b.n	800758e <validate_structure+0x14e>
 80075a8:	231c      	movs	r3, #28
 80075aa:	e7cd      	b.n	8007548 <validate_structure+0x108>
 80075ac:	231d      	movs	r3, #29
 80075ae:	e7cb      	b.n	8007548 <validate_structure+0x108>
 80075b0:	428b      	cmp	r3, r1
 80075b2:	dabd      	bge.n	8007530 <validate_structure+0xf0>
 80075b4:	4618      	mov	r0, r3
 80075b6:	3201      	adds	r2, #1
 80075b8:	1a09      	subs	r1, r1, r0
 80075ba:	2a0c      	cmp	r2, #12
 80075bc:	60e1      	str	r1, [r4, #12]
 80075be:	6122      	str	r2, [r4, #16]
 80075c0:	d1c2      	bne.n	8007548 <validate_structure+0x108>
 80075c2:	6963      	ldr	r3, [r4, #20]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	0791      	lsls	r1, r2, #30
 80075c8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80075cc:	d1ec      	bne.n	80075a8 <validate_structure+0x168>
 80075ce:	fb92 f1f5 	sdiv	r1, r2, r5
 80075d2:	fb05 2211 	mls	r2, r5, r1, r2
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	d1e8      	bne.n	80075ac <validate_structure+0x16c>
 80075da:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80075de:	fb93 f2f6 	sdiv	r2, r3, r6
 80075e2:	fb06 3312 	mls	r3, r6, r2, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	231c      	movne	r3, #28
 80075ec:	231d      	moveq	r3, #29
 80075ee:	e7ab      	b.n	8007548 <validate_structure+0x108>
 80075f0:	08008d98 	.word	0x08008d98

080075f4 <mktime>:
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	b089      	sub	sp, #36	; 0x24
 80075fa:	4606      	mov	r6, r0
 80075fc:	f000 fcf2 	bl	8007fe4 <__gettzinfo>
 8007600:	4680      	mov	r8, r0
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff ff1c 	bl	8007440 <validate_structure>
 8007608:	e9d6 3000 	ldrd	r3, r0, [r6]
 800760c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8007610:	fb0a 3a00 	mla	sl, sl, r0, r3
 8007614:	68b0      	ldr	r0, [r6, #8]
 8007616:	4abe      	ldr	r2, [pc, #760]	; (8007910 <mktime+0x31c>)
 8007618:	6975      	ldr	r5, [r6, #20]
 800761a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800761e:	fb03 aa00 	mla	sl, r3, r0, sl
 8007622:	e9d6 4303 	ldrd	r4, r3, [r6, #12]
 8007626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800762a:	3c01      	subs	r4, #1
 800762c:	2b01      	cmp	r3, #1
 800762e:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8007632:	4414      	add	r4, r2
 8007634:	dd11      	ble.n	800765a <mktime+0x66>
 8007636:	07a9      	lsls	r1, r5, #30
 8007638:	d10f      	bne.n	800765a <mktime+0x66>
 800763a:	2264      	movs	r2, #100	; 0x64
 800763c:	fb95 f3f2 	sdiv	r3, r5, r2
 8007640:	fb02 5313 	mls	r3, r2, r3, r5
 8007644:	b943      	cbnz	r3, 8007658 <mktime+0x64>
 8007646:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 800764a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800764e:	fb91 f3f2 	sdiv	r3, r1, r2
 8007652:	fb02 1313 	mls	r3, r2, r3, r1
 8007656:	b903      	cbnz	r3, 800765a <mktime+0x66>
 8007658:	3401      	adds	r4, #1
 800765a:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
 800765e:	3310      	adds	r3, #16
 8007660:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007664:	4293      	cmp	r3, r2
 8007666:	61f4      	str	r4, [r6, #28]
 8007668:	f200 8179 	bhi.w	800795e <mktime+0x36a>
 800766c:	2d46      	cmp	r5, #70	; 0x46
 800766e:	f340 8084 	ble.w	800777a <mktime+0x186>
 8007672:	2346      	movs	r3, #70	; 0x46
 8007674:	f240 176d 	movw	r7, #365	; 0x16d
 8007678:	2164      	movs	r1, #100	; 0x64
 800767a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800767e:	079a      	lsls	r2, r3, #30
 8007680:	d175      	bne.n	800776e <mktime+0x17a>
 8007682:	fb93 f2f1 	sdiv	r2, r3, r1
 8007686:	fb01 3212 	mls	r2, r1, r2, r3
 800768a:	2a00      	cmp	r2, #0
 800768c:	d172      	bne.n	8007774 <mktime+0x180>
 800768e:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8007692:	fb9c f2f0 	sdiv	r2, ip, r0
 8007696:	fb00 c212 	mls	r2, r0, r2, ip
 800769a:	2a00      	cmp	r2, #0
 800769c:	bf14      	ite	ne
 800769e:	463a      	movne	r2, r7
 80076a0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80076a4:	3301      	adds	r3, #1
 80076a6:	429d      	cmp	r5, r3
 80076a8:	4414      	add	r4, r2
 80076aa:	d1e8      	bne.n	800767e <mktime+0x8a>
 80076ac:	4b99      	ldr	r3, [pc, #612]	; (8007914 <mktime+0x320>)
 80076ae:	4363      	muls	r3, r4
 80076b0:	eb1a 0103 	adds.w	r1, sl, r3
 80076b4:	eb4b 72e3 	adc.w	r2, fp, r3, asr #31
 80076b8:	e9cd 1200 	strd	r1, r2, [sp]
 80076bc:	f000 fab4 	bl	8007c28 <__tz_lock>
 80076c0:	f000 fab4 	bl	8007c2c <_tzset_unlocked>
 80076c4:	4b94      	ldr	r3, [pc, #592]	; (8007918 <mktime+0x324>)
 80076c6:	f8d3 9000 	ldr.w	r9, [r3]
 80076ca:	f1b9 0f00 	cmp.w	r9, #0
 80076ce:	d045      	beq.n	800775c <mktime+0x168>
 80076d0:	f8d6 9020 	ldr.w	r9, [r6, #32]
 80076d4:	6970      	ldr	r0, [r6, #20]
 80076d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076da:	464f      	mov	r7, r9
 80076dc:	2f01      	cmp	r7, #1
 80076de:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80076e2:	bfa8      	it	ge
 80076e4:	2701      	movge	r7, #1
 80076e6:	4283      	cmp	r3, r0
 80076e8:	f040 8089 	bne.w	80077fe <mktime+0x20a>
 80076ec:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80076f0:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80076f4:	460a      	mov	r2, r1
 80076f6:	17cb      	asrs	r3, r1, #31
 80076f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076fc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8007700:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007704:	1a12      	subs	r2, r2, r0
 8007706:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
 800770a:	4692      	mov	sl, r2
 800770c:	469b      	mov	fp, r3
 800770e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007712:	4552      	cmp	r2, sl
 8007714:	eb73 0c0b 	sbcs.w	ip, r3, fp
 8007718:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800771c:	da76      	bge.n	800780c <mktime+0x218>
 800771e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8007722:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007726:	ebb2 0a0a 	subs.w	sl, r2, sl
 800772a:	eb63 0b0b 	sbc.w	fp, r3, fp
 800772e:	f8d8 3000 	ldr.w	r3, [r8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d079      	beq.n	800782a <mktime+0x236>
 8007736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800773a:	4552      	cmp	r2, sl
 800773c:	eb73 030b 	sbcs.w	r3, r3, fp
 8007740:	db07      	blt.n	8007752 <mktime+0x15e>
 8007742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007746:	e9dd ab00 	ldrd	sl, fp, [sp]
 800774a:	4592      	cmp	sl, r2
 800774c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007750:	db71      	blt.n	8007836 <mktime+0x242>
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	da71      	bge.n	8007840 <mktime+0x24c>
 800775c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007760:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8007764:	eb1a 0a03 	adds.w	sl, sl, r3
 8007768:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800776c:	e0b4      	b.n	80078d8 <mktime+0x2e4>
 800776e:	f240 126d 	movw	r2, #365	; 0x16d
 8007772:	e797      	b.n	80076a4 <mktime+0xb0>
 8007774:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007778:	e794      	b.n	80076a4 <mktime+0xb0>
 800777a:	d097      	beq.n	80076ac <mktime+0xb8>
 800777c:	2345      	movs	r3, #69	; 0x45
 800777e:	f240 176d 	movw	r7, #365	; 0x16d
 8007782:	2164      	movs	r1, #100	; 0x64
 8007784:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007788:	e012      	b.n	80077b0 <mktime+0x1bc>
 800778a:	bb62      	cbnz	r2, 80077e6 <mktime+0x1f2>
 800778c:	fb93 f2f1 	sdiv	r2, r3, r1
 8007790:	fb01 3212 	mls	r2, r1, r2, r3
 8007794:	bb52      	cbnz	r2, 80077ec <mktime+0x1f8>
 8007796:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800779a:	fb9c f2f0 	sdiv	r2, ip, r0
 800779e:	fb00 c212 	mls	r2, r0, r2, ip
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	bf14      	ite	ne
 80077a6:	463a      	movne	r2, r7
 80077a8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80077ac:	1aa4      	subs	r4, r4, r2
 80077ae:	3b01      	subs	r3, #1
 80077b0:	429d      	cmp	r5, r3
 80077b2:	f003 0203 	and.w	r2, r3, #3
 80077b6:	dbe8      	blt.n	800778a <mktime+0x196>
 80077b8:	b9da      	cbnz	r2, 80077f2 <mktime+0x1fe>
 80077ba:	2264      	movs	r2, #100	; 0x64
 80077bc:	fb95 f3f2 	sdiv	r3, r5, r2
 80077c0:	fb02 5313 	mls	r3, r2, r3, r5
 80077c4:	b9c3      	cbnz	r3, 80077f8 <mktime+0x204>
 80077c6:	f205 716c 	addw	r1, r5, #1900	; 0x76c
 80077ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80077ce:	fb91 f3f2 	sdiv	r3, r1, r2
 80077d2:	fb02 1313 	mls	r3, r2, r3, r1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f240 136d 	movw	r3, #365	; 0x16d
 80077dc:	bf08      	it	eq
 80077de:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80077e2:	1ae4      	subs	r4, r4, r3
 80077e4:	e762      	b.n	80076ac <mktime+0xb8>
 80077e6:	f240 126d 	movw	r2, #365	; 0x16d
 80077ea:	e7df      	b.n	80077ac <mktime+0x1b8>
 80077ec:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80077f0:	e7dc      	b.n	80077ac <mktime+0x1b8>
 80077f2:	f240 136d 	movw	r3, #365	; 0x16d
 80077f6:	e7f4      	b.n	80077e2 <mktime+0x1ee>
 80077f8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80077fc:	e7f1      	b.n	80077e2 <mktime+0x1ee>
 80077fe:	f000 f96b 	bl	8007ad8 <__tzcalc_limits>
 8007802:	2800      	cmp	r0, #0
 8007804:	f47f af72 	bne.w	80076ec <mktime+0xf8>
 8007808:	46b9      	mov	r9, r7
 800780a:	e057      	b.n	80078bc <mktime+0x2c8>
 800780c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007810:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007814:	ebb2 020a 	subs.w	r2, r2, sl
 8007818:	eb63 030b 	sbc.w	r3, r3, fp
 800781c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007820:	4592      	cmp	sl, r2
 8007822:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007826:	dbef      	blt.n	8007808 <mktime+0x214>
 8007828:	e779      	b.n	800771e <mktime+0x12a>
 800782a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800782e:	4552      	cmp	r2, sl
 8007830:	eb73 030b 	sbcs.w	r3, r3, fp
 8007834:	db85      	blt.n	8007742 <mktime+0x14e>
 8007836:	f1b9 0f00 	cmp.w	r9, #0
 800783a:	db43      	blt.n	80078c4 <mktime+0x2d0>
 800783c:	f04f 0901 	mov.w	r9, #1
 8007840:	ea87 0709 	eor.w	r7, r7, r9
 8007844:	2f01      	cmp	r7, #1
 8007846:	d139      	bne.n	80078bc <mktime+0x2c8>
 8007848:	1a40      	subs	r0, r0, r1
 800784a:	f1b9 0f00 	cmp.w	r9, #0
 800784e:	d100      	bne.n	8007852 <mktime+0x25e>
 8007850:	4240      	negs	r0, r0
 8007852:	6833      	ldr	r3, [r6, #0]
 8007854:	4403      	add	r3, r0
 8007856:	6033      	str	r3, [r6, #0]
 8007858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800785c:	1812      	adds	r2, r2, r0
 800785e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8007862:	e9cd 2300 	strd	r2, r3, [sp]
 8007866:	4630      	mov	r0, r6
 8007868:	68f2      	ldr	r2, [r6, #12]
 800786a:	9202      	str	r2, [sp, #8]
 800786c:	f7ff fde8 	bl	8007440 <validate_structure>
 8007870:	68f3      	ldr	r3, [r6, #12]
 8007872:	9a02      	ldr	r2, [sp, #8]
 8007874:	1a9b      	subs	r3, r3, r2
 8007876:	d021      	beq.n	80078bc <mktime+0x2c8>
 8007878:	2b01      	cmp	r3, #1
 800787a:	dc40      	bgt.n	80078fe <mktime+0x30a>
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	bfa8      	it	ge
 8007882:	461f      	movge	r7, r3
 8007884:	69f3      	ldr	r3, [r6, #28]
 8007886:	443c      	add	r4, r7
 8007888:	18ff      	adds	r7, r7, r3
 800788a:	d547      	bpl.n	800791c <mktime+0x328>
 800788c:	1e6a      	subs	r2, r5, #1
 800788e:	0791      	lsls	r1, r2, #30
 8007890:	d138      	bne.n	8007904 <mktime+0x310>
 8007892:	2164      	movs	r1, #100	; 0x64
 8007894:	fb92 f3f1 	sdiv	r3, r2, r1
 8007898:	fb01 2313 	mls	r3, r1, r3, r2
 800789c:	bbab      	cbnz	r3, 800790a <mktime+0x316>
 800789e:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 80078a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80078a6:	fb95 f3f2 	sdiv	r3, r5, r2
 80078aa:	fb02 5513 	mls	r5, r2, r3, r5
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	f240 136d 	movw	r3, #365	; 0x16d
 80078b4:	bf18      	it	ne
 80078b6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80078ba:	61f3      	str	r3, [r6, #28]
 80078bc:	f1b9 0f01 	cmp.w	r9, #1
 80078c0:	f47f af4c 	bne.w	800775c <mktime+0x168>
 80078c4:	e9dd ab00 	ldrd	sl, fp, [sp]
 80078c8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80078cc:	eb1a 0a03 	adds.w	sl, sl, r3
 80078d0:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80078d4:	f04f 0901 	mov.w	r9, #1
 80078d8:	f000 f9a7 	bl	8007c2a <__tz_unlock>
 80078dc:	3404      	adds	r4, #4
 80078de:	2307      	movs	r3, #7
 80078e0:	fb94 f3f3 	sdiv	r3, r4, r3
 80078e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80078e8:	1ae4      	subs	r4, r4, r3
 80078ea:	bf48      	it	mi
 80078ec:	3407      	addmi	r4, #7
 80078ee:	f8c6 9020 	str.w	r9, [r6, #32]
 80078f2:	61b4      	str	r4, [r6, #24]
 80078f4:	4650      	mov	r0, sl
 80078f6:	4659      	mov	r1, fp
 80078f8:	b009      	add	sp, #36	; 0x24
 80078fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fe:	f04f 37ff 	mov.w	r7, #4294967295
 8007902:	e7bf      	b.n	8007884 <mktime+0x290>
 8007904:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8007908:	e7d7      	b.n	80078ba <mktime+0x2c6>
 800790a:	f240 136d 	movw	r3, #365	; 0x16d
 800790e:	e7d4      	b.n	80078ba <mktime+0x2c6>
 8007910:	08008dc8 	.word	0x08008dc8
 8007914:	00015180 	.word	0x00015180
 8007918:	200003f4 	.word	0x200003f4
 800791c:	07ab      	lsls	r3, r5, #30
 800791e:	d118      	bne.n	8007952 <mktime+0x35e>
 8007920:	2264      	movs	r2, #100	; 0x64
 8007922:	fb95 f3f2 	sdiv	r3, r5, r2
 8007926:	fb02 5313 	mls	r3, r2, r3, r5
 800792a:	b9ab      	cbnz	r3, 8007958 <mktime+0x364>
 800792c:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8007930:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007934:	fb95 f3f2 	sdiv	r3, r5, r2
 8007938:	fb02 5513 	mls	r5, r2, r3, r5
 800793c:	2d00      	cmp	r5, #0
 800793e:	f240 136d 	movw	r3, #365	; 0x16d
 8007942:	bf08      	it	eq
 8007944:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007948:	429f      	cmp	r7, r3
 800794a:	bfa8      	it	ge
 800794c:	1aff      	subge	r7, r7, r3
 800794e:	61f7      	str	r7, [r6, #28]
 8007950:	e7b4      	b.n	80078bc <mktime+0x2c8>
 8007952:	f240 136d 	movw	r3, #365	; 0x16d
 8007956:	e7f7      	b.n	8007948 <mktime+0x354>
 8007958:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800795c:	e7f4      	b.n	8007948 <mktime+0x354>
 800795e:	f04f 3aff 	mov.w	sl, #4294967295
 8007962:	f04f 3bff 	mov.w	fp, #4294967295
 8007966:	e7c5      	b.n	80078f4 <mktime+0x300>

08007968 <_free_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4605      	mov	r5, r0
 800796c:	2900      	cmp	r1, #0
 800796e:	d045      	beq.n	80079fc <_free_r+0x94>
 8007970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007974:	1f0c      	subs	r4, r1, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb8      	it	lt
 800797a:	18e4      	addlt	r4, r4, r3
 800797c:	f000 fb36 	bl	8007fec <__malloc_lock>
 8007980:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <_free_r+0x98>)
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	4610      	mov	r0, r2
 8007986:	b933      	cbnz	r3, 8007996 <_free_r+0x2e>
 8007988:	6063      	str	r3, [r4, #4]
 800798a:	6014      	str	r4, [r2, #0]
 800798c:	4628      	mov	r0, r5
 800798e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007992:	f000 bb2c 	b.w	8007fee <__malloc_unlock>
 8007996:	42a3      	cmp	r3, r4
 8007998:	d90c      	bls.n	80079b4 <_free_r+0x4c>
 800799a:	6821      	ldr	r1, [r4, #0]
 800799c:	1862      	adds	r2, r4, r1
 800799e:	4293      	cmp	r3, r2
 80079a0:	bf04      	itt	eq
 80079a2:	681a      	ldreq	r2, [r3, #0]
 80079a4:	685b      	ldreq	r3, [r3, #4]
 80079a6:	6063      	str	r3, [r4, #4]
 80079a8:	bf04      	itt	eq
 80079aa:	1852      	addeq	r2, r2, r1
 80079ac:	6022      	streq	r2, [r4, #0]
 80079ae:	6004      	str	r4, [r0, #0]
 80079b0:	e7ec      	b.n	800798c <_free_r+0x24>
 80079b2:	4613      	mov	r3, r2
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	b10a      	cbz	r2, 80079bc <_free_r+0x54>
 80079b8:	42a2      	cmp	r2, r4
 80079ba:	d9fa      	bls.n	80079b2 <_free_r+0x4a>
 80079bc:	6819      	ldr	r1, [r3, #0]
 80079be:	1858      	adds	r0, r3, r1
 80079c0:	42a0      	cmp	r0, r4
 80079c2:	d10b      	bne.n	80079dc <_free_r+0x74>
 80079c4:	6820      	ldr	r0, [r4, #0]
 80079c6:	4401      	add	r1, r0
 80079c8:	1858      	adds	r0, r3, r1
 80079ca:	4282      	cmp	r2, r0
 80079cc:	6019      	str	r1, [r3, #0]
 80079ce:	d1dd      	bne.n	800798c <_free_r+0x24>
 80079d0:	6810      	ldr	r0, [r2, #0]
 80079d2:	6852      	ldr	r2, [r2, #4]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	4401      	add	r1, r0
 80079d8:	6019      	str	r1, [r3, #0]
 80079da:	e7d7      	b.n	800798c <_free_r+0x24>
 80079dc:	d902      	bls.n	80079e4 <_free_r+0x7c>
 80079de:	230c      	movs	r3, #12
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	e7d3      	b.n	800798c <_free_r+0x24>
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	1821      	adds	r1, r4, r0
 80079e8:	428a      	cmp	r2, r1
 80079ea:	bf04      	itt	eq
 80079ec:	6811      	ldreq	r1, [r2, #0]
 80079ee:	6852      	ldreq	r2, [r2, #4]
 80079f0:	6062      	str	r2, [r4, #4]
 80079f2:	bf04      	itt	eq
 80079f4:	1809      	addeq	r1, r1, r0
 80079f6:	6021      	streq	r1, [r4, #0]
 80079f8:	605c      	str	r4, [r3, #4]
 80079fa:	e7c7      	b.n	800798c <_free_r+0x24>
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
 80079fe:	bf00      	nop
 8007a00:	200003d0 	.word	0x200003d0

08007a04 <_malloc_r>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	1ccd      	adds	r5, r1, #3
 8007a08:	f025 0503 	bic.w	r5, r5, #3
 8007a0c:	3508      	adds	r5, #8
 8007a0e:	2d0c      	cmp	r5, #12
 8007a10:	bf38      	it	cc
 8007a12:	250c      	movcc	r5, #12
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	4606      	mov	r6, r0
 8007a18:	db01      	blt.n	8007a1e <_malloc_r+0x1a>
 8007a1a:	42a9      	cmp	r1, r5
 8007a1c:	d903      	bls.n	8007a26 <_malloc_r+0x22>
 8007a1e:	230c      	movs	r3, #12
 8007a20:	6033      	str	r3, [r6, #0]
 8007a22:	2000      	movs	r0, #0
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	f000 fae1 	bl	8007fec <__malloc_lock>
 8007a2a:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <_malloc_r+0xac>)
 8007a2c:	6814      	ldr	r4, [r2, #0]
 8007a2e:	4621      	mov	r1, r4
 8007a30:	b991      	cbnz	r1, 8007a58 <_malloc_r+0x54>
 8007a32:	4c20      	ldr	r4, [pc, #128]	; (8007ab4 <_malloc_r+0xb0>)
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	b91b      	cbnz	r3, 8007a40 <_malloc_r+0x3c>
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f000 f83d 	bl	8007ab8 <_sbrk_r>
 8007a3e:	6020      	str	r0, [r4, #0]
 8007a40:	4629      	mov	r1, r5
 8007a42:	4630      	mov	r0, r6
 8007a44:	f000 f838 	bl	8007ab8 <_sbrk_r>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d124      	bne.n	8007a96 <_malloc_r+0x92>
 8007a4c:	230c      	movs	r3, #12
 8007a4e:	6033      	str	r3, [r6, #0]
 8007a50:	4630      	mov	r0, r6
 8007a52:	f000 facc 	bl	8007fee <__malloc_unlock>
 8007a56:	e7e4      	b.n	8007a22 <_malloc_r+0x1e>
 8007a58:	680b      	ldr	r3, [r1, #0]
 8007a5a:	1b5b      	subs	r3, r3, r5
 8007a5c:	d418      	bmi.n	8007a90 <_malloc_r+0x8c>
 8007a5e:	2b0b      	cmp	r3, #11
 8007a60:	d90f      	bls.n	8007a82 <_malloc_r+0x7e>
 8007a62:	600b      	str	r3, [r1, #0]
 8007a64:	50cd      	str	r5, [r1, r3]
 8007a66:	18cc      	adds	r4, r1, r3
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 fac0 	bl	8007fee <__malloc_unlock>
 8007a6e:	f104 000b 	add.w	r0, r4, #11
 8007a72:	1d23      	adds	r3, r4, #4
 8007a74:	f020 0007 	bic.w	r0, r0, #7
 8007a78:	1ac3      	subs	r3, r0, r3
 8007a7a:	d0d3      	beq.n	8007a24 <_malloc_r+0x20>
 8007a7c:	425a      	negs	r2, r3
 8007a7e:	50e2      	str	r2, [r4, r3]
 8007a80:	e7d0      	b.n	8007a24 <_malloc_r+0x20>
 8007a82:	428c      	cmp	r4, r1
 8007a84:	684b      	ldr	r3, [r1, #4]
 8007a86:	bf16      	itet	ne
 8007a88:	6063      	strne	r3, [r4, #4]
 8007a8a:	6013      	streq	r3, [r2, #0]
 8007a8c:	460c      	movne	r4, r1
 8007a8e:	e7eb      	b.n	8007a68 <_malloc_r+0x64>
 8007a90:	460c      	mov	r4, r1
 8007a92:	6849      	ldr	r1, [r1, #4]
 8007a94:	e7cc      	b.n	8007a30 <_malloc_r+0x2c>
 8007a96:	1cc4      	adds	r4, r0, #3
 8007a98:	f024 0403 	bic.w	r4, r4, #3
 8007a9c:	42a0      	cmp	r0, r4
 8007a9e:	d005      	beq.n	8007aac <_malloc_r+0xa8>
 8007aa0:	1a21      	subs	r1, r4, r0
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f000 f808 	bl	8007ab8 <_sbrk_r>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d0cf      	beq.n	8007a4c <_malloc_r+0x48>
 8007aac:	6025      	str	r5, [r4, #0]
 8007aae:	e7db      	b.n	8007a68 <_malloc_r+0x64>
 8007ab0:	200003d0 	.word	0x200003d0
 8007ab4:	200003d4 	.word	0x200003d4

08007ab8 <_sbrk_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4c06      	ldr	r4, [pc, #24]	; (8007ad4 <_sbrk_r+0x1c>)
 8007abc:	2300      	movs	r3, #0
 8007abe:	4605      	mov	r5, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	f7fb fc8c 	bl	80033e0 <_sbrk>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_sbrk_r+0x1a>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_sbrk_r+0x1a>
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20000400 	.word	0x20000400

08007ad8 <__tzcalc_limits>:
 8007ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4680      	mov	r8, r0
 8007ade:	f000 fa81 	bl	8007fe4 <__gettzinfo>
 8007ae2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007ae6:	4598      	cmp	r8, r3
 8007ae8:	f340 8098 	ble.w	8007c1c <__tzcalc_limits+0x144>
 8007aec:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8007af0:	4443      	add	r3, r8
 8007af2:	109b      	asrs	r3, r3, #2
 8007af4:	f240 126d 	movw	r2, #365	; 0x16d
 8007af8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8007afc:	fb02 3505 	mla	r5, r2, r5, r3
 8007b00:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007b04:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8007b08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b0c:	441d      	add	r5, r3
 8007b0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007b12:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8007b16:	fb98 f7f3 	sdiv	r7, r8, r3
 8007b1a:	fb03 8717 	mls	r7, r3, r7, r8
 8007b1e:	4442      	add	r2, r8
 8007b20:	fab7 fc87 	clz	ip, r7
 8007b24:	fb92 f2f3 	sdiv	r2, r2, r3
 8007b28:	f008 0303 	and.w	r3, r8, #3
 8007b2c:	4415      	add	r5, r2
 8007b2e:	2264      	movs	r2, #100	; 0x64
 8007b30:	f8c0 8004 	str.w	r8, [r0, #4]
 8007b34:	fb98 f6f2 	sdiv	r6, r8, r2
 8007b38:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007b3c:	fb02 8616 	mls	r6, r2, r6, r8
 8007b40:	4604      	mov	r4, r0
 8007b42:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	f04f 0e07 	mov.w	lr, #7
 8007b4c:	7a22      	ldrb	r2, [r4, #8]
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	2a4a      	cmp	r2, #74	; 0x4a
 8007b52:	d128      	bne.n	8007ba6 <__tzcalc_limits+0xce>
 8007b54:	9900      	ldr	r1, [sp, #0]
 8007b56:	18ea      	adds	r2, r5, r3
 8007b58:	b901      	cbnz	r1, 8007b5c <__tzcalc_limits+0x84>
 8007b5a:	b906      	cbnz	r6, 8007b5e <__tzcalc_limits+0x86>
 8007b5c:	bb0f      	cbnz	r7, 8007ba2 <__tzcalc_limits+0xca>
 8007b5e:	2b3b      	cmp	r3, #59	; 0x3b
 8007b60:	bfd4      	ite	le
 8007b62:	2300      	movle	r3, #0
 8007b64:	2301      	movgt	r3, #1
 8007b66:	4413      	add	r3, r2
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	69a3      	ldr	r3, [r4, #24]
 8007b6c:	492c      	ldr	r1, [pc, #176]	; (8007c20 <__tzcalc_limits+0x148>)
 8007b6e:	fb01 3202 	mla	r2, r1, r2, r3
 8007b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b74:	4413      	add	r3, r2
 8007b76:	461a      	mov	r2, r3
 8007b78:	17db      	asrs	r3, r3, #31
 8007b7a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007b7e:	3428      	adds	r4, #40	; 0x28
 8007b80:	45a3      	cmp	fp, r4
 8007b82:	d1e3      	bne.n	8007b4c <__tzcalc_limits+0x74>
 8007b84:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8007b88:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8007b8c:	4294      	cmp	r4, r2
 8007b8e:	eb75 0303 	sbcs.w	r3, r5, r3
 8007b92:	bfb4      	ite	lt
 8007b94:	2301      	movlt	r3, #1
 8007b96:	2300      	movge	r3, #0
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	b003      	add	sp, #12
 8007b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e7df      	b.n	8007b66 <__tzcalc_limits+0x8e>
 8007ba6:	2a44      	cmp	r2, #68	; 0x44
 8007ba8:	d101      	bne.n	8007bae <__tzcalc_limits+0xd6>
 8007baa:	18ea      	adds	r2, r5, r3
 8007bac:	e7dd      	b.n	8007b6a <__tzcalc_limits+0x92>
 8007bae:	9a00      	ldr	r2, [sp, #0]
 8007bb0:	bb72      	cbnz	r2, 8007c10 <__tzcalc_limits+0x138>
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	bf0c      	ite	eq
 8007bb6:	46e1      	moveq	r9, ip
 8007bb8:	f04f 0901 	movne.w	r9, #1
 8007bbc:	2230      	movs	r2, #48	; 0x30
 8007bbe:	fb02 f909 	mul.w	r9, r2, r9
 8007bc2:	68e2      	ldr	r2, [r4, #12]
 8007bc4:	9201      	str	r2, [sp, #4]
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	462a      	mov	r2, r5
 8007bcc:	f108 0801 	add.w	r8, r8, #1
 8007bd0:	4914      	ldr	r1, [pc, #80]	; (8007c24 <__tzcalc_limits+0x14c>)
 8007bd2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8007bd6:	448a      	add	sl, r1
 8007bd8:	9901      	ldr	r1, [sp, #4]
 8007bda:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8007bde:	4541      	cmp	r1, r8
 8007be0:	dc18      	bgt.n	8007c14 <__tzcalc_limits+0x13c>
 8007be2:	f102 0804 	add.w	r8, r2, #4
 8007be6:	fb98 f9fe 	sdiv	r9, r8, lr
 8007bea:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8007bee:	eba8 0909 	sub.w	r9, r8, r9
 8007bf2:	ebb3 0909 	subs.w	r9, r3, r9
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bfc:	bf48      	it	mi
 8007bfe:	f109 0907 	addmi.w	r9, r9, #7
 8007c02:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007c06:	444b      	add	r3, r9
 8007c08:	4553      	cmp	r3, sl
 8007c0a:	da05      	bge.n	8007c18 <__tzcalc_limits+0x140>
 8007c0c:	441a      	add	r2, r3
 8007c0e:	e7ac      	b.n	8007b6a <__tzcalc_limits+0x92>
 8007c10:	46e1      	mov	r9, ip
 8007c12:	e7d3      	b.n	8007bbc <__tzcalc_limits+0xe4>
 8007c14:	4452      	add	r2, sl
 8007c16:	e7d9      	b.n	8007bcc <__tzcalc_limits+0xf4>
 8007c18:	3b07      	subs	r3, #7
 8007c1a:	e7f5      	b.n	8007c08 <__tzcalc_limits+0x130>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	e7bd      	b.n	8007b9c <__tzcalc_limits+0xc4>
 8007c20:	00015180 	.word	0x00015180
 8007c24:	08008e34 	.word	0x08008e34

08007c28 <__tz_lock>:
 8007c28:	4770      	bx	lr

08007c2a <__tz_unlock>:
 8007c2a:	4770      	bx	lr

08007c2c <_tzset_unlocked>:
 8007c2c:	4b01      	ldr	r3, [pc, #4]	; (8007c34 <_tzset_unlocked+0x8>)
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	f000 b802 	b.w	8007c38 <_tzset_unlocked_r>
 8007c34:	20000010 	.word	0x20000010

08007c38 <_tzset_unlocked_r>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	b08d      	sub	sp, #52	; 0x34
 8007c3e:	4607      	mov	r7, r0
 8007c40:	f000 f9d0 	bl	8007fe4 <__gettzinfo>
 8007c44:	49af      	ldr	r1, [pc, #700]	; (8007f04 <_tzset_unlocked_r+0x2cc>)
 8007c46:	4eb0      	ldr	r6, [pc, #704]	; (8007f08 <_tzset_unlocked_r+0x2d0>)
 8007c48:	4605      	mov	r5, r0
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	f000 f9c2 	bl	8007fd4 <_getenv_r>
 8007c50:	4604      	mov	r4, r0
 8007c52:	b970      	cbnz	r0, 8007c72 <_tzset_unlocked_r+0x3a>
 8007c54:	4bad      	ldr	r3, [pc, #692]	; (8007f0c <_tzset_unlocked_r+0x2d4>)
 8007c56:	4aae      	ldr	r2, [pc, #696]	; (8007f10 <_tzset_unlocked_r+0x2d8>)
 8007c58:	6018      	str	r0, [r3, #0]
 8007c5a:	4bae      	ldr	r3, [pc, #696]	; (8007f14 <_tzset_unlocked_r+0x2dc>)
 8007c5c:	6018      	str	r0, [r3, #0]
 8007c5e:	4bae      	ldr	r3, [pc, #696]	; (8007f18 <_tzset_unlocked_r+0x2e0>)
 8007c60:	6830      	ldr	r0, [r6, #0]
 8007c62:	e9c3 2200 	strd	r2, r2, [r3]
 8007c66:	f7ff fbdb 	bl	8007420 <free>
 8007c6a:	6034      	str	r4, [r6, #0]
 8007c6c:	b00d      	add	sp, #52	; 0x34
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	6831      	ldr	r1, [r6, #0]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d15f      	bne.n	8007d38 <_tzset_unlocked_r+0x100>
 8007c78:	6830      	ldr	r0, [r6, #0]
 8007c7a:	f7ff fbd1 	bl	8007420 <free>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7f8 fab8 	bl	80001f4 <strlen>
 8007c84:	1c41      	adds	r1, r0, #1
 8007c86:	4638      	mov	r0, r7
 8007c88:	f7ff febc 	bl	8007a04 <_malloc_r>
 8007c8c:	6030      	str	r0, [r6, #0]
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d157      	bne.n	8007d42 <_tzset_unlocked_r+0x10a>
 8007c92:	7823      	ldrb	r3, [r4, #0]
 8007c94:	4aa1      	ldr	r2, [pc, #644]	; (8007f1c <_tzset_unlocked_r+0x2e4>)
 8007c96:	49a2      	ldr	r1, [pc, #648]	; (8007f20 <_tzset_unlocked_r+0x2e8>)
 8007c98:	2b3a      	cmp	r3, #58	; 0x3a
 8007c9a:	bf08      	it	eq
 8007c9c:	3401      	addeq	r4, #1
 8007c9e:	ae0a      	add	r6, sp, #40	; 0x28
 8007ca0:	4633      	mov	r3, r6
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 f9a4 	bl	8007ff0 <siscanf>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	dddf      	ble.n	8007c6c <_tzset_unlocked_r+0x34>
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	18e7      	adds	r7, r4, r3
 8007cb0:	5ce3      	ldrb	r3, [r4, r3]
 8007cb2:	2b2d      	cmp	r3, #45	; 0x2d
 8007cb4:	d149      	bne.n	8007d4a <_tzset_unlocked_r+0x112>
 8007cb6:	3701      	adds	r7, #1
 8007cb8:	f04f 34ff 	mov.w	r4, #4294967295
 8007cbc:	f10d 0a20 	add.w	sl, sp, #32
 8007cc0:	f10d 0b1e 	add.w	fp, sp, #30
 8007cc4:	f04f 0800 	mov.w	r8, #0
 8007cc8:	9603      	str	r6, [sp, #12]
 8007cca:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8007cce:	f8cd b000 	str.w	fp, [sp]
 8007cd2:	4633      	mov	r3, r6
 8007cd4:	aa07      	add	r2, sp, #28
 8007cd6:	4993      	ldr	r1, [pc, #588]	; (8007f24 <_tzset_unlocked_r+0x2ec>)
 8007cd8:	f8ad 801e 	strh.w	r8, [sp, #30]
 8007cdc:	4638      	mov	r0, r7
 8007cde:	f8ad 8020 	strh.w	r8, [sp, #32]
 8007ce2:	f000 f985 	bl	8007ff0 <siscanf>
 8007ce6:	4540      	cmp	r0, r8
 8007ce8:	ddc0      	ble.n	8007c6c <_tzset_unlocked_r+0x34>
 8007cea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007cee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007cf2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8007f30 <_tzset_unlocked_r+0x2f8>
 8007cf6:	213c      	movs	r1, #60	; 0x3c
 8007cf8:	fb01 2203 	mla	r2, r1, r3, r2
 8007cfc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007d00:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007d04:	fb01 2303 	mla	r3, r1, r3, r2
 8007d08:	435c      	muls	r4, r3
 8007d0a:	62ac      	str	r4, [r5, #40]	; 0x28
 8007d0c:	4c82      	ldr	r4, [pc, #520]	; (8007f18 <_tzset_unlocked_r+0x2e0>)
 8007d0e:	4b83      	ldr	r3, [pc, #524]	; (8007f1c <_tzset_unlocked_r+0x2e4>)
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d14:	4982      	ldr	r1, [pc, #520]	; (8007f20 <_tzset_unlocked_r+0x2e8>)
 8007d16:	441f      	add	r7, r3
 8007d18:	464a      	mov	r2, r9
 8007d1a:	4633      	mov	r3, r6
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f000 f967 	bl	8007ff0 <siscanf>
 8007d22:	4540      	cmp	r0, r8
 8007d24:	dc16      	bgt.n	8007d54 <_tzset_unlocked_r+0x11c>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6063      	str	r3, [r4, #4]
 8007d2a:	4b78      	ldr	r3, [pc, #480]	; (8007f0c <_tzset_unlocked_r+0x2d4>)
 8007d2c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	4b78      	ldr	r3, [pc, #480]	; (8007f14 <_tzset_unlocked_r+0x2dc>)
 8007d32:	f8c3 8000 	str.w	r8, [r3]
 8007d36:	e799      	b.n	8007c6c <_tzset_unlocked_r+0x34>
 8007d38:	f7f8 fa52 	bl	80001e0 <strcmp>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d095      	beq.n	8007c6c <_tzset_unlocked_r+0x34>
 8007d40:	e79a      	b.n	8007c78 <_tzset_unlocked_r+0x40>
 8007d42:	4621      	mov	r1, r4
 8007d44:	f000 f980 	bl	8008048 <strcpy>
 8007d48:	e7a3      	b.n	8007c92 <_tzset_unlocked_r+0x5a>
 8007d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8007d4c:	bf08      	it	eq
 8007d4e:	3701      	addeq	r7, #1
 8007d50:	2401      	movs	r4, #1
 8007d52:	e7b3      	b.n	8007cbc <_tzset_unlocked_r+0x84>
 8007d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d56:	f8c4 9004 	str.w	r9, [r4, #4]
 8007d5a:	18fc      	adds	r4, r7, r3
 8007d5c:	5cfb      	ldrb	r3, [r7, r3]
 8007d5e:	2b2d      	cmp	r3, #45	; 0x2d
 8007d60:	f040 808b 	bne.w	8007e7a <_tzset_unlocked_r+0x242>
 8007d64:	3401      	adds	r4, #1
 8007d66:	f04f 37ff 	mov.w	r7, #4294967295
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007d70:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007d74:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007d78:	930a      	str	r3, [sp, #40]	; 0x28
 8007d7a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007d7e:	e9cd b600 	strd	fp, r6, [sp]
 8007d82:	4633      	mov	r3, r6
 8007d84:	aa07      	add	r2, sp, #28
 8007d86:	4967      	ldr	r1, [pc, #412]	; (8007f24 <_tzset_unlocked_r+0x2ec>)
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 f931 	bl	8007ff0 <siscanf>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	dc78      	bgt.n	8007e84 <_tzset_unlocked_r+0x24c>
 8007d92:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007d94:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8007d98:	652b      	str	r3, [r5, #80]	; 0x50
 8007d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9c:	462f      	mov	r7, r5
 8007d9e:	441c      	add	r4, r3
 8007da0:	f04f 0900 	mov.w	r9, #0
 8007da4:	7823      	ldrb	r3, [r4, #0]
 8007da6:	2b2c      	cmp	r3, #44	; 0x2c
 8007da8:	bf08      	it	eq
 8007daa:	3401      	addeq	r4, #1
 8007dac:	f894 8000 	ldrb.w	r8, [r4]
 8007db0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8007db4:	d179      	bne.n	8007eaa <_tzset_unlocked_r+0x272>
 8007db6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8007dba:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8007dbe:	ab09      	add	r3, sp, #36	; 0x24
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	9603      	str	r6, [sp, #12]
 8007dc4:	4633      	mov	r3, r6
 8007dc6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8007dca:	4957      	ldr	r1, [pc, #348]	; (8007f28 <_tzset_unlocked_r+0x2f0>)
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 f90f 	bl	8007ff0 <siscanf>
 8007dd2:	2803      	cmp	r0, #3
 8007dd4:	f47f af4a 	bne.w	8007c6c <_tzset_unlocked_r+0x34>
 8007dd8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8007ddc:	1e4b      	subs	r3, r1, #1
 8007dde:	2b0b      	cmp	r3, #11
 8007de0:	f63f af44 	bhi.w	8007c6c <_tzset_unlocked_r+0x34>
 8007de4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007de8:	1e53      	subs	r3, r2, #1
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	f63f af3e 	bhi.w	8007c6c <_tzset_unlocked_r+0x34>
 8007df0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007df4:	2b06      	cmp	r3, #6
 8007df6:	f63f af39 	bhi.w	8007c6c <_tzset_unlocked_r+0x34>
 8007dfa:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007dfe:	f887 8008 	strb.w	r8, [r7, #8]
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e06:	eb04 0803 	add.w	r8, r4, r3
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007e10:	2300      	movs	r3, #0
 8007e12:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007e16:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e1c:	f898 3000 	ldrb.w	r3, [r8]
 8007e20:	2b2f      	cmp	r3, #47	; 0x2f
 8007e22:	d109      	bne.n	8007e38 <_tzset_unlocked_r+0x200>
 8007e24:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007e28:	e9cd b600 	strd	fp, r6, [sp]
 8007e2c:	4633      	mov	r3, r6
 8007e2e:	aa07      	add	r2, sp, #28
 8007e30:	493e      	ldr	r1, [pc, #248]	; (8007f2c <_tzset_unlocked_r+0x2f4>)
 8007e32:	4640      	mov	r0, r8
 8007e34:	f000 f8dc 	bl	8007ff0 <siscanf>
 8007e38:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007e3c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007e40:	213c      	movs	r1, #60	; 0x3c
 8007e42:	fb01 2203 	mla	r2, r1, r3, r2
 8007e46:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007e4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007e4e:	fb01 2303 	mla	r3, r1, r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]
 8007e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e56:	3728      	adds	r7, #40	; 0x28
 8007e58:	4444      	add	r4, r8
 8007e5a:	f1b9 0f00 	cmp.w	r9, #0
 8007e5e:	d021      	beq.n	8007ea4 <_tzset_unlocked_r+0x26c>
 8007e60:	6868      	ldr	r0, [r5, #4]
 8007e62:	f7ff fe39 	bl	8007ad8 <__tzcalc_limits>
 8007e66:	4b29      	ldr	r3, [pc, #164]	; (8007f0c <_tzset_unlocked_r+0x2d4>)
 8007e68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <_tzset_unlocked_r+0x2dc>)
 8007e72:	bf18      	it	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	e6f8      	b.n	8007c6c <_tzset_unlocked_r+0x34>
 8007e7a:	2b2b      	cmp	r3, #43	; 0x2b
 8007e7c:	bf08      	it	eq
 8007e7e:	3401      	addeq	r4, #1
 8007e80:	2701      	movs	r7, #1
 8007e82:	e772      	b.n	8007d6a <_tzset_unlocked_r+0x132>
 8007e84:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007e88:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007e8c:	213c      	movs	r1, #60	; 0x3c
 8007e8e:	fb01 2203 	mla	r2, r1, r3, r2
 8007e92:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007e96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007e9a:	fb01 2303 	mla	r3, r1, r3, r2
 8007e9e:	435f      	muls	r7, r3
 8007ea0:	652f      	str	r7, [r5, #80]	; 0x50
 8007ea2:	e77a      	b.n	8007d9a <_tzset_unlocked_r+0x162>
 8007ea4:	f04f 0901 	mov.w	r9, #1
 8007ea8:	e77c      	b.n	8007da4 <_tzset_unlocked_r+0x16c>
 8007eaa:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8007eae:	bf06      	itte	eq
 8007eb0:	3401      	addeq	r4, #1
 8007eb2:	4643      	moveq	r3, r8
 8007eb4:	2344      	movne	r3, #68	; 0x44
 8007eb6:	220a      	movs	r2, #10
 8007eb8:	a90b      	add	r1, sp, #44	; 0x2c
 8007eba:	4620      	mov	r0, r4
 8007ebc:	9305      	str	r3, [sp, #20]
 8007ebe:	f000 f969 	bl	8008194 <strtoul>
 8007ec2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007ec6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8007eca:	45a0      	cmp	r8, r4
 8007ecc:	9b05      	ldr	r3, [sp, #20]
 8007ece:	d114      	bne.n	8007efa <_tzset_unlocked_r+0x2c2>
 8007ed0:	234d      	movs	r3, #77	; 0x4d
 8007ed2:	f1b9 0f00 	cmp.w	r9, #0
 8007ed6:	d107      	bne.n	8007ee8 <_tzset_unlocked_r+0x2b0>
 8007ed8:	722b      	strb	r3, [r5, #8]
 8007eda:	2103      	movs	r1, #3
 8007edc:	2302      	movs	r3, #2
 8007ede:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8007ee2:	f8c5 9014 	str.w	r9, [r5, #20]
 8007ee6:	e790      	b.n	8007e0a <_tzset_unlocked_r+0x1d2>
 8007ee8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8007eec:	220b      	movs	r2, #11
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007ef8:	e787      	b.n	8007e0a <_tzset_unlocked_r+0x1d2>
 8007efa:	b280      	uxth	r0, r0
 8007efc:	723b      	strb	r3, [r7, #8]
 8007efe:	6178      	str	r0, [r7, #20]
 8007f00:	e783      	b.n	8007e0a <_tzset_unlocked_r+0x1d2>
 8007f02:	bf00      	nop
 8007f04:	08008df8 	.word	0x08008df8
 8007f08:	200003f0 	.word	0x200003f0
 8007f0c:	200003f8 	.word	0x200003f8
 8007f10:	08008dfb 	.word	0x08008dfb
 8007f14:	200003f4 	.word	0x200003f4
 8007f18:	20000074 	.word	0x20000074
 8007f1c:	200003e3 	.word	0x200003e3
 8007f20:	08008dff 	.word	0x08008dff
 8007f24:	08008e22 	.word	0x08008e22
 8007f28:	08008e0e 	.word	0x08008e0e
 8007f2c:	08008e21 	.word	0x08008e21
 8007f30:	200003d8 	.word	0x200003d8

08007f34 <div>:
 8007f34:	2900      	cmp	r1, #0
 8007f36:	b510      	push	{r4, lr}
 8007f38:	fb91 f4f2 	sdiv	r4, r1, r2
 8007f3c:	fb02 1314 	mls	r3, r2, r4, r1
 8007f40:	db06      	blt.n	8007f50 <div+0x1c>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	da01      	bge.n	8007f4a <div+0x16>
 8007f46:	3401      	adds	r4, #1
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	e9c0 4300 	strd	r4, r3, [r0]
 8007f4e:	bd10      	pop	{r4, pc}
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfc4      	itt	gt
 8007f54:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8007f58:	189b      	addgt	r3, r3, r2
 8007f5a:	e7f6      	b.n	8007f4a <div+0x16>

08007f5c <_findenv_r>:
 8007f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f60:	4607      	mov	r7, r0
 8007f62:	468b      	mov	fp, r1
 8007f64:	4690      	mov	r8, r2
 8007f66:	f000 f92b 	bl	80081c0 <__env_lock>
 8007f6a:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <_findenv_r+0x74>)
 8007f6c:	681d      	ldr	r5, [r3, #0]
 8007f6e:	469a      	mov	sl, r3
 8007f70:	b13d      	cbz	r5, 8007f82 <_findenv_r+0x26>
 8007f72:	465c      	mov	r4, fp
 8007f74:	4623      	mov	r3, r4
 8007f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f7a:	b32a      	cbz	r2, 8007fc8 <_findenv_r+0x6c>
 8007f7c:	2a3d      	cmp	r2, #61	; 0x3d
 8007f7e:	461c      	mov	r4, r3
 8007f80:	d1f8      	bne.n	8007f74 <_findenv_r+0x18>
 8007f82:	4638      	mov	r0, r7
 8007f84:	f000 f91d 	bl	80081c2 <__env_unlock>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	464d      	mov	r5, r9
 8007f90:	46a9      	mov	r9, r5
 8007f92:	f859 0b04 	ldr.w	r0, [r9], #4
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d0f3      	beq.n	8007f82 <_findenv_r+0x26>
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	f000 f85b 	bl	8008058 <strncmp>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d1f3      	bne.n	8007f8e <_findenv_r+0x32>
 8007fa6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007faa:	191e      	adds	r6, r3, r4
 8007fac:	5d1b      	ldrb	r3, [r3, r4]
 8007fae:	2b3d      	cmp	r3, #61	; 0x3d
 8007fb0:	d1ed      	bne.n	8007f8e <_findenv_r+0x32>
 8007fb2:	f8da 3000 	ldr.w	r3, [sl]
 8007fb6:	1aed      	subs	r5, r5, r3
 8007fb8:	10ad      	asrs	r5, r5, #2
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f8c8 5000 	str.w	r5, [r8]
 8007fc0:	f000 f8ff 	bl	80081c2 <__env_unlock>
 8007fc4:	1c70      	adds	r0, r6, #1
 8007fc6:	e7e0      	b.n	8007f8a <_findenv_r+0x2e>
 8007fc8:	eba4 040b 	sub.w	r4, r4, fp
 8007fcc:	e7e0      	b.n	8007f90 <_findenv_r+0x34>
 8007fce:	bf00      	nop
 8007fd0:	20000000 	.word	0x20000000

08007fd4 <_getenv_r>:
 8007fd4:	b507      	push	{r0, r1, r2, lr}
 8007fd6:	aa01      	add	r2, sp, #4
 8007fd8:	f7ff ffc0 	bl	8007f5c <_findenv_r>
 8007fdc:	b003      	add	sp, #12
 8007fde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007fe4 <__gettzinfo>:
 8007fe4:	4800      	ldr	r0, [pc, #0]	; (8007fe8 <__gettzinfo+0x4>)
 8007fe6:	4770      	bx	lr
 8007fe8:	20000080 	.word	0x20000080

08007fec <__malloc_lock>:
 8007fec:	4770      	bx	lr

08007fee <__malloc_unlock>:
 8007fee:	4770      	bx	lr

08007ff0 <siscanf>:
 8007ff0:	b40e      	push	{r1, r2, r3}
 8007ff2:	b530      	push	{r4, r5, lr}
 8007ff4:	b09c      	sub	sp, #112	; 0x70
 8007ff6:	ac1f      	add	r4, sp, #124	; 0x7c
 8007ff8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007ffc:	f854 5b04 	ldr.w	r5, [r4], #4
 8008000:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008004:	9002      	str	r0, [sp, #8]
 8008006:	9006      	str	r0, [sp, #24]
 8008008:	f7f8 f8f4 	bl	80001f4 <strlen>
 800800c:	4b0b      	ldr	r3, [pc, #44]	; (800803c <siscanf+0x4c>)
 800800e:	9003      	str	r0, [sp, #12]
 8008010:	9007      	str	r0, [sp, #28]
 8008012:	930b      	str	r3, [sp, #44]	; 0x2c
 8008014:	480a      	ldr	r0, [pc, #40]	; (8008040 <siscanf+0x50>)
 8008016:	9401      	str	r4, [sp, #4]
 8008018:	2300      	movs	r3, #0
 800801a:	930f      	str	r3, [sp, #60]	; 0x3c
 800801c:	9314      	str	r3, [sp, #80]	; 0x50
 800801e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008022:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008026:	462a      	mov	r2, r5
 8008028:	4623      	mov	r3, r4
 800802a:	a902      	add	r1, sp, #8
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f000 f947 	bl	80082c0 <__ssvfiscanf_r>
 8008032:	b01c      	add	sp, #112	; 0x70
 8008034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008038:	b003      	add	sp, #12
 800803a:	4770      	bx	lr
 800803c:	08008045 	.word	0x08008045
 8008040:	20000010 	.word	0x20000010

08008044 <__seofread>:
 8008044:	2000      	movs	r0, #0
 8008046:	4770      	bx	lr

08008048 <strcpy>:
 8008048:	4603      	mov	r3, r0
 800804a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800804e:	f803 2b01 	strb.w	r2, [r3], #1
 8008052:	2a00      	cmp	r2, #0
 8008054:	d1f9      	bne.n	800804a <strcpy+0x2>
 8008056:	4770      	bx	lr

08008058 <strncmp>:
 8008058:	b510      	push	{r4, lr}
 800805a:	b16a      	cbz	r2, 8008078 <strncmp+0x20>
 800805c:	3901      	subs	r1, #1
 800805e:	1884      	adds	r4, r0, r2
 8008060:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008064:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008068:	4293      	cmp	r3, r2
 800806a:	d103      	bne.n	8008074 <strncmp+0x1c>
 800806c:	42a0      	cmp	r0, r4
 800806e:	d001      	beq.n	8008074 <strncmp+0x1c>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1f5      	bne.n	8008060 <strncmp+0x8>
 8008074:	1a98      	subs	r0, r3, r2
 8008076:	bd10      	pop	{r4, pc}
 8008078:	4610      	mov	r0, r2
 800807a:	e7fc      	b.n	8008076 <strncmp+0x1e>

0800807c <_strtoul_l.isra.0>:
 800807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008080:	4680      	mov	r8, r0
 8008082:	4689      	mov	r9, r1
 8008084:	4692      	mov	sl, r2
 8008086:	461e      	mov	r6, r3
 8008088:	460f      	mov	r7, r1
 800808a:	463d      	mov	r5, r7
 800808c:	9808      	ldr	r0, [sp, #32]
 800808e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008092:	f000 f897 	bl	80081c4 <__locale_ctype_ptr_l>
 8008096:	4420      	add	r0, r4
 8008098:	7843      	ldrb	r3, [r0, #1]
 800809a:	f013 0308 	ands.w	r3, r3, #8
 800809e:	d130      	bne.n	8008102 <_strtoul_l.isra.0+0x86>
 80080a0:	2c2d      	cmp	r4, #45	; 0x2d
 80080a2:	d130      	bne.n	8008106 <_strtoul_l.isra.0+0x8a>
 80080a4:	787c      	ldrb	r4, [r7, #1]
 80080a6:	1cbd      	adds	r5, r7, #2
 80080a8:	2101      	movs	r1, #1
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	d05c      	beq.n	8008168 <_strtoul_l.isra.0+0xec>
 80080ae:	2e10      	cmp	r6, #16
 80080b0:	d109      	bne.n	80080c6 <_strtoul_l.isra.0+0x4a>
 80080b2:	2c30      	cmp	r4, #48	; 0x30
 80080b4:	d107      	bne.n	80080c6 <_strtoul_l.isra.0+0x4a>
 80080b6:	782b      	ldrb	r3, [r5, #0]
 80080b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080bc:	2b58      	cmp	r3, #88	; 0x58
 80080be:	d14e      	bne.n	800815e <_strtoul_l.isra.0+0xe2>
 80080c0:	786c      	ldrb	r4, [r5, #1]
 80080c2:	2610      	movs	r6, #16
 80080c4:	3502      	adds	r5, #2
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ca:	2300      	movs	r3, #0
 80080cc:	fbb2 f2f6 	udiv	r2, r2, r6
 80080d0:	fb06 fc02 	mul.w	ip, r6, r2
 80080d4:	ea6f 0c0c 	mvn.w	ip, ip
 80080d8:	4618      	mov	r0, r3
 80080da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80080de:	2f09      	cmp	r7, #9
 80080e0:	d817      	bhi.n	8008112 <_strtoul_l.isra.0+0x96>
 80080e2:	463c      	mov	r4, r7
 80080e4:	42a6      	cmp	r6, r4
 80080e6:	dd23      	ble.n	8008130 <_strtoul_l.isra.0+0xb4>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	db1e      	blt.n	800812a <_strtoul_l.isra.0+0xae>
 80080ec:	4282      	cmp	r2, r0
 80080ee:	d31c      	bcc.n	800812a <_strtoul_l.isra.0+0xae>
 80080f0:	d101      	bne.n	80080f6 <_strtoul_l.isra.0+0x7a>
 80080f2:	45a4      	cmp	ip, r4
 80080f4:	db19      	blt.n	800812a <_strtoul_l.isra.0+0xae>
 80080f6:	fb00 4006 	mla	r0, r0, r6, r4
 80080fa:	2301      	movs	r3, #1
 80080fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008100:	e7eb      	b.n	80080da <_strtoul_l.isra.0+0x5e>
 8008102:	462f      	mov	r7, r5
 8008104:	e7c1      	b.n	800808a <_strtoul_l.isra.0+0xe>
 8008106:	2c2b      	cmp	r4, #43	; 0x2b
 8008108:	bf04      	itt	eq
 800810a:	1cbd      	addeq	r5, r7, #2
 800810c:	787c      	ldrbeq	r4, [r7, #1]
 800810e:	4619      	mov	r1, r3
 8008110:	e7cb      	b.n	80080aa <_strtoul_l.isra.0+0x2e>
 8008112:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008116:	2f19      	cmp	r7, #25
 8008118:	d801      	bhi.n	800811e <_strtoul_l.isra.0+0xa2>
 800811a:	3c37      	subs	r4, #55	; 0x37
 800811c:	e7e2      	b.n	80080e4 <_strtoul_l.isra.0+0x68>
 800811e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008122:	2f19      	cmp	r7, #25
 8008124:	d804      	bhi.n	8008130 <_strtoul_l.isra.0+0xb4>
 8008126:	3c57      	subs	r4, #87	; 0x57
 8008128:	e7dc      	b.n	80080e4 <_strtoul_l.isra.0+0x68>
 800812a:	f04f 33ff 	mov.w	r3, #4294967295
 800812e:	e7e5      	b.n	80080fc <_strtoul_l.isra.0+0x80>
 8008130:	2b00      	cmp	r3, #0
 8008132:	da09      	bge.n	8008148 <_strtoul_l.isra.0+0xcc>
 8008134:	2322      	movs	r3, #34	; 0x22
 8008136:	f8c8 3000 	str.w	r3, [r8]
 800813a:	f04f 30ff 	mov.w	r0, #4294967295
 800813e:	f1ba 0f00 	cmp.w	sl, #0
 8008142:	d107      	bne.n	8008154 <_strtoul_l.isra.0+0xd8>
 8008144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008148:	b101      	cbz	r1, 800814c <_strtoul_l.isra.0+0xd0>
 800814a:	4240      	negs	r0, r0
 800814c:	f1ba 0f00 	cmp.w	sl, #0
 8008150:	d0f8      	beq.n	8008144 <_strtoul_l.isra.0+0xc8>
 8008152:	b10b      	cbz	r3, 8008158 <_strtoul_l.isra.0+0xdc>
 8008154:	f105 39ff 	add.w	r9, r5, #4294967295
 8008158:	f8ca 9000 	str.w	r9, [sl]
 800815c:	e7f2      	b.n	8008144 <_strtoul_l.isra.0+0xc8>
 800815e:	2430      	movs	r4, #48	; 0x30
 8008160:	2e00      	cmp	r6, #0
 8008162:	d1b0      	bne.n	80080c6 <_strtoul_l.isra.0+0x4a>
 8008164:	2608      	movs	r6, #8
 8008166:	e7ae      	b.n	80080c6 <_strtoul_l.isra.0+0x4a>
 8008168:	2c30      	cmp	r4, #48	; 0x30
 800816a:	d0a4      	beq.n	80080b6 <_strtoul_l.isra.0+0x3a>
 800816c:	260a      	movs	r6, #10
 800816e:	e7aa      	b.n	80080c6 <_strtoul_l.isra.0+0x4a>

08008170 <_strtoul_r>:
 8008170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008172:	4c06      	ldr	r4, [pc, #24]	; (800818c <_strtoul_r+0x1c>)
 8008174:	4d06      	ldr	r5, [pc, #24]	; (8008190 <_strtoul_r+0x20>)
 8008176:	6824      	ldr	r4, [r4, #0]
 8008178:	6a24      	ldr	r4, [r4, #32]
 800817a:	2c00      	cmp	r4, #0
 800817c:	bf08      	it	eq
 800817e:	462c      	moveq	r4, r5
 8008180:	9400      	str	r4, [sp, #0]
 8008182:	f7ff ff7b 	bl	800807c <_strtoul_l.isra.0>
 8008186:	b003      	add	sp, #12
 8008188:	bd30      	pop	{r4, r5, pc}
 800818a:	bf00      	nop
 800818c:	20000010 	.word	0x20000010
 8008190:	200000d8 	.word	0x200000d8

08008194 <strtoul>:
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <strtoul+0x24>)
 8008196:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008198:	681c      	ldr	r4, [r3, #0]
 800819a:	4d08      	ldr	r5, [pc, #32]	; (80081bc <strtoul+0x28>)
 800819c:	6a23      	ldr	r3, [r4, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bf08      	it	eq
 80081a2:	462b      	moveq	r3, r5
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	4613      	mov	r3, r2
 80081a8:	460a      	mov	r2, r1
 80081aa:	4601      	mov	r1, r0
 80081ac:	4620      	mov	r0, r4
 80081ae:	f7ff ff65 	bl	800807c <_strtoul_l.isra.0>
 80081b2:	b003      	add	sp, #12
 80081b4:	bd30      	pop	{r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	20000010 	.word	0x20000010
 80081bc:	200000d8 	.word	0x200000d8

080081c0 <__env_lock>:
 80081c0:	4770      	bx	lr

080081c2 <__env_unlock>:
 80081c2:	4770      	bx	lr

080081c4 <__locale_ctype_ptr_l>:
 80081c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80081c8:	4770      	bx	lr
	...

080081cc <__locale_ctype_ptr>:
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <__locale_ctype_ptr+0x14>)
 80081ce:	4a05      	ldr	r2, [pc, #20]	; (80081e4 <__locale_ctype_ptr+0x18>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bf08      	it	eq
 80081d8:	4613      	moveq	r3, r2
 80081da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80081de:	4770      	bx	lr
 80081e0:	20000010 	.word	0x20000010
 80081e4:	200000d8 	.word	0x200000d8

080081e8 <__ascii_mbtowc>:
 80081e8:	b082      	sub	sp, #8
 80081ea:	b901      	cbnz	r1, 80081ee <__ascii_mbtowc+0x6>
 80081ec:	a901      	add	r1, sp, #4
 80081ee:	b142      	cbz	r2, 8008202 <__ascii_mbtowc+0x1a>
 80081f0:	b14b      	cbz	r3, 8008206 <__ascii_mbtowc+0x1e>
 80081f2:	7813      	ldrb	r3, [r2, #0]
 80081f4:	600b      	str	r3, [r1, #0]
 80081f6:	7812      	ldrb	r2, [r2, #0]
 80081f8:	1c10      	adds	r0, r2, #0
 80081fa:	bf18      	it	ne
 80081fc:	2001      	movne	r0, #1
 80081fe:	b002      	add	sp, #8
 8008200:	4770      	bx	lr
 8008202:	4610      	mov	r0, r2
 8008204:	e7fb      	b.n	80081fe <__ascii_mbtowc+0x16>
 8008206:	f06f 0001 	mvn.w	r0, #1
 800820a:	e7f8      	b.n	80081fe <__ascii_mbtowc+0x16>

0800820c <_sungetc_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	1c4b      	adds	r3, r1, #1
 8008210:	4614      	mov	r4, r2
 8008212:	d103      	bne.n	800821c <_sungetc_r+0x10>
 8008214:	f04f 35ff 	mov.w	r5, #4294967295
 8008218:	4628      	mov	r0, r5
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	8993      	ldrh	r3, [r2, #12]
 800821e:	f023 0320 	bic.w	r3, r3, #32
 8008222:	8193      	strh	r3, [r2, #12]
 8008224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008226:	6852      	ldr	r2, [r2, #4]
 8008228:	b2cd      	uxtb	r5, r1
 800822a:	b18b      	cbz	r3, 8008250 <_sungetc_r+0x44>
 800822c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800822e:	4293      	cmp	r3, r2
 8008230:	dd08      	ble.n	8008244 <_sungetc_r+0x38>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	1e5a      	subs	r2, r3, #1
 8008236:	6022      	str	r2, [r4, #0]
 8008238:	f803 5c01 	strb.w	r5, [r3, #-1]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	3301      	adds	r3, #1
 8008240:	6063      	str	r3, [r4, #4]
 8008242:	e7e9      	b.n	8008218 <_sungetc_r+0xc>
 8008244:	4621      	mov	r1, r4
 8008246:	f000 fba3 	bl	8008990 <__submore>
 800824a:	2800      	cmp	r0, #0
 800824c:	d0f1      	beq.n	8008232 <_sungetc_r+0x26>
 800824e:	e7e1      	b.n	8008214 <_sungetc_r+0x8>
 8008250:	6921      	ldr	r1, [r4, #16]
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	b151      	cbz	r1, 800826c <_sungetc_r+0x60>
 8008256:	4299      	cmp	r1, r3
 8008258:	d208      	bcs.n	800826c <_sungetc_r+0x60>
 800825a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800825e:	42a9      	cmp	r1, r5
 8008260:	d104      	bne.n	800826c <_sungetc_r+0x60>
 8008262:	3b01      	subs	r3, #1
 8008264:	3201      	adds	r2, #1
 8008266:	6023      	str	r3, [r4, #0]
 8008268:	6062      	str	r2, [r4, #4]
 800826a:	e7d5      	b.n	8008218 <_sungetc_r+0xc>
 800826c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008274:	6363      	str	r3, [r4, #52]	; 0x34
 8008276:	2303      	movs	r3, #3
 8008278:	63a3      	str	r3, [r4, #56]	; 0x38
 800827a:	4623      	mov	r3, r4
 800827c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	2301      	movs	r3, #1
 8008284:	e7dc      	b.n	8008240 <_sungetc_r+0x34>

08008286 <__ssrefill_r>:
 8008286:	b510      	push	{r4, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800828c:	b169      	cbz	r1, 80082aa <__ssrefill_r+0x24>
 800828e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008292:	4299      	cmp	r1, r3
 8008294:	d001      	beq.n	800829a <__ssrefill_r+0x14>
 8008296:	f7ff fb67 	bl	8007968 <_free_r>
 800829a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800829c:	6063      	str	r3, [r4, #4]
 800829e:	2000      	movs	r0, #0
 80082a0:	6360      	str	r0, [r4, #52]	; 0x34
 80082a2:	b113      	cbz	r3, 80082aa <__ssrefill_r+0x24>
 80082a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	6923      	ldr	r3, [r4, #16]
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	2300      	movs	r3, #0
 80082b0:	6063      	str	r3, [r4, #4]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f043 0320 	orr.w	r3, r3, #32
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	f04f 30ff 	mov.w	r0, #4294967295
 80082be:	e7f3      	b.n	80082a8 <__ssrefill_r+0x22>

080082c0 <__ssvfiscanf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80082c8:	460c      	mov	r4, r1
 80082ca:	2100      	movs	r1, #0
 80082cc:	9144      	str	r1, [sp, #272]	; 0x110
 80082ce:	9145      	str	r1, [sp, #276]	; 0x114
 80082d0:	499f      	ldr	r1, [pc, #636]	; (8008550 <__ssvfiscanf_r+0x290>)
 80082d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80082d4:	f10d 0804 	add.w	r8, sp, #4
 80082d8:	499e      	ldr	r1, [pc, #632]	; (8008554 <__ssvfiscanf_r+0x294>)
 80082da:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008558 <__ssvfiscanf_r+0x298>
 80082de:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80082e2:	4606      	mov	r6, r0
 80082e4:	4692      	mov	sl, r2
 80082e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	270a      	movs	r7, #10
 80082ec:	f89a 3000 	ldrb.w	r3, [sl]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 812a 	beq.w	800854a <__ssvfiscanf_r+0x28a>
 80082f6:	4655      	mov	r5, sl
 80082f8:	f7ff ff68 	bl	80081cc <__locale_ctype_ptr>
 80082fc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008300:	4458      	add	r0, fp
 8008302:	7843      	ldrb	r3, [r0, #1]
 8008304:	f013 0308 	ands.w	r3, r3, #8
 8008308:	d01c      	beq.n	8008344 <__ssvfiscanf_r+0x84>
 800830a:	6863      	ldr	r3, [r4, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	dd12      	ble.n	8008336 <__ssvfiscanf_r+0x76>
 8008310:	f7ff ff5c 	bl	80081cc <__locale_ctype_ptr>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	781a      	ldrb	r2, [r3, #0]
 8008318:	4410      	add	r0, r2
 800831a:	7842      	ldrb	r2, [r0, #1]
 800831c:	0712      	lsls	r2, r2, #28
 800831e:	d401      	bmi.n	8008324 <__ssvfiscanf_r+0x64>
 8008320:	46aa      	mov	sl, r5
 8008322:	e7e3      	b.n	80082ec <__ssvfiscanf_r+0x2c>
 8008324:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008326:	3201      	adds	r2, #1
 8008328:	9245      	str	r2, [sp, #276]	; 0x114
 800832a:	6862      	ldr	r2, [r4, #4]
 800832c:	3301      	adds	r3, #1
 800832e:	3a01      	subs	r2, #1
 8008330:	6062      	str	r2, [r4, #4]
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	e7e9      	b.n	800830a <__ssvfiscanf_r+0x4a>
 8008336:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008338:	4621      	mov	r1, r4
 800833a:	4630      	mov	r0, r6
 800833c:	4798      	blx	r3
 800833e:	2800      	cmp	r0, #0
 8008340:	d0e6      	beq.n	8008310 <__ssvfiscanf_r+0x50>
 8008342:	e7ed      	b.n	8008320 <__ssvfiscanf_r+0x60>
 8008344:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008348:	f040 8082 	bne.w	8008450 <__ssvfiscanf_r+0x190>
 800834c:	9343      	str	r3, [sp, #268]	; 0x10c
 800834e:	9341      	str	r3, [sp, #260]	; 0x104
 8008350:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008354:	2b2a      	cmp	r3, #42	; 0x2a
 8008356:	d103      	bne.n	8008360 <__ssvfiscanf_r+0xa0>
 8008358:	2310      	movs	r3, #16
 800835a:	9341      	str	r3, [sp, #260]	; 0x104
 800835c:	f10a 0502 	add.w	r5, sl, #2
 8008360:	46aa      	mov	sl, r5
 8008362:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008366:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800836a:	2a09      	cmp	r2, #9
 800836c:	d922      	bls.n	80083b4 <__ssvfiscanf_r+0xf4>
 800836e:	2203      	movs	r2, #3
 8008370:	4879      	ldr	r0, [pc, #484]	; (8008558 <__ssvfiscanf_r+0x298>)
 8008372:	f7f7 ff4d 	bl	8000210 <memchr>
 8008376:	b138      	cbz	r0, 8008388 <__ssvfiscanf_r+0xc8>
 8008378:	eba0 0309 	sub.w	r3, r0, r9
 800837c:	2001      	movs	r0, #1
 800837e:	4098      	lsls	r0, r3
 8008380:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008382:	4318      	orrs	r0, r3
 8008384:	9041      	str	r0, [sp, #260]	; 0x104
 8008386:	46aa      	mov	sl, r5
 8008388:	f89a 3000 	ldrb.w	r3, [sl]
 800838c:	2b67      	cmp	r3, #103	; 0x67
 800838e:	f10a 0501 	add.w	r5, sl, #1
 8008392:	d82b      	bhi.n	80083ec <__ssvfiscanf_r+0x12c>
 8008394:	2b65      	cmp	r3, #101	; 0x65
 8008396:	f080 809f 	bcs.w	80084d8 <__ssvfiscanf_r+0x218>
 800839a:	2b47      	cmp	r3, #71	; 0x47
 800839c:	d810      	bhi.n	80083c0 <__ssvfiscanf_r+0x100>
 800839e:	2b45      	cmp	r3, #69	; 0x45
 80083a0:	f080 809a 	bcs.w	80084d8 <__ssvfiscanf_r+0x218>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d06c      	beq.n	8008482 <__ssvfiscanf_r+0x1c2>
 80083a8:	2b25      	cmp	r3, #37	; 0x25
 80083aa:	d051      	beq.n	8008450 <__ssvfiscanf_r+0x190>
 80083ac:	2303      	movs	r3, #3
 80083ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80083b0:	9742      	str	r7, [sp, #264]	; 0x108
 80083b2:	e027      	b.n	8008404 <__ssvfiscanf_r+0x144>
 80083b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80083b6:	fb07 1303 	mla	r3, r7, r3, r1
 80083ba:	3b30      	subs	r3, #48	; 0x30
 80083bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80083be:	e7cf      	b.n	8008360 <__ssvfiscanf_r+0xa0>
 80083c0:	2b5b      	cmp	r3, #91	; 0x5b
 80083c2:	d06a      	beq.n	800849a <__ssvfiscanf_r+0x1da>
 80083c4:	d80c      	bhi.n	80083e0 <__ssvfiscanf_r+0x120>
 80083c6:	2b58      	cmp	r3, #88	; 0x58
 80083c8:	d1f0      	bne.n	80083ac <__ssvfiscanf_r+0xec>
 80083ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80083cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d0:	9241      	str	r2, [sp, #260]	; 0x104
 80083d2:	2210      	movs	r2, #16
 80083d4:	9242      	str	r2, [sp, #264]	; 0x108
 80083d6:	2b6e      	cmp	r3, #110	; 0x6e
 80083d8:	bf8c      	ite	hi
 80083da:	2304      	movhi	r3, #4
 80083dc:	2303      	movls	r3, #3
 80083de:	e010      	b.n	8008402 <__ssvfiscanf_r+0x142>
 80083e0:	2b63      	cmp	r3, #99	; 0x63
 80083e2:	d065      	beq.n	80084b0 <__ssvfiscanf_r+0x1f0>
 80083e4:	2b64      	cmp	r3, #100	; 0x64
 80083e6:	d1e1      	bne.n	80083ac <__ssvfiscanf_r+0xec>
 80083e8:	9742      	str	r7, [sp, #264]	; 0x108
 80083ea:	e7f4      	b.n	80083d6 <__ssvfiscanf_r+0x116>
 80083ec:	2b70      	cmp	r3, #112	; 0x70
 80083ee:	d04b      	beq.n	8008488 <__ssvfiscanf_r+0x1c8>
 80083f0:	d826      	bhi.n	8008440 <__ssvfiscanf_r+0x180>
 80083f2:	2b6e      	cmp	r3, #110	; 0x6e
 80083f4:	d062      	beq.n	80084bc <__ssvfiscanf_r+0x1fc>
 80083f6:	d84c      	bhi.n	8008492 <__ssvfiscanf_r+0x1d2>
 80083f8:	2b69      	cmp	r3, #105	; 0x69
 80083fa:	d1d7      	bne.n	80083ac <__ssvfiscanf_r+0xec>
 80083fc:	2300      	movs	r3, #0
 80083fe:	9342      	str	r3, [sp, #264]	; 0x108
 8008400:	2303      	movs	r3, #3
 8008402:	9347      	str	r3, [sp, #284]	; 0x11c
 8008404:	6863      	ldr	r3, [r4, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	dd68      	ble.n	80084dc <__ssvfiscanf_r+0x21c>
 800840a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800840c:	0659      	lsls	r1, r3, #25
 800840e:	d407      	bmi.n	8008420 <__ssvfiscanf_r+0x160>
 8008410:	f7ff fedc 	bl	80081cc <__locale_ctype_ptr>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	781a      	ldrb	r2, [r3, #0]
 8008418:	4410      	add	r0, r2
 800841a:	7842      	ldrb	r2, [r0, #1]
 800841c:	0712      	lsls	r2, r2, #28
 800841e:	d464      	bmi.n	80084ea <__ssvfiscanf_r+0x22a>
 8008420:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008422:	2b02      	cmp	r3, #2
 8008424:	dc73      	bgt.n	800850e <__ssvfiscanf_r+0x24e>
 8008426:	466b      	mov	r3, sp
 8008428:	4622      	mov	r2, r4
 800842a:	a941      	add	r1, sp, #260	; 0x104
 800842c:	4630      	mov	r0, r6
 800842e:	f000 f897 	bl	8008560 <_scanf_chars>
 8008432:	2801      	cmp	r0, #1
 8008434:	f000 8089 	beq.w	800854a <__ssvfiscanf_r+0x28a>
 8008438:	2802      	cmp	r0, #2
 800843a:	f47f af71 	bne.w	8008320 <__ssvfiscanf_r+0x60>
 800843e:	e01d      	b.n	800847c <__ssvfiscanf_r+0x1bc>
 8008440:	2b75      	cmp	r3, #117	; 0x75
 8008442:	d0d1      	beq.n	80083e8 <__ssvfiscanf_r+0x128>
 8008444:	2b78      	cmp	r3, #120	; 0x78
 8008446:	d0c0      	beq.n	80083ca <__ssvfiscanf_r+0x10a>
 8008448:	2b73      	cmp	r3, #115	; 0x73
 800844a:	d1af      	bne.n	80083ac <__ssvfiscanf_r+0xec>
 800844c:	2302      	movs	r3, #2
 800844e:	e7d8      	b.n	8008402 <__ssvfiscanf_r+0x142>
 8008450:	6863      	ldr	r3, [r4, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	dd0c      	ble.n	8008470 <__ssvfiscanf_r+0x1b0>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	455a      	cmp	r2, fp
 800845c:	d175      	bne.n	800854a <__ssvfiscanf_r+0x28a>
 800845e:	3301      	adds	r3, #1
 8008460:	6862      	ldr	r2, [r4, #4]
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008466:	3a01      	subs	r2, #1
 8008468:	3301      	adds	r3, #1
 800846a:	6062      	str	r2, [r4, #4]
 800846c:	9345      	str	r3, [sp, #276]	; 0x114
 800846e:	e757      	b.n	8008320 <__ssvfiscanf_r+0x60>
 8008470:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008472:	4621      	mov	r1, r4
 8008474:	4630      	mov	r0, r6
 8008476:	4798      	blx	r3
 8008478:	2800      	cmp	r0, #0
 800847a:	d0ec      	beq.n	8008456 <__ssvfiscanf_r+0x196>
 800847c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800847e:	2800      	cmp	r0, #0
 8008480:	d159      	bne.n	8008536 <__ssvfiscanf_r+0x276>
 8008482:	f04f 30ff 	mov.w	r0, #4294967295
 8008486:	e05c      	b.n	8008542 <__ssvfiscanf_r+0x282>
 8008488:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800848a:	f042 0220 	orr.w	r2, r2, #32
 800848e:	9241      	str	r2, [sp, #260]	; 0x104
 8008490:	e79b      	b.n	80083ca <__ssvfiscanf_r+0x10a>
 8008492:	2308      	movs	r3, #8
 8008494:	9342      	str	r3, [sp, #264]	; 0x108
 8008496:	2304      	movs	r3, #4
 8008498:	e7b3      	b.n	8008402 <__ssvfiscanf_r+0x142>
 800849a:	4629      	mov	r1, r5
 800849c:	4640      	mov	r0, r8
 800849e:	f000 f9b7 	bl	8008810 <__sccl>
 80084a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084a8:	9341      	str	r3, [sp, #260]	; 0x104
 80084aa:	4605      	mov	r5, r0
 80084ac:	2301      	movs	r3, #1
 80084ae:	e7a8      	b.n	8008402 <__ssvfiscanf_r+0x142>
 80084b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b6:	9341      	str	r3, [sp, #260]	; 0x104
 80084b8:	2300      	movs	r3, #0
 80084ba:	e7a2      	b.n	8008402 <__ssvfiscanf_r+0x142>
 80084bc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80084be:	06c3      	lsls	r3, r0, #27
 80084c0:	f53f af2e 	bmi.w	8008320 <__ssvfiscanf_r+0x60>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084c8:	1d19      	adds	r1, r3, #4
 80084ca:	9100      	str	r1, [sp, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	07c0      	lsls	r0, r0, #31
 80084d0:	bf4c      	ite	mi
 80084d2:	801a      	strhmi	r2, [r3, #0]
 80084d4:	601a      	strpl	r2, [r3, #0]
 80084d6:	e723      	b.n	8008320 <__ssvfiscanf_r+0x60>
 80084d8:	2305      	movs	r3, #5
 80084da:	e792      	b.n	8008402 <__ssvfiscanf_r+0x142>
 80084dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084de:	4621      	mov	r1, r4
 80084e0:	4630      	mov	r0, r6
 80084e2:	4798      	blx	r3
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d090      	beq.n	800840a <__ssvfiscanf_r+0x14a>
 80084e8:	e7c8      	b.n	800847c <__ssvfiscanf_r+0x1bc>
 80084ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084ec:	3201      	adds	r2, #1
 80084ee:	9245      	str	r2, [sp, #276]	; 0x114
 80084f0:	6862      	ldr	r2, [r4, #4]
 80084f2:	3a01      	subs	r2, #1
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	6062      	str	r2, [r4, #4]
 80084f8:	dd02      	ble.n	8008500 <__ssvfiscanf_r+0x240>
 80084fa:	3301      	adds	r3, #1
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	e787      	b.n	8008410 <__ssvfiscanf_r+0x150>
 8008500:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008502:	4621      	mov	r1, r4
 8008504:	4630      	mov	r0, r6
 8008506:	4798      	blx	r3
 8008508:	2800      	cmp	r0, #0
 800850a:	d081      	beq.n	8008410 <__ssvfiscanf_r+0x150>
 800850c:	e7b6      	b.n	800847c <__ssvfiscanf_r+0x1bc>
 800850e:	2b04      	cmp	r3, #4
 8008510:	dc06      	bgt.n	8008520 <__ssvfiscanf_r+0x260>
 8008512:	466b      	mov	r3, sp
 8008514:	4622      	mov	r2, r4
 8008516:	a941      	add	r1, sp, #260	; 0x104
 8008518:	4630      	mov	r0, r6
 800851a:	f000 f885 	bl	8008628 <_scanf_i>
 800851e:	e788      	b.n	8008432 <__ssvfiscanf_r+0x172>
 8008520:	4b0e      	ldr	r3, [pc, #56]	; (800855c <__ssvfiscanf_r+0x29c>)
 8008522:	2b00      	cmp	r3, #0
 8008524:	f43f aefc 	beq.w	8008320 <__ssvfiscanf_r+0x60>
 8008528:	466b      	mov	r3, sp
 800852a:	4622      	mov	r2, r4
 800852c:	a941      	add	r1, sp, #260	; 0x104
 800852e:	4630      	mov	r0, r6
 8008530:	f3af 8000 	nop.w
 8008534:	e77d      	b.n	8008432 <__ssvfiscanf_r+0x172>
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f013 0f40 	tst.w	r3, #64	; 0x40
 800853c:	bf18      	it	ne
 800853e:	f04f 30ff 	movne.w	r0, #4294967295
 8008542:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800854c:	e7f9      	b.n	8008542 <__ssvfiscanf_r+0x282>
 800854e:	bf00      	nop
 8008550:	0800820d 	.word	0x0800820d
 8008554:	08008287 	.word	0x08008287
 8008558:	08008e9e 	.word	0x08008e9e
 800855c:	00000000 	.word	0x00000000

08008560 <_scanf_chars>:
 8008560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	4615      	mov	r5, r2
 8008566:	688a      	ldr	r2, [r1, #8]
 8008568:	4680      	mov	r8, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b932      	cbnz	r2, 800857c <_scanf_chars+0x1c>
 800856e:	698a      	ldr	r2, [r1, #24]
 8008570:	2a00      	cmp	r2, #0
 8008572:	bf14      	ite	ne
 8008574:	f04f 32ff 	movne.w	r2, #4294967295
 8008578:	2201      	moveq	r2, #1
 800857a:	608a      	str	r2, [r1, #8]
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	06d1      	lsls	r1, r2, #27
 8008580:	bf5f      	itttt	pl
 8008582:	681a      	ldrpl	r2, [r3, #0]
 8008584:	1d11      	addpl	r1, r2, #4
 8008586:	6019      	strpl	r1, [r3, #0]
 8008588:	6817      	ldrpl	r7, [r2, #0]
 800858a:	2600      	movs	r6, #0
 800858c:	69a3      	ldr	r3, [r4, #24]
 800858e:	b1db      	cbz	r3, 80085c8 <_scanf_chars+0x68>
 8008590:	2b01      	cmp	r3, #1
 8008592:	d107      	bne.n	80085a4 <_scanf_chars+0x44>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	6962      	ldr	r2, [r4, #20]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	5cd3      	ldrb	r3, [r2, r3]
 800859c:	b9a3      	cbnz	r3, 80085c8 <_scanf_chars+0x68>
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d132      	bne.n	8008608 <_scanf_chars+0xa8>
 80085a2:	e006      	b.n	80085b2 <_scanf_chars+0x52>
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d007      	beq.n	80085b8 <_scanf_chars+0x58>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	d12d      	bne.n	8008608 <_scanf_chars+0xa8>
 80085ac:	69a3      	ldr	r3, [r4, #24]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d12a      	bne.n	8008608 <_scanf_chars+0xa8>
 80085b2:	2001      	movs	r0, #1
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	f7ff fe08 	bl	80081cc <__locale_ctype_ptr>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	4418      	add	r0, r3
 80085c2:	7843      	ldrb	r3, [r0, #1]
 80085c4:	071b      	lsls	r3, r3, #28
 80085c6:	d4ef      	bmi.n	80085a8 <_scanf_chars+0x48>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	06da      	lsls	r2, r3, #27
 80085cc:	bf5e      	ittt	pl
 80085ce:	682b      	ldrpl	r3, [r5, #0]
 80085d0:	781b      	ldrbpl	r3, [r3, #0]
 80085d2:	703b      	strbpl	r3, [r7, #0]
 80085d4:	682a      	ldr	r2, [r5, #0]
 80085d6:	686b      	ldr	r3, [r5, #4]
 80085d8:	f102 0201 	add.w	r2, r2, #1
 80085dc:	602a      	str	r2, [r5, #0]
 80085de:	68a2      	ldr	r2, [r4, #8]
 80085e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80085e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80085e8:	606b      	str	r3, [r5, #4]
 80085ea:	f106 0601 	add.w	r6, r6, #1
 80085ee:	bf58      	it	pl
 80085f0:	3701      	addpl	r7, #1
 80085f2:	60a2      	str	r2, [r4, #8]
 80085f4:	b142      	cbz	r2, 8008608 <_scanf_chars+0xa8>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dcc8      	bgt.n	800858c <_scanf_chars+0x2c>
 80085fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80085fe:	4629      	mov	r1, r5
 8008600:	4640      	mov	r0, r8
 8008602:	4798      	blx	r3
 8008604:	2800      	cmp	r0, #0
 8008606:	d0c1      	beq.n	800858c <_scanf_chars+0x2c>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	f013 0310 	ands.w	r3, r3, #16
 800860e:	d105      	bne.n	800861c <_scanf_chars+0xbc>
 8008610:	68e2      	ldr	r2, [r4, #12]
 8008612:	3201      	adds	r2, #1
 8008614:	60e2      	str	r2, [r4, #12]
 8008616:	69a2      	ldr	r2, [r4, #24]
 8008618:	b102      	cbz	r2, 800861c <_scanf_chars+0xbc>
 800861a:	703b      	strb	r3, [r7, #0]
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	441e      	add	r6, r3
 8008620:	6126      	str	r6, [r4, #16]
 8008622:	2000      	movs	r0, #0
 8008624:	e7c6      	b.n	80085b4 <_scanf_chars+0x54>
	...

08008628 <_scanf_i>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	469a      	mov	sl, r3
 800862e:	4b74      	ldr	r3, [pc, #464]	; (8008800 <_scanf_i+0x1d8>)
 8008630:	460c      	mov	r4, r1
 8008632:	4683      	mov	fp, r0
 8008634:	4616      	mov	r6, r2
 8008636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800863a:	b087      	sub	sp, #28
 800863c:	ab03      	add	r3, sp, #12
 800863e:	68a7      	ldr	r7, [r4, #8]
 8008640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008644:	4b6f      	ldr	r3, [pc, #444]	; (8008804 <_scanf_i+0x1dc>)
 8008646:	69a1      	ldr	r1, [r4, #24]
 8008648:	4a6f      	ldr	r2, [pc, #444]	; (8008808 <_scanf_i+0x1e0>)
 800864a:	2903      	cmp	r1, #3
 800864c:	bf08      	it	eq
 800864e:	461a      	moveq	r2, r3
 8008650:	1e7b      	subs	r3, r7, #1
 8008652:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008656:	bf84      	itt	hi
 8008658:	f240 135d 	movwhi	r3, #349	; 0x15d
 800865c:	60a3      	strhi	r3, [r4, #8]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	9200      	str	r2, [sp, #0]
 8008662:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008666:	bf88      	it	hi
 8008668:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800866c:	f104 091c 	add.w	r9, r4, #28
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bf8c      	ite	hi
 8008674:	197f      	addhi	r7, r7, r5
 8008676:	2700      	movls	r7, #0
 8008678:	464b      	mov	r3, r9
 800867a:	f04f 0800 	mov.w	r8, #0
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	6831      	ldr	r1, [r6, #0]
 8008682:	ab03      	add	r3, sp, #12
 8008684:	2202      	movs	r2, #2
 8008686:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800868a:	7809      	ldrb	r1, [r1, #0]
 800868c:	f7f7 fdc0 	bl	8000210 <memchr>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	b330      	cbz	r0, 80086e2 <_scanf_i+0xba>
 8008694:	f1b8 0f01 	cmp.w	r8, #1
 8008698:	d15a      	bne.n	8008750 <_scanf_i+0x128>
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	b92a      	cbnz	r2, 80086aa <_scanf_i+0x82>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	2108      	movs	r1, #8
 80086a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a6:	6061      	str	r1, [r4, #4]
 80086a8:	6022      	str	r2, [r4, #0]
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	68a2      	ldr	r2, [r4, #8]
 80086b4:	1e51      	subs	r1, r2, #1
 80086b6:	60a1      	str	r1, [r4, #8]
 80086b8:	b19a      	cbz	r2, 80086e2 <_scanf_i+0xba>
 80086ba:	6832      	ldr	r2, [r6, #0]
 80086bc:	1c51      	adds	r1, r2, #1
 80086be:	6031      	str	r1, [r6, #0]
 80086c0:	7812      	ldrb	r2, [r2, #0]
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	1c5d      	adds	r5, r3, #1
 80086c6:	6873      	ldr	r3, [r6, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	6073      	str	r3, [r6, #4]
 80086ce:	dc07      	bgt.n	80086e0 <_scanf_i+0xb8>
 80086d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086d4:	4631      	mov	r1, r6
 80086d6:	4658      	mov	r0, fp
 80086d8:	4798      	blx	r3
 80086da:	2800      	cmp	r0, #0
 80086dc:	f040 8086 	bne.w	80087ec <_scanf_i+0x1c4>
 80086e0:	462b      	mov	r3, r5
 80086e2:	f108 0801 	add.w	r8, r8, #1
 80086e6:	f1b8 0f03 	cmp.w	r8, #3
 80086ea:	d1c8      	bne.n	800867e <_scanf_i+0x56>
 80086ec:	6862      	ldr	r2, [r4, #4]
 80086ee:	b90a      	cbnz	r2, 80086f4 <_scanf_i+0xcc>
 80086f0:	220a      	movs	r2, #10
 80086f2:	6062      	str	r2, [r4, #4]
 80086f4:	6862      	ldr	r2, [r4, #4]
 80086f6:	4945      	ldr	r1, [pc, #276]	; (800880c <_scanf_i+0x1e4>)
 80086f8:	6960      	ldr	r0, [r4, #20]
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	1a89      	subs	r1, r1, r2
 80086fe:	f000 f887 	bl	8008810 <__sccl>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	f04f 0800 	mov.w	r8, #0
 8008708:	461d      	mov	r5, r3
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d03a      	beq.n	8008788 <_scanf_i+0x160>
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	6960      	ldr	r0, [r4, #20]
 8008716:	f891 c000 	ldrb.w	ip, [r1]
 800871a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800871e:	2800      	cmp	r0, #0
 8008720:	d032      	beq.n	8008788 <_scanf_i+0x160>
 8008722:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008726:	d121      	bne.n	800876c <_scanf_i+0x144>
 8008728:	0510      	lsls	r0, r2, #20
 800872a:	d51f      	bpl.n	800876c <_scanf_i+0x144>
 800872c:	f108 0801 	add.w	r8, r8, #1
 8008730:	b117      	cbz	r7, 8008738 <_scanf_i+0x110>
 8008732:	3301      	adds	r3, #1
 8008734:	3f01      	subs	r7, #1
 8008736:	60a3      	str	r3, [r4, #8]
 8008738:	6873      	ldr	r3, [r6, #4]
 800873a:	3b01      	subs	r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	6073      	str	r3, [r6, #4]
 8008740:	dd1b      	ble.n	800877a <_scanf_i+0x152>
 8008742:	6833      	ldr	r3, [r6, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	6033      	str	r3, [r6, #0]
 8008748:	68a3      	ldr	r3, [r4, #8]
 800874a:	3b01      	subs	r3, #1
 800874c:	60a3      	str	r3, [r4, #8]
 800874e:	e7dc      	b.n	800870a <_scanf_i+0xe2>
 8008750:	f1b8 0f02 	cmp.w	r8, #2
 8008754:	d1ad      	bne.n	80086b2 <_scanf_i+0x8a>
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800875c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008760:	d1bf      	bne.n	80086e2 <_scanf_i+0xba>
 8008762:	2110      	movs	r1, #16
 8008764:	6061      	str	r1, [r4, #4]
 8008766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800876a:	e7a1      	b.n	80086b0 <_scanf_i+0x88>
 800876c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	780b      	ldrb	r3, [r1, #0]
 8008774:	702b      	strb	r3, [r5, #0]
 8008776:	3501      	adds	r5, #1
 8008778:	e7de      	b.n	8008738 <_scanf_i+0x110>
 800877a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800877e:	4631      	mov	r1, r6
 8008780:	4658      	mov	r0, fp
 8008782:	4798      	blx	r3
 8008784:	2800      	cmp	r0, #0
 8008786:	d0df      	beq.n	8008748 <_scanf_i+0x120>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	05d9      	lsls	r1, r3, #23
 800878c:	d50c      	bpl.n	80087a8 <_scanf_i+0x180>
 800878e:	454d      	cmp	r5, r9
 8008790:	d908      	bls.n	80087a4 <_scanf_i+0x17c>
 8008792:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008796:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800879a:	4632      	mov	r2, r6
 800879c:	4658      	mov	r0, fp
 800879e:	4798      	blx	r3
 80087a0:	1e6f      	subs	r7, r5, #1
 80087a2:	463d      	mov	r5, r7
 80087a4:	454d      	cmp	r5, r9
 80087a6:	d029      	beq.n	80087fc <_scanf_i+0x1d4>
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	f012 0210 	ands.w	r2, r2, #16
 80087ae:	d113      	bne.n	80087d8 <_scanf_i+0x1b0>
 80087b0:	702a      	strb	r2, [r5, #0]
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	9e00      	ldr	r6, [sp, #0]
 80087b6:	4649      	mov	r1, r9
 80087b8:	4658      	mov	r0, fp
 80087ba:	47b0      	blx	r6
 80087bc:	f8da 3000 	ldr.w	r3, [sl]
 80087c0:	6821      	ldr	r1, [r4, #0]
 80087c2:	1d1a      	adds	r2, r3, #4
 80087c4:	f8ca 2000 	str.w	r2, [sl]
 80087c8:	f011 0f20 	tst.w	r1, #32
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	d010      	beq.n	80087f2 <_scanf_i+0x1ca>
 80087d0:	6018      	str	r0, [r3, #0]
 80087d2:	68e3      	ldr	r3, [r4, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60e3      	str	r3, [r4, #12]
 80087d8:	eba5 0509 	sub.w	r5, r5, r9
 80087dc:	44a8      	add	r8, r5
 80087de:	6925      	ldr	r5, [r4, #16]
 80087e0:	4445      	add	r5, r8
 80087e2:	6125      	str	r5, [r4, #16]
 80087e4:	2000      	movs	r0, #0
 80087e6:	b007      	add	sp, #28
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	f04f 0800 	mov.w	r8, #0
 80087f0:	e7ca      	b.n	8008788 <_scanf_i+0x160>
 80087f2:	07ca      	lsls	r2, r1, #31
 80087f4:	bf4c      	ite	mi
 80087f6:	8018      	strhmi	r0, [r3, #0]
 80087f8:	6018      	strpl	r0, [r3, #0]
 80087fa:	e7ea      	b.n	80087d2 <_scanf_i+0x1aa>
 80087fc:	2001      	movs	r0, #1
 80087fe:	e7f2      	b.n	80087e6 <_scanf_i+0x1be>
 8008800:	08008aa8 	.word	0x08008aa8
 8008804:	0800896d 	.word	0x0800896d
 8008808:	08008171 	.word	0x08008171
 800880c:	08008eb2 	.word	0x08008eb2

08008810 <__sccl>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	780b      	ldrb	r3, [r1, #0]
 8008814:	2b5e      	cmp	r3, #94	; 0x5e
 8008816:	bf13      	iteet	ne
 8008818:	1c4a      	addne	r2, r1, #1
 800881a:	1c8a      	addeq	r2, r1, #2
 800881c:	784b      	ldrbeq	r3, [r1, #1]
 800881e:	2100      	movne	r1, #0
 8008820:	bf08      	it	eq
 8008822:	2101      	moveq	r1, #1
 8008824:	1e44      	subs	r4, r0, #1
 8008826:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800882a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800882e:	42ac      	cmp	r4, r5
 8008830:	d1fb      	bne.n	800882a <__sccl+0x1a>
 8008832:	b913      	cbnz	r3, 800883a <__sccl+0x2a>
 8008834:	3a01      	subs	r2, #1
 8008836:	4610      	mov	r0, r2
 8008838:	bd70      	pop	{r4, r5, r6, pc}
 800883a:	f081 0401 	eor.w	r4, r1, #1
 800883e:	54c4      	strb	r4, [r0, r3]
 8008840:	1c51      	adds	r1, r2, #1
 8008842:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008846:	2d2d      	cmp	r5, #45	; 0x2d
 8008848:	f101 36ff 	add.w	r6, r1, #4294967295
 800884c:	460a      	mov	r2, r1
 800884e:	d006      	beq.n	800885e <__sccl+0x4e>
 8008850:	2d5d      	cmp	r5, #93	; 0x5d
 8008852:	d0f0      	beq.n	8008836 <__sccl+0x26>
 8008854:	b90d      	cbnz	r5, 800885a <__sccl+0x4a>
 8008856:	4632      	mov	r2, r6
 8008858:	e7ed      	b.n	8008836 <__sccl+0x26>
 800885a:	462b      	mov	r3, r5
 800885c:	e7ef      	b.n	800883e <__sccl+0x2e>
 800885e:	780e      	ldrb	r6, [r1, #0]
 8008860:	2e5d      	cmp	r6, #93	; 0x5d
 8008862:	d0fa      	beq.n	800885a <__sccl+0x4a>
 8008864:	42b3      	cmp	r3, r6
 8008866:	dcf8      	bgt.n	800885a <__sccl+0x4a>
 8008868:	3301      	adds	r3, #1
 800886a:	429e      	cmp	r6, r3
 800886c:	54c4      	strb	r4, [r0, r3]
 800886e:	dcfb      	bgt.n	8008868 <__sccl+0x58>
 8008870:	3102      	adds	r1, #2
 8008872:	e7e6      	b.n	8008842 <__sccl+0x32>

08008874 <_strtol_l.isra.0>:
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	4680      	mov	r8, r0
 800887a:	4689      	mov	r9, r1
 800887c:	4692      	mov	sl, r2
 800887e:	461e      	mov	r6, r3
 8008880:	460f      	mov	r7, r1
 8008882:	463d      	mov	r5, r7
 8008884:	9808      	ldr	r0, [sp, #32]
 8008886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800888a:	f7ff fc9b 	bl	80081c4 <__locale_ctype_ptr_l>
 800888e:	4420      	add	r0, r4
 8008890:	7843      	ldrb	r3, [r0, #1]
 8008892:	f013 0308 	ands.w	r3, r3, #8
 8008896:	d132      	bne.n	80088fe <_strtol_l.isra.0+0x8a>
 8008898:	2c2d      	cmp	r4, #45	; 0x2d
 800889a:	d132      	bne.n	8008902 <_strtol_l.isra.0+0x8e>
 800889c:	787c      	ldrb	r4, [r7, #1]
 800889e:	1cbd      	adds	r5, r7, #2
 80088a0:	2201      	movs	r2, #1
 80088a2:	2e00      	cmp	r6, #0
 80088a4:	d05d      	beq.n	8008962 <_strtol_l.isra.0+0xee>
 80088a6:	2e10      	cmp	r6, #16
 80088a8:	d109      	bne.n	80088be <_strtol_l.isra.0+0x4a>
 80088aa:	2c30      	cmp	r4, #48	; 0x30
 80088ac:	d107      	bne.n	80088be <_strtol_l.isra.0+0x4a>
 80088ae:	782b      	ldrb	r3, [r5, #0]
 80088b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088b4:	2b58      	cmp	r3, #88	; 0x58
 80088b6:	d14f      	bne.n	8008958 <_strtol_l.isra.0+0xe4>
 80088b8:	786c      	ldrb	r4, [r5, #1]
 80088ba:	2610      	movs	r6, #16
 80088bc:	3502      	adds	r5, #2
 80088be:	2a00      	cmp	r2, #0
 80088c0:	bf14      	ite	ne
 80088c2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80088c6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80088ca:	2700      	movs	r7, #0
 80088cc:	fbb1 fcf6 	udiv	ip, r1, r6
 80088d0:	4638      	mov	r0, r7
 80088d2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80088d6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80088da:	2b09      	cmp	r3, #9
 80088dc:	d817      	bhi.n	800890e <_strtol_l.isra.0+0x9a>
 80088de:	461c      	mov	r4, r3
 80088e0:	42a6      	cmp	r6, r4
 80088e2:	dd23      	ble.n	800892c <_strtol_l.isra.0+0xb8>
 80088e4:	1c7b      	adds	r3, r7, #1
 80088e6:	d007      	beq.n	80088f8 <_strtol_l.isra.0+0x84>
 80088e8:	4584      	cmp	ip, r0
 80088ea:	d31c      	bcc.n	8008926 <_strtol_l.isra.0+0xb2>
 80088ec:	d101      	bne.n	80088f2 <_strtol_l.isra.0+0x7e>
 80088ee:	45a6      	cmp	lr, r4
 80088f0:	db19      	blt.n	8008926 <_strtol_l.isra.0+0xb2>
 80088f2:	fb00 4006 	mla	r0, r0, r6, r4
 80088f6:	2701      	movs	r7, #1
 80088f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088fc:	e7eb      	b.n	80088d6 <_strtol_l.isra.0+0x62>
 80088fe:	462f      	mov	r7, r5
 8008900:	e7bf      	b.n	8008882 <_strtol_l.isra.0+0xe>
 8008902:	2c2b      	cmp	r4, #43	; 0x2b
 8008904:	bf04      	itt	eq
 8008906:	1cbd      	addeq	r5, r7, #2
 8008908:	787c      	ldrbeq	r4, [r7, #1]
 800890a:	461a      	mov	r2, r3
 800890c:	e7c9      	b.n	80088a2 <_strtol_l.isra.0+0x2e>
 800890e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008912:	2b19      	cmp	r3, #25
 8008914:	d801      	bhi.n	800891a <_strtol_l.isra.0+0xa6>
 8008916:	3c37      	subs	r4, #55	; 0x37
 8008918:	e7e2      	b.n	80088e0 <_strtol_l.isra.0+0x6c>
 800891a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800891e:	2b19      	cmp	r3, #25
 8008920:	d804      	bhi.n	800892c <_strtol_l.isra.0+0xb8>
 8008922:	3c57      	subs	r4, #87	; 0x57
 8008924:	e7dc      	b.n	80088e0 <_strtol_l.isra.0+0x6c>
 8008926:	f04f 37ff 	mov.w	r7, #4294967295
 800892a:	e7e5      	b.n	80088f8 <_strtol_l.isra.0+0x84>
 800892c:	1c7b      	adds	r3, r7, #1
 800892e:	d108      	bne.n	8008942 <_strtol_l.isra.0+0xce>
 8008930:	2322      	movs	r3, #34	; 0x22
 8008932:	f8c8 3000 	str.w	r3, [r8]
 8008936:	4608      	mov	r0, r1
 8008938:	f1ba 0f00 	cmp.w	sl, #0
 800893c:	d107      	bne.n	800894e <_strtol_l.isra.0+0xda>
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	b102      	cbz	r2, 8008946 <_strtol_l.isra.0+0xd2>
 8008944:	4240      	negs	r0, r0
 8008946:	f1ba 0f00 	cmp.w	sl, #0
 800894a:	d0f8      	beq.n	800893e <_strtol_l.isra.0+0xca>
 800894c:	b10f      	cbz	r7, 8008952 <_strtol_l.isra.0+0xde>
 800894e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008952:	f8ca 9000 	str.w	r9, [sl]
 8008956:	e7f2      	b.n	800893e <_strtol_l.isra.0+0xca>
 8008958:	2430      	movs	r4, #48	; 0x30
 800895a:	2e00      	cmp	r6, #0
 800895c:	d1af      	bne.n	80088be <_strtol_l.isra.0+0x4a>
 800895e:	2608      	movs	r6, #8
 8008960:	e7ad      	b.n	80088be <_strtol_l.isra.0+0x4a>
 8008962:	2c30      	cmp	r4, #48	; 0x30
 8008964:	d0a3      	beq.n	80088ae <_strtol_l.isra.0+0x3a>
 8008966:	260a      	movs	r6, #10
 8008968:	e7a9      	b.n	80088be <_strtol_l.isra.0+0x4a>
	...

0800896c <_strtol_r>:
 800896c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800896e:	4c06      	ldr	r4, [pc, #24]	; (8008988 <_strtol_r+0x1c>)
 8008970:	4d06      	ldr	r5, [pc, #24]	; (800898c <_strtol_r+0x20>)
 8008972:	6824      	ldr	r4, [r4, #0]
 8008974:	6a24      	ldr	r4, [r4, #32]
 8008976:	2c00      	cmp	r4, #0
 8008978:	bf08      	it	eq
 800897a:	462c      	moveq	r4, r5
 800897c:	9400      	str	r4, [sp, #0]
 800897e:	f7ff ff79 	bl	8008874 <_strtol_l.isra.0>
 8008982:	b003      	add	sp, #12
 8008984:	bd30      	pop	{r4, r5, pc}
 8008986:	bf00      	nop
 8008988:	20000010 	.word	0x20000010
 800898c:	200000d8 	.word	0x200000d8

08008990 <__submore>:
 8008990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800899c:	4299      	cmp	r1, r3
 800899e:	d11d      	bne.n	80089dc <__submore+0x4c>
 80089a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089a4:	f7ff f82e 	bl	8007a04 <_malloc_r>
 80089a8:	b918      	cbnz	r0, 80089b2 <__submore+0x22>
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
 80089ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80089b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80089bc:	6360      	str	r0, [r4, #52]	; 0x34
 80089be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80089c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80089c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80089ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80089d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80089d6:	6020      	str	r0, [r4, #0]
 80089d8:	2000      	movs	r0, #0
 80089da:	e7e8      	b.n	80089ae <__submore+0x1e>
 80089dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80089de:	0077      	lsls	r7, r6, #1
 80089e0:	463a      	mov	r2, r7
 80089e2:	f000 f827 	bl	8008a34 <_realloc_r>
 80089e6:	4605      	mov	r5, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d0de      	beq.n	80089aa <__submore+0x1a>
 80089ec:	eb00 0806 	add.w	r8, r0, r6
 80089f0:	4601      	mov	r1, r0
 80089f2:	4632      	mov	r2, r6
 80089f4:	4640      	mov	r0, r8
 80089f6:	f000 f812 	bl	8008a1e <memcpy>
 80089fa:	f8c4 8000 	str.w	r8, [r4]
 80089fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008a02:	e7e9      	b.n	80089d8 <__submore+0x48>

08008a04 <__ascii_wctomb>:
 8008a04:	b149      	cbz	r1, 8008a1a <__ascii_wctomb+0x16>
 8008a06:	2aff      	cmp	r2, #255	; 0xff
 8008a08:	bf85      	ittet	hi
 8008a0a:	238a      	movhi	r3, #138	; 0x8a
 8008a0c:	6003      	strhi	r3, [r0, #0]
 8008a0e:	700a      	strbls	r2, [r1, #0]
 8008a10:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a14:	bf98      	it	ls
 8008a16:	2001      	movls	r0, #1
 8008a18:	4770      	bx	lr
 8008a1a:	4608      	mov	r0, r1
 8008a1c:	4770      	bx	lr

08008a1e <memcpy>:
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	1e43      	subs	r3, r0, #1
 8008a22:	440a      	add	r2, r1
 8008a24:	4291      	cmp	r1, r2
 8008a26:	d100      	bne.n	8008a2a <memcpy+0xc>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a32:	e7f7      	b.n	8008a24 <memcpy+0x6>

08008a34 <_realloc_r>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	4607      	mov	r7, r0
 8008a38:	4614      	mov	r4, r2
 8008a3a:	460e      	mov	r6, r1
 8008a3c:	b921      	cbnz	r1, 8008a48 <_realloc_r+0x14>
 8008a3e:	4611      	mov	r1, r2
 8008a40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a44:	f7fe bfde 	b.w	8007a04 <_malloc_r>
 8008a48:	b922      	cbnz	r2, 8008a54 <_realloc_r+0x20>
 8008a4a:	f7fe ff8d 	bl	8007968 <_free_r>
 8008a4e:	4625      	mov	r5, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a54:	f000 f814 	bl	8008a80 <_malloc_usable_size_r>
 8008a58:	42a0      	cmp	r0, r4
 8008a5a:	d20f      	bcs.n	8008a7c <_realloc_r+0x48>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f7fe ffd0 	bl	8007a04 <_malloc_r>
 8008a64:	4605      	mov	r5, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d0f2      	beq.n	8008a50 <_realloc_r+0x1c>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	f7ff ffd6 	bl	8008a1e <memcpy>
 8008a72:	4631      	mov	r1, r6
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7fe ff77 	bl	8007968 <_free_r>
 8008a7a:	e7e9      	b.n	8008a50 <_realloc_r+0x1c>
 8008a7c:	4635      	mov	r5, r6
 8008a7e:	e7e7      	b.n	8008a50 <_realloc_r+0x1c>

08008a80 <_malloc_usable_size_r>:
 8008a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a84:	1f18      	subs	r0, r3, #4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bfbc      	itt	lt
 8008a8a:	580b      	ldrlt	r3, [r1, r0]
 8008a8c:	18c0      	addlt	r0, r0, r3
 8008a8e:	4770      	bx	lr

08008a90 <_init>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr

08008a9c <_fini>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr
