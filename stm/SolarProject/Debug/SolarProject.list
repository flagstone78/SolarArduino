
SolarProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000302c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003250  08003250  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  080032d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080032d0  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d59  00000000  00000000  0002c45d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002ee68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000037dc  00000000  00000000  0002fa58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098fc  00000000  00000000  00033234  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088e76  00000000  00000000  0003cb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c59a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  000c5a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080031a8 	.word	0x080031a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080031a8 	.word	0x080031a8

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_uldivmod>:
 8000a10:	b953      	cbnz	r3, 8000a28 <__aeabi_uldivmod+0x18>
 8000a12:	b94a      	cbnz	r2, 8000a28 <__aeabi_uldivmod+0x18>
 8000a14:	2900      	cmp	r1, #0
 8000a16:	bf08      	it	eq
 8000a18:	2800      	cmpeq	r0, #0
 8000a1a:	bf1c      	itt	ne
 8000a1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a20:	f04f 30ff 	movne.w	r0, #4294967295
 8000a24:	f000 b972 	b.w	8000d0c <__aeabi_idiv0>
 8000a28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a30:	f000 f806 	bl	8000a40 <__udivmoddi4>
 8000a34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a3c:	b004      	add	sp, #16
 8000a3e:	4770      	bx	lr

08000a40 <__udivmoddi4>:
 8000a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a44:	9e08      	ldr	r6, [sp, #32]
 8000a46:	4604      	mov	r4, r0
 8000a48:	4688      	mov	r8, r1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d14b      	bne.n	8000ae6 <__udivmoddi4+0xa6>
 8000a4e:	428a      	cmp	r2, r1
 8000a50:	4615      	mov	r5, r2
 8000a52:	d967      	bls.n	8000b24 <__udivmoddi4+0xe4>
 8000a54:	fab2 f282 	clz	r2, r2
 8000a58:	b14a      	cbz	r2, 8000a6e <__udivmoddi4+0x2e>
 8000a5a:	f1c2 0720 	rsb	r7, r2, #32
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	fa20 f707 	lsr.w	r7, r0, r7
 8000a66:	4095      	lsls	r5, r2
 8000a68:	ea47 0803 	orr.w	r8, r7, r3
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a72:	0c23      	lsrs	r3, r4, #16
 8000a74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a78:	fa1f fc85 	uxth.w	ip, r5
 8000a7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a84:	fb07 f10c 	mul.w	r1, r7, ip
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d909      	bls.n	8000aa0 <__udivmoddi4+0x60>
 8000a8c:	18eb      	adds	r3, r5, r3
 8000a8e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a92:	f080 811b 	bcs.w	8000ccc <__udivmoddi4+0x28c>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 8118 	bls.w	8000ccc <__udivmoddi4+0x28c>
 8000a9c:	3f02      	subs	r7, #2
 8000a9e:	442b      	add	r3, r5
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab4:	45a4      	cmp	ip, r4
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x8c>
 8000ab8:	192c      	adds	r4, r5, r4
 8000aba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x290>
 8000ac2:	45a4      	cmp	ip, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x290>
 8000ac8:	3802      	subs	r0, #2
 8000aca:	442c      	add	r4, r5
 8000acc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ad0:	eba4 040c 	sub.w	r4, r4, ip
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	b11e      	cbz	r6, 8000ae0 <__udivmoddi4+0xa0>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae0:	4639      	mov	r1, r7
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xbe>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	f000 80eb 	beq.w	8000cc6 <__udivmoddi4+0x286>
 8000af0:	2700      	movs	r7, #0
 8000af2:	e9c6 0100 	strd	r0, r1, [r6]
 8000af6:	4638      	mov	r0, r7
 8000af8:	4639      	mov	r1, r7
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f783 	clz	r7, r3
 8000b02:	2f00      	cmp	r7, #0
 8000b04:	d147      	bne.n	8000b96 <__udivmoddi4+0x156>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd0>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80fa 	bhi.w	8000d04 <__udivmoddi4+0x2c4>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	4698      	mov	r8, r3
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa0>
 8000b1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa0>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xe8>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 808f 	bne.w	8000c50 <__udivmoddi4+0x210>
 8000b32:	1b49      	subs	r1, r1, r5
 8000b34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b38:	fa1f f885 	uxth.w	r8, r5
 8000b3c:	2701      	movs	r7, #1
 8000b3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d907      	bls.n	8000b64 <__udivmoddi4+0x124>
 8000b54:	18eb      	adds	r3, r5, r3
 8000b56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b5a:	d202      	bcs.n	8000b62 <__udivmoddi4+0x122>
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	f200 80cd 	bhi.w	8000cfc <__udivmoddi4+0x2bc>
 8000b62:	4684      	mov	ip, r0
 8000b64:	1a59      	subs	r1, r3, r1
 8000b66:	b2a3      	uxth	r3, r4
 8000b68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b74:	fb08 f800 	mul.w	r8, r8, r0
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	d907      	bls.n	8000b8c <__udivmoddi4+0x14c>
 8000b7c:	192c      	adds	r4, r5, r4
 8000b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x14a>
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	f200 80b6 	bhi.w	8000cf6 <__udivmoddi4+0x2b6>
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	eba4 0408 	sub.w	r4, r4, r8
 8000b90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b94:	e79f      	b.n	8000ad6 <__udivmoddi4+0x96>
 8000b96:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9a:	40bb      	lsls	r3, r7
 8000b9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ba0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ba8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb4:	4325      	orrs	r5, r4
 8000bb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bba:	0c2c      	lsrs	r4, r5, #16
 8000bbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000bc0:	fa1f fa8e 	uxth.w	sl, lr
 8000bc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	fa02 f207 	lsl.w	r2, r2, r7
 8000bd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000bd6:	d90b      	bls.n	8000bf0 <__udivmoddi4+0x1b0>
 8000bd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000bdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be0:	f080 8087 	bcs.w	8000cf2 <__udivmoddi4+0x2b2>
 8000be4:	429c      	cmp	r4, r3
 8000be6:	f240 8084 	bls.w	8000cf2 <__udivmoddi4+0x2b2>
 8000bea:	f1a9 0902 	sub.w	r9, r9, #2
 8000bee:	4473      	add	r3, lr
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	b2ad      	uxth	r5, r5
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c04:	45a2      	cmp	sl, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x1da>
 8000c08:	eb1e 0404 	adds.w	r4, lr, r4
 8000c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c10:	d26b      	bcs.n	8000cea <__udivmoddi4+0x2aa>
 8000c12:	45a2      	cmp	sl, r4
 8000c14:	d969      	bls.n	8000cea <__udivmoddi4+0x2aa>
 8000c16:	3802      	subs	r0, #2
 8000c18:	4474      	add	r4, lr
 8000c1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c22:	eba4 040a 	sub.w	r4, r4, sl
 8000c26:	454c      	cmp	r4, r9
 8000c28:	46c2      	mov	sl, r8
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	d354      	bcc.n	8000cd8 <__udivmoddi4+0x298>
 8000c2e:	d051      	beq.n	8000cd4 <__udivmoddi4+0x294>
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	d069      	beq.n	8000d08 <__udivmoddi4+0x2c8>
 8000c34:	ebb1 050a 	subs.w	r5, r1, sl
 8000c38:	eb64 0403 	sbc.w	r4, r4, r3
 8000c3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c40:	40fd      	lsrs	r5, r7
 8000c42:	40fc      	lsrs	r4, r7
 8000c44:	ea4c 0505 	orr.w	r5, ip, r5
 8000c48:	e9c6 5400 	strd	r5, r4, [r6]
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	e747      	b.n	8000ae0 <__udivmoddi4+0xa0>
 8000c50:	f1c2 0320 	rsb	r3, r2, #32
 8000c54:	fa20 f703 	lsr.w	r7, r0, r3
 8000c58:	4095      	lsls	r5, r2
 8000c5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c66:	4338      	orrs	r0, r7
 8000c68:	0c01      	lsrs	r1, r0, #16
 8000c6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c6e:	fa1f f885 	uxth.w	r8, r5
 8000c72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7a:	fb07 f308 	mul.w	r3, r7, r8
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	fa04 f402 	lsl.w	r4, r4, r2
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x256>
 8000c86:	1869      	adds	r1, r5, r1
 8000c88:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c8c:	d22f      	bcs.n	8000cee <__udivmoddi4+0x2ae>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d92d      	bls.n	8000cee <__udivmoddi4+0x2ae>
 8000c92:	3f02      	subs	r7, #2
 8000c94:	4429      	add	r1, r5
 8000c96:	1acb      	subs	r3, r1, r3
 8000c98:	b281      	uxth	r1, r0
 8000c9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca6:	fb00 f308 	mul.w	r3, r0, r8
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x27e>
 8000cae:	1869      	adds	r1, r5, r1
 8000cb0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cb4:	d217      	bcs.n	8000ce6 <__udivmoddi4+0x2a6>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d915      	bls.n	8000ce6 <__udivmoddi4+0x2a6>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4429      	add	r1, r5
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc4:	e73b      	b.n	8000b3e <__udivmoddi4+0xfe>
 8000cc6:	4637      	mov	r7, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e709      	b.n	8000ae0 <__udivmoddi4+0xa0>
 8000ccc:	4607      	mov	r7, r0
 8000cce:	e6e7      	b.n	8000aa0 <__udivmoddi4+0x60>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x8c>
 8000cd4:	4541      	cmp	r1, r8
 8000cd6:	d2ab      	bcs.n	8000c30 <__udivmoddi4+0x1f0>
 8000cd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cdc:	eb69 020e 	sbc.w	r2, r9, lr
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	e7a4      	b.n	8000c30 <__udivmoddi4+0x1f0>
 8000ce6:	4660      	mov	r0, ip
 8000ce8:	e7e9      	b.n	8000cbe <__udivmoddi4+0x27e>
 8000cea:	4618      	mov	r0, r3
 8000cec:	e795      	b.n	8000c1a <__udivmoddi4+0x1da>
 8000cee:	4667      	mov	r7, ip
 8000cf0:	e7d1      	b.n	8000c96 <__udivmoddi4+0x256>
 8000cf2:	4681      	mov	r9, r0
 8000cf4:	e77c      	b.n	8000bf0 <__udivmoddi4+0x1b0>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	442c      	add	r4, r5
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0x14c>
 8000cfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d00:	442b      	add	r3, r5
 8000d02:	e72f      	b.n	8000b64 <__udivmoddi4+0x124>
 8000d04:	4638      	mov	r0, r7
 8000d06:	e708      	b.n	8000b1a <__udivmoddi4+0xda>
 8000d08:	4637      	mov	r7, r6
 8000d0a:	e6e9      	b.n	8000ae0 <__udivmoddi4+0xa0>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKt>:
 *      Author: Duane Mathias
 */

#include "Stepper.h"

Stepper::Stepper(const GPIO_TypeDef* const gpioPorts[3], const uint16_t gpioPins[3]):ports(gpioPorts),pins(gpioPins) {
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKt+0x38>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
	currentStep = 0;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
	targetStep = 0;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
}
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	080031c8 	.word	0x080031c8

08000d4c <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <_ZN7StepperD1Ev+0x1c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	080031c8 	.word	0x080031c8

08000d6c <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
}
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffe9 	bl	8000d4c <_ZN7StepperD1Ev>
 8000d7a:	2114      	movs	r1, #20
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f002 f98b 	bl	8003098 <_ZdlPvj>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_ZN7Stepper6setDirE13GPIO_PinState>:

void Stepper::setDir(GPIO_PinState dir){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef*)ports[1],pins[1],dir);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	3302      	adds	r3, #2
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f000 ffe8 	bl	8001d80 <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_ZN7Stepper4stepEv>:

void Stepper::step() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	bool dirState = ((ports[1]->ODR & pins[1]) == pins[1]);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6892      	ldr	r2, [r2, #8]
 8000dce:	3202      	adds	r2, #2
 8000dd0:	8812      	ldrh	r2, [r2, #0]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6892      	ldr	r2, [r2, #8]
 8000dd8:	3202      	adds	r2, #2
 8000dda:	8812      	ldrh	r2, [r2, #0]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	bf0c      	ite	eq
 8000de0:	2301      	moveq	r3, #1
 8000de2:	2300      	movne	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if (dirState){
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00f      	beq.n	8000e0c <_ZN7Stepper4stepEv+0x54>
		currentStep += 1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60da      	str	r2, [r3, #12]
		HAL_GPIO_TogglePin((GPIO_TypeDef*) ports[0], pins[0]);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4610      	mov	r0, r2
 8000e06:	f000 ffd4 	bl	8001db2 <HAL_GPIO_TogglePin>
	} else if(!dirState){
		currentStep -= 1;
		HAL_GPIO_TogglePin((GPIO_TypeDef*)ports[0], pins[0]);
	}
}
 8000e0a:	e014      	b.n	8000e36 <_ZN7Stepper4stepEv+0x7e>
	} else if(!dirState){
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f083 0301 	eor.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00e      	beq.n	8000e36 <_ZN7Stepper4stepEv+0x7e>
		currentStep -= 1;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	1e5a      	subs	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60da      	str	r2, [r3, #12]
		HAL_GPIO_TogglePin((GPIO_TypeDef*)ports[0], pins[0]);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4610      	mov	r0, r2
 8000e32:	f000 ffbe 	bl	8001db2 <HAL_GPIO_TogglePin>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_ZN7Stepper6updateEv>:

void Stepper::update(){
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	setDir((GPIO_PinState)(currentStep < targetStep));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	bfb4      	ite	lt
 8000e52:	2301      	movlt	r3, #1
 8000e54:	2300      	movge	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff96 	bl	8000d8c <_ZN7Stepper6setDirE13GPIO_PinState>
	if(currentStep!=targetStep) step();
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d002      	beq.n	8000e72 <_ZN7Stepper6updateEv+0x34>
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ffa3 	bl	8000db8 <_ZN7Stepper4stepEv>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <_ZN7Stepper7setFreqEj>:

void Stepper::setFreq(unsigned int Hz){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	if(Hz < 5000){
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d806      	bhi.n	8000e9e <_ZN7Stepper7setFreqEj+0x22>
		TIM1->ARR = 65535/Hz;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <_ZN7Stepper7setFreqEj+0x30>)
 8000e92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40010000 	.word	0x40010000

08000eb0 <_ZN7Stepper9setTargetEi>:

void Stepper::setTarget(int pos){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	targetStep=pos;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	611a      	str	r2, [r3, #16]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_ZN7Stepper11getPositionEv>:

unsigned int Stepper::getPosition(){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	return currentStep;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKt>:
 *      Author: Duane Mathias
 */

#include "absEncoder.h"

absEncoder::absEncoder(const GPIO_TypeDef* const gpioPorts[10], const uint16_t gpioPins[10]):ports(gpioPorts),pins(gpioPins) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKt+0x2c>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	609a      	str	r2, [r3, #8]

}
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	080031d8 	.word	0x080031d8

08000f14 <_ZN10absEncoderD1Ev>:

absEncoder::~absEncoder() {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <_ZN10absEncoderD1Ev+0x1c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	080031d8 	.word	0x080031d8

08000f34 <_ZN10absEncoderD0Ev>:
absEncoder::~absEncoder() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
}
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffe9 	bl	8000f14 <_ZN10absEncoderD1Ev>
 8000f42:	210c      	movs	r1, #12
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f002 f8a7 	bl	8003098 <_ZdlPvj>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_ZN10absEncoder11positionRawEv>:

uint16_t absEncoder::positionRaw(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	// read all gpio at once
	uint16_t a = GPIOA->IDR;
 8000f5c:	4b30      	ldr	r3, [pc, #192]	; (8001020 <_ZN10absEncoder11positionRawEv+0xcc>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	81fb      	strh	r3, [r7, #14]
	uint16_t b = GPIOB->IDR;
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <_ZN10absEncoder11positionRawEv+0xd0>)
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	81bb      	strh	r3, [r7, #12]
	uint16_t c = GPIOC->IDR;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <_ZN10absEncoder11positionRawEv+0xd4>)
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	817b      	strh	r3, [r7, #10]

	//construct greycode
	uint16_t grey = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	82fb      	strh	r3, [r7, #22]
	uint16_t p = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	82bb      	strh	r3, [r7, #20]
	uint8_t bit = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	727b      	strb	r3, [r7, #9]
	for(int i = 0; i<10; i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	dc3d      	bgt.n	8001000 <_ZN10absEncoder11positionRawEv+0xac>
		if(ports[i]==GPIOA){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a23      	ldr	r2, [pc, #140]	; (8001020 <_ZN10absEncoder11positionRawEv+0xcc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d102      	bne.n	8000f9c <_ZN10absEncoder11positionRawEv+0x48>
			p = a;
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	82bb      	strh	r3, [r7, #20]
 8000f9a:	e016      	b.n	8000fca <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOB){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <_ZN10absEncoder11positionRawEv+0xd0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d102      	bne.n	8000fb4 <_ZN10absEncoder11positionRawEv+0x60>
			p = b;
 8000fae:	89bb      	ldrh	r3, [r7, #12]
 8000fb0:	82bb      	strh	r3, [r7, #20]
 8000fb2:	e00a      	b.n	8000fca <_ZN10absEncoder11positionRawEv+0x76>
		}else if(ports[i]==GPIOC){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <_ZN10absEncoder11positionRawEv+0xd4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <_ZN10absEncoder11positionRawEv+0x76>
			p = c;
 8000fc6:	897b      	ldrh	r3, [r7, #10]
 8000fc8:	82bb      	strh	r3, [r7, #20]
		}
		bit = (p&pins[i])>0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	881a      	ldrh	r2, [r3, #0]
 8000fd6:	8abb      	ldrh	r3, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	727b      	strb	r3, [r7, #9]
		grey += bit<<i;
 8000fe8:	7a7a      	ldrb	r2, [r7, #9]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	8afb      	ldrh	r3, [r7, #22]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i<10; i++){
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e7be      	b.n	8000f7e <_ZN10absEncoder11positionRawEv+0x2a>
	}
	grey = (0xffff^grey)&0x02ff; //bitwise invert because the encoder is active low
 8001000:	8afb      	ldrh	r3, [r7, #22]
 8001002:	43db      	mvns	r3, r3
 8001004:	b29a      	uxth	r2, r3
 8001006:	f240 23ff 	movw	r3, #767	; 0x2ff
 800100a:	4013      	ands	r3, r2
 800100c:	82fb      	strh	r3, [r7, #22]
	return grayToBinary(grey);
 800100e:	8afb      	ldrh	r3, [r7, #22]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f837 	bl	8001084 <_Z12grayToBinaryt>
 8001016:	4603      	mov	r3, r0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800

0800102c <_ZN10absEncoder8positionEv>:

float absEncoder::position(){
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	return positionRaw()*360.0/1024.0;
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff8d 	bl	8000f54 <_ZN10absEncoder11positionRawEv>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa1b 	bl	8000478 <__aeabi_i2d>
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <_ZN10absEncoder8positionEv+0x50>)
 8001048:	f7ff fa80 	bl	800054c <__aeabi_dmul>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <_ZN10absEncoder8positionEv+0x54>)
 800105a:	f7ff fba1 	bl	80007a0 <__aeabi_ddiv>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4618      	mov	r0, r3
 8001064:	4621      	mov	r1, r4
 8001066:	f7ff fc83 	bl	8000970 <__aeabi_d2f>
 800106a:	4603      	mov	r3, r0
 800106c:	ee07 3a90 	vmov	s15, r3
}
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	bf00      	nop
 800107c:	40768000 	.word	0x40768000
 8001080:	40900000 	.word	0x40900000

08001084 <_Z12grayToBinaryt>:

uint16_t grayToBinary(uint16_t num){
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
	uint16_t mask = num;
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	81fb      	strh	r3, [r7, #14]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <_Z12grayToBinaryt+0x24>
		mask >>= 1;
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	105b      	asrs	r3, r3, #1
 800109c:	81fb      	strh	r3, [r7, #14]
		num   ^= mask;
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	89fb      	ldrh	r3, [r7, #14]
 80010a2:	4053      	eors	r3, r2
 80010a4:	80fb      	strh	r3, [r7, #6]
	while (mask) {           // Each Gray code bit is exclusive-ored with all more significant bits.
 80010a6:	e7f4      	b.n	8001092 <_Z12grayToBinaryt+0xe>
	}
	return num;
 80010a8:	88fb      	ldrh	r3, [r7, #6]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_TIM_PeriodElapsedCallback>:
//motors
Stepper elStepper(ElStepperPorts,ElStepperPins);

// callback function for stepper motor timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d102      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  elStepper.update();
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010ca:	f7ff feb8 	bl	8000e3e <_ZN7Stepper6updateEv>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	200000d8 	.word	0x200000d8

080010e0 <mainsetup>:

int target, currentpos;
float pos, oldpos;
void mainsetup(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	elStepper.setFreq(100);
 80010e4:	2164      	movs	r1, #100	; 0x64
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <mainsetup+0x2c>)
 80010e8:	f7ff fec8 	bl	8000e7c <_ZN7Stepper7setFreqEj>
	target=0;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <mainsetup+0x30>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
	currentpos = 0;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <mainsetup+0x34>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
	oldpos = 0;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <mainsetup+0x38>)
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
	pos=0;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <mainsetup+0x3c>)
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000d8 	.word	0x200000d8
 8001110:	200000ec 	.word	0x200000ec
 8001114:	200000f0 	.word	0x200000f0
 8001118:	200000f8 	.word	0x200000f8
 800111c:	200000f4 	.word	0x200000f4

08001120 <mainloop>:

void mainloop(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	oldpos = pos;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <mainloop+0x3c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <mainloop+0x40>)
 800112a:	6013      	str	r3, [r2, #0]
	pos = elEncoder.position();
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <mainloop+0x44>)
 800112e:	f7ff ff7d 	bl	800102c <_ZN10absEncoder8positionEv>
 8001132:	eef0 7a40 	vmov.f32	s15, s0
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <mainloop+0x3c>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
	elStepper.setTarget(target);
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <mainloop+0x48>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <mainloop+0x4c>)
 8001144:	f7ff feb4 	bl	8000eb0 <_ZN7Stepper9setTargetEi>
	currentpos = elStepper.getPosition();
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <mainloop+0x4c>)
 800114a:	f7ff febf 	bl	8000ecc <_ZN7Stepper11getPositionEv>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <mainloop+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000f4 	.word	0x200000f4
 8001160:	200000f8 	.word	0x200000f8
 8001164:	200000cc 	.word	0x200000cc
 8001168:	200000ec 	.word	0x200000ec
 800116c:	200000d8 	.word	0x200000d8
 8001170:	200000f0 	.word	0x200000f0

08001174 <_Z41__static_initialization_and_destruction_0ii>:
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d10e      	bne.n	80011a2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118a:	4293      	cmp	r3, r2
 800118c:	d109      	bne.n	80011a2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins);
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001190:	490e      	ldr	r1, [pc, #56]	; (80011cc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001194:	f7ff fea6 	bl	8000ee4 <_ZN10absEncoderC1EPKPK12GPIO_TypeDefPKt>
Stepper elStepper(ElStepperPorts,ElStepperPins);
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800119a:	490f      	ldr	r1, [pc, #60]	; (80011d8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800119c:	480f      	ldr	r0, [pc, #60]	; (80011dc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800119e:	f7ff fdb7 	bl	8000d10 <_ZN7StepperC1EPKPK12GPIO_TypeDefPKt>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10a      	bne.n	80011be <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d105      	bne.n	80011be <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80011b4:	f7ff fdca 	bl	8000d4c <_ZN7StepperD1Ev>
absEncoder elEncoder(ElEncoderPorts,ElEncoderPins);
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80011ba:	f7ff feab 	bl	8000f14 <_ZN10absEncoderD1Ev>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	08003208 	.word	0x08003208
 80011cc:	080031e0 	.word	0x080031e0
 80011d0:	200000cc 	.word	0x200000cc
 80011d4:	08003228 	.word	0x08003228
 80011d8:	0800321c 	.word	0x0800321c
 80011dc:	200000d8 	.word	0x200000d8

080011e0 <_GLOBAL__sub_I_htim1>:
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ffc3 	bl	8001174 <_Z41__static_initialization_and_destruction_0ii>
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_GLOBAL__sub_D_htim1>:
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ffbb 	bl	8001174 <_Z41__static_initialization_and_destruction_0ii>
 80011fe:	bd80      	pop	{r7, pc}

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 fab6 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f810 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 f8f8 	bl	8001400 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001210:	f000 f876 	bl	8001300 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001214:	f000 f8a2 	bl	800135c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1); //enable steppers
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <main+0x28>)
 800121a:	f001 fb96 	bl	800294a <HAL_TIM_Base_Start_IT>
  mainsetup();
 800121e:	f7ff ff5f 	bl	80010e0 <mainsetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainloop();
 8001222:	f7ff ff7d 	bl	8001120 <mainloop>
  {
 8001226:	e7fc      	b.n	8001222 <main+0x22>
 8001228:	2000008c 	.word	0x2000008c

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b094      	sub	sp, #80	; 0x50
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	2230      	movs	r2, #48	; 0x30
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f001 ff5c 	bl	80030f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <SystemClock_Config+0xcc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <SystemClock_Config+0xcc>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <SystemClock_Config+0xcc>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <SystemClock_Config+0xd0>)
 800127a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <SystemClock_Config+0xd0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001290:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012a4:	2354      	movs	r3, #84	; 0x54
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ac:	2307      	movs	r3, #7
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fecf 	bl	8002058 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012c0:	f000 f938 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2102      	movs	r1, #2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 f929 	bl	8002538 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012ec:	f000 f922 	bl	8001534 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C2_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_I2C2_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_I2C2_Init+0x50>)
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_I2C2_Init+0x58>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C2_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_I2C2_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_I2C2_Init+0x50>)
 800131e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001322:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_I2C2_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_I2C2_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_I2C2_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_I2C2_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_I2C2_Init+0x50>)
 800133e:	f000 fd53 	bl	8001de8 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 f8f4 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000100 	.word	0x20000100
 8001354:	40005800 	.word	0x40005800
 8001358:	000186a0 	.word	0x000186a0

0800135c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <MX_TIM1_Init+0x9c>)
 800137a:	4a20      	ldr	r2, [pc, #128]	; (80013fc <MX_TIM1_Init+0xa0>)
 800137c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1282;
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_TIM1_Init+0x9c>)
 8001380:	f240 5202 	movw	r2, #1282	; 0x502
 8001384:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_TIM1_Init+0x9c>)
 8001388:	2210      	movs	r2, #16
 800138a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_TIM1_Init+0x9c>)
 800138e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001392:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_TIM1_Init+0x9c>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_TIM1_Init+0x9c>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_TIM1_Init+0x9c>)
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_TIM1_Init+0x9c>)
 80013a8:	f001 faa4 	bl	80028f4 <HAL_TIM_Base_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013b2:	f000 f8bf 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_TIM1_Init+0x9c>)
 80013c4:	f001 fbed 	bl	8002ba2 <HAL_TIM_ConfigClockSource>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013ce:	f000 f8b1 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_TIM1_Init+0x9c>)
 80013e0:	f001 fdd8 	bl	8002f94 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80013ea:	f000 f8a3 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000008c 	.word	0x2000008c
 80013fc:	40010000 	.word	0x40010000

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b41      	ldr	r3, [pc, #260]	; (8001520 <MX_GPIO_Init+0x120>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a40      	ldr	r2, [pc, #256]	; (8001520 <MX_GPIO_Init+0x120>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <MX_GPIO_Init+0x120>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <MX_GPIO_Init+0x120>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a39      	ldr	r2, [pc, #228]	; (8001520 <MX_GPIO_Init+0x120>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <MX_GPIO_Init+0x120>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <MX_GPIO_Init+0x120>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <MX_GPIO_Init+0x120>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <MX_GPIO_Init+0x120>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <MX_GPIO_Init+0x120>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a2b      	ldr	r2, [pc, #172]	; (8001520 <MX_GPIO_Init+0x120>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <MX_GPIO_Init+0x120>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 8001486:	2200      	movs	r2, #0
 8001488:	f240 411f 	movw	r1, #1055	; 0x41f
 800148c:	4825      	ldr	r0, [pc, #148]	; (8001524 <MX_GPIO_Init+0x124>)
 800148e:	f000 fc77 	bl	8001d80 <HAL_GPIO_WritePin>
                          |ElEna_Pin|AzEna_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_GPIO_Init+0x128>)
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4821      	ldr	r0, [pc, #132]	; (800152c <MX_GPIO_Init+0x12c>)
 80014a8:	f000 fae8 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ElPul_Pin ElDir_Pin AzDir_Pin AzPul_Pin
                           ElEna_Pin AzEna_Pin */
  GPIO_InitStruct.Pin = ElPul_Pin|ElDir_Pin|AzDir_Pin|AzPul_Pin
 80014ac:	f240 431f 	movw	r3, #1055	; 0x41f
 80014b0:	617b      	str	r3, [r7, #20]
                          |ElEna_Pin|AzEna_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <MX_GPIO_Init+0x124>)
 80014c6:	f000 fad9 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ElYellow_Pin ElGreen_Pin ElPurple_Pin ElWhite_Pin
                           ElGrey_Pin AzGreen_Pin AzYellow_Pin */
  GPIO_InitStruct.Pin = ElYellow_Pin|ElGreen_Pin|ElPurple_Pin|ElWhite_Pin
 80014ca:	f44f 53df 	mov.w	r3, #7136	; 0x1be0
 80014ce:	617b      	str	r3, [r7, #20]
                          |ElGrey_Pin|AzGreen_Pin|AzYellow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4811      	ldr	r0, [pc, #68]	; (8001524 <MX_GPIO_Init+0x124>)
 80014e0:	f000 facc 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : AzOrange_Pin AzRed_Pin AzBlack_Pin ElBlack_Pin */
  GPIO_InitStruct.Pin = AzOrange_Pin|AzRed_Pin|AzBlack_Pin|ElBlack_Pin;
 80014e4:	f44f 7358 	mov.w	r3, #864	; 0x360
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_GPIO_Init+0x12c>)
 80014fa:	f000 fabf 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : AzWhite_Pin AzGrey_Pin AzPurple_Pin AzRedWhite_Pin
                           AzBlackWhite_Pin ElBlackWhite_Pin ElRedWhite_Pin ElRed_Pin
                           ElOrange_Pin */
  GPIO_InitStruct.Pin = AzWhite_Pin|AzGrey_Pin|AzPurple_Pin|AzRedWhite_Pin
 80014fe:	f247 3336 	movw	r3, #29494	; 0x7336
 8001502:	617b      	str	r3, [r7, #20]
                          |AzBlackWhite_Pin|ElBlackWhite_Pin|ElRedWhite_Pin|ElRed_Pin
                          |ElOrange_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_GPIO_Init+0x130>)
 8001514:	f000 fab2 	bl	8001a7c <HAL_GPIO_Init>

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	10210000 	.word	0x10210000
 800152c:	40020800 	.word	0x40020800
 8001530:	40020400 	.word	0x40020400

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153a:	e7fe      	b.n	800153a <Error_Handler+0x6>

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800157a:	2007      	movs	r0, #7
 800157c:	f000 fa3c 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_I2C_MspInit+0xa4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d13c      	bne.n	8001628 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_I2C_MspInit+0xa8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <HAL_I2C_MspInit+0xa8>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_I2C_MspInit+0xa8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_D6_Pin;
 80015ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015dc:	2304      	movs	r3, #4
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SCL_D6_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <HAL_I2C_MspInit+0xac>)
 80015e8:	f000 fa48 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C2_SDA_D3_Pin;
 80015ec:	2308      	movs	r3, #8
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80015fc:	2309      	movs	r3, #9
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C2_SDA_D3_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <HAL_I2C_MspInit+0xac>)
 8001608:	f000 fa38 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_I2C_MspInit+0xa8>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_I2C_MspInit+0xa8>)
 8001616:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_I2C_MspInit+0xa8>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40005800 	.word	0x40005800
 8001634:	40023800 	.word	0x40023800
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_TIM_Base_MspInit+0x48>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d115      	bne.n	800167a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_TIM_Base_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_TIM_Base_MspInit+0x4c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_TIM_Base_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2019      	movs	r0, #25
 8001670:	f000 f9cd 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001674:	2019      	movs	r0, #25
 8001676:	f000 f9e6 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40010000 	.word	0x40010000
 8001688:	40023800 	.word	0x40023800

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f89e 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016e6:	f001 f954 	bl	8002992 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000008c 	.word	0x2000008c

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <SystemInit+0x28>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <SystemInit+0x28>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <SystemInit+0x28>)
 800170a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170e:	609a      	str	r2, [r3, #8]
#endif
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001726:	e003      	b.n	8001730 <LoopCopyDataInit>

08001728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800172a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800172c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800172e:	3104      	adds	r1, #4

08001730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001738:	d3f6      	bcc.n	8001728 <CopyDataInit>
  ldr  r2, =_sbss
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800173c:	e002      	b.n	8001744 <LoopFillZerobss>

0800173e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800173e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001740:	f842 3b04 	str.w	r3, [r2], #4

08001744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001748:	d3f9      	bcc.n	800173e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800174a:	f7ff ffd3 	bl	80016f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174e:	f001 fca7 	bl	80030a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7ff fd55 	bl	8001200 <main>
  bx  lr    
 8001756:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001758:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800175c:	08003260 	.word	0x08003260
  ldr  r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001764:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001768:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800176c:	20000158 	.word	0x20000158

08001770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <HAL_Init+0x40>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_Init+0x40>)
 800178a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x40>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f92b 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fec8 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f943 	bl	8001a62 <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f90b 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	20000008 	.word	0x20000008
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008
 800183c:	20000154 	.word	0x20000154

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000154 	.word	0x20000154

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff3e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff8e 	bl	800194c <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5d 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff31 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e159      	b.n	8001d4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8148 	bne.w	8001d46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d00b      	beq.n	8001ad6 <HAL_GPIO_Init+0x5a>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aca:	2b11      	cmp	r3, #17
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0xfc>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b12      	cmp	r3, #18
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80a2 	beq.w	8001d46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a55      	ldr	r2, [pc, #340]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a48      	ldr	r2, [pc, #288]	; (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x202>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a47      	ldr	r2, [pc, #284]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x1fe>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a46      	ldr	r2, [pc, #280]	; (8001d70 <HAL_GPIO_Init+0x2f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a45      	ldr	r2, [pc, #276]	; (8001d74 <HAL_GPIO_Init+0x2f8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x1f6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a44      	ldr	r2, [pc, #272]	; (8001d78 <HAL_GPIO_Init+0x2fc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x1f2>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4934      	ldr	r1, [pc, #208]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_GPIO_Init+0x300>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f aea2 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	3724      	adds	r7, #36	; 0x24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d104      	bne.n	8001dd6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	041a      	lsls	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e11f      	b.n	800203a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fbbc 	bl	800158c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2224      	movs	r2, #36	; 0x24
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e4c:	f000 fd3e 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8001e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a7b      	ldr	r2, [pc, #492]	; (8002044 <HAL_I2C_Init+0x25c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d807      	bhi.n	8001e6c <HAL_I2C_Init+0x84>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_I2C_Init+0x260>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf94      	ite	ls
 8001e64:	2301      	movls	r3, #1
 8001e66:	2300      	movhi	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e006      	b.n	8001e7a <HAL_I2C_Init+0x92>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a77      	ldr	r2, [pc, #476]	; (800204c <HAL_I2C_Init+0x264>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bf94      	ite	ls
 8001e74:	2301      	movls	r3, #1
 8001e76:	2300      	movhi	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0db      	b.n	800203a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4a72      	ldr	r2, [pc, #456]	; (8002050 <HAL_I2C_Init+0x268>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9b      	lsrs	r3, r3, #18
 8001e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a64      	ldr	r2, [pc, #400]	; (8002044 <HAL_I2C_Init+0x25c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d802      	bhi.n	8001ebc <HAL_I2C_Init+0xd4>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	e009      	b.n	8001ed0 <HAL_I2C_Init+0xe8>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	4a63      	ldr	r2, [pc, #396]	; (8002054 <HAL_I2C_Init+0x26c>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	3301      	adds	r3, #1
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4956      	ldr	r1, [pc, #344]	; (8002044 <HAL_I2C_Init+0x25c>)
 8001eec:	428b      	cmp	r3, r1
 8001eee:	d80d      	bhi.n	8001f0c <HAL_I2C_Init+0x124>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e59      	subs	r1, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	bf38      	it	cc
 8001f08:	2304      	movcc	r3, #4
 8001f0a:	e04f      	b.n	8001fac <HAL_I2C_Init+0x1c4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_I2C_Init+0x150>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e012      	b.n	8001f5e <HAL_I2C_Init+0x176>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	0099      	lsls	r1, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Init+0x17e>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e022      	b.n	8001fac <HAL_I2C_Init+0x1c4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10e      	bne.n	8001f8c <HAL_I2C_Init+0x1a4>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e58      	subs	r0, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8a:	e00f      	b.n	8001fac <HAL_I2C_Init+0x1c4>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	0099      	lsls	r1, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6809      	ldr	r1, [r1, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6911      	ldr	r1, [r2, #16]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68d2      	ldr	r2, [r2, #12]
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	000186a0 	.word	0x000186a0
 8002048:	001e847f 	.word	0x001e847f
 800204c:	003d08ff 	.word	0x003d08ff
 8002050:	431bde83 	.word	0x431bde83
 8002054:	10624dd3 	.word	0x10624dd3

08002058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e25b      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d075      	beq.n	8002162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002076:	4ba3      	ldr	r3, [pc, #652]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d00c      	beq.n	800209c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002082:	4ba0      	ldr	r3, [pc, #640]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800208a:	2b08      	cmp	r3, #8
 800208c:	d112      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800208e:	4b9d      	ldr	r3, [pc, #628]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800209a:	d10b      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	4b99      	ldr	r3, [pc, #612]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05b      	beq.n	8002160 <HAL_RCC_OscConfig+0x108>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d157      	bne.n	8002160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e236      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_OscConfig+0x74>
 80020be:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a90      	ldr	r2, [pc, #576]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e01d      	b.n	8002108 <HAL_RCC_OscConfig+0xb0>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x98>
 80020d6:	4b8b      	ldr	r3, [pc, #556]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a8a      	ldr	r2, [pc, #552]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a87      	ldr	r2, [pc, #540]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0xb0>
 80020f0:	4b84      	ldr	r3, [pc, #528]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a83      	ldr	r2, [pc, #524]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b81      	ldr	r3, [pc, #516]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a80      	ldr	r2, [pc, #512]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fb96 	bl	8001840 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002118:	f7ff fb92 	bl	8001840 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1fb      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0xc0>
 8002136:	e014      	b.n	8002162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fb82 	bl	8001840 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fb7e 	bl	8001840 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1e7      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0xe8>
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d063      	beq.n	8002236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800216e:	4b65      	ldr	r3, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b62      	ldr	r3, [pc, #392]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d11c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b5f      	ldr	r3, [pc, #380]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d116      	bne.n	80021c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_RCC_OscConfig+0x152>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e1bb      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b56      	ldr	r3, [pc, #344]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4952      	ldr	r1, [pc, #328]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	e03a      	b.n	8002236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c8:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_RCC_OscConfig+0x2b0>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7ff fb37 	bl	8001840 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d6:	f7ff fb33 	bl	8001840 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e19c      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4940      	ldr	r1, [pc, #256]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e015      	b.n	8002236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_RCC_OscConfig+0x2b0>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff fb16 	bl	8001840 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002218:	f7ff fb12 	bl	8001840 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e17b      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d030      	beq.n	80022a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_RCC_OscConfig+0x2b4>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff faf6 	bl	8001840 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7ff faf2 	bl	8001840 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e15b      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x200>
 8002276:	e015      	b.n	80022a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_OscConfig+0x2b4>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff fadf 	bl	8001840 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002286:	f7ff fadb 	bl	8001840 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e144      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a0 	beq.w	80023f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x2b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d121      	bne.n	8002332 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCC_OscConfig+0x2b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_RCC_OscConfig+0x2b8>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff faa1 	bl	8001840 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e011      	b.n	8002326 <HAL_RCC_OscConfig+0x2ce>
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	42470e80 	.word	0x42470e80
 8002310:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7ff fa94 	bl	8001840 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0fd      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b81      	ldr	r3, [pc, #516]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x2f0>
 800233a:	4b7d      	ldr	r3, [pc, #500]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a7c      	ldr	r2, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	e01c      	b.n	8002382 <HAL_RCC_OscConfig+0x32a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b05      	cmp	r3, #5
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x312>
 8002350:	4b77      	ldr	r3, [pc, #476]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a76      	ldr	r2, [pc, #472]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
 800235c:	4b74      	ldr	r3, [pc, #464]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a73      	ldr	r2, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	e00b      	b.n	8002382 <HAL_RCC_OscConfig+0x32a>
 800236a:	4b71      	ldr	r3, [pc, #452]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a70      	ldr	r2, [pc, #448]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
 8002376:	4b6e      	ldr	r3, [pc, #440]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a6d      	ldr	r2, [pc, #436]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d015      	beq.n	80023b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238a:	f7ff fa59 	bl	8001840 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff fa55 	bl	8001840 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0bc      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ee      	beq.n	8002392 <HAL_RCC_OscConfig+0x33a>
 80023b4:	e014      	b.n	80023e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fa43 	bl	8001840 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7ff fa3f 	bl	8001840 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0a6      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	4b56      	ldr	r3, [pc, #344]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ee      	bne.n	80023be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e6:	4b52      	ldr	r3, [pc, #328]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a51      	ldr	r2, [pc, #324]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8092 	beq.w	8002520 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d05c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d141      	bne.n	8002494 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b48      	ldr	r3, [pc, #288]	; (8002534 <HAL_RCC_OscConfig+0x4dc>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff fa13 	bl	8001840 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff fa0f 	bl	8001840 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e078      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	019b      	lsls	r3, r3, #6
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	061b      	lsls	r3, r3, #24
 8002460:	4933      	ldr	r1, [pc, #204]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x4dc>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff f9e8 	bl	8001840 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7ff f9e4 	bl	8001840 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04d      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x41c>
 8002492:	e045      	b.n	8002520 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x4dc>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff f9d1 	bl	8001840 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7ff f9cd 	bl	8001840 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e036      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x44a>
 80024c0:	e02e      	b.n	8002520 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e029      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_RCC_OscConfig+0x4d8>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d11c      	bne.n	800251c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d115      	bne.n	800251c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024f6:	4013      	ands	r3, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10d      	bne.n	800251c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000
 8002530:	40023800 	.word	0x40023800
 8002534:	42470060 	.word	0x42470060

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0cc      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d90c      	bls.n	8002574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d044      	beq.n	8002658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d119      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e067      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4934      	ldr	r1, [pc, #208]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002628:	f7ff f90a 	bl	8001840 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7ff f906 	bl	8001840 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e04f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d20c      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f821 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	fa21 f303 	lsr.w	r3, r1, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f86a 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023c00 	.word	0x40023c00
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08003230 	.word	0x08003230
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b04      	cmp	r3, #4
 8002724:	d007      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x32>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d008      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x38>
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 80b4 	bne.w	8002898 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002732:	60bb      	str	r3, [r7, #8]
       break;
 8002734:	e0b3      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002736:	4b5e      	ldr	r3, [pc, #376]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002738:	60bb      	str	r3, [r7, #8]
      break;
 800273a:	e0b0      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273c:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002744:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002746:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04a      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	f04f 0400 	mov.w	r4, #0
 800275c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	ea03 0501 	and.w	r5, r3, r1
 8002768:	ea04 0602 	and.w	r6, r4, r2
 800276c:	4629      	mov	r1, r5
 800276e:	4632      	mov	r2, r6
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f04f 0400 	mov.w	r4, #0
 8002778:	0154      	lsls	r4, r2, #5
 800277a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800277e:	014b      	lsls	r3, r1, #5
 8002780:	4619      	mov	r1, r3
 8002782:	4622      	mov	r2, r4
 8002784:	1b49      	subs	r1, r1, r5
 8002786:	eb62 0206 	sbc.w	r2, r2, r6
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	0194      	lsls	r4, r2, #6
 8002794:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002798:	018b      	lsls	r3, r1, #6
 800279a:	1a5b      	subs	r3, r3, r1
 800279c:	eb64 0402 	sbc.w	r4, r4, r2
 80027a0:	f04f 0100 	mov.w	r1, #0
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	00e2      	lsls	r2, r4, #3
 80027aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027ae:	00d9      	lsls	r1, r3, #3
 80027b0:	460b      	mov	r3, r1
 80027b2:	4614      	mov	r4, r2
 80027b4:	195b      	adds	r3, r3, r5
 80027b6:	eb44 0406 	adc.w	r4, r4, r6
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	0262      	lsls	r2, r4, #9
 80027c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027c8:	0259      	lsls	r1, r3, #9
 80027ca:	460b      	mov	r3, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	4621      	mov	r1, r4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f04f 0400 	mov.w	r4, #0
 80027d8:	461a      	mov	r2, r3
 80027da:	4623      	mov	r3, r4
 80027dc:	f7fe f918 	bl	8000a10 <__aeabi_uldivmod>
 80027e0:	4603      	mov	r3, r0
 80027e2:	460c      	mov	r4, r1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e049      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	f04f 0400 	mov.w	r4, #0
 80027f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	ea03 0501 	and.w	r5, r3, r1
 80027fe:	ea04 0602 	and.w	r6, r4, r2
 8002802:	4629      	mov	r1, r5
 8002804:	4632      	mov	r2, r6
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	f04f 0400 	mov.w	r4, #0
 800280e:	0154      	lsls	r4, r2, #5
 8002810:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002814:	014b      	lsls	r3, r1, #5
 8002816:	4619      	mov	r1, r3
 8002818:	4622      	mov	r2, r4
 800281a:	1b49      	subs	r1, r1, r5
 800281c:	eb62 0206 	sbc.w	r2, r2, r6
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0194      	lsls	r4, r2, #6
 800282a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800282e:	018b      	lsls	r3, r1, #6
 8002830:	1a5b      	subs	r3, r3, r1
 8002832:	eb64 0402 	sbc.w	r4, r4, r2
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	00e2      	lsls	r2, r4, #3
 8002840:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002844:	00d9      	lsls	r1, r3, #3
 8002846:	460b      	mov	r3, r1
 8002848:	4614      	mov	r4, r2
 800284a:	195b      	adds	r3, r3, r5
 800284c:	eb44 0406 	adc.w	r4, r4, r6
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	02a2      	lsls	r2, r4, #10
 800285a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800285e:	0299      	lsls	r1, r3, #10
 8002860:	460b      	mov	r3, r1
 8002862:	4614      	mov	r4, r2
 8002864:	4618      	mov	r0, r3
 8002866:	4621      	mov	r1, r4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f04f 0400 	mov.w	r4, #0
 800286e:	461a      	mov	r2, r3
 8002870:	4623      	mov	r3, r4
 8002872:	f7fe f8cd 	bl	8000a10 <__aeabi_uldivmod>
 8002876:	4603      	mov	r3, r0
 8002878:	460c      	mov	r4, r1
 800287a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	60bb      	str	r3, [r7, #8]
      break;
 8002896:	e002      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800289a:	60bb      	str	r3, [r7, #8]
      break;
 800289c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289e:	68bb      	ldr	r3, [r7, #8]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4601      	mov	r1, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4a03      	ldr	r2, [pc, #12]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08003240 	.word	0x08003240

080028f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e01d      	b.n	8002942 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fe8e 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fa14 	bl	8002d60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d007      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d122      	bne.n	80029ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d11b      	bne.n	80029ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0202 	mvn.w	r2, #2
 80029be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f9a5 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 80029da:	e005      	b.n	80029e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f997 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9a8 	bl	8002d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d122      	bne.n	8002a42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d11b      	bne.n	8002a42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0204 	mvn.w	r2, #4
 8002a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f97b 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 8002a2e:	e005      	b.n	8002a3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f96d 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f97e 	bl	8002d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d122      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d11b      	bne.n	8002a96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0208 	mvn.w	r2, #8
 8002a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f951 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 8002a82:	e005      	b.n	8002a90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f943 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f954 	bl	8002d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d122      	bne.n	8002aea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d11b      	bne.n	8002aea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f06f 0210 	mvn.w	r2, #16
 8002aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2208      	movs	r2, #8
 8002ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f927 	bl	8002d24 <HAL_TIM_IC_CaptureCallback>
 8002ad6:	e005      	b.n	8002ae4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f919 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f92a 	bl	8002d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10e      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f06f 0201 	mvn.w	r2, #1
 8002b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fe fad1 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d10e      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d107      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 faa1 	bl	8003084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d10e      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d107      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f8ef 	bl	8002d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d10e      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f06f 0220 	mvn.w	r2, #32
 8002b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fa6b 	bl	8003070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_ConfigClockSource+0x18>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0a6      	b.n	8002d08 <HAL_TIM_ConfigClockSource+0x166>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d067      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x120>
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d80b      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x6c>
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d073      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x140>
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d802      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x62>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d06f      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c02:	e078      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d06c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x140>
 8002c08:	2b30      	cmp	r3, #48	; 0x30
 8002c0a:	d06a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c0c:	e073      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c0e:	2b70      	cmp	r3, #112	; 0x70
 8002c10:	d00d      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x8c>
 8002c12:	2b70      	cmp	r3, #112	; 0x70
 8002c14:	d804      	bhi.n	8002c20 <HAL_TIM_ConfigClockSource+0x7e>
 8002c16:	2b50      	cmp	r3, #80	; 0x50
 8002c18:	d033      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xe0>
 8002c1a:	2b60      	cmp	r3, #96	; 0x60
 8002c1c:	d041      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c1e:	e06a      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c24:	d066      	beq.n	8002cf4 <HAL_TIM_ConfigClockSource+0x152>
 8002c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c2a:	d017      	beq.n	8002c5c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c2c:	e063      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f000 f989 	bl	8002f54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	609a      	str	r2, [r3, #8]
      break;
 8002c5a:	e04c      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f000 f972 	bl	8002f54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e039      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 f8e6 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	; 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f93f 	bl	8002f1e <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e029      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 f905 	bl	8002ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	; 0x60
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f92f 	bl	8002f1e <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e019      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f8c6 	bl	8002e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f91f 	bl	8002f1e <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e009      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 f916 	bl	8002f1e <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e000      	b.n	8002cf6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002cf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a34      	ldr	r2, [pc, #208]	; (8002e44 <TIM_Base_SetConfig+0xe4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00f      	beq.n	8002d98 <TIM_Base_SetConfig+0x38>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7e:	d00b      	beq.n	8002d98 <TIM_Base_SetConfig+0x38>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <TIM_Base_SetConfig+0xe8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_Base_SetConfig+0x38>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a30      	ldr	r2, [pc, #192]	; (8002e4c <TIM_Base_SetConfig+0xec>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_Base_SetConfig+0x38>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a2f      	ldr	r2, [pc, #188]	; (8002e50 <TIM_Base_SetConfig+0xf0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d108      	bne.n	8002daa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <TIM_Base_SetConfig+0xe4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01b      	beq.n	8002dea <TIM_Base_SetConfig+0x8a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db8:	d017      	beq.n	8002dea <TIM_Base_SetConfig+0x8a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <TIM_Base_SetConfig+0xe8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <TIM_Base_SetConfig+0x8a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <TIM_Base_SetConfig+0xec>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00f      	beq.n	8002dea <TIM_Base_SetConfig+0x8a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <TIM_Base_SetConfig+0xf0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <TIM_Base_SetConfig+0x8a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <TIM_Base_SetConfig+0xf4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <TIM_Base_SetConfig+0x8a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <TIM_Base_SetConfig+0xf8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d003      	beq.n	8002dea <TIM_Base_SetConfig+0x8a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <TIM_Base_SetConfig+0xfc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d108      	bne.n	8002dfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <TIM_Base_SetConfig+0xe4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d103      	bne.n	8002e30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	615a      	str	r2, [r3, #20]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f023 030a 	bic.w	r3, r3, #10
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b087      	sub	sp, #28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0210 	bic.w	r2, r3, #16
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	031b      	lsls	r3, r3, #12
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f043 0307 	orr.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e050      	b.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d018      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d013      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a18      	ldr	r2, [pc, #96]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10c      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4313      	orrs	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40014000 	.word	0x40014000

08003070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_ZdlPvj>:
 8003098:	f000 b800 	b.w	800309c <_ZdlPv>

0800309c <_ZdlPv>:
 800309c:	f000 b824 	b.w	80030e8 <free>

080030a0 <__libc_init_array>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4e0d      	ldr	r6, [pc, #52]	; (80030d8 <__libc_init_array+0x38>)
 80030a4:	4c0d      	ldr	r4, [pc, #52]	; (80030dc <__libc_init_array+0x3c>)
 80030a6:	1ba4      	subs	r4, r4, r6
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	2500      	movs	r5, #0
 80030ac:	42a5      	cmp	r5, r4
 80030ae:	d109      	bne.n	80030c4 <__libc_init_array+0x24>
 80030b0:	4e0b      	ldr	r6, [pc, #44]	; (80030e0 <__libc_init_array+0x40>)
 80030b2:	4c0c      	ldr	r4, [pc, #48]	; (80030e4 <__libc_init_array+0x44>)
 80030b4:	f000 f878 	bl	80031a8 <_init>
 80030b8:	1ba4      	subs	r4, r4, r6
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	2500      	movs	r5, #0
 80030be:	42a5      	cmp	r5, r4
 80030c0:	d105      	bne.n	80030ce <__libc_init_array+0x2e>
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c8:	4798      	blx	r3
 80030ca:	3501      	adds	r5, #1
 80030cc:	e7ee      	b.n	80030ac <__libc_init_array+0xc>
 80030ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d2:	4798      	blx	r3
 80030d4:	3501      	adds	r5, #1
 80030d6:	e7f2      	b.n	80030be <__libc_init_array+0x1e>
 80030d8:	08003250 	.word	0x08003250
 80030dc:	08003250 	.word	0x08003250
 80030e0:	08003250 	.word	0x08003250
 80030e4:	08003258 	.word	0x08003258

080030e8 <free>:
 80030e8:	4b02      	ldr	r3, [pc, #8]	; (80030f4 <free+0xc>)
 80030ea:	4601      	mov	r1, r0
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	f000 b80b 	b.w	8003108 <_free_r>
 80030f2:	bf00      	nop
 80030f4:	2000000c 	.word	0x2000000c

080030f8 <memset>:
 80030f8:	4402      	add	r2, r0
 80030fa:	4603      	mov	r3, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d100      	bne.n	8003102 <memset+0xa>
 8003100:	4770      	bx	lr
 8003102:	f803 1b01 	strb.w	r1, [r3], #1
 8003106:	e7f9      	b.n	80030fc <memset+0x4>

08003108 <_free_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4605      	mov	r5, r0
 800310c:	2900      	cmp	r1, #0
 800310e:	d045      	beq.n	800319c <_free_r+0x94>
 8003110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003114:	1f0c      	subs	r4, r1, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	bfb8      	it	lt
 800311a:	18e4      	addlt	r4, r4, r3
 800311c:	f000 f842 	bl	80031a4 <__malloc_lock>
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <_free_r+0x98>)
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	4610      	mov	r0, r2
 8003126:	b933      	cbnz	r3, 8003136 <_free_r+0x2e>
 8003128:	6063      	str	r3, [r4, #4]
 800312a:	6014      	str	r4, [r2, #0]
 800312c:	4628      	mov	r0, r5
 800312e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003132:	f000 b838 	b.w	80031a6 <__malloc_unlock>
 8003136:	42a3      	cmp	r3, r4
 8003138:	d90c      	bls.n	8003154 <_free_r+0x4c>
 800313a:	6821      	ldr	r1, [r4, #0]
 800313c:	1862      	adds	r2, r4, r1
 800313e:	4293      	cmp	r3, r2
 8003140:	bf04      	itt	eq
 8003142:	681a      	ldreq	r2, [r3, #0]
 8003144:	685b      	ldreq	r3, [r3, #4]
 8003146:	6063      	str	r3, [r4, #4]
 8003148:	bf04      	itt	eq
 800314a:	1852      	addeq	r2, r2, r1
 800314c:	6022      	streq	r2, [r4, #0]
 800314e:	6004      	str	r4, [r0, #0]
 8003150:	e7ec      	b.n	800312c <_free_r+0x24>
 8003152:	4613      	mov	r3, r2
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	b10a      	cbz	r2, 800315c <_free_r+0x54>
 8003158:	42a2      	cmp	r2, r4
 800315a:	d9fa      	bls.n	8003152 <_free_r+0x4a>
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	1858      	adds	r0, r3, r1
 8003160:	42a0      	cmp	r0, r4
 8003162:	d10b      	bne.n	800317c <_free_r+0x74>
 8003164:	6820      	ldr	r0, [r4, #0]
 8003166:	4401      	add	r1, r0
 8003168:	1858      	adds	r0, r3, r1
 800316a:	4282      	cmp	r2, r0
 800316c:	6019      	str	r1, [r3, #0]
 800316e:	d1dd      	bne.n	800312c <_free_r+0x24>
 8003170:	6810      	ldr	r0, [r2, #0]
 8003172:	6852      	ldr	r2, [r2, #4]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	4401      	add	r1, r0
 8003178:	6019      	str	r1, [r3, #0]
 800317a:	e7d7      	b.n	800312c <_free_r+0x24>
 800317c:	d902      	bls.n	8003184 <_free_r+0x7c>
 800317e:	230c      	movs	r3, #12
 8003180:	602b      	str	r3, [r5, #0]
 8003182:	e7d3      	b.n	800312c <_free_r+0x24>
 8003184:	6820      	ldr	r0, [r4, #0]
 8003186:	1821      	adds	r1, r4, r0
 8003188:	428a      	cmp	r2, r1
 800318a:	bf04      	itt	eq
 800318c:	6811      	ldreq	r1, [r2, #0]
 800318e:	6852      	ldreq	r2, [r2, #4]
 8003190:	6062      	str	r2, [r4, #4]
 8003192:	bf04      	itt	eq
 8003194:	1809      	addeq	r1, r1, r0
 8003196:	6021      	streq	r1, [r4, #0]
 8003198:	605c      	str	r4, [r3, #4]
 800319a:	e7c7      	b.n	800312c <_free_r+0x24>
 800319c:	bd38      	pop	{r3, r4, r5, pc}
 800319e:	bf00      	nop
 80031a0:	200000fc 	.word	0x200000fc

080031a4 <__malloc_lock>:
 80031a4:	4770      	bx	lr

080031a6 <__malloc_unlock>:
 80031a6:	4770      	bx	lr

080031a8 <_init>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr

080031b4 <_fini>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr
